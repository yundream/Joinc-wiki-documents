head	1.1;
access;
symbols;
locks
	root:1.1; strict;
comment	@# @;


1.1
date	2014.08.29.08.20.34;	author root;	state Exp;
branches;
next	;


desc
@./data/text/man_2f12_2fjira_2fCSSystem
@


1.1
log
@182.212.44.138;;yundream;;
@
text
@#title Jira를 이용한 CS 관리 플랫폼 개발

== CS 관리 시스템 ==
서비스를 오픈하기 전에 준비해야 할 지원 시스템으로 "고객 요청 처리 시스템"(이하 CS)이 있다. 내가 개발하고 있는 서비스는 글로벌 플랫폼 서비스로, 다양한 서비스가 3rd-party로 플랫폼에 붙을 수 있다. 이 플랫폼에서 발생하는 고객의 요청을 처리하기 위한 CS 관리 시스템을 만들어야 한다.

이 CS 시스템은 아래의 요건을 만족해야 한다.
  1. 글로벌 서비스에 대응할 수 있어야 한다. 이슈는 지리적 위치를 초월해서 관리해야 한다. 북미에서 발생한 이슈든 유럽에서 발생한 이슈든 처리 할 수 있는 사람에게 이슈를 할당 할 수 있어야 한다.
  1. 3rd-party 서비스 대응이 가능해야 한다. 뭐냐면.. 분산 CS 관리가 가능해야 한다는 거다. 중앙에서 처리 할 수도 있고, 각 3rd-party 담당자가 처리할 수도 있다.

== Jira 선택의 이유 ==
내 설계 원칙 중 하나는 '''바퀴 새로 만들지 말자, 있는 바퀴 가다듬어서 잘 쓰자'''이다. 바퀴가 불량품이면 어떡하니 라는 문제가 있는데, 내 의견은 이렇다.
  1. 완벽한 바퀴는 없다.
  1. 나는 완벽한 바퀴를 만들 수 없으며, 당신도 마찬가지다.
  1. 문제가 없을 정도로 단순한 바퀴를 선택하거나
  1. 충분히 검증된 바퀴를 사용 한다.
그래서 Jira 를 선택했다. Redmine도 내 목적에 맞는 툴 같았지만 써 본적이 없다는 이유로 제외했다. 목적을 달성하기 위해서 필요한 기능만 제공한다면, "툴은 최악만 아니면 된다"라고 생각하기 때문.

필요한 기능은 다음과 같다.
  1. 커스텀 필드를 자유롭게 설정할 수 있어야 한다.
  1. OpenAPI를 제공한다.
  1. 멀티 프로젝트 생성
  1. 유저 그룹 관리

== CS 시스템 설계 ==
=== 내가 처한 CS 환경 ===

=== CS 처리 프로세스 ===
한 장의 그림으로 설명할 수 있다.
@
