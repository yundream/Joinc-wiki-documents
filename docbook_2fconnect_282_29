#title connect Docbook 원문
 
[wiki:man/2/connect HTML 변환문서]

{{{#!plain
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook V4.1//EN">
<chapter lang=ko>
<!-- 작성자 : yundream             -->
<!-- 작성일 : 2004/01/05           -->
<!-- 연락처 : dreamyun@yahoo.co.kr -->

<!-- 함수 이름을 입력합니다 -->
<title>connect(2)</title>

<!-- 이건 함수에 대한 대략적인 설명이구요 -->
<para>
	소켓에 연결을 시도한다.	
</para>
 
<!-- 여기에 함수의 간단한 사용법이 들어갑니다 -->
<section>
	<title>사용법</title>
	<para>
		<screen>
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;

int  connect(int sockfd, const struct sockaddr *serv_addr,
         socklen_t addrlen);
		</screen>
	</para>
</section>

<!-- 여기엔 함수의 자세한 설명 이 들어갑니다 -->
<section>
	<title>설명</title>
	<para>
		<emphasis>sockfd</emphasis>는 socket()함수에 의해서 만들어진 
		소켓지정자다. SOCK_DGRAM 타입의 소켓일 경우는 보통 connect()를 
		사용하지 않지만 만약에 사용했다면, <emphasis>serv_addr</emphasis>는 
		데이터그램을 받을 곳의 유일한 주소값이 된다. 그렇지 않고 
		SOCK_STREAM, SOCK_SEQPACKET라면 <emphasis>serv_addr</emphasis>에 
		대한 연결을 만든다. <emphasis>addrlen</emphasis>는 
		<emphasis>serv_addr</emphasis>구조체의 크기다.  
	</para>
	<para>
		보통 연결지향 프로토콜 소켓들은 한번에 connect를 한다. 비연결 지향 
		프로토콜들은 serv_addr타입과 관련된 사항을 바꾸기 위해 여러번 
		connect를 사용한다. 이러한 과정에서 비 연결 지향 소켓들은 
		<emphasis>sa_family</emphasis>멤버의 주소를 AF_UNSPEC로 설정하고 
		연결해서 연결과 관련된 필요없는 사항들을 없앤다.  
	</para>
</section>

<!-- 함수가 되돌려주는 값이구요 -->
<section>
	<title>반환값</title>
	<para>
		성공하면 0을 리턴한다. 실패했을 경우는 -1을 리턴하고 적당한 errno를 
		설정한다.
	</para>
</section>

<!-- 에러가 발생했을때 되돌려주는 값들입니다 -->
<section>
	<title>에러</title>
	<para>
		<variablelist>	
			<varlistentry>
			<term>EBADF</term>	
			<listitem>
				<para>	
					파일지정자가 지정자테이블에 있는 유효한 인덱스가 아니다.
				</para>	
			</listitem>
			</varlistentry>
			<varlistentry>
			<term>EFAULT</term>	
			<listitem>
				<para>	
					소켓 구조체의 주소가 사용자 주소공간 바깥에 있다.	
				</para>	
			</listitem>
			</varlistentry>
			<varlistentry>
			<term>ENOSOCK</term>	
			<listitem>
				<para>	
					파일지정자가 소켓과 관련되어 있지 않다.	
				</para>	
			</listitem>
			</varlistentry>
			<varlistentry>
			<term>EISCONN</term>	
			<listitem>
				<para>	
					이미 연결된 소켓이다.
				</para>	
			</listitem>
			</varlistentry>
			<varlistentry>
			<term>ECONNREFUSE</term>	
			<listitem>
				<para>	
					원격서버에서 연결을 거부했다. 보통 listen대기열의 공간이
					더이상 남아 있지 않았을 때 발생한다.
				</para>	
			</listitem>
			</varlistentry>
			<varlistentry>
			<term>ETIMEOUT</term>
			<listitem>
				<para>	
					연결 시도중 타임아웃이 발생했다. 서버가 너무 바쁜 상태이어서
					새 연결을 받아들일 수 없을 경우 발생한다.  
				</para>	
			</listitem>
			</varlistentry>
			<varlistentry>
			<term>ENETUNREACH</term>
			<listitem>
				<para>	
					네트워크에 도달할 수 없다. 
				</para>	
			</listitem>
			</varlistentry>
			<varlistentry>
			<term>EALREADY</term>
			<listitem>
				<para>	
					소켓이 비봉쇄이고 연결 시도가 아직 완전하지 않다.
				</para>	
			</listitem>
			</varlistentry>
			<varlistentry>
			<term>EAGAIN</term>
			<listitem>
				<para>	
					사용 가능한 로컬 포트가 더이상 없거나 라우팅 캐싱에 
					공간이 충분하지 않다. PF_INET일 때 라우팅 캐싱테이블의 
					공간을 늘릴리면 ip(7)에 있는 
					net.ipv4.ip_local_port_range를 참고하라.    
				</para>	
			</listitem>
			</varlistentry>
			<varlistentry>
			<term>EACCES, EPERM</term>
			<listitem>
				<para>	
					사용자가 소켓 브로드캐스트 플래그를 가능하게 하지 
					않고 주소를 브로드캐스트 주소에 연결하려고 했거나 
					방화벽 규칙 때문에 연결요구가 실패했다. 
				</para>	
			</listitem>
			</varlistentry>
		</variablelist>	
	</para>
</section>

<!-- 마지막으로 에제 입니다                                                 -->
<!-- 여기에는 완전한 예제가 들어가 있는데, 굳이 완전한 예제를 만들필요 없이 -->
<!-- 코드 일부분만 작성해서 올려주셔도 됩니다                               --> 
<!-- "<", ">", "&" 등은 변환해 주셔야 하는데, 귀찮으시면 :-) 변환 하지 않   -->
<!-- 아도 됩니다. 제가 검사 해서 올리겠습니다                               -->
<!-- 예제에 대한 간단한 설명을 적어주셔도 되구요                            -->
<section>
	<title>예제</title>
	<para>
		<screen>
#include &lt;sys/stat.h&gt;
#include &lt;arpa/inet.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

int main(int argc, char **argv)
{
    struct sockaddr_in serveraddr;
    int server_sockfd;
    int client_len;
    char buf[80];
    char rbuf[80];


    if ((server_sockfd = socket(AF_INET, SOCK_STREAM, 0)) &lt; 0)
    {
        perror("error :");
        exit(0);
    }

    server_sockfd = socket(AF_INET, SOCK_STREAM, 0);
    serveraddr.sin_family = AF_INET;
    serveraddr.sin_addr.s_addr = inet_addr("218.234.19.87");
    serveraddr.sin_port = htons(atoi(argv[1]));

    client_len = sizeof(serveraddr);

    if (connect(server_sockfd, (struct sockaddr *)&amp;serveraddr, client_len) &lt; 0)
    {
        perror("connect error :");
        exit(0);
    }

    memset(buf, 0x00, 80);
    read(0, buf, 80);
    if (write(server_sockfd, buf, 80) &lt;= 0)
    {
        perror("write error : ");
        exit(0);
    }
    memset(buf, 0x00, 80);
    if (read(server_sockfd, buf, 80) &lt;= 0)
    {
        perror("read error : ");
        exit(0);
    }
    close(server_sockfd);
    printf("read : %s", buf);
}
		</screen>
		서버에 연결해서 메시지를 주고 받는 간단한 echo서버다.   
	</para>
</section>
<section>
	<title>참고문헌</title>
	<para>
		<orderedlist>
			<listitem>
				<para>
					<ulink url="http://www.joinc.co.kr/modules.php?name=News&amp;file=article&amp;sid=11">셈플로 알아보는 소켓프로그래밍(1)</ulink>
				</para>
			</listitem>
			<listitem>
				<para>
					<ulink url="http://www.joinc.co.kr/modules.php?name=News&amp;file=article&amp;sid=57">Socket Layer</ulink>
				</para>
			</listitem>
			<listitem>
				<para>
					<ulink url="http://www.joinc.co.kr/modules.php?name=News&amp;file=article&amp;sid=20">다중연결 서버 만들기 (1)</ulink>
				</para>
			</listitem>
			<listitem>
				<para>
					<ulink url="http://www.joinc.co.kr/modules.php?name=News&amp;file=article&amp;sid=25">다중연결 서버 만들기 (2)</ulink>
				</para>
			</listitem>
			<listitem>
				<para>
					<ulink url="http://www.joinc.co.kr/modules/moniwiki/wiki.php/function_socket(2)">socket(2)</ulink>
				</para>
			</listitem>
			<listitem>
				<para>
					<ulink url="http://www.joinc.co.kr/modules/moniwiki/wiki.php/function_accept(2)">accept(2)</ulink>
				</para>
			</listitem>
			<listitem>
				<para>
					<ulink url="http://www.joinc.co.kr/modules/moniwiki/wiki.php/function_listen(2)">listen(2)</ulink>
				</para>
			</listitem>
		</orderedlist>
	</para>
</section>
</chapter>
}}}
