#title 우분투 리눅스에 sinatra 설치하기 

[[TableOfContents]]
== 인스톨 ==
=== 인스톨 환경 ===
 * Ubuntu Linux 12.04.1
 * Ruby 1.8.7 
 * Ruby gem module
   * gem 1.8.24
   * rake 0.9.2.2
   * sequel 3.40.0
   * monk 0.0.7
   * sinatra 1.3.2
   * haml 3.1.7
   * extensions 0.6.0
   * g++ : thin 컴파일을 위해서 필요
   * thin 1.5.0

=== sinatra 인스톨 ===
gem으로 인스톨하려고 했더니, 에러가 떨어진다. 
{{{#!plain
# gem install sinatra
Invalid gemspec in [/var/lib/gems/1.8/specifications/tilt-1.3.3.gemspec]: 
invalid date format in specification: "2011-08-25 00:00:00.000000000Z"
}}}

아래의 방법으로 해결
{{{#!plain
# gem install rubygems-update
# update_rubygems
}}}

다시 한번 시도
{{{#!plain
# gem install sinatra
Successfully installed sinatra-1.3.3
1 gem installed
Installing ri documentation for sinatra-1.3.3...

unrecognized option `--encoding=UTF-8'

For help on options, try 'rdoc --help'

ERROR:  While generating documentation for sinatra-1.3.3
... MESSAGE:   exit
... RDOC args: --ri --op /usr/lib/ruby/gems/1.8/doc/sinatra-1.3.3/ri --line-numbers --inline-source --title Sinatra --main README.rdoc --encoding=UTF-8 lib README.de.rdoc README.es.rdoc README.fr.rdoc README.hu.rdoc README.jp.rdoc README.ko.rdoc README.pt-br.rdoc README.pt-pt.rdoc README.rdoc README.ru.rdoc README.zh.rdoc LICENSE --title sinatra-1.3.3 Documentation --quiet
}}}

젠장. 구글신탁 결과 무슨 rdoc 인코딩 문제라고 한다. 그래서 옵션 변경해서 다시 인스톨 했다.
{{{#!plain
# gem install sinatra --no-rdoc --no-ri
Successfully installed sinatra-1.3.3
1 gem installed
}}}
성공이다. 비영어권 개발자의 슬픔이라고나 할까. 

==== ruby 1.9.x에서의 인스톨 ====
최근(2013년 2월)에 ubuntu 12.10환경에 sinatra를 설치했다. ubuntu12.10은 ruby 1.9가 설치돼는데, 1.8 대와는 약간의 차이가 있어서 기록한다.    

{{{#!plain
#  ruby --version
ruby 1.9.3p194 (2012-04-20 revision 35410) [x86_64-linux]
# gem install sinatra
Fetching: rack-1.5.1.gem (100%)
Fetching: rack-protection-1.3.2.gem (100%)
Fetching: tilt-1.3.3.gem (100%)
Fetching: sinatra-1.3.4.gem (100%)
Successfully installed rack-1.5.1
Successfully installed rack-protection-1.3.2
Successfully installed tilt-1.3.3
Successfully installed sinatra-1.3.4
4 gems installed
Installing ri documentation for rack-1.5.1...
Installing ri documentation for rack-protection-1.3.2...
Installing ri documentation for tilt-1.3.3...
Installing ri documentation for sinatra-1.3.4...
Installing RDoc documentation for rack-1.5.1...
Installing RDoc documentation for rack-protection-1.3.2...
Installing RDoc documentation for tilt-1.3.3...
Installing RDoc documentation for sinatra-1.3.4...
}}}
다른 에러없이 깔끔하게 설치된다.

== thin 웹서버 ==
=== thin 설치 ===
Thin은 루비 기반의 웹서버다. 루비기반 웹서버 하면 '''Mongrel'''이 대세였는데, 새로 도전장을 내민 웹서버라 할 수 있겠다. 가장 큰 강점은 성능이라고 한다.

{{{#!html
<img src=http://chart.apis.google.com/chart?cht=bvg&chd=t:14.98,54.8723076923077,48.9184615384615,79.9276923076923%7C14.8692307692308,65.0615384615385,70.4446153846154,89.5553846153846%7C14.9476923076923,35.1123076923077,70.18,88.6769230769231&chbh=16&chs=350x150&chl=WEBrick%7CMongrel%7CEvented%20M.%7CThin&chco=000000,666666,cccccc&chdl=1%20c%20req.%7C10%20c%20req.%7C100%20c%20req.>
}}}

gem으로 설치하면 된다.
{{{#!plain
# gem install extensions   ## 먼저 설치해야 한다.
# gem install thin
}}}

Apache와 sinatra의 조합도 생각해 볼 수 있겠는데, 프레임워크가 루비이니 웹 서버도 루비기반의 thin으로 하기로 했다. 아래와 같은 방식으로 실행할 수 있다. 기본 포트번호는 3000이다.
{{{#!plain
# thin -R config.ru start
}}}

그냥 실행하면, 아마 아래와 같은 에러가 발생할 거다.
{{{#!plain
 thin -R config.ru start
./app.rb:5: undefined method `require_relative' for main:Object (NoMethodError)
        from /usr/local/lib/site_ruby/1.8/rubygems/custom_require.rb:36:in `gem_original_require'
        from /usr/local/lib/site_ruby/1.8/rubygems/custom_require.rb:36:in `require'
        from config.ru:1
        from /usr/lib/ruby/gems/1.8/gems/rack-1.5.2/lib/rack/builder.rb:55:in `instance_eval'
        from /usr/lib/ruby/gems/1.8/gems/rack-1.5.2/lib/rack/builder.rb:55:in `initialize'
        from config.ru:1:in `new'
        from config.ru:1
}}}
'''require_relative'''에서 에러가 발생하는데, require_relative는 ruby1.9부터 지원한다. require_relative를 호출하기 전에 아래의 코드를 추가한다.
{{{#!plain
require 'sinatra'
require 'rubygems'          # 요거
require 'extensions/all'   # 요거
require 'haml'

require_relative 'minify_resources'
}}}
extensions gem을 설치한 이유다. 물론 ruby 1.9를 깔면 깔끔하게 해결된다.

이밖에 model과 haml 부분에서 에러가 발생할 거다. model 클래스만 선언하고, 정의되지 않았기 때문인데 그냥 주석처리하거나 정의하면 된다. haml은 왠일로 에러가 발생하는지 모르겠다. 나는 haml 대신 erb를 사용하기로 했다. 두 문제 모두 ruby 1.9를 설치하면 깔끔하게 해결된다.
==== ruby 1.9.x 에서 thin 설치 ====
ruby 1.9.x에서는 깔끔하게 설치 된다.
{{{#!plain
# gem install thin
}}}

=== thin 사용 이유 ===
sinatra는 웹 서버 기능을 내장하고 있다. 그럼에도 불구 하고 thin을 사용하는 이유는 다음과 같다.
  1. 요청처리 : thin을 포함한 모든 종류의 웹서버는 HTTP 요청을 처리하기 위한 잘 정의된 전문화된 루틴을 가지고 있다. 멀티 스레드 혹은 event 기반의 입출력 모델을 이용해서 효과적으로 처리한다. 이런 요청처리는 전문적인 웹서버에 맡기는게 훨씬 효율적이다.    
  1. 웹 서버는 요청의 효율적인 처리를 위해서 다음과 같은 다양한 기능들을 가지고 있다. 아래의 기능을 직접 구현하는건 (재미는 있을 수 있겠지만)낭비다.   
    1. Keep-alive
    1. URL Rewrite 
    1. Proxy
    1. Virtua server
    1. Load balancing
    1. Logging 
    1. HTTP 인증
    1. SSL 처리 
    1. Session 관리 
    1. Cache 관리
    1. 기타 수많은 기능들을 활용할 수 있다.
Thin을 비롯한 다른 웹 프레임워크가 요청을 웹 서버에서 처리하게 하는 이유다.

== monk ==
별개 다나온다. Thin과 마찬가지로 처음 보는 툴이다. Sinatra 애플리케이션 개발을 위한 skeleton 구조를 만들어주는 소프트웨어라고 한다. 이 툴을 이용하면 간단하게 컴포넌트별 개발이 가능한 파일 구조를 만들어 준다. 웹 애플리케이션 프로젝트 생성 프로그램이라고 보면 되겠다. 

설치 사용법은 아래의 애플리케이션 개발 테스트를 참고한다.

== erb와 halm ==
view를 위한 template 라이브러리를 선택해야 한다. chef에서 템플릿을 만들기 위해서 [wiki:Site/Ruby/ERB ERB]를 이용해서 더 익숙한데, 보다보니 HAML이라는 템플릿 엔진이 튀어나온다.

[wiki:Site/Ruby/ERB ERB]는 루비의 표준 라이브러리의 일부라서, 루비버전과 관계없이 안정적으로 사용할 수 있다는 장점이 있다. HAML은 뭔가 더 좋다고 해서 설치해서 테스트를 했는데, 에러를 잔뜩 뱉으면서 돌아가지 않는다. 그래서 그냥 ERB 사용하기로 했다. 

Monk로 애플리케이션을 만들면 템플릿으로 HAML을 사용하기 때문에 haml이 설치돼 있지 않으면 에러가 떨어진다. haml 부분을 주석처리 해도 되는데, 그냥 gem으로 설치해도 된다.  
{{{#!plain
# gem install haml
}}}

== 애플리케이션 개발 테스트 ==
monk를 설치한 다음 애플리케이션을 초기화 했다. 애플리케이션 이름은 TestApp로 했다.
{{{#!plain
# sudo gem install monk
# monk add riblits git://github.com/Phrogz/riblits.git
# mkdir TestApp 
# cd TestApp
# monk init -s riblits
}}}

하면 대략 아래와 같은 구조의 (예제를 포함한)스켈레톤 프로젝트가 만들어진다.
{{{#!plain
# tree
├── app.rb
├── config.ru
├── helpers
│   ├── init.rb
│   ├── nicebytes.rb
│   └── partials.rb
├── minify_resources.rb
├── models
│   ├── init.rb
│   └── user.rb
├── public
│   ├── css
│   │   └── common.css
│   └── js
│       └── manifest.txt
├── routes
│   ├── init.rb
│   └── main.rb
└── views
    ├── layout.haml
    └── main.haml
}}}
route와 view에 컴포넌트 별로 파일을 만들어서 개발하면, 개발자 별로 독립된 환경에서 개발할 수 있다.

애플리케이션은 다음과 같이 실행한다.
{{{#!plain
# thin -R config.ru start
}}}

== model ==
지금 위 예제를 실행하면, model 부분에서 에러가 발생할 것이다. 아직 모델을 구현하지 않았기 때문이다. 모델을 사용하지 않을 거라면 app.rb 에서 "require_relative 'models/init'"를 주석처리하자. 

== 예제로 sinatra 둘러보기 ==
예제를 포함한 sinatra 애플리케이션을 만들려고 한다. 이 애플리케이션은 git-hub에 올려서 다운로드 가능하게 한다.
  * https : https://github.com/yundream/SinatraExampleCode.git
  * ssh : git@github.com:yundream/SinatraExampleCode.git
routes에서 부터, model, view 까지 직접 테스트 가능하도록 만들어서 배포한다. 테스트를 위해서 최소한 아래의 것들이 준비돼야 합니다. 
  * ruby 1.8.7 
  * thin : 루비로 app.rb를 직접 실행해도 되긴 합니다.

== 히스토리 ==
  * 작성일 : [[Date(2012-11-19T14:20:16)]]
  * 수정일 :
     * [[Date(2012-11-19T14:20:16)]] : model에서 에러나는 부분에 대한 설명 추가 
