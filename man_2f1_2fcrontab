#title crontab

출처 : http://linuxgazette.net/151/prestia.html

Cronttab(이하 크론탭)은 작업을 일정한 시간에 주기적으로 실행시키기 위해서 사용하는 task 스케쥴링 프로그램이다. 이와 비슷한 프로그램으로 at(1)와 anacron(1)이 있다. at는 원하는 시간에 명령을 '''한번만'''실행 시키며, crontab과 같이 주기적으로 실행시키는 기능은 가지고 있지 않다. anacron은 이름에서알 수 있듯이 crontab와 거의 동일하게 사용할 수 있다. 다른점은 시스템 다운이나 anacron 프로그램의 다운 등의 이유로 해당시간에 실행되어야할 프로그램이 실행되지 않았다면, 이를 확인해서 다시 실행시켜준다는 점이다.  

다음은 at의 간단한 사용예이다.
{{{#!plain
# echo "점심시간" | at "12:00"
}}}

joinc는 많은 프로그램들이 주기적으로 돌아간다. 대략 다음과 같은 프로그램들이 주기적으로 작동하고 있다. 
  1. 매 5분간격으로 rrd(:12) 통계데이터를 생성한다.  
  1. 매 5분간격으로 spam 데이터들을 삭제한다. 
  1. wiki(:12) log 파일을 파싱해서 title에 사용할 색인데이터를 생성한다. 
  1. 매 10분 간격으로 cpu 사용율을 측정해서 rrd에 저장한다.
  1. 매 시간주기로 teamblog의 category 정보를 갱신한다. 
  1. 매 시간주기로 teamblog에 등록된 블로그(:12)의 RSS(:12)정보를 수집한다.
이러한 프로그램들은 특성상 daemon(:12) 프로세스로 개발을 해야 할 것인데, 개발하고 관리하기가 보통 까다로운 작업이 아닐 것이란걸 예상할 수 있다. crontab을 사용하면 간단하게 주기적으로 실행하도록 할 수 있다.

crontab는 시스템 프로그램으로 리눅스(:12) 배포판에 관계없이 기본적으로 설치가 된다. 크론탭은 내부적으로 자체관리하는 설정파일을 가지고 있는데, 이를 이용해서 크론탭이 사용할 쉘(:12), 에디터 등과 주기적으로 실행할 스크립트를 지정할 수 있다.
{{{#!plain
[root@localhost ~]# cat /etc/crontab
SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=root
HOME=/

# run-parts
01 * * * * root run-parts /etc/cron.hourly
02 4 * * * root run-parts /etc/cron.daily
22 4 * * 0 root run-parts /etc/cron.weekly
42 4 1 * * root run-parts /etc/cron.monthly
[root@localhost ~]#
}}}

=== 환경변수 영역 ===
첫번째 영역에서는 몇가지 변수를 설정한다.

'''SHELL'''
   등록된 프로그램을 실행시킬 쉘프로그램을 지정한다. 정의 하지 않을 경우 '''/bin/sh'''이 쉘 프로그램으로 지정된다.
'''PATH'''
   cron은 별도로 쉘을 띄우귀 때문에, 쉘에서 프로그램을 찾기 위한 '''PATH'''도 지정해줄 필요가 있다. 왜냐하면 로그인을 해서 shell을 실행시키지 않으므로, 로그인과정에서의 '''PATH'''변수를 사용할 수 없기 때문이다.
'''MAILTO'''
   cron이 수행한 작업의 결과를 mail로 보낼 수 있다. 위의 경우 '''root'''유저에게 메일을 전송한다. 만약 MAILTO를 설정하지 않으면 crontab의 실행유저에게 메일이 전송된다.
'''HOME'''
   cront의 home 디렉토리(:12)경로를 설정한다. 기본적으로는 crontab의 실행유저의 홈디렉토리로 /etc/passwd에 설정된 경로를 따른다.

=== 크론탭 포맷 ===
크론탭은 총 6개의 필드로 구성되어 있다. 앞의 5개의 필드가 시간 지정을 위한 필드이고, 마지막 필드에 스케쥴링할 명령어를 지정한다. 아래와 같이 사용한다.
{{{#!plain
# min             hours        day        month          day      command
   34               2           *            *             *       sh /root/backup.sh
}}}
위의 예는 "sh /root/backup.sh"를 매일 2시 34분에 실행한다.

시간은 아래와 같이 5개의 단위로 분류된다.
|| 분      || 0-59    ||  ||
|| 시      || 0-23    ||  ||
|| 일      || 1-31    ||  ||
|| 월      || 1-12    ||                      ||
|| 주/일   || 0-6     || 일요일이 0이다.      ||

별표 (*)는 all을 의미한다.   

=== crontab 설정 ===
크론탭은 유저별로 설정이 가능하다. 해당 유저로 로그인한 다음 "-e"옵션과 함께 crontab을 실행하면 된다. 이때 미리 설정된 에디터가 실행되어서 크론탭 정보를 편집할 수 있는 상태가 된다.
{{{#!plain
[root@localhost ~]# crontab -e

* * * * * /usr/bin/wall "Hello From Crontab"
}}}
내용을 저장하고 정료하면 다음과 같은 메시지가 출력된다.
{{{#!plain
crontab: installing new crontab
[root@localhost ~]#
}}}
잠시 후, 아래의 메시지가 출력되는 걸 확인할 수 있을 것이다. 
{{{#!plain
Broadcast message from root (Thu Apr  3 14:52:01 2008):

Hello From Crontab
}}}
이 메시지는 매 분마다 출력된다. 왜냐하면 시간 필드의 모든 값을 *로 설정해서, "매월, 매일, 매시간, 매분 마다 실행"하기 때문이다. 어떤 이유로 크론탭을 정지시키고 싶다면 "-r"옵션과 함께 실행하면 된다.
{{{#!plain
[root@localhost ~]# crontab -r
}}}

Now, say at a certain time in the future you need to start the Apache 'httpd' Web server. We could use a cron job to do this. First, we'll check to see that httpd is not running. Then, we'll do a "date" command to get the current time, so we can set the service to run in the future.

[root@localhost ~]# service httpd status
httpd is stopped
[root@localhost ~]# 
[root@localhost ~]# date
Thu Apr  3 15:45:32 MST 2008
[root@localhost ~]#

We can now easily figure out what 10 minutes from now will be, execute crontab -e in the editor, and write a simple crontab file, remembering the format.

# min(0-59)    hours(0-23)   day(1-31)   month(1-12)    dow(0-6)   command

   55	          15           *            *		*  	/sbin/service httpd start

For now, just use stars for the day, month, and day of week, and only one space between elements; some distros complain if you have more spaces. So, enter something like this:

55 15 * * * /sbin/service httpd start

[root@localhost ~]# crontab -e 
crontab: Installing new crontab

If you made any mistakes, 'crontab' will tell you about it right as you close the editor. Assuming that everything was right, though, we will have the Apache Web server running less than ten minutes from now. You can use "crontab -l" to list your jobs at any time, to see what is in your crontab and when these jobs are set to run:

[root@localhost ~]# crontab -l 
55 15 * * * /sbin/service httpd start

Yours should look similar. What this means, though, is that 'httpd' is still set to run every single day at the specified time. Again, we'll remove it by executing "crontab -r" to delete all the entries in the file.

[root@localhost ~]# crontab -r

The combinations seem endless. There are also additional variations for specifying time: "20-27" specifies a range; "3,4,7,8" mean just those intervals for that selection; and */5 would be every 5th interval. Another feature of cron is that, upon completion of a job, it will mail the command output to the user who set up the cron job unless that feature is disabled.
Some more samples

This crontab entry would run the command every 15 and 30 minutes after every hour, during the month of May:

15,30 * *  5 * /usr/bin/command

To run a backup script on just Sundays, Mondays, and Tuesdays at 2:12 AM, the entry would be:

12 2 * * 0-2 sh /root/backup.sh

To run a script at 12 minutes after every 3rd hour of every day, the entry would look like this:

12 */3 * * * sh /root/script.sh

To get cron to write the output of the commands to a log, you can append something like this to the command entry:

12 */3 * * * sh /root/script.sh >> /root/script.log 2>&1

To have cron suppress the e-mail:

12 */3 * * * sh /root/script.sh > /dev/null 2>&1

This is a sample of cron output that would end up in the mail

From root@localhost.localdomain  Thu Apr  3 12:08:01 2008
Date: Thu, 3 Apr 2008 12:08:01 -0700
From: root@localhost.localdomain (Cron Daemon)
To: root@localhost.localdomain
Subject: Cron <root@localhost> sh /root/s.sh
Content-Type: text/plain; charset=UTF-8
Auto-Submitted: auto-generated
X-Cron-Env: <SHELL=/bin/sh>
X-Cron-Env: <HOME=/root>
X-Cron-Env: <PATH=/usr/bin:/bin>
X-Cron-Env: <LOGNAME=root>
X-Cron-Env: <USER=root>

test

Some tips for using cron:

    * Always use absolute paths.
    * If you're not sure your cron job completed, check your mail.
    * Remove unneeded cron entries from old cron jobs.
    * Make sure 'crond' is running.

Commands:

crontab -e - Edits the current crontab, or creates a new one.
crontab -l - Lists the contents of the crontab file.
crontab -r - Removes the crontab file.
crontab -u - Edits user's crontab. 
