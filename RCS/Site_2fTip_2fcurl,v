head	1.4;
access;
symbols;
locks
	root:1.4; strict;
comment	@# @;


1.4
date	2013.07.04.01.58.35;	author root;	state Exp;
branches;
next	1.3;

1.3
date	2013.04.18.03.20.34;	author root;	state Exp;
branches;
next	1.2;

1.2
date	2013.04.18.02.59.26;	author root;	state Exp;
branches;
next	1.1;

1.1
date	2013.02.17.15.12.39;	author root;	state Exp;
branches;
next	;


desc
@./data/text/Site_2fTip_2fcurl
@


1.4
log
@203.247.149.239;;yundream;;
@
text
@#title curl을 이용한 인터넷 데이터 전송

웹 서버에 대한 배치작업이 필요한 경우가 있다. 이런 작업에 웹 브라우저를 사용할 수 없는 노릇이니 CLI 도구를 사용해야 한다. curl은 가장 널리 사용하는 인터넷 데이터 전송을 위한 도구다.  

== CURL 예제 ==

=== 프로토콜 디버깅 ===
--verbose와 --trace, --trace-ascii를 이용해서 HTTP 데이터 통신 과정에 대한 상세정보를 얻을 수 있다. --verbose로 불충분하다면 --trace-ascii를 사용하자.  
{{{#!plain
# curl --trace-ascii debug.dump http://www.test.co.kr/testpage
}}}
디버깅 정보는 debug.dump에 저장된다.

=== GET ===
데이터 요청을 위한 가장간단한 방법이다. URL만 명시하는 것으로 테스트 할 수 있다.
{{{#!plain
# curl http://www.joinc.co.kr
# curl http://www.joinc.co.kr?action=del&id=12345
}}}

=== POST ===
GET 방식은 URL만으로 정보를 보낼 수 있지만, POST 방식의 경우 메시지를 body에 담아서 보내야 한다. -d, --data 옵션을 이용해서 데이터를 보낼 수 있다. 혹은 파일의 내용을 POST 데이터로 보낼 수도 있다.
{{{#!plain
# curl -d "name=yundream&age=19&address=Seoul ... ..." http://www.joinc.co.kr/curltest.php
# curl -X POST http://192.168.57.3:5984/mywiki/ -d @@curl.json -H "Content-Type: application/json"
}}}

=== 파일 업로드 ===
{{{#!plain
# curl -F upload=@@dump.tar.gz -F "username=yundream" http://www.joinc.co.kr/curltest.php
}}}

=== User Agent ===
반응형 웹 페이지를 만들 경우 user-agent에 따른 테스트가 필요하다. --user-agent 옵션을 이용해서 user agent 값을 변경할 수 있다. 
{{{#!plain
#  curl --user-agent "Mozilla/4.73 [en] (X11; U; Linux 2.2.15 i686)" http://www.joinc.co.kr 
}}}

=== HTTP Header dump ===
"-D(--dump-header) <filename>"로 헤더 정보를 파일로 보낼 수 있다. filename을 "-"로 하면 헤더를 표준출력할 수 있다.
{{{#!plain
# curl -D header.txt http://www.joinc.co.kr
# cat header.txt
HTTP/1.1 200 OK
Date: Thu, 04 Jul 2013 01:54:40 GMT
Server: Apache/2.2.14 (Ubuntu)
Last-Modified: Fri, 22 Jun 2012 06:58:22 GMT
ETag: "c43e-76-4c30a286a7f80"
Accept-Ranges: bytes
Content-Length: 118
Vary: Accept-Encoding
Content-Type: text/html
}}}



== 참고 ==
 * http://curl.haxx.se/docs/httpscripting.html
@


1.3
log
@106.240.8.228;;yundream;;
@
text
@d39 18
@


1.2
log
@106.240.8.228;;yundream;;
@
text
@d3 1
a3 1
일반적인 internet사용자라면 웹브라우저(:12)를 이용하는 정도로 데이터를 다루는데 문제가 없겠지만 개발자의 경우에는 웹브라우저를 사용하기 힘든 경우가 생길 수 있다. 예를들어 주기적으로 파일을 웹서버에 업로드시키건나 주기적으로 다운을 받아야 하는 등의 작업의 경우다. 이러한 작업은 특성상 CLI(command line interface)를 제공하는 툴을 사용해야 한다. wget과 curl이 대표적인 프로그램이다. 이중 curl에 대해서 예제 중심으로 알아볼 생각이다. 
d5 11
a15 2
=== CURL 예제 ===
'''GET'''방식으로 데이터 전송하기
d17 2
a18 1
# curl http://www.joinc.co.kr/curltest.php?name=yundream&age=19;
d21 2
a22 1
'''POST'''방식으로 데이터 전송하기
d28 1
a28 1
파일 업로드 하기
d32 9
@


1.1
log
@128.134.217.152;;yundream;;
@
text
@d6 15
a20 6
 * '''GET'''방식으로 데이터 전송하기
   curl http://www.joinc.co.kr/curltest.php?name=yundream&age=19;
 * '''POST'''방식으로 데이터 전송하기
   curl -d "name=yundream&age=19&address=Seoul ... ..." http://www.joinc.co.kr/curltest.php
 * 파일 업로드 하기
   curl -F upload=@@dump.tar.gz -F "username=yundream" http://www.joinc.co.kr/curltest.php
@
