 * 잠시 워밍업겸 만들어본 프로그램이며 나름대로 참고하여 도움이 되실분이 있을까 하여 여기 올려본다. 

   간단하게 파일에 데이터를 저장, 검색해야할때 이용될 수 있을것이며 발전시키면 파일기반의 DB로 충분히 사용될 수 있을것이다.


 * dvr.h
{{{#!plain
#ifndef H_DVR
#define H_DVR

#include <sys/types.h>
#include <stdio.h>

#define START_DATE "20030601"	// 샘플데이터 생성을 위한 시작날짜
#define END_DATE "20040630"		// 샘플데이터 생성을 위한 종료날짜
#define NUM_ATM 5				// ATM의 댓수
#define NUM_RECORD 1000			// ATM별 하루 평균 레코드 기록량
#define EVENT_TIME 86400 / NUM_RECORD	// 이벤트가 발생하는 평균 시간 간격
#define DATA_DIR "LOG_FILES"	// 파일들이 저장되는 디렉토리명

#define S_atmID 2 + 1
#define S_date 8 + 1
#define S_time 6 + 1
#define S_name 22 + 1
#define S_account 15 + 1
#define S_outPrice 15 + 1
#define S_fileName 18 + 1			// 생성하는 파일명길이, ATMnn_yyyymmdd.dat 포맷이다

class Record {						// 파일에 기록할 데이터 단위클래스
	public:
		char time[S_time];			// 인출이 일어난 시각, hhmmss 포맷
		char account[S_account];	// 계좌번호
		char outPrice[S_outPrice];	// 인출금액
		char name[S_name];			// 녹화된 파일 이름
};

class AtmRecord {	// ATM으로부터 전송되어 오는 데이터 클래스
	public:
		char atmID[S_atmID];		// ATM 번호
		char date[S_date];			// 인출이 일어난 날짜, yyyymmdd 포맷
		Record rec;
};

class Query {						// 검색에 필요한 데이터 클래스
	public:
		char startATM[S_atmID];
		char endATM[S_atmID];
		char startDate[S_date];
		char endDate[S_date];
		char startTime[S_time];
		char endTime[S_time];
		char account[S_account];
		char outPrice[S_outPrice];
};
	
class ATM {				// ATM 단위로 파일을 열어놓고 사용하기 위한 클래스
	public:
		ATM(void);
		FILE* fp;
		char fileDate[S_date];
};

class DVR {				// ATM으로 오는 데이터를 저장하고 검색하는 클래스
	private:
		ATM atm[NUM_ATM];

	public:
		int allClose(void);
		int insert(AtmRecord& record);
		int search(Query& query);
};

#endif
}}}

 * dvr.cpp
{{{#!plain
#include <iostream>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <unistd.h>
#include "dvr.h"

#define S_Record sizeof(Record)

using namespace std;

ATM :: ATM(void) {
	fp = NULL;
	memset(fileDate, 0x00, S_date);
}


int DVR :: allClose(void) {		// 열어놓고 쓰고 있는 모든 기록파일들을 닫는다
	int i;
	for (i = 0; i < NUM_ATM; i++) {
		if (atm[i].fp) {
			if (fclose(atm[i].fp)) {
				return(-1);
			} else {
				atm[i].fp = NULL;
			}
		}
	}
	return(0);
}

// ATM으로부터 전송된 데이터를 해당 파일에 기록한다. 오버헤드 감소를 위하여
// 이미 열어놓고 있는 같은 파일이면 바로 추가하고 새 파일이면 옛파일 닫고 새로 만든다.
// 실제 적용시엔 검색과 쓰기를 동시에 해야함을 감안해야 한다
int DVR :: insert(AtmRecord& record) {
	char fileName[S_fileName];
	int num = atoi(record.atmID);
	if (memcmp(atm[num].fileDate, record.date, S_date)) {	// 작업중인 파일과 다르면
		if (atm[num].fp != NULL) fclose(atm[num].fp);		// 열린 옛 파일은 닫는다
		sprintf(fileName, "%s/ATM%s_%s.dat", DATA_DIR, record.atmID, record.date);
		if ((atm[num].fp = fopen(fileName, "a")) == NULL) return(-1);
		memcpy(atm[num].fileDate, record.date, S_date);
	}
	if (fwrite(&record.rec, 1, S_Record, atm[num].fp) < 1) return(-1);
	return(0);
}

int DVR :: search(Query& query) {		// 검색쿼리를 날리고 결과를 보여준다
	FILE* fp;
	char* buff;
	struct stat file;
	struct timeval firstTime, secondTime;
	Record* rec;
	char fileName[S_fileName];
	unsigned long int numRecord = 0;
	int num, year, month, day, tmp_month, tmp_day, time, index, method;
	int startATM = atoi(query.startATM);
	int endATM = atoi(query.endATM);
	int s_year = atoi(strndupa(query.startDate, 4));
	int s_month = atoi(strndupa(query.startDate + 4, 2));
	int s_day = atoi(strndupa(query.startDate + 6, 2));
	int e_year = atoi(strndupa(query.endDate, 4));
	int e_month = atoi(strndupa(query.endDate + 4, 2));
	int e_day = atoi(strndupa(query.endDate + 6, 2));
	if ((query.account[0] == '\0') && (query.outPrice[0] == '\0')) {	// 시간검색만 할 경우
		method = 0;
	} else if (query.account[0] && query.outPrice[0]) {					// 계정 && 금액 검색인 경우
		method = 1;
	} else {															// 계정 || 금액 검색인 경우
		method = -1;
	}
	gettimeofday(&firstTime, NULL);
	for (year = s_year; year <= e_year; year++ ) {
		tmp_month = (e_year > year)? 12 : e_month;
		for (month = s_month; month <= tmp_month; month++) {
			tmp_day = ((e_year > year) || (e_month > month))? 30 : e_day;
			for (day = s_day; day <= tmp_day; day++) {
				for (num = startATM; num <= endATM; num++) {
					sprintf(fileName, "%s/ATM%02d_%04d%02d%02d.dat", DATA_DIR, num, year, month, day);
					stat(fileName, &file);
					buff = new char[file.st_size];
					// 실제 상황에선 ATM의 쿼리를 처리하는 와중에도 검색시 문제가 없는지 살펴볼 필요있음
					// 때문에 여기서도 atm[i].fp 를 사용하지 않고 따로 사용함
					if ((fp = fopen(fileName, "r")) == NULL) return(-1);
					if (fread(buff, 1, file.st_size, fp) < 1) return(-1);
					index = 0;
					// 검색 시작 시각까지 포인터 이동
					while ((index < file.st_size) && (memcmp(buff + index, query.startTime, S_time) < 0)) {
						index += S_Record;
						numRecord++;
					}
					// 검색 종료 시각까지 이동하며 찾는다
					do {
						numRecord++;
						rec = (Record*) ((char*) buff + index);
						switch (method) {
							case 1:
								if (!(memcmp(rec->account, query.account, S_account) || memcmp(rec->outPrice, query.outPrice, S_outPrice))) {
									printf("ATM%02d, %04d%02d%02d%s, %s, %s, %s\n", num, year, month, day, rec->time, rec->account, rec->outPrice, rec->name);
								}
								break;
							case 0:
								printf("ATM%02d, %04d%02d%02d%s, %s, %s, %s\n", num, year, month, day, rec->time, rec->account, rec->outPrice, rec->name);
								break;
							case -1:
								if (!(memcmp(rec->account, query.account, S_account) && memcmp(rec->outPrice, query.outPrice, S_outPrice))) {
									printf("ATM%02d, %04d%02d%02d%s, %s, %s, %s\n", num, year, month, day, rec->time, rec->account, rec->outPrice, rec->name);
								}
								break;
						}
						index += S_Record;
					} while ((index < file.st_size) && (memcmp(buff + index, query.endTime, S_time) <= 0));
					fclose(fp);
					delete[] buff;
				}
			}
			s_day = 1;
		}
		s_month = 1;
	}
	gettimeofday(&secondTime, NULL);
	cout << endl << "검색한 레코드 수 : " << numRecord << endl;
	cout << "검색한 시간 : " << (secondTime.tv_sec - firstTime.tv_sec) + (float)(secondTime.tv_usec - firstTime.tv_usec) / 1000000 << "초" << endl; 
}
}}}

 * main.cpp
{{{#!plain
/*

 * 클래스 단위로 파일에 데이터를 기록하고 각 멤버별로 검색을 할 수 있는 프로그램 *
                            by SaNha 2004. 04.

 1. 파일, 디렉토리 정책 
   1) 파일들을 저장하는 디렉토리를 하나만 두고 파일명을 'ATM명+날짜' 식으로 하는 방법
	   ex) ATM01_20040423.dat
	2) ATM명 별로 따로 디렉토리를 두고 하위에 '날짜' 의 파일을 두는 방법
	   ex) 드라이버명\Data\ATM01\20040423.dat
 	3) 여기에서는 예제로 1번 방법을 이용하며 ATM은 5대, 하루에 각 ATM별로 천개의 레코드가 저장된것으로 가정한다 
 2. 하루에 저장되는 파일의 크기는 얼마 안 될것으로 예상됨으로 각 날짜단위로 메모리에 올린 상태에서 검색
 3. 검색시의 날짜범위를 기반으로 순차적으로 날짜와 일치하는 이름의 파일을 하나씩 로딩하며 검색
 4. ATM에서의 전송데이터중 name은 레코딩된 파일이름인가? DVR은 이벤트시 따로 파일을 레코딩하는것이 아니라
    24시간 계속 레코딩중인것이 아닌가? 그렇다면 name값은 레코딩파일명+인덱스 개념을 가져야 할 것이다.
	여기서는 "ATM번호_녹화된 날짜_초.rec" 포맷을 사용한다 (초는 하루 86400초를 기준)
 5. 시각 필드는 증가일것이므로 정렬된 키값으로 사용이 가능하다
 6. 레코드가 고정크기가 아니라면 각 레코드의 시작 인덱스만 따로 저장하는 파일을 두면 되며 검색시엔
    문자열(strcmp)검색을 이용하던지 각 필드의 시작 인덱스도 저장해 두고 memcmp를 이용해도 될것이다

*/

#include <iostream>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <unistd.h>
#include <time.h>
#include "dvr.h"

using namespace std;

/* 샘플 데이터를 생성하는 메소드, 편의상 모든 달은 30일로 계산한다 */
/* 실제 ATM에서 발생되는 데이터 및 전송과정과 유사하게 데이터를 생성, 추가한다 */

int makeRecord(DVR& dvr) {
	AtmRecord atmRec;
	long int seed;
	char startDate[] = START_DATE;
	char endDate[] = END_DATE;
	int s_year = atoi(strndupa(startDate, 4));
	int s_month = atoi(strndupa(startDate + 4, 2));
	int s_day = atoi(strndupa(startDate + 6, 2));
	int e_year = atoi(strndupa(endDate, 4));
	int e_month = atoi(strndupa(endDate + 4, 2));
	int e_day = atoi(strndupa(endDate + 6, 2));
	int num, year, month, day, tmp_month, tmp_day, second, i;
	div_t hour, min;
	cout << "테스트용 데이터를 생성하고 있습니다. 잠시만 기다려주십시오..." << endl << endl;
	if (access(DATA_DIR, F_OK)) mkdir(DATA_DIR, 0755);
	srandom(time(NULL));
	for (year = s_year; year <= e_year; year++ ) {
		tmp_month = (e_year > year)? 12 : e_month;
		for (month = s_month; month <= tmp_month; month++) {
			tmp_day = ((e_year > year) || (e_month > month))? 30 : e_day;
			for (day = s_day; day <= tmp_day; day++) {
				// 이벤트 시간간격을 레코드수로 나눴으므로 235959 를 넘지 않도록 -1부터 시작
				second = -1;	
				for (num = 0; num < NUM_ATM; num++) {
					for (i = 0; i < NUM_RECORD; i++) {
						memset(&atmRec, 0x00, sizeof(AtmRecord));
						seed = random();
						second += EVENT_TIME;
						hour = div(second, 3600);
						min = div(hour.rem, 60);
						sprintf(atmRec.atmID, "%02d", num);
						sprintf(atmRec.date, "%04d%02d%02d", year, month, day);
						sprintf(atmRec.rec.time, "%02d%02d%02d", hour.quot, min.quot, min.rem);
						sprintf(atmRec.rec.account, "%d-%02d-%010ld", min.rem % 2, min.rem, seed + min.quot);
						sprintf(atmRec.rec.outPrice, "%ld", seed);
						sprintf(atmRec.rec.name, "%02d_%s_%05d.rec", num, atmRec.date, second);
						if (dvr.insert(atmRec) < 0) return(-1);
					}
				}
			}
			s_day = 1;
		}
		s_month = 1;
	}
}

/* 자료검색을 하는 폼 메소드 */

int insertQuery(DVR& dvr) {
	Query query;
	bool gettingData;
	char key;
	while (true) {
		memset(&query, 0x00, sizeof(Query));
		gettingData = true;
		while (gettingData) {
			cout << endl << "<입력할 항목을 선택하여 주세요. 1, 3번 필수>" << endl << endl;
			cout << "1. 검색 시작 ATM ID : " << query.startATM << endl;
			cout << "2. 검색 종료 ATM ID : " << query.endATM << endl;
			cout << "3. 검색 시작 날짜 (YYYYMMDD) : " << query.startDate << endl;
			cout << "4. 검색 시작 시각 (HHMMSS) : " << query.startTime << endl;
			cout << "5. 검색 종료 날짜 (YYYYMMDD) : " << query.endDate << endl;
			cout << "6. 검색 종료 시각 (HHMMSS) : " << query.endTime << endl;
			cout << "7. 계좌번호 : " << query.account << endl;
			cout << "8. 인출금액 : " << query.outPrice << endl << endl;
			cout << "9. 검색" << endl;
			cout << "0. 종료" << endl << endl;
			cin >> key;
			switch (key) {
				case '1':
					cout << "검색 시작 ATM ID를 입력하여 주세요 (0 - " << NUM_ATM - 1 << ") : ";
					cin >> query.startATM;
					strcpy(query.endATM, query.startATM);
					break;
				case '2':
					if (query.startATM[0]) {
						cout << "검색 종료 ATM ID를 입력하여 주세요 (" << query.startATM << " - " << NUM_ATM - 1<< ") : ";
						cin >> query.endATM;
					} else {
						cout << "검색 시작 ATM ID를 먼저 입력하여 주세요";
					}
					break;
				case '3':
					cout << "검색 시작 날짜를 입력하여 주세요 (" << START_DATE << " - " << END_DATE << ") : ";
					cin >> query.startDate;
					strcpy(query.endDate, query.startDate);
					strcpy(query.startTime, "000000");
					strcpy(query.endTime, "235959");
					break;
				case '4':
					cout << "검색 시작 시각을 입력하여 주세요  : ";
					cin >> query.startTime;
					break;
				case '5':
					if (query.startDate[0]) {
						cout << "검색 종료 날짜를 입력하여 주세요 (" << query.startDate << " - " << END_DATE ") : ";
						cin >> query.endDate;
					} else {
						cout << "검색 시작 날짜를 먼저 입력하여 주세요";
					}
					break;
				case '6':
					cout << "검색 종료 시각을 입력하여 주세요 : ";
					cin >> query.endTime;
					break;
				case '7':
					cout << "검색하고자 하는 계좌번호를 입력하여 주세요 : ";
					cin >> query.account;
					break;
				case '8':
					cout << "검색하고자 하는 인출금액을 입력하여 주세요 : ";
					// 실제 프로그램에선 범위로 검색할 수 있게하는것이 좋을것 같음
					cin >> query.outPrice;
					break;
				case '9':
					gettingData = false;
					break;
				case '0':
					return(0);
					break;
				default:
					cout << "잘못입력하셨습니다!" << endl;
					break;
			}
		}
		cout << "검색을 하고 있습니다. 잠시만 기다려주십시오." << endl << endl;
		if (dvr.search(query) < 0) return(-1);
	}
}

int main(int argc, char** argv) {
	DVR dvr;
	// 테스트용 파일들을 생성한다.
	// 파일이 존재시엔 추가되므로 새 데이터가 필요할땐 삭제를 하던지
	// 기존 데이터만 있으면 될땐 이 부분을 주석처리한다
	if (makeRecord(dvr) < 0) {
		cout << "파일생성시 오류가 발생하였습니다 : " << strerror(errno) << endl;
		return(EXIT_FAILURE);
	} else if (dvr.allClose() < 0) {
		cout << "마지막 날짜의 파일들을 닫는중 오류가 발생하였습니다 : " << strerror(errno) << endl;
		return(EXIT_FAILURE);
	} else if (insertQuery(dvr) < 0) {		// 자료 검색을 한다
		cout << "자료검색시 오류가 발생하였습니다 : " << strerror(errno) << endl;
		return(EXIT_FAILURE);
	}
	return(EXIT_SUCCESS);
} 
}}}
 
