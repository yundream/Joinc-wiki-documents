#title linux man page : pipe - 파이프를 생성한다.

[[tag(시스템프로그래밍,IPC)]]
{{{#!html
<div class="CHAPTER"> <h1> <a name="AEN1">1장. </a><a href="http://www.joinc.co.kr/modules/moniwiki/wiki.php/manSearch?google=none&amp;name=pipe">pipe</a>(2) </h1> <div class="TOC"> <dl> <dt><b>차례</b></dt><dt>1.1절. <a href="http://www.joinc.co.kr/modules/moniwiki/wiki.php/man/2/pipe#AEN4"> 사용법</a></dt><dt>1.2절. <a href="http://www.joinc.co.kr/modules/moniwiki/wiki.php/man/2/pipe#AEN8"> 설명</a></dt><dt>1.3절. <a href="http://www.joinc.co.kr/modules/moniwiki/wiki.php/man/2/pipe#AEN12"> 반환값</a></dt><dt>1.4절. <a href="http://www.joinc.co.kr/modules/moniwiki/wiki.php/man/2/pipe#AEN15"> 에러</a></dt><dt>1.5절. <a href="http://www.joinc.co.kr/modules/moniwiki/wiki.php/man/2/pipe#AEN35"> 예제</a></dt> </dl> </div> <p> 파이프를 생성한다. </p> <div class="SECTION"> <hr/> <h1 class="SECTION"> <a name="AEN4">1.1절. 사용법</a> </h1> <p> <table bgcolor="#e0e0e0" border="0" width="100%"> <tbody> <tr> <td> <pre class="SCREEN">#include &lt;unistd.h&gt;<br/><br/>int pipe(int filedes[2]);<br/> </pre> </td> </tr> </tbody> </table> </p> </div> <div class="SECTION"> <hr/> <h1 class="SECTION"> <a name="AEN8">1.2절. 설명</a> </h1> <p> pipe 를 이용하면 2개의 파일 지시자를 생성할수 있다. 2개가 생성되는 이유는 읽기전용과 쓰기전용의 파이프를 생성하기 위함이다. filedes[0] 은 읽기 전용, filedes[1] 은 쓰기전용의 파이프로 사용된다. </p> <p> 이들 파이프는 주로 부모프로세스와 자식프로세스간의 통신을 위한 목적으로 사용된다. </p> </div> <div class="SECTION"> <hr/> <h1 class="SECTION"> <a name="AEN12">1.3절. 반환값</a> </h1> <p> 성공할경우 0을 실패했을경우에는 -1을 반환하며, 적당한 errno 값을 설정한다. </p> </div> <div class="SECTION"> <hr/> <h1 class="SECTION"> <a name="AEN15">1.4절. 에러</a> </h1> <p> </p> <div class="VARIABLELIST"> <dl> <dt>EMFILE</dt><dd> <p> 너무 많은 파일 디스크립터가 프로세스에 의해 사용되고 있다. </p> </dd><dt>ENFILE</dt><dd> <p> 시스템 파일 테이블이 꽉찼을경우 </p> </dd><dt>EFAULT</dt><dd> <p> filedes 가 유효하지 못하다. </p> </dd><dt>ENOBUFS</dt><dd> <p> 시스템에 연산을 위해서 이용할수 있는 자원이 부족할때 </p> </dd> </dl> </div> </div> <div class="SECTION"> <hr/> <h1 class="SECTION"> <a name="AEN35">1.5절. 예제</a> </h1> <p> <table bgcolor="#e0e0e0" border="0" width="100%"> <tbody> <tr> <td> <pre class="SCREEN">#include &lt;unistd.h&gt;<br/>#include &lt;stdlib.h&gt;<br/>#include &lt;stdio.h&gt;<br/><br/>int <a href="http://www.joinc.co.kr/modules/moniwiki/wiki.php/manSearch?google=none&amp;name=main">main</a>()<br/>{<br/> int n, fd[2];<br/> char buf[255];<br/> int pid;<br/><br/> if (<a href="http://www.joinc.co.kr/modules/moniwiki/wiki.php/manSearch?google=none&amp;name=pipe">pipe</a>(fd) &lt; 0)<br/> {<br/> <a href="http://www.joinc.co.kr/modules/moniwiki/wiki.php/manSearch?google=none&amp;name=perror">perror</a>("pipe error : ");<br/> <a href="http://www.joinc.co.kr/modules/moniwiki/wiki.php/manSearch?google=none&amp;name=exit">exit</a>(0);<br/> }<br/><br/> // 파이프를 생성한다. <br/> if ((pid = <a href="http://www.joinc.co.kr/modules/moniwiki/wiki.php/manSearch?google=none&amp;name=fork">fork</a>()) &lt; 0)<br/> {<br/> <a href="http://www.joinc.co.kr/modules/moniwiki/wiki.php/manSearch?google=none&amp;name=perror">perror</a>("fork error : ");<br/> <a href="http://www.joinc.co.kr/modules/moniwiki/wiki.php/manSearch?google=none&amp;name=exit">exit</a>(0);<br/> }<br/><br/> // 만약 자식프로세스라면 파이프에 자신의 PID(:12) 정보를 쓴다.<br/> else if (pid == 0)<br/> {<br/> close(fd[0]);<br/> <a href="http://www.joinc.co.kr/modules/moniwiki/wiki.php/manSearch?google=none&amp;name=while">while</a>(1)<br/> {<br/> <a href="http://www.joinc.co.kr/modules/moniwiki/wiki.php/manSearch?google=none&amp;name=memset">memset</a>(buf, 0x00, 255);<br/> sprintf(buf, "Hello : %d\n", <a href="http://www.joinc.co.kr/modules/moniwiki/wiki.php/manSearch?google=none&amp;name=getpid">getpid</a>());<br/> write(fd[1], buf, <a href="http://www.joinc.co.kr/modules/moniwiki/wiki.php/manSearch?google=none&amp;name=strlen">strlen</a>(buf));<br/> <a href="http://www.joinc.co.kr/modules/moniwiki/wiki.php/manSearch?google=none&amp;name=sleep">sleep</a>(1);<br/> }<br/> }<br/><br/> // 만약 부모프로세스(:12)라면 파이프(:12)에서 데이타를 읽어들인다. <br/> else<br/> {<br/> close(fd[1]);<br/> <a href="http://www.joinc.co.kr/modules/moniwiki/wiki.php/manSearch?google=none&amp;name=while">while</a>(1)<br/> {<br/> <a href="http://www.joinc.co.kr/modules/moniwiki/wiki.php/manSearch?google=none&amp;name=memset">memset</a>(buf, 0x00, 255);<br/> n = read(fd[0], buf, 255);<br/> fprintf(stderr, "%s", buf);<br/> }<br/> }<br/>}<br/> </pre> </td> </tr> </tbody> </table> 위 프로그램은 파이프를 생성한후 만들어진 파이프를 통해서 자식과 부모가 서로 통신하는 예제이다. fork 하기전에 pipe 를 만들면 된다. fork() 는 특성상 열린파일지시자를 자식에게 상속하기 때문이다. </p> </div> </div>
}}}
