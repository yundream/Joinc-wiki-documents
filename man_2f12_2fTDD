#title TDD - Test Driven Development

== TDD ==
Test-driven development는 소프트웨어 개발 공정으로 매우 빠른 개발 사이클을 반복적으로 진행하는 것을 특징으로 합니다.

개발자는 새로운 코드를 만들거나 혹은 (기능 향상을 위한)코드 수정이 있을 때, 먼저 테스트 케이스를 작성한다. 이 테스트 케이스는 자동화된 테스트 도구에 의해서 매 개발 사이클 마다 수행합니다. 모든 케이스에 대한 테스트가 끝났다면, 그때 이 코드를 적용하고 사이클을 끝내게 되는 거죠.

TDD는 '''Test-driven'''이름에서 알 수 있듯이, 테스트가 주도가 됩니다. 테스트 자체가 TDD를 의미하는게 아닙니다. 예를 들어 코드를 다 만든 다음에 테스트 케이스를 만들어서 테스트 하는 것은 TDD가 아닙니다. 그냥 테스트일 뿐이죠. TDD는 테스트 코드를 먼저 만들고, 완전히 테스트를 끝낸 후 이것을 적용합니다.  

TDD를 생소하게 받아들이는 개발자도 있겠지만, '''기존에 이미 그렇게 해왔는데. 별거 있나 ?'''생각하는 개발자도 있을 것 같은데요. 많은  개발자이 기능을 구현하기 전에, 테스트 코드를 먼저 만들어서 돌려본 다음 문제 없이 돌아가면 그때 코드에 적용하는 방법을 사용하기 때문입니다. 저도 그래왔구요.

TDD를 적용하기 전의 방식, 그러니까 먼저 테스트 코드를 만들어서 테스트하고 실제 프로그램에 적용하는 방식을 생각해 보죠. 분명 테스트가 주도하긴 하지만 다음과 같은 한계가 있습니다.
  1. 보통 처음 한번 테스트하고 끝냅니다. 
     구현하고자 하는 기능의 컨셉을 테스트하는 수준에서 진행되죠. 지속적으로 테스트가 이루어지지는 않죠. 테스트 케이스를 자동화 하는 경우가 거의 없기 때문인데요. 그래서 다른 기능이 추가될 수록, 점점 더 불안한 코드가 될 수 밖에 없습니다. 모듈이 상호작용하면서 새로운 문제를 만들기 때문이죠. 코딩중에 실수를 할 수 도 있고요.
  1. 프로그램의 흐름을 테스트하지는 않습니다. 
     함수단위로 테스트를 진행하는게 대부분이죠. 프로그램은 여러 개의 함수들이 상호작용하는데, 일반적으로 그 것 까지 테스트하지는 않습니다. 좀 꼼꼼한 개발자는 흐름도 테스트하긴 하지만 제한적이죠. 툴을 가지고 있지 않기 때문입니다.
  1. 테스트 범위가 명확하지 않습니다.

TDD는 이것을 체계적인 과정으로 정립한거죠. 그래서 개발 방법을 정의하고, 툴들을 제공해서 이 개발 방법을 잘 따를 수 있도록 체계화 했습니다. 

=== 개발 사이클 ===
TDD의 원칙은 다음과 같습니다.
  1. 모든 코드는 테스트 돼야 한다. 
  1. 모든 코드는 모든 사이클에서 테스트 돼야 한다. 

중요한 것은 두번째 원칙입니다. 첫번째 원칙은 앞서 언급했듯이, TDD 전에도 개발자 나름대로 테스크 코드를 만드는 식으로 적용 해 왔습니다. 두번째 원칙을 지키기가 어려웠는데요. 모든 개발 사이클에서 테스트가 돼지 않으면 아무래도 테스트의 신뢰성이 떨어질 수 밖에 없습니다. 코드가 커질 수록 코드들이 서로 영향을 주기 때문입니다.   

TDD는 개발 사이클을 짧게 하는 것으로 이 문제를 해결하고 있습니다. 물론 각 개발 사이클마다 테스트가 진행이 되야 합니다. 새로 추가된 테스트 케이스 뿐만 아니라, 이전에 진행됐던 테스트 케이스에 대한 테스트도 중복 진행됩니다. 코드가 증가함에 따라 문제가 확산되거나, 기존 코드에서 새로운 문제가 발생하거나 하는 등의 문제를 막을 수가 있죠. 

TDD의 개발 사이클은 다음과 같습니다.

http://upload.wikimedia.org/wikipedia/en/9/9c/Test-driven_development.PNG
  1. 테스트 케이스 별로, 테스트 코드 작성
  1. 모든 테스트 케이스를 통과할 때까지 계속 테스트
  1. 테스트가 끝나면 코드를 제품에 추가한다.
  1. 다시 테스트를 진행. 언제까지 ? 모두 성공할 때까지.
  1. 테스트를 통과 했다면, 코드를 다듬어서 빌드에 적용하는 것으로 사이클 종료
위 단계를 계속 반복합니다.

위 과정을 반복하면서, 코드는 각 사이클 마다 리펙토링 되기 때문에 품질 역시 따라서 높아집니다. 

=== 개발 방법 ===
TDD는 개발지침이므로 개발자의 성향이나 수준에 따라서 다양한 방법들이 있을 수 있습니다만, 다음의 원칙들을 바탕으로 방법을 짜야 합니다. 

'''먼저 테스트 코드를 만들어라'''
어떤 기능을 추가해야 한다면, 반드시 테스트 코드를 먼저 만들어서 테스트를 합니다. 이때 코드는 생각할 수 있는 모든 테스트를 통과할 수 있도록 짜야 합니다. 


'''실패할 수 있는 모든 경우에 대해서 테스트하라'''
TDD에서 중요한 것은 가능한 실패할 수 있는 경우에 대해서 테스트 하는 겁니다. 성공하는 경우는 뭐 그리 중요할게 없지요. 잘 작동할 테니까요. TDD는 프로그램의 완성도를 높이는 것이지, 정상적인 데이터 입력에 대해서 정상적으로 작동하는 걸 확인하기 위한 게 아니니까요.
   * '''NULL 일때''',
   * 문자열의 끝을 '''만나지 못했을 때''',
   * 문자를 '''찾지 못했을 때''', 찾았을 때
   * 버퍼크기를 초과했을 때
   * 음수일때, '''0일 때''', 양수일 때
   * '''예상 최대 크기를 초과했을 때''', 예상 최소 크기 미만의 값이 들어올 때
   * '''실패했을 때''', 성공했을 때

== 참고 문서들 ==
  * [wiki:Site/SoftWare_engineering/TDD C++에 TDD적용] 
  * [http://www.facebook.com/l.php?u=http%3A%2F%2Fcode.google.com%2Fp%2Ftddbook%2Fdownloads%2Fdetail%3Fname%3DTDD_PT.pdf&h=14d8f 테스트 주도 개발 TDD 실천법과 도구]

{{{#!comment
글쓴 날 : 2011년 6월 16일 
글쓴 사람 : 윤 상배
}}}
