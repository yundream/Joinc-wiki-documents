#title POP3 메일 체크 프로그램 작성
[wiki:docbook_POP3_메일_체크_프로그램_작성 Docbook 원문]

{{{#!html
<HTML
><HEAD
><TITLE
>POP3 메일 체크 프로그램</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.59"><META
http-equiv="Content-Type"
content="text/html; charset=euc-kr"></HEAD
><BODY
CLASS="ARTICLE"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="ARTICLE"
><DIV
CLASS="TITLEPAGE"
><H1
CLASS="TITLE"
><A
NAME="AEN2"
>POP3 메일 체크 프로그램</A
></H1
><H3
CLASS="AUTHOR"
><A
NAME="AEN4"
>윤 상배</A
></H3
><DIV
CLASS="AFFILIATION"
><DIV
CLASS="ADDRESS"
><P
CLASS="ADDRESS"
>				yundream@coconut.co.kr<br>
			</P
></DIV
></DIV
><HR></DIV
><DIV
CLASS="TOC"
><DL
><DT
><B
>&#52264;&#47168;</B
></DT
><DT
>1&#51208;. <A
HREF="#AEN11"
>wxPython 과 C를 사용한 POP3 체크 프로그램</A
></DT
><DD
><DL
><DT
>1.1&#51208;. <A
HREF="#AEN13"
>만들고자 하는것 에 대해서</A
></DT
><DT
>1.2&#51208;. <A
HREF="#AEN16"
>왜 wxPython과 C를 같이 사용하였나</A
></DT
><DT
>1.3&#51208;. <A
HREF="#AEN20"
>필요한 사전지식</A
></DT
><DD
><DL
><DT
>1.3.1&#51208;. <A
HREF="#AEN23"
>POP3 에 대해서</A
></DT
><DT
>1.3.2&#51208;. <A
HREF="#AEN33"
>wxPython</A
></DT
></DL
></DD
><DT
>1.4&#51208;. <A
HREF="#AEN37"
>전체 프로세스</A
></DT
><DT
>1.5&#51208;. <A
HREF="#AEN50"
>각 프로그램별 세부설명</A
></DT
><DD
><DL
><DT
>1.5.1&#51208;. <A
HREF="#AEN53"
>popchecker.c</A
></DT
><DT
>1.5.2&#51208;. <A
HREF="#AEN60"
>wxpop.py</A
></DT
></DL
></DD
><DT
>1.6&#51208;. <A
HREF="#AEN68"
>개선해야될점들</A
></DT
></DL
></DD
></DL
></DIV
><BLOCKQUOTE
CLASS="ABSTRACT"
><DIV
CLASS="ABSTRACT"
><A
NAME="AEN9"
></A
><P
></P
><P
>	</P
><P
></P
></DIV
></BLOCKQUOTE
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN11"
>1&#51208;. wxPython 과 C를 사용한 POP3 체크 프로그램</A
></H1
><DIV
CLASS="SECTION"
><H2
CLASS="SECTION"
><A
NAME="AEN13"
>1.1&#51208;. 만들고자 하는것 에 대해서</A
></H2
><P
>			넷스케이프나 모질라, 인터넷 익스플로어에 포함되어 있는 
			메일클라이언트, kmail과 같은 프로그램은 일정시간마다 사용자의 
			POP3 계정에 접근해서 새로운 메일이 도착했는지를 사용자에게 
			알려주는 기능을 가지고 있다. 이번에는 wxPython 과 C를 이용해서 
			이러한 프로그램을 만들어 보도록 하겠다.   
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN16"
>1.2&#51208;. 왜 wxPython과 C를 같이 사용하였나</A
></H2
><P
>			이정도의 프로그램이라면 단지 wxPthon 만을이용해서 쉽게 구현이 
			가능했을것이다. C와 같이 사용하는 경우보다 더 빠르고, 
			구조적으로 더욱 간단한 프로그램이 나왔겠지만, C언어에 관한 
			사이트이다 보니 C에 대한 기술도 익힐겸해서 두개의 
			언어를 같이 사용하게 되었다.
		</P
><P
>			각 언어의 특징에 맞게 wxPython 은 GUI를 위해서 C는 
			소켓연결을 통한 메일 확인의 작업을 하도록 코딩을 하였다. 
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN20"
>1.3&#51208;. 필요한 사전지식</A
></H2
><P
>			이번에는 프로그램을 만들기 전에 필요한 것들에 대해서 알아보도록 
			하겠다. 
		</P
><DIV
CLASS="SECTION"
><HR><H3
CLASS="SECTION"
><A
NAME="AEN23"
>1.3.1&#51208;. POP3 에 대해서</A
></H3
><P
>				POP 는 Post Office Protocol 의 줄임말로써 뒤의 숫자 3은 
				프로토콜의 버젼번호이다. 
				POP는 원격지에 있는 메일서버의 메일을 관리하기 위해서 만들어진 
				프로토콜로, 원격지에 접속해서 여러가지 명령을 통하여 
				메일리스트를 확인하고, 확인된 메일을 로컬컴퓨터로 가지고오고 
				원격지의 메일은 삭제하는 방식을 사용한다(물론 삭제하지 않을수도 
				있지만, 아무래도 메일을 로컬로 가져와서 작업하는게 좀더 
				빠른 작업을 가능하도록 하므로 메일을 가져온후에는 원격지의 
				메일을 삭제하는게 일반적이다.).  
			</P
><P
>				SMTP 서버가 메일을 받아서 파일로 쌓아 놓으면, POP3 로 
				접근해서 메일파일을 읽어서 가져가는 방식이다. 
			</P
><P
>				POP와 비슷한 프로토콜로 IMAP이 있는데, IMAP 보다는 POP를 
				좀더 선호한다. IMAP는 POP에 비해서 많은 기능을 제공하는 
				반면 좀더 복잡하고, 메일을 POP와 달리 로컬에서 관리하는게 
				아니고 원격지에서 관리한다.  
			</P
><P
>				여러분이 POP3 계정을 가지고 있다면, 텔넷을 이용해서 POP3 
				테스트를 해볼수 있다. POP3 서비스는 110번 포트를 이용한다.  
				<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>   
[root@localhost /root]# telnet 192.168.0.1 110
Trying 192.168.0.1...
Connected to 192.168.0.1.
Escape character is '^]'.
+OK Microsoft Exchange POP3 서버 버전 5.5.2653.23 준비
user yundream
+OK
pass gkwlak
+OK 사용자가 정상적으로 로그온했습니다
stat
+OK 1 358
state
-ERR 프로토콜 오류
				</PRE
></TD
></TR
></TABLE
>   
				'+'와 '-'가 처음에 오는 메시지는 서버측에서 사용자 명령에 
				대한 응답의 결과를 보낸것이다. '+' 로 시작되면 사용자 명령을 
				제대로 처리했다는 것이고 '-'는 명령어 처리를 실패했다는 뜻이다. 
				"user", "stat", "pass" 등이 키보드를 통해 입력한 사용자 
				명령어이다. 최초에 는 당연히 사용자에 대한 ID, PASSWORD를 
				통한 인증이 들어가고, 인증을 성공적으로 마쳤다면, 
				POP 프로토콜에서 정의 하는 각종 명령어들을 통해서 메일관련 
				작업을 하게 된다. 대표적인 명령어들은, 현재 메일 박스의 
				크기와 메일의갯수를 알아내기 위한 "stat", 메일리스트를 보기위한 
				"list", 메일을 가져오기 위한 "retr [리스트번호]", 
				가져온 메일을 삭제하기 위한 "dele [리스트번호]" 등이 있다.  
			</P
><P
>				POP3 에서 사용되는 명령어들을 알아보고 싶다면 
				<A
HREF="http://www.cis.ohio-state.edu/cs/Services/rfc/rfc-text/rfc1939.txt"
TARGET="_top"
>RFC1939</A
> 문서를 확인하기 바란다.
			</P
><P
>				위의 경우는 MS 에서 제공하는 POP3 서버에 접근했을경우인데, 
				서버제품에 따라서 서버에서 뿌려주는 메시지의 내용에 
				약간씩의 차이가 있을수 있다. 
			</P
></DIV
><DIV
CLASS="SECTION"
><HR><H3
CLASS="SECTION"
><A
NAME="AEN33"
>1.3.2&#51208;. wxPython</A
></H3
><P
>				공개된 크로스 플랫폼 윈도우 툴킷인 wxwindows를 python 을 
				통해서 구현할수 있도록 제공하는 python 의 확장모듈이다. 
				매우 빠르고 쉽게 GUI 어플리케이션의 작동을 가능하게 해준다. 
				<A
HREF="http://www.joinc.co.kr/modules.php?name=News&file=article&sid=51"
TARGET="_top"
>wxPython 프로그래밍</A
>을 참고하기 바란다. 
			</P
></DIV
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN37"
>1.4&#51208;. 전체 프로세스</A
></H2
><P
>			위에서 언급했듯이 wxPython 은 GUI 화면을 만들기 위해서, 
			C는 POP서버에 연결해서 메일정보를 가져오기 위해서 사용된다. 
			wxPython 으로 만든 프로그램의 이름은 wxpop.py C는 popchecker.c 
			로 하도록 한다. 이들의 작동 프로세스는 다음과 같을 것이다. 
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>  |  : FIFO 
  || : SOCKET
                  signal
        +------------&#62;-------------+
        |                          |
  +-------------+           +------------+        +----------+ 
  | wxpop.py    |&#60;----|-----| popchecker |---||---| POP      |
  | GUI         |           |            |        | server   |
  +-------------+           +------------+        +----------+
        |                          |
        +-------------&#60;------------+ 
              fork &#38; exec
			</PRE
></TD
></TR
></TABLE
>
			<P
></P
><UL
><LI
><P
>					가장먼저 popchecker 을 실행시키면, wxpop.py 와의 
					통신을 위해서 FIFO 를 생성한다. 만들어진 FIFO 를 통해서 
					최초에 자신의 PID 정보를 넘기고, 그다음엔 메일갯수 정보를 
					넘긴다.  
				</P
></LI
><LI
><P
>					fork&#38;exec 기법을 이용해서 wxpop.py 를 시행시킨다. 
					wxpop.py 는 실행되면 만들어진 FIFO에 연결하여서 
					popchecker 로 부터 넘어오는 메시지를 받는다. 가장 처음연
					결에서는 popchecker 의 PID 번호를 가져온다. 이는 
					나중에 popchecker 로 signal 을 보내기 위해서 사용한다.   
				</P
></LI
><LI
><P
>					popchecker 은 POP server 로 연결을 하고 user, pass 
					명령을 이용해서 인증을 마친다음 stat 명령을 이용 해서 
					메일정보를 가져온다. 작업을 마쳤으면 연결을 끊고,  
					메일정보(갯수)를 FIFO를 통해서 wxpop.py 로 보낸다. 
					일정시간 쉰(sleep)다음에 이 작업을 반복한다. 		 
				</P
></LI
><LI
><P
>					popchecker 로부터 메일정보를 받은 wxpop.py 는 
					정보를 GUI 창에 출력한다.  
				</P
></LI
></UL
>	
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN50"
>1.5&#51208;. 각 프로그램별 세부설명</A
></H2
><P
>			이번장에서는 wxpop.py 와 popchecker.c 의 세부적인 프로그래밍 
			사항에 대해서 얘기한다. 
		</P
><DIV
CLASS="SECTION"
><HR><H3
CLASS="SECTION"
><A
NAME="AEN53"
>1.5.1&#51208;. popchecker.c</A
></H3
><P
>				일반적인 소켓응용 프로그램이므로, 코드자체에 특별한 것은 
				없다. wxpop.py 를 fork&#38;exec 로 실행시키는 것과, 
				통신을 위해서 FIFO 를 생성시키고 메시지를 보내는 정도만 
				주목해서 보면 될것 같다. 물론 이러한 것들도 특별한 것은 
				아니지만... 그리고 최초에 FIFO를 만들면 자신의 PID를 
				FIFO로 보낸다. 이유는 나중에 wxpython 으로 부터 signal 을 
				받기 위함이다. 왜 시그널을 받아야 하는지는 나중에 설명이 
				있을것이다.    
			</P
><P
>				아래는 프로그램의 코드이며 설명은 주석을 통해서 대신하도록 
				할것이다. 
			</P
><P
>				<B
CLASS="EMPHASIS"
>예제: popchecker.c</B
>
				<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;sys/types.h&#62;
#include &#60;sys/stat.h&#62;
#include &#60;sys/socket.h&#62;
#include &#60;unistd.h&#62;
#include &#60;netinet/in.h&#62;
#include &#60;arpa/inet.h&#62;
#include &#60;stdio.h&#62;
#include &#60;stdlib.h&#62;
#include &#60;string.h&#62;


char buf_in[255];
int put_command(char *command, FILE *fp_in);

int main(int argc, char **argv)
{

    int client_len;
    int client_sockfd;

    FILE *fp_in, *fp_fifo;
    int port, sleep_sec;
    int mail_num;
    char mail_num_str[7];
    char *id, *pass;
    char blank[25];
    int pid;
    int cpid;
    char pid_str[11];

    char command[255];
    struct sockaddr_in clientaddr;

    memset(pid_str, 0x00, 11);

    // 아규먼트를 검사한다. 
    // IP     : POP 서버 IP 
    // port   : POP 서비스 포트번호 보통은 110
    // sec    : POP 메일 검사 간격 (초)
    // id     : POP 서버 계정
    // passwd : 계정에 대한 패스워드
    if (argc != 6)
    {       
        printf("Usage : ./pop [ip] [port] [sec] [id] [passwd]&#92;n");
        printf("예    : ./pop 192.168.0.1 110 60 yundream sky123&#92;n");
        exit(0);
    }       

    // 이미 만들어진 fifo 파일을 쓰기 전용으로 연다.
    if ((fp_fifo = fopen("/tmp/popfifo", "w")) == NULL)
    {
        perror("open error fifo : ");
        exit(1);
    }

    // wxpop.py fork &#38; exec 기법으로 실행시킨다.   
    pid = fork();
    if (pid &#60; 0)
    {
        perror("pork error&#92;n");            
    }
    else if (pid == 0)
    {
        sleep(1);
        execl("/usr/local/bin/wxpop.py","wxpop.py", 0);
    }

    // 자신의 pid 를 wxpop.py 로 전송한다. 
    // 이유는 wxpop.py 를 종료했을때 checkpop 도 동시에 
    // 종료시키기 위해서 signal 을 보내기 때문이다.  
    cpid = getpid();
    sprintf(pid_str,"s%d&#92;n", cpid);
    fputs(pid_str, fp_fifo);
    fflush(fp_fifo);

    port = atoi(argv[2]);
    sleep_sec = atoi(argv[3]);
    id = argv[4];
    pass = argv[5];

    // 일정시간 마다 계속적으로 pop 서버에 연결해서 
    // 메일의 갯수를 가져온다. 
    // 시간간격의 조정은 sleep 를 사용한다. 
    while(1)
    {
        client_sockfd = socket(AF_INET, SOCK_STREAM, 0);
        clientaddr.sin_family = AF_INET;
        clientaddr.sin_addr.s_addr = inet_addr(argv[1]);
        clientaddr.sin_port = htons(port);
        client_len = sizeof(clientaddr);

        if (connect(client_sockfd, (struct sockaddr *)&#38;clientaddr, client_len)&#60;0)
        {
            perror("Connect error : ");
            exit(0);
        }
        fp_in = fdopen(client_sockfd, "r+");
   
        // 서버 테스트 용도로 NULL 을 한번 날려본다.  
        // +OK 메시지를 전달받으면 서버가 제대로 
        // 작동중임을 나타낸다.
        if(put_command(NULL, fp_in) != 1) 
        {
            printf ("접근 에러&#92;n");
        }
 
        // 유저 ID 를 입력한다. 
          sprintf(command, "user %s&#92;r&#92;n", id);
        if(put_command(command, fp_in) != 1)
        {
            printf ("id 입력 에러&#92;n");
        }

        // 패스워드를 입력한다. 
          sprintf(command, "pass %s&#92;r&#92;n", pass);
        if(put_command(command, fp_in) != 1)
        {
            printf ("pass 입력 에러&#92;n");
        }
 
        // stat 명령을 이용해서 메일의 갯수를 
        // 가져온다. 
        if(put_command("stat&#92;r&#92;n", fp_in) != 1)
        {
            printf ("stat protocol error&#92;n");
        }

        // 가져온 메시지에서 메일의 갯수만 골라넨다.
        sscanf(buf_in,"%s%d",blank,&#38;mail_num);
        sprintf(mail_num_str, "%d&#92;n", mail_num);
        printf("mail_num_str : %s", mail_num_str);

        // 메일의 갯수를 wxpop.py 로 보낸다. 
        if (fputs(mail_num_str, fp_fifo) == -1)
        {
            perror("error write : ");
        }
        fflush(fp_fifo);

        // pop 서버와의 연결을 종료한다. 
        put_command("quit&#92;n", fp_in);
        fclose(fp_in);
        // 지정된 시간동안 sleep 한다. 
        sleep(sleep_sec);
    }
}

// FILE 객체로 쓰기를 실시하고 
// 결과 값을 조사한다. 
int put_command(char *command, FILE *fp_in)
{
    // FILE 로 문자열 command 를 전송한다. 
    if (command != NULL)
        fputs(command, fp_in);

    // 서버에서 메시지를 제대로 받았는지 확인한다.  
    fgets(buf_in, 255, fp_in);
    if (strncasecmp(buf_in, "+ok", 3) == 0)
        return 1;
    return 0;
}
				</PRE
></TD
></TR
></TABLE
>
			</P
></DIV
><DIV
CLASS="SECTION"
><HR><H3
CLASS="SECTION"
><A
NAME="AEN60"
>1.5.2&#51208;. wxpop.py</A
></H3
><P
>				이 프로그램은 쓰레드를 사용한다. 
				이유는 FIFO 를 통해서 popchecker 로부터 넘어오는 메시지를 
				받는 부분과, 이를 GUI에 출력하는 부분을 
				분리하기 위함이며, 이들 분리된 부분과의 통신은 wxwindows 
				에서 제공하는 "이벤트 전달" 을 이용하도록 했다. 
				즉 popchecker 로 부터 메시지가 들어오면, 이것을 이벤트를 
				통해서 GUI 출력부분에 전달하는 형식이다.   
			</P
><P
>				이 프로그램은 최초 FIFO 연결을 하면 popchecker 로부터 
				popchecker 의 PID 번호를 받는다. 이는 나중에 wxpop.py 를 
				종료하기전에 popchecker 에 signal 을 보내서 종료시키기 
				위한 목적으로 사용하기 위함이다.  
			</P
><P
>	
				이 프로그램역시 주석을 통해서 많은것을 설명하도록 하겠다. 
			</P
><P
>				<B
CLASS="EMPHASIS"
>예제: wxpop.py</B
>
				<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#!/usr/bin/python
from wxPython.wx import * 
from threading import *
import time, sys, os
import signal


# thread 결과를 이벤트 하기 위한 이벤트 식별아이디 
EVT_RESULT_ID = wxNewId()


def EVT_RESULT(win, func):
    win.Connect(-1, -1, EVT_RESULT_ID, func)

class ResultEvent(wxPyEvent):
    def __init__(self, data):
        wxPyEvent.__init__(self)
        self.SetEventType(EVT_RESULT_ID)
        self.data = data

# 메인 frame 을 그리기 위한 클래스
# 만들어진 frame 에 도착한 메일 정보를 출력한다. 
class MainFrame(wxFrame):
    # checkpop 의 pid 나중에 signal 을 보낼때 사용한다.  
    poppid = 0

    # Frame 을 구성한다. 
    def __init__(self, parent, id):
        wxFrame.__init__(self,parent,id, 'pop test', size=(100,20))
        self.status = wxStaticText(self,-1,'',pos=(0, 100))

        # 이벤트 생성 
        # MyThread 쓰레드(FIFO 통신 쓰레드) 로부터 
        # 이벤트가 있는지 검사 한다.
        # 이벤트가 있다면 OnResult 메서드를 호출한다. 
        EVT_RESULT(self,self.OnResult)
        # wxpop.py 를 종료할때 종료 이벤트를 
        # 받아서 checkpop 의 pid 로 KILL signal 을 보낸다.  
        # CLOSE 이벤트를 받으면 OnExit 메서드를 호출한다. 
        EVT_CLOSE(self, self.OnExit)

        # 쓰레드를 생성한다.  
        self.worker = MyThread(self)
        self.worker = None

    
    # EVT_RESULT를 통해서 전달된 event.data 를 받아서 
    # 내용을 GUI 화면에 출력한다. 
    # 만약 s 로 시작되는 메시지라면 이것은 checkpop 의 
    # pid 번호임으로 따로 저장한다. 
    def OnResult(self, event):
        if event.data[0] == "s":
            self.poppid = int(event.data[1:])
            time.sleep(1);
            self.worker = None
        else:
            self.status.SetLabel('도착한메일: %s' % event.data)
            self.worker = None

    # EVT_CLOSE 가 호출되면 즉 윈도우가 종료되면
    # checkpop 의 pid 로 SIGKILL 을 보낸후
    # 프로그램을 종료한다. 
    def OnExit(self, event):
        os.kill(self.poppid, 9)
        self.Destroy()
    

# 메인 어플리케이션을 생성한다. 
class MainApp(wxApp):
    def OnInit(self):
        self.frame = MainFrame(NULL, -1)
        self.frame.Show(true)
        self.SetTopWindow(self.frame)
        return true

# FIFO 통신을 위한 쓰레드 프로그램이다.  
# FIFO 에 읽을 데이타가 있는지 검사해서 
# 데이타가 있다면 wxPostEvent 를 이용해서 
# 데이타를 전달한다. 
class MyThread(Thread):
    def __init__(self, notify_window):
        Thread.__init__(self)
        self._notify_window = notify_window
        self._want_abort = 0
        self.start()
    
    # 쓰레드 실행부분으로 FIFO 파일에 읽을 데이타가 
    # 있는지 확인한다. 
    # 읽을 데이타가 있으면 개행문자를 제거한뒤 Event 에 실어서 보낸다. 
    # sleep 을 주어서 시간간격을 조정한다. 
    def run(self):
        fd = open("/tmp/popfifo", "r")

        while 1:
            for line in fd.readlines():
                if len(line) &#62; 0:
                    wxPostEvent(self._notify_window,ResultEvent(line[0:len(line)-1]))
            time.sleep(1)
        fd.close()

    def abort(self):
        self._want_abort = 1

app = MainApp(0)
app.MainLoop()
				</PRE
></TD
></TR
></TABLE
>
			</P
></DIV
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN68"
>1.6&#51208;. 개선해야될점들</A
></H2
><P
>			일단 프로그램을 실행시키면 아래와 같은 화면을 볼수가 있다. 
			wxpop.py 를 /usr/local/bin 으로 옮겨놓은후 popchecker 를 
			실행시키면 된다. 이건 필자의 리눅스 박스에서 직접 사용하는 
			모습을 캡쳐한 화면이다. 
			<DIV
CLASS="FIGURE"
><A
NAME="AEN71"
></A
><P
><B
>&#44536;&#47548; 1. popchecker 실행화면</B
></P
><P
><IMG
SRC="/images/articles/pop.jpg"></P
></DIV
>
		</P
><P
>			popchecker 은 그럭저럭 작동하지만 부족한 점들이 많다. 
			일단 설정파일을 지정하지 않으며, 많은 부분이 하드코딩되어 있다. 
			wxpop.py 에서 GUI를 통한 설정이 가능하도록 하면 좀더 그렇듯한 
			모습을 보여줄것이다. signal 처리도 좀 매끄럽게 해서 무식하게 
			SIGKILL 을 던지는 것보다는 다른 유연한 시그널을 보내서, 
			popchecker 에서 여러가지 작업(FIFO 종료, 소켓 종료)등과 같은 
			것을 마친다음에, 프로그램을 종료하도록 만들어야 한다. 여러개의 
			pop 계정을 지원하게 만들수도 있으며, 이럴경우 좀더 예쁜 GUI 화면을 
			만들기 위해서 많은걸 시도할수도 있을것이다. 
		</P
><P
>			wxPython 과 C를 동시에 쓰는것은 
			중요부분의 쏘쓰코드를 감추고자 할 목적으로 충분히 사용가능 할것이다. 			물론 python 과 c는 직접 bind 되어서 사용할수도 있지만, 
			IPC를 이용해서 wxPython 과 C를 사용하는 것도 꽤 재미있을 것으로 
			생각된다.  
			이것 저것 다 귀찮고 쏘쓰코드에 대한 개방문제에 신경쓰지 않는다면 
			wxPython 만으로 작업하는 것도 훌륭한 방법이다. 
			그렇게 되면, IPC를 사용함으로써 얻을수 있게 된는 여러가지 잠재적인 
			문제들도 회피할수 있을뿐더러, 좀더 깨끗하고, 유연한 프로그램을 
			얻을수 있을것이다.  
		</P
></DIV
></DIV
></DIV
></BODY
></HTML
>

}}}
