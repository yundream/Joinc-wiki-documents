[wiki:docbook/cgi Docbook 원문]
{{{#!html
<HTML
><HEAD
><TITLE
>CGI 프로그래밍 소개</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.76b+
"><META
http-equiv="Content-Type"
content="text/html; charset=euc-kr"></HEAD
><BODY
CLASS="ARTICLE"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="ARTICLE"
><DIV
CLASS="TITLEPAGE"
><H1
CLASS="TITLE"
><A
NAME="AEN2"
></A
>CGI 프로그래밍 소개</H1
><H3
CLASS="AUTHOR"
><A
NAME="AEN4"
>윤상배</A
></H3
><DIV
CLASS="AFFILIATION"
><DIV
CLASS="ADDRESS"
><P
CLASS="ADDRESS"
>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yundream@join.co.kr<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</P
></DIV
></DIV
><DIV
CLASS="REVHISTORY"
><TABLE
WIDTH="100%"
BORDER="0"
><TR
><TH
ALIGN="LEFT"
VALIGN="TOP"
COLSPAN="3"
><B
>&#44256;&#52828; &#44284;&#51221;</B
></TH
></TR
><TR
><TD
ALIGN="LEFT"
>&#44256;&#52840; 0.9</TD
><TD
ALIGN="LEFT"
>2004년 5월 17일 20시</TD
><TD
ALIGN="LEFT"
></TD
></TR
><TR
><TD
ALIGN="LEFT"
COLSPAN="3"
>docbook 문서로 옮김</TD
></TR
></TABLE
></DIV
><HR></DIV
><DIV
CLASS="TOC"
><DL
><DT
><B
>&#52264;&#47168;</B
></DT
><DT
>1. <A
HREF="#AEN17"
>CGI 소개</A
></DT
><DD
><DL
><DT
>1.1. <A
HREF="#AEN48"
>PHP(12), ASP와 CGI(12)</A
></DT
></DL
></DD
><DT
>2. <A
HREF="#AEN52"
>CGI 프로그래밍</A
></DT
><DD
><DL
><DT
>2.1. <A
HREF="#AEN54"
>작동방식(입/출력)</A
></DT
><DD
><DL
><DT
>2.1.1. <A
HREF="#AEN59"
>GET 방식</A
></DT
><DT
>2.1.2. <A
HREF="#AEN65"
>POST 방식</A
></DT
></DL
></DD
><DT
>2.2. <A
HREF="#AEN68"
>CGI 환경 변수</A
></DT
><DT
>2.3. <A
HREF="#AEN73"
>CGI 테스트 프로그램 - GET 방식</A
></DT
><DT
>2.4. <A
HREF="#AEN78"
>CGI 테스트 프로그램 - POST 방식</A
></DT
><DT
>2.5. <A
HREF="#AEN84"
>쿼리 문자열 분석</A
></DT
><DT
>2.6. <A
HREF="#AEN94"
>CGI 관련 라이브러리</A
></DT
></DL
></DD
></DL
></DIV
><BLOCKQUOTE
CLASS="ABSTRACT"
><DIV
CLASS="ABSTRACT"
><A
NAME="AEN14"
></A
><P
></P
><P
>		지금에 와서야 CGI(12)는 퇴물로 분류된다. PHP(12), ASP와 같은 훌륭한 
		서버사이트 스크립트언어의 등장으로 동적인 페이지를 쉽게 작성하는데, 
		굳이 다루기 힘들고 까다로운 언어를 이용해서 CGI프로그래밍을 
		시도해야하는 필요가 사라졌기 때문이다.
	</P
><P
>		그러나 여전히 보안, 기존 제품과의 호환, 기타 필요에 의해서 CGI에 대한 
		수요가 발생한다. 이번 글은 CGI의 개념과 CGI 애플리케이션의 작성에 
		대해서 알아보도록 하겠다. 그리고 글의 마지막에는 아파치 웹서버에서 
		우리가 작성한 CGI 애플리케이션을 작동시키도록 하겠다. 
	</P
><P
></P
></DIV
></BLOCKQUOTE
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN17"
></A
>1. CGI 소개</H1
><P
>		CGI는 Common  Gateway Interface의 줄임말인데, information 서버(와 외부 
		애플리케이션과의 인터페이스를 위한 표준 방법이다. information 서버의 가장 
		대표적인 예는 웹서버이다. 일반적인 plain HTML(12) 문서가 웹서버를 통해서 
		서비스된다면 이 내용은 "정적"데이터가 된다. 웹 프로그래머가 문서를 직접 
		수정하기전에는 어떤 웹서퍼가 어떤 시간에 문서를 보더라도 동일한 문서를 받아보게 
		된다.  
	</P
><P
>		몇년전만 해도 이러한 plain HTML문서만으로도 훌륭한 웹 서비스를 제공할 수 
		있었으나, 요즘의 웹서비스는 대부분 상호 작용적인 것이다. 이를테면 고객의 정보를 
		확인해서 고객마다 각각 다른 정보를 지닌 페이지를 뿌려주는 등의 서비스가 
		필요해진 것이다. CGI는 이러한 동적페이지 서비스를 위해서 만들어졌다.      
	</P
><P
>		CGI프로그램은 웹서버에 의해서 <B
CLASS="EMPHASIS"
>모듈 혹은 프로그램 형태로</B
> 실행되며, 
		데이터베이스에 연결해서 데이터를 읽어와서 웹페이지로 출력하거나, 데이터를 
		저장하는 등의 일을 한다. 중간에서 데이터를 중계하는 이러한 프로그램의 특징 
		때문에 <B
CLASS="EMPHASIS"
>Gateway</B
>라는 이름이 붙었다. 현재 CGI의 버젼은 1.1까지 나와 있다.   
		<DIV
CLASS="NOTE"
><BLOCKQUOTE
CLASS="NOTE"
><P
><B
>&#52280;&#44256;: </B
>	
			CGI은 인터페이스다. 라이브러리나 함수가 아니다.
		</P
></BLOCKQUOTE
></DIV
>
	</P
><P
>		CGI는 기본적으로 당신의 시스템에서 실행되어지는 프로그램으로 다른 프로그램(vi, 
		ls ..)들과 전혀 다를바가 없다. 다른 프로그램들이 출력결과를 표준출력을 통해서 
		전달하는 것과는 달리 CGI는 출력결과를 웹서버로 전달한다는 정도만 약간 다르다고 
		보면 된다. 
	</P
><P
>		만약 당신이 Apache(12) HTTPD 서버를 사용하고 있다면, 작성된 CGI 프로그램들은 
		/cgi-bin 에 위치할 것이다. CGI프로그래밍은 다음과 같은 다양한 언어를 통해서 
		작성가능 하다.
		<P
></P
><UL
><LI
><P
>				C/C++
			</P
></LI
><LI
><P
>				PHP(12)		
			</P
></LI
><LI
><P
>				Perl	
			</P
></LI
><LI
><P
>				TCL	
			</P
></LI
><LI
><P
>				Python	
			</P
></LI
><LI
><P
>				Ruby	
			</P
></LI
><LI
><P
>				모든 종류의 유닉스 Shell Script			
			</P
></LI
><LI
><P
>				Visual Basic	
			</P
></LI
><LI
><P
>				AppleScript		
			</P
></LI
></UL
>
		결론적으로 말하자면 어떠한 언어를 쓰더라도 CGI규격만 지킨다면 CGI프로그램작성을 
		위해서 사용할 수 있다. 만약 C와 C++같은 언어를 이용해서 개발한다면 컴파일을 
		시켜서 제대로 실행되는지 먼저 테스트해봐야 할 것이다. Perl이나 shell과 같은 
		스크립트 언어를 이용한다면 컴파일시키지 않아도 되므로 좀더 편하게 프로그래밍 
		가능할 것이다. 이런 이유로 스크립트 언어가 과거에 CGI를 위해서 널리 사용되었다. 
		Perl의 경우에는 범용 언어로 개발되었지만 특유의 강력한 문자열 처리 능력으로 
		인하여 특히 CGI프로그래밍을 위한 언어로 널리 사용되었다. 
	</P
><P
>		컴파일 된 실행파일이나, 스크립트들은 /cgi-bin에 옮겨 놓고 웹페이지를 통해서 
		불러들이면 웹서버가 알아서 실행시키게 된다.  
	</P
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN48"
></A
>1.1. PHP(12), ASP와 CGI(12)</H2
><P
>			참고로 PHP(12)와 ASP같은 경우 자체적으로 CGI를 만족한다. CGI규격을 
			엔진내부에서 알아서 처리해 주므로 개발자는 CGI에 대해서 골치아프게 머리 
			쓸필요 없이 구현 자체에 집중할 수 있다.  
		</P
><P
>			그러나 PHP(12)와 ASP의 경우 웹서버의 모듈로서 작동하는데 이는 고전적인 
			CGI프로그램들과는 틀린 작동방식이다. 그러므로 이하 CGI를 설명하는데 있어서는 
			PHP(12)와 ASP는 예외로 하고 설명하도록 하겠다. 
		</P
></DIV
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN52"
></A
>2. CGI 프로그래밍</H1
><DIV
CLASS="SECTION"
><H2
CLASS="SECTION"
><A
NAME="AEN54"
></A
>2.1. 작동방식(입/출력)</H2
><P
>			웹서버에서 CGI 프로그램은 fork()를 통해서 실행시키며 CGI에 데이터를 
			전달하기 위해서 표준출력과 환경변수를 사용하며, CGI프로그램으로 부터 
			데이터를 전달받기 위해서 표준입력을 사용한다.
		</P
><P
>			웹서버에서 CGI프로그램을 실행시킬 때는 여러가지 정보도 CGI프로그램에 전달할 
			것이다. 전달방식은 GET, POST방식이 대표적이다. GET방식의 데이터 요청에서 
			이루어진 URI값은 화경변수를 통해서, POST방식은 표준입력을 통해서 
			CGI프로그램으로 넘어간다. 
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>&#60;img src=http://www.joinc.co.kr/albums/album01/aik.gif&#62;
			</PRE
></TD
></TR
></TABLE
>
		</P
><DIV
CLASS="SECTION"
><HR><H3
CLASS="SECTION"
><A
NAME="AEN59"
></A
>2.1.1. GET 방식</H3
><P
>				GET방식은 URI를 통해서 필요한 데이터를 요청하는 방식이다.
				<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>http://www.joinc.co.kr/modules.php?op=modload&#38;name=Forum&#38;file=viewtopic&#38;topic=29106
				</PRE
></TD
></TR
></TABLE
>
				웹서버는 GET방식을 통해서 입력받은 데이터를 환경변수를 통해서 CGI프로그램에 
				전달한다. CGI프로그램은 환경변수를 읽어들여서 필요한 작업을 하게 된다. 
				C에서는 getenv()를 통해서 환경변수를 읽어들 일 수 있다. 다음은 위의 
				URI로 전달된 값을 각 언어별 환경변수를 읽어들이는 방법이다. 
				<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>perl
===========
print $ENV{'QUERY_STRING'};    # modload

C/C++
============
char *value;
value = getenv("QUERY_STRING");    // modload

Shell
============
echo $QUERY_STRING        # modload
				</PRE
></TD
></TR
></TABLE
>
				이렇게 하면 쿼리 문자열인 
				"op=modload&#38;name=Forum&#38;file=viewtopic&#38;topic=29106"가 넘어오고 이것을 
				적당히 파싱해서 사용하면 된다.
			</P
><P
>				환경변수는 프로세스의 스택영역에 위치한다. 그러므로 전달할 수 있는 데이터의 
				양에 제한이 생긴다(제한을 아시는 분의 답변 부탁드립니다). 
			</P
></DIV
><DIV
CLASS="SECTION"
><HR><H3
CLASS="SECTION"
><A
NAME="AEN65"
></A
>2.1.2. POST 방식</H3
><P
>				POST 방식은 웹에서 &#60;form&#62;을 통해서 전달되는 값들로 CGI프로그램으로는 
				표준입력을 통해서 전달된다. 경변수에 의해서 제한이 생기는 GET방식에 비해서 
				전달할 수 있는 데이터의 양에 제약없이 사용가능하다. 
				GET과 마찬가지로 POST방식역시 경우 프로그램에서 문자열 파싱을 
				해줘야 한다. 이건 상당히 귀찮은 작업이 될 수 있다.  
				이러한 귀찮은 작업을 대신 처리해줄 라이브러리가 여럿 존재하는데, 
				문서의 마지막에 따로 언급하도록 하겠다.
			</P
></DIV
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN68"
></A
>2.2. CGI 환경 변수</H2
><P
>			CGI 프로그램의 경우 단독프로세스로 작동하기 때문에, 자신을 실행시킨 웹서버의 
			여러가지 정보를 어떡해서든지 유지할 수 있어야 한다. 이를테면 웹서버의 종류가 
			무엇인지, 어떤 URL(12)이 웹에 접근을 해서 CGI 프로그램을 가동시켰는지, 어떤 
			쿼리 문자열을 보냈는지, GET을 이용했는지 POST를 이용했는지 등등의 정보를 
			웹서버로 부터 상속받아야 한다. 
		</P
><P
>			이러한 모든 정보는 약속된 CGI 환경변수를 통해서 읽어 올 수 있다. 현재 CGI 
			환경변수에는 다음과 같은 것들이 정의되어 있다. 
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>		
   DOCUMENT_ROOT           // 문서가 위치하는 루트 디렉토리
   GATEWAY_INTERFACE       // 사용된 gateway 인터페이스 (이경우 CGI 1.1) 
   HTTP_ACCEPT 
   HTTP_REFERER            // POST방식일 경우 요청한 페이지 이름
   HTTP_ACCEPT_CHARSET 
   HTTP_ACCEPT_LANGUAGE 
   HTTP_CONNECTION         // 연결방식 (보통 Keep-Alive) 
   HTTP_HOST               // 웹서버의 IP와 PORT정보 
   HTTP_USER_AGENT         // 연결에 사용한 브라우저 정보
   PATH                    // 실행파일 경로 
   QUERY_STRING            // 쿼리 문자열 
   REMOTE_ADDR             // 클라이언트 주소
   REMOTE_HOST	            
   REMOTE_PORT             // 클라이언트 포트
   REQUEST_METHOD          // 요청방법, 보통 GET이나 POST
   REQUEST_URI             // URI정보
   SCRIPT_FILENAME 
   SCRIPT_NAME             // 실행한 CGI 프로그램 이름 
   SERVER_ADMIN            // 서버관리자 정보, 보통 email주소
   SERVER_NAME             // 서버이름, 보통 도메인이름
   SERVER_PORT             // 서비스 포트(80, 8080)
   SERVER_PROTOCOL         // 서비스 프로토콜(HTTP1.0, HTTP1.1)
   SERVER_SOFTWARE         // 서버 프로그램
   TZ                      // 타임존
			</PRE
></TD
></TR
></TABLE
>		
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN73"
></A
>2.3. CGI 테스트 프로그램 - GET 방식</H2
><P
>			그럼 간단한 CGI테스트 프로그램을 하나 만들어 보도록 하겠다. 이 프로그램은 
			현재 시간과 함께 쿼리 스트링과 기타 CGI환경변수를 출력하는 일을 한다.
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>	
#include &#60;stdio.h&#62;
#include &#60;string.h&#62;
#include &#60;time.h&#62;
#include &#60;sys/types.h&#62;
#include &#60;unistd.h&#62;

static char dday[256];
static char wday[7][2] = {"일","월", "화", "수", "목", "금", "토"};

char * time2str(time_t, char * );

char * time2str(time_t org_time, char *format)
{
    struct tm *tm_ptr;
    int index=0;
    int i;
    tm_ptr = localtime(&#38;org_time);
    memset(dday, 0x00, 256);
    for (i = 0; i &#60; strlen(format); i++)
    {
        switch(format[i])
        {
            case 'y': // 년                                        
                sprintf(dday+index, "%04d", tm_ptr-&#62;tm_year+1900);
                index += 4;
                break;
            case 'm': // 월(1-12), 분(0-59)
                if (format[i+1] == 'i')
                {
                    sprintf(dday+index, "%02d", tm_ptr-&#62;tm_min);
                    index += 2;
                    i++;
                    break;
                }
                else
                {
                    sprintf(dday+index, "%02d", tm_ptr-&#62;tm_mon+1);
                    index += 2;
                    break;
                }
            case 'd': // 일 (1-31)                                
                sprintf(dday+index, "%02d", tm_ptr-&#62;tm_mday);
                index += 2;
                break;
            case 'D': // 요일(일 ~ 토)                            
                sprintf(dday+index, "%s", wday[tm_ptr-&#62;tm_wday]);
                index += 2;
                break;
            case 'h': // 시(00-23)                                
                sprintf(dday+index, "%02d", tm_ptr-&#62;tm_hour);
                index += 2;
                break;
            case 's': // 초(00-59)                                
                sprintf(dday+index, "%02d", tm_ptr-&#62;tm_sec);
                index += 2;
                break;

            default:
                dday[index] = format[i];
                index++;
        }
    }
    return dday;
}

void print_header()
{
    printf("Content-type: text/html\n\n");
}

int main(int argc, char ** argv)
{
    print_header(); // 반드시 포함되어야 한다.
    printf("&#60;h2&#62;Hello World CGI VERSION : %s&#60;/h2&#62;\n",
            time2str( time((time_t *)NULL), "y년 m월 d일 D요일 h:mi:s"));
    printf("Query String %s&#60;br&#62;\n", getenv("QUERY_STRING"));

    printf("SERVER_SOFTWARE = %s&#60;br&#62;\n", getenv("SERVER_SOFTWARE"));
    printf("GATEWAY_INTERFACE = %s&#60;br&#62;\n", getenv("GATEWAY_INTERFACE"));
    printf("SERVER_PROTOCOL = %s&#60;br&#62;\n", getenv("SERVER_PROTOCOL"));
    printf("HTTP_ACCEPT = %s&#60;br&#62;\n", getenv("HTTP_ACCEPT"));
    printf("REQUEST_METHOD = %s&#60;br&#62;\n", getenv("REQUEST_METHOD"));
    printf("REMOTE_ADDR = %s\n", getenv("REMOTE_ADDR"));
    printf("&#60;br&#62;&#60;br&#62;\n");
}
			</PRE
></TD
></TR
></TABLE
>	
			위 코드를 컴파일 한뒤 웹서버의 cgi-bin에 test 라는 이름으로 복사한다음 
			http://hostname/cgi-bin/test?name=yundream으로 테스트 해보도록 하자. 
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>Hello World CGI VERSION : 2004년 05월 11일 화요일 11:10:27

Query String name=yundream
SERVER_SOFTWARE = Apache/1.3.26 (Unix) PHP(12)/4.3.0
GATEWAY_INTERFACE = CGI/1.1
SERVER_PROTOCOL = HTTP/1.0
HTTP_ACCEPT = text/*, image/*, audio/*, application/*
REQUEST_METHOD = GET
REMOTE_ADDR = 192.168.1.101
			</PRE
></TD
></TR
></TABLE
>
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN78"
></A
>2.4. CGI 테스트 프로그램 - POST 방식</H2
><P
>			POST 방식이란 URI를 통해서 데이터를 넘기는 방식이 아닌 &#60;form&#62;을 통해서 
			데이터를 넘기는 방식을 뜻한다. CGI 프로그램에서는 표준입력으로 받을 수 있다. 
			다음은 POST 방식 테스트를 위한 웹페이지이다. HTML 코드는 설명 생략하도록 하겠다. 
			페이지의 이름은 post.php로 하겠다.
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>&#60;form action=/cgi-bin/post-cgi method=post&#62;
이름 : &#60;input type=text name=name size=16&#62;&#60;br&#62;
나이 : &#60;input type=text name=age  size=16&#62;&#60;br&#62;
&#60;input type=submit name=submit&#62;
&#60;/form&#62;
			</PRE
></TD
></TR
></TABLE
>
			다음은 POST방식으로 넘어온 데이터를 받기 위한 프로그램이다. 간단하므로 역시 설명은 생략하도록 하겠다.
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;stdio.h&#62;
#include &#60;string.h&#62;

int main(int argc, char **argv)
{
    char buf[1024]; 
    int n;   
    printf("Content-type: text/html\n\n");
    printf("Referer 페이지 %s&#60;br&#62;&#60;br&#62;", getenv("HTTP_REFERER"));
    memset(buf, 0x00, 1024);
    while((n = read(0, buf, 1023)) &#62; 0) 
    {
        printf("POST DATA : %s", buf); 
        memset(buf, 0x00, 1024); 
    } 
}
			</PRE
></TD
></TR
></TABLE
>
브라우저에서 post.php를 부른다음 적당한 값을 넣고 실행시키면 다음과 같은 결과가 출력될 것이다.
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>Referer 페이지 http://localhost/post.php

POST DATA : name=yundream&#38;age=21&#38;submit=SUBMIT
			</PRE
></TD
></TR
></TABLE
>
쿼리 문자열을 읽어들이는 방법외에 쿼리 문자열의 구성은 GET방식과 동일함을 알 수 있다. 물론 키와 값을 제대로 얻기 위해서는 '=','&#38;'를 기준으로 파싱해줘야 하겠지만 말이다. 
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN84"
></A
>2.5. 쿼리 문자열 분석</H2
><P
>			쿼리 문자열을 분석은 언뜻 보면 별로 어려울 것 같지 않다. 귀찮을 수는 
			있겠지만 '=','&#38;'을 기준으로 파싱하는 건 기술적으로 어려운 문제는 아니기
			때문이다. 
		</P
><P
>			그러나 알고보면 그렇게 간단하지가 않다. post.php에서 name에 yun&#38;dream 
			과 같이 쿼리 스트링 분리를 위한 특수문자가 포함되어 버리는 경우를 생각해 
			보자. 당연히 제대로 처리 할 수 없을 것이다. 이러한 이유로 웹에서 POST, 
			GET방식으로 데이터를 전달할 때는 인코딩과정이 필요하게 된다. 
			실제 post.php에 yun&#38;dream을 입력한다음 submit 버튼을 누르면 다음과 같이 
			인코딩된 결과가 표시된다.  
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>Referer 페이지 http://www.joinc.co.kr/post.php

POST DATA : name=yun%26dream&#38;age=21&#38;submit=SUBMIT
			</PRE
></TD
></TR
></TABLE
>
			&#38;이 %25 으로 인코딩 되어 있음을 알 수 있다. 웹에서 값의 전달을 
			위해서 사용하는 이러한 인코딩 방식을 urlencode 라고 한다. 
		</P
><P
>			urlencode는 단지 &#38;, = 만을 인코딩하지 않는다. [[HTML([a-zA-Z0-9\-._])]]을
			제외한 모든 문자들을 변환한다. 변환 방법은 다음과 같다.
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>	
% + 해당문자의 HEX값
			</PRE
></TD
></TR
></TABLE
>	
			예를 들어서 * 는 %2A 로 ( 는 %28 로 변환된다. ASCII 
			테이블은 <A
HREF="http://www.joinc.co.kr/modules/moniwiki/wiki.php/ascii_table"
TARGET="_top"
>			ascii table</A
>를 참고하기 바란다. 
		</P
><P
>			그러므로 CGI 프로그램에는 이들 urlencode된 데이터를 decode하기 위한 코드가 
			포함되어야 한다. encode규칙만 안다면 decode 코드는 어렵지 않게 작성할 수 
			있을 것이다. urlencode 관련된 코드를 
			<A
HREF="http://www.joinc.co.kr/modules/moniwiki/wiki.php/Code_C_urlencode"
TARGET="_top"
>Code_C_urlencode</A
>에
			정리해 두었으니 한번 참고해 보기 바란다. 
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN94"
></A
>2.6. CGI 관련 라이브러리</H2
><P
>			제대로된 CGI 프로그램을 짤려면 이것 저것 신경써야 할게 한두가지가 아니다. 
			HTTP 프로토콜, Cookie, POST, GET, MIME, uuencode, 파일전송 ... 이것을 일일이 
			작성하기란 여간 까다로운게 아니다. 그래서 CGI 프로그래밍 관련 몇 가지 라이브러리를 
			소개하고 글을 마치고자 한다. 
			<P
></P
><UL
><LI
><P
>				<A
HREF="http://www.w3.org/Library"
TARGET="_top"
>libwww 라이브러리</A
>
				</P
></LI
><LI
><P
>				<A
HREF="http://www.openbird.com/solutions/qdecoder/ko-about.jsp"
TARGET="_top"
>qDecoder</A
>
				</P
></LI
></UL
>
		</P
></DIV
></DIV
></DIV
></BODY
></HTML
>
}}}
