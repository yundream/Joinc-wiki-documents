#title 검색에 있어서 DBMS도입이 가능할까.

작성해야될 문서인데, 잊어버리지 않기 위해서 일단 페이지만 생성합니다. 다룰 내용은 10,000,000건 이상의 웹문서 검색을 위한 색인테이블을 만드는데, DBMS를 사용할 수 있을런지에 대한 것으로, Lucene(:12)의 색인구조를 기준으로 테스트해볼 생각입니다.

=== 일반적인 생각 ===
RDBMS(:12)는 다양한 데이터를 다루기 위해서 사용되는 범용적인 툴이다. 범용적인 툴들이 가지는 장점이라면, 활용성이 높고 유지보수가 쉽고, 시간을 아낄 수 있다는 점일 것이다. 반면 단점은 다루어야 하는 데이터가 결정되어 있을 때, 전용으로 만든 DB프로그램보다 '''거의 절대로'''비효율적일 수 밖에 없다는 점이 될 것이다.  

간단한 예로, 모든 서비스의 트래픽을 모니터링하기 위한 툴을 만든다고 가정해보자. 나라면 다음과 같은 DB파일을 생성할 것이다.

http://docs.google.com/File?id=dgfb53hh_110d7kqrk

65536 * sizeof(int)를 가지는 파일을 5분마다 한번씩 저장한다. 80번 웹서비스의 트래픽 정보를 가져오고 싶다면, seek()를 이용해서 파일위치를 이동해서 데이터를 읽어오는 식이 될건데, 매우 빠른 시간에 정보를 얻어올 수 있을 것이다. 이렇게 파일을 쌓아 놓으면, 간단한 산수로 시간대별 추이에 대한 정보도 빠르게 얻어올 수 있을 것이다.

RDBMS사용하면 개발시간을 벌 수있겠지만, 어떠한 제품을 사용하더라도 위의 방식보다 더 빠르게 데이터를 가져올 수는 없을 것이라 생각된다. 

=== Lucene 색인 ===
색인을 만들기 위해서는 다음과 같은 데이터 테이블이 필요할 것이다. 
{{{#!plain
 +----------+       +---------+
 | TermIdx  |   +-->| DocInfo |
 +----------+   |   +---------+
 | + Term   |   |   | TID     | 
 | + DocP --|---+   | DID     |
 +----------+       | DNAME --|------------> Document
                    +---------+
}}}
실제 Lucene는 다음과 같은 색인테이블을 유지한다.

http://www.joinc.co.kr/modules/moniwiki/wiki.php/JCvs/Search/Document/nutch/query?action=download&value=QuerySearch.gif

 * '''TermInfos''' : 색인된 '''Term'''의 정보를 정렬저장하고 있다. '''frq pointer'''는 Term이 발겨된 문서의 목록을 가지고 있는 '''Frequencies'''테이블의 시작점 pointer정보를 가지고 있다.  '''prx pointer'''는 Term이 문서의 어느위치에 있는지에 대한 정보를 가진다. 위치정보는 하나의 문서에서 2개이상의 Term이 발견되었을 때 score계산을 위해서 사용한다. Term사이의 거리가 가깝다면 더 높은 점수를 부여하게 된다. 
 * '''Frequencies''' : Term이 포함된 문서의 ID를 가지고 있다. 문서의 ID는 int형으로 정렬되어 있다. 그러므로 TermInfos에서 Term을 찾고 frq pointer로 Frequencies테이블에서 문서 ID(이하 DID)를 찾았다면, 다음 DID가 지금 DID보다 더 클경우, 계속 읽어들이기만 하면 된다. 
 * '''TermInfo''' : 문서가 5,000,000건이라고 한다면 색인된 Term은 형태소분석 엔진이 어떠하냐에 따라 다르겠지만 20,000,000정도가 될 것이다. 정렬되어 있기 때문에, binary 검색이 가능하겠지만, 많은 시간이 소모될 것이다. 이 소모되는 시간을 줄이기 위해서 1024정도의 블럭에 있는 Term을 따로 인덱스한 테이블을 만든다. 이게 TermInfo 테이블이다. 블럭범위를 1024정도로 했다면, TermInfo의 크기는 19531정도가 될 것이다. 그렇다면 여기에서 한번검색을 해서 블럭위치를 찾은다음 TermInfos로 가서 1024 크기의 블럭에서 이진검색을 하면 되므로, 검색시간을 줄일 수 있다.    

=== RDBMS 관리가 어려운 이유 ===
당연하지만 RDBMS로도 위의 정보를 충분히 유지할 수 있을 것이다. (비록 DBA가 아니긴 하지만) 위의 테이블을 만들고 유지하는게 어려울 거라고 생각되지는 않는다.
