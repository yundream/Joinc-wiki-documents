head	1.10;
access;
symbols;
locks
	root:1.10; strict;
comment	@# @;


1.10
date	2015.05.25.03.33.43;	author root;	state Exp;
branches;
next	1.9;

1.9
date	2015.05.24.07.22.43;	author root;	state Exp;
branches;
next	1.8;

1.8
date	2015.05.23.15.38.38;	author root;	state Exp;
branches;
next	1.7;

1.7
date	2015.05.23.15.05.25;	author root;	state Exp;
branches;
next	1.6;

1.6
date	2015.05.23.13.13.03;	author root;	state Exp;
branches;
next	1.5;

1.5
date	2015.05.23.09.13.06;	author root;	state Exp;
branches;
next	1.4;

1.4
date	2015.05.23.02.06.18;	author root;	state Exp;
branches;
next	1.3;

1.3
date	2015.05.23.00.29.11;	author root;	state Exp;
branches;
next	1.2;

1.2
date	2015.05.22.13.04.39;	author root;	state Exp;
branches;
next	1.1;

1.1
date	2015.05.22.05.46.09;	author root;	state Exp;
branches;
next	;


desc
@./data/text/man_2f12_2fdocker_2fcoreos_2fetcd_2fapi
@


1.10
log
@119.64.102.68;;yundream;;
@
text
@#title CoreOS-etcd API
[[TableOfContents]]
== 환경 만들기 ==
etcd API를 테스트하기 전에 먼저 환경을 만들기로 했다.
=== 테스트 환경 ===
KVM 위에 CoreOS를 실행했다. 실행 방법은 [wiki:man/12/docker/coreos/quickinstall Coreos quick install] 문서를 참고 한다. 굳이 KVM을 이용하는 이유는 1. 나름 익숙하고, 2. 개인 PC에 이미 KVM 환경이 잘 만들어져 있고, 3. 다양한 응용이 가능하기 때문이다. 그게 아니라면 그냥 virtualbox로 테스트 하자. 

etcd는 api와 admin을 위한 두 개의 포트(4001, 7001)을 제공한다. 그래서 4001과 7001 두개의 포트를 포워딩 하기로 했다. 이를 위해서 '''coreos_production_qemu.sh'''스크립트를 수정했다. 
{{{#!plain
...
SSH_PORT=2222
ETCD_PORT=4444
ADMIN_PORT=7777
...
while [ $# -ge 1 ]; do
   case "$1" in
     ...
     -p|-ssh-port)
        SSH_PORT="$2"
        shift 2 ;;
     -e|-etcd-port)
        ETCD_PORT="$2"
        shift 2 ;;
     -A|-admin-port)
        ADMIN_PORT="$2"
        shift 2 ;;
...
qemu-system-x86_64 \
-name "$VM_NAME" \
-m ${VM_MEMORY} \
-net nic,vlan=0,model=virtio \
-net user,vlan=0,hostfwd=tcp::"${SSH_PORT}"-:22,\
hostfwd=tcp::"${ETCD_PORT}"-:4001,\
hostfwd=tcp::"${ADMIN_PORT}"-:7001,\
hostname="${VM_NAME}" \
"$@@"
...
}}}
 * localhost:4444를 4001로 포워딩 했다.
 * localhost:7777을 7001로 포워딩 했다. 
=== Running a Single Machine Cluster ===
etcd API를 테스트한다. 테스트 하기 편하게 하나의 머신으로 구성된 클러스터로 테스트 했다. CoreOS에서 etcd를 실행한다.  
{{{#!plain
$ etcd -data-dir machine0 -name machine0
[etcd] May 21 13:56:36.671 INFO      | Peer URLs in log:  / machine0 (http://127.0.0.1:7001)
[etcd] May 21 13:56:36.672 INFO      | etcd server [name machine0, listen on :4001, advertised url http://127.0.0.1:4001]
[etcd] May 21 13:56:36.672 INFO      | peer server [name machine0, listen on :7001, advertised url http://127.0.0.1:7001]
[etcd] May 21 13:56:36.672 INFO      | machine0 starting in peer mode
[etcd] May 21 13:56:36.672 INFO      | machine0: state changed from 'initialized' to 'follower'.
}}}
=== Key Space Operations ===
etcd의 가장 중요한 API는 계층적인 키 공간의 관리다. 키 공간(key space)는 디렉토리 형식으로 구성되며, "nodes"에서 관리한다. 

=== 디렉토리 ===
etcd는 '''key'''와 '''디렉토리(directory)''' 두 가지 타입의 저장소를 가지고 있다. key는 일반 파일시스템의 파일, 디렉토리는 디렉토리에 대응된다. 디렉토리밑에는 새로운 key 혹은 디렉토리를 추가할 수 있다. 

== etcd API ==
=== 버전 확인 ===
'''/version'''을 이용해서 etcd의 버전을 가져올 수 있다.
{{{#!plain
$ curl -L http://localhost:4444/version
etcd 0.4.9
}}}

=== 키와 값을 설정하기 ===
'''/message'''키를 만들고 여기에 '''Hello world'''값을 설정한다.
{{{#!plain
$ curl -L http://localhost:4444/v2/keys/message -XPUT -d value="Hello world"
{
   "action" : "set",
   "node" : {
       "modifiedIndex" : 3,
       "key" : "/message",
       "createdIndex" : 3,
       "value" : "Hello world"
   }
}
}}}
  * '''action : action은 업데이트 혹은 추가 요청시에만 사용한다. HTTP의 PUT메서드가 이에 해당하며, nove.key의 값을 node.value로 설정한다. 
  * node.key : 키의 경로다. URL 형식으로 표현 할 수 있다. 위 예제에서는 /message가 key다. 
  * node.value : key에 저장된 값이다. 이 경우 /message 키에 "Hello world"가 저장된다.
  * createIndex : 
  * node.modifiedIndex : 

=== 응답 헤더 ===
curl을 이용해서 응답헤더를 분석해 보자. /message 키에 "Hello world"를 저장하는 예제다.
{{{#!plain
$ curl -L http://localhost:4444/v2/keys/message -XPUT -d value="Hello world" -v
.... 요청 헤더는 생략 ....
* upload completely sent off: 17 out of 17 bytes
< HTTP/1.1 200 OK
< Content-Type: application/json
< X-Etcd-Index: 5
< X-Raft-Index: 5460
< X-Raft-Term: 2
< Date: Fri, 22 May 2015 08:10:34 GMT
< Transfer-Encoding: chunked
}}}
  * X-Etcd-Index : 현재 etcd index 
  * X-Raft-Index : is similar to the etcd index but is for the underlying raft protocol
  * X-Raft-Term : is an integer that will increase whenever an etcd master election happens in the cluster. If this number is increasing rapidly, you may need to tune the election timeout. See the tuning section for details.

=== Key로 부터 값 읽기 ===
GET을 이용해서 Key 값을 가져올 수 있다. /message 에 저장되 값을 읽었다. 
{{{#!plain
# curl -L http://localhost:4444/v2/keys/message -XGET | json_pp 
{
   "node" : {
      "createdIndex" : 6,
      "modifiedIndex" : 6,
      "value" : "Hello world",
      "key" : "/message"
   },
   "action" : "get"
}
}}}

=== Key의 값 변경 ===
같은 이름의 Key에 대해서 PUT 할 경우, 데이터를 덮어쓴다.
{{{#!plain
$ curl -L http://localhost:4444/v2/keys/message -XPUT -d value="Hello etcd" | json_pp
{
   "action" : "set",
   "node" : {
      "modifiedIndex" : 9,
      "key" : "/message",
      "createdIndex" : 9,
      "value" : "Hello etcd"
   },
   "prevNode" : {
      "value" : "Hello ok world",
      "createdIndex" : 8,
      "key" : "/message",
      "modifiedIndex" : 8
   }
}
}}}
'''prevNode'''를 주목하자. '''node'''와 동일한 포멧으로, 변경되기 이전 값을 보여준다.

=== Delete key ===
{{{#!plain
$ curl -L http://localhost:4444/v2/keys/message -XDELETE | json_pp 
{
   "node" : {
      "createdIndex" : 9,
      "modifiedIndex" : 10,
      "key" : "/message"
   },
   "action" : "delete",
   "prevNode" : {
      "modifiedIndex" : 9,
      "key" : "/message",
      "createdIndex" : 9,
      "value" : "Hello etcd"
   }
}
}}}
=== Key 만료기간 설정 ===
초 단위로 키에 대한 만료기간을 설정할 수 있다.
{{{#!plain
# curl -L http://localhost:4444/v2/keys/foo -XPUT -d value=bar -d ttl=5
{
   "node" : {
      "key" : "/foo",
      "modifiedIndex" : 13,
      "expiration" : "2015-05-22T09:00:00.145871124Z",
      "createdIndex" : 13,
      "value" : "bar",
      "ttl" : 5
   },
   "action" : "set"
}
}}}
응답에 새로운 두 개의 필드가 보인다.
  1. expiration : 키가 만료되는 시간. 키를 만든 지금시간 + ttl 이다.  
  1. ttl : 키의 유효 시간 
Key에 대한 만료일은 클러스터 리더만이 설정할 수 있다. 따라서 클러스터로의 연결이 끊긴다면, 키는 (rejoin 시점까지)계속 남아있게 된다.

TTL이 지난 후에는 키가 지워지고, 이때 요청을 하면 에러 코드 100을 반환한다.
{{{#!plain
{
   "index" : 18,
   "cause" : "/foo",
   "errorCode" : 100,
   "message" : "Key not found"
}
}}}
Key를 업데이트 할 경우 TTL은 사라진다.
{{{#!plain
{
   "action" : "set",
   "node" : {
      "value" : "150",
      "key" : "/foo",
      "modifiedIndex" : 25,
      "createdIndex" : 25
   },
   "prevNode" : {
      "createdIndex" : 24,
      "ttl" : 3589,
      "modifiedIndex" : 24,
      "key" : "/foo",
      "expiration" : "2015-05-22T13:15:50.328425279Z",
      "value" : "3600"
   }
}
}}}
=== 이벤트 기다리기 ===
키의 값이 변할 경우 알람을 받을 수 있다. 만약 모든 자식키들에 대한 알람을 받고 싶다면 '''recursive=true'''를 설정하면 된다. long polling으로 기다린다.
{{{#!plain
# curl -L http://localhost:4444/v2/keys/foo?wait=true
}}}
이제 '''/foo''' 키의 값이 변할 때까지 기다린다. /foo 값이 변경되면, 기다리던 녀석은 값을 출력하고 리턴한다. 
{{{#!plain
{
   "node" : {
      "modifiedIndex" : 27,
      "key" : "/foo",
      "createdIndex" : 27,
      "value" : "150"
   },
   "prevNode" : {
      "key" : "/foo",
      "createdIndex" : 26,
      "modifiedIndex" : 26,
      "value" : "1234"
   },
   "action" : "set"
}
}}}
HTTP long polling로 기다리기 때문에, 알람을 받으면 즉시 종료해 버린다. Key를 계속 체크하고 싶다면, 다시 wait를 호출해야 한다. wait를 재 호출하는 약간의 간격에 값이 변경될 수도 있으므로, etcd index로 기다리는 포인트를 설정해줘야 한다.
{{{#!plain
curl -L 'http://127.0.0.1:4001/v2/keys/foo?wait=true&waitIndex=27'
}}}
27부터 기다리는 것으로 설정했다. 이 경우 위 예제와 동일한 값을 반환한다. 실제 환경에서는 28에서 기다리면 되겠다. 

=== Automically Creating in-order keys ===
'''POST'''로 key(디렉토리)를 만들 때, 이름에 증가 값을 설정할 수 있다. 이것은 queue등의 구현에 유용하게 사용할 수 있다.
{{{#!plain
{
    "node" : {
        "modifiedIndex" : 32,
        "value" : "Job1",
        "createdIndex" : 32,
        "key" : "/queue/32"
    },
    "action" : "create"
}
}}}
"sorted" 매개변수를 이용해서 정렬할 수 있다.
{{{#!plain
{
   "node" : {
      "modifiedIndex" : 32,
      "dir" : true,
      "nodes" : [
         {
            "createdIndex" : 32,
            "key" : "/queue/32",
            "modifiedIndex" : 32,
            "value" : "Job1"
         },
         {
            "value" : "Job2",
            "modifiedIndex" : 33,
            "key" : "/queue/33",
            "createdIndex" : 33
         },
         {
            "key" : "/queue/34",
            "createdIndex" : 34,
            "value" : "Job3",
            "modifiedIndex" : 34
         }
      ],
      "createdIndex" : 32,
      "key" : "/queue"
   },
   "action" : "get"
}
}}}

=== 디렉토리에 TTL 설정하기 ===
etcd에서 키는 디렉토리 형식으로 나타낼 수 있다. 그리고 디렉토리에 대해서 TTL을 설정할 수 있다. 
{{{#!plain
# curl -L http://localhost:4444/v2/keys/dir -XPUT -d ttl=30 -d dir=true
{
    "action" : "set",
    "node" : {
        "key" : "/dir",
        "dir" : true,
        "ttl" : 30,
        "expiration" : "2015-05-23T00:12:53.236156415Z",
        "createdIndex" : 39,
        "modifiedIndex" : 39
    }
}
}}}
존재하는 key에 대해서 ttl을 적용할 경우 에러를 반환한다. '''prevExist=true'''를 이용해서 존재하는 key에 대해서 ttl을 재설정 할 수 있다. 
{{{#!plain
#  curl -L http://localhost:4444/v2/keys/queue -XPUT -d ttl=30 -d dir=true -d prevExist=true
{
   "prevNode" : {
      "dir" : true,
      "key" : "/queue",
      "createdIndex" : 32,
      "modifiedIndex" : 32
   },
   "node" : {
      "key" : "/queue",
      "ttl" : 30,
      "dir" : true,
      "createdIndex" : 32,
      "expiration" : "2015-05-23T00:17:29.061195706Z",
      "modifiedIndex" : 45
   },
   "action" : "update"
}
}}}
이미 ttl이 설정돼 있다면, ttl 값이 업데이트 된다. ttl이 지난 후에는 key의 하위디렉토리 key들까지 모두 삭제된다. 

=== Atomic Compare and Swap ===
etcd는 클러스트에 대한 코디네이터(coordination)서비스를 제공한다. etcd의 CAS(CompareandSwap) 를 이용해서 분산잠금 서비스를 이용할 수 있다.

클라이언트가 어떤 요청을 할 경우 아래의 상태들을 검사 한 후, 요청을 수행할지 에러를 리턴할지를 결정한다.
  * prevValue : 키의 이전 값과 비교한다. 
  * prevIndex : 키의 이전 '''modified Index'''과 비교 한다.
  * prevExist : 이전 키가 존재하는지 검사한다. 마약 '''prevExist'''가 true라면 '''update'''를 수행한다. prevExist가 '''false'''라면 '''create'''를 수행한다.

테스트를 위해서 '''foo=one'''을 만들었다.
{{{#!plain
# curl -L http://localhost:4444/v2/keys/foo -XPUT -d value=one
}}}
만들어진 key에 대해서 '''prevExist=false'''로 업데이트를 요청해보자.
{{{#!plain
# curl -L 'http://localhost:4444/v2/keys/foo?prevExist=false' -XPUT -d value=three
{
    "index" : 61,
    "cause" : "/foo",
    "message" : "Key already exists",
    "errorCode" : 105
}
}}}
/foo 키가 이미 존재하고 있으므로 에러를 반환한다.

'''prevValue'''를 이용한 예제다.
{{{#!plain
# curl -L http://localhost:4444/v2/keys/foo?prevValue=two -XPUT -d value=three
{
    "cause" : "[two != one]",
    "index" : 61,
    "errorCode" : 101,
    "message" : "Compare failed"
}
}}}
prevValue에 '''two'''가 없기 때문에 에러가 발생한다. 

prevValue를 one으로 해서 다시 요청해보자. 
{{{#!plain
# curl -L http://localhost:4444/v2/keys/foo?prevValue=one -XPUT -d value=two
{
    "action" : "compareAndSwap",
    "prevNode" : {
        "createdIndex" : 60,
        "modifiedIndex" : 60,
        "key" : "/foo",
        "value" : "one"
    },
    "node" : {
        "key" : "/foo",
        "value" : "two",
        "createdIndex" : 60,
        "modifiedIndex" : 62
    }
}
}}}
prevValue가 일치해서 업데이트에 성공했다.

=== Automic Compare-and-Delete ===
Atomic CAS와 비슷하다. 이전 상태와 비교해서 삭제여부를 결정한다. 검사할 수 있는 상태값은 아래와 같다.
  1. '''prevValue''' : 이전 값
  1. '''prevIndex''' : 이전 modifiedIndex를 비교한다.
테스트를 위해서 키를 하나 만들었다.
{{{#!plain
# curl -L http://localhost:4444/v2/keys/foo -XPUT -d value=one
}}}
이제 '''CompareAndDelete'''명령을 수행하자. 이전 값이 "two"일 경우 삭제를 요청했다.
{{{#!plain
# curl -L http://localhost:4444/v2/keys/foo?prevValue=two -XDELETE
{
    "errorCode" : 101,
    "cause" : "[two != one]",
    "message" : "Compare failed",
    "index" : 66
}
}}}
'''preIndex'''값이 일치하지 않아서 삭제 실패했다.

제대로 지워보자.
{{{#!plain
# curl -L http://localhost:4444/v2/keys/foo?prevValue=one -XDELETE 
{
    "action" : "compareAndDelete",
    "node" : {
        "modifiedIndex" : 67,
        "createdIndex" : 66,
        "key" : "/foo"
    },
    "prevNode" : {
        "modifiedIndex" : 66,
        "createdIndex" : 66,
        "key" : "/foo",
        "value" : "one"
    }
}
}}}

=== 디렉토리 만들기 ===
아래와 같이 key를 만들어 보자.
{{{#!plain
# curl -L http://localhost:4444/v2/keys/dir/one -XPUT
}}}
dir의 속성이 디렉토리임을 확인할 수 있다.
{{{#!plain
# curl -L http://localhost:4444/v2/keys/dir
{
   "action" : "get",
   "node" : {
      "modifiedIndex" : 75,
      "createdIndex" : 75,
      "dir" : true,
      "key" : "/dir"
      "nodes" : [
         {
            "modifiedIndex" : 75,
            "value" : "",
            "createdIndex" : 75,
            "key" : "/dir/one"
         }
      ],
   }
}
}}}
만약 디렉토리만 만들기를 원한다면, '''dir=true''' 매개변수를 설정해야 한다. 그렇지 않으면 일반 key가 만들어진다.
{{{#!plain
# curl -L http://localhost:4444/v2/keys/mydir -XPUT -d dir=true
{
   "action" : "set",
   "node" : {
      "modifiedIndex" : 76,
      "key" : "/mydir",
      "createdIndex" : 76,
      "dir" : true
   }
}
}}}

=== 디렉토리 목록 ===
디렉토리 이름 끝에 '''/'''을 추가해서 GET 요청을 하면, 하위 디렉토리의 목록을 보여준다. 루트 디렉토리의 목록을 확인해 보자.
{{{#!plain
# curl -L http://localhost:4444/v2/keys/ 
{
   "node" : {
      "key" : "/",
      "dir" : true,
      "nodes" : [
         {
            "key" : "/dir",
            "dir" : true,
            "createdIndex" : 75,
            "modifiedIndex" : 75
         },
         {
            "key" : "/mydir",
            "createdIndex" : 76,
            "modifiedIndex" : 76,
            "dir" : true
         },
         {
            "createdIndex" : 74,
            "dir" : true,
            "modifiedIndex" : 74,
            "key" : "/foodir"
         }
      ]
   },
   "action" : "get"
}
}}}

=== 디렉토리 삭제 ===
'''/mydir'''을 지워보자.
{{{#!plain
# curl -L 'http://localhost:4444/v2/keys/mydir?dir=true' -XDELETE 
{
   "cause" : "/mydir",
   "message" : "Directory not empty",
   "index" : 77,
   "errorCode" : 108
}
}}}
디렉토리를 비우지 않아서 지울 수 없다고 한다. 그냥 지우고 싶다면, '''recursive=true'''를 이용하면 된다. '''rm -rf'''와 비슷한 효과이니 주의 해야 하겠다.
{{{#!plain
# curl -L 'http://localhost:4444/v2/keys/mydir?recursive=true' -XDELETE 
{
   "action" : "delete",
   "prevNode" : {
      "modifiedIndex" : 76,
      "dir" : true,
      "createdIndex" : 76,
      "key" : "/mydir"
   },
   "node" : {
      "key" : "/mydir",
      "createdIndex" : 76,
      "dir" : true,
      "modifiedIndex" : 78
   }
}
yundream@@yundream:~$ kx 
}}}

=== hidden 노드 만들기 ===
디렉토리나 key앞에 "_"를 붙이면, hidden 노드를 만들 수 있다. hidden 노드는 목록에 나오지 않는다. 

히든 노드 '''/_message'''를 만들었다.
{{{#!plain
# curl -L http://localhost:4444/v2/keys/_message -XPUT -d value="Hello hidden world" 
{
   "action" : "set",
   "node" : {
      "key" : "/_message",
      "value" : "Hello hidden world",
      "createdIndex" : 83,
      "modifiedIndex" : 83
   }
}
}}}
루트 디렉토리의 목록을 확인해 보자.
{{{#!plain
# curl -L http://localhost:4444/v2/keys/ | json_pp  
100   274    0   274    0     0   202k      0 --:--:-- --:--:-- --:--:--  267k
{
   "node" : {
      "key" : "/",
      "nodes" : [
         {
            "dir" : true,
            "key" : "/foodir",
            "createdIndex" : 74,
            "modifiedIndex" : 74
         },
         {
            "dir" : true,
            "key" : "/dir",
            "modifiedIndex" : 75,
            "createdIndex" : 75
         }
      ],
      "dir" : true
   },
   "action" : "get"
}
}}}

=== 파일로 부터 키를 설정하기 ===
파일로 부터 키를 설정할 수도 있다.
{{{#!plain
# cat test.json
{"data":"news","id":12000}

# curl -L http://localhost:4444/v2/keys/afile -XPUT --data-urlencode value@@test.json
{
   "action" : "set",
   "node" : {
      "key" : "/afile",
      "value" : "{\"data\":\"news\",\"id\":12000}\n",
      "createdIndex" : 84,
      "modifiedIndex" : 84
   }
}
}}}

=== 통계 ===

=== 클러스터 설정 ===
{{{#!plain
$ curl -L http://localhost:7777/v2/admin/config -XPUT -d '{"activeSize":3, "removeDelay":1800,"syncInterval":5}'
{
    "activeSize":3,
    "removeDelay":1800,
    "syncInterval":5
}
}}}
  * activeSize : 클러스터에 참여 할 수 있는 peer의 총 갯수 
  * removeDelay : 설정된 시간동안 peer가 응답하지 않을 경우 제거한다.  
=== 클러스터 설정 읽기 ===
{{{#!plain
$ curl -L http://localhost:7777/v2/admin/config
{
   "syncInterval" : 5,
   "activeSize" : 3,
   "removeDelay" : 1800
}
}}}

=== Remove Machines ===
@


1.9
log
@119.64.102.68;;yundream;;
@
text
@d4 1
d6 3
a8 1
KVM 위에 CoreOS를 실행했다. 실행 방법은 [wiki:man/12/docker/coreos/quickinstall Coreos quick install] 문서를 참고 한다. etcd는 api와 admin을 위한 두 개의 포트(4001, 7001)을 제공한다. 그래서 4001과 7001 두개의 포트를 포워딩 하기로 했다. 이를 위해서 '''coreos_production_qemu.sh'''스크립트를 수정했다. 
@


1.8
log
@119.64.102.68;;yundream;;
@
text
@d594 11
@


1.7
log
@119.64.102.68;;yundream;;
@
text
@d5 1
a5 1
KVM 위에 CoreOS를 실행했다. 실행 방법은 [wiki:man/12/docker/coreos/quickinstall Coreos quick install] 문서를 참고 한다. etcd를 위한 4001 포트를 추가적으로 포워딩해야 한다. 그래서 '''coreos_production_qemu.sh'''스크립트를 수정했다. 
d10 1
d21 3
d26 8
a33 5
    -name "$VM_NAME" \
    -m ${VM_MEMORY} \
    -net nic,vlan=0,model=virtio \
    -net user,vlan=0,hostfwd=tcp::"${SSH_PORT}"-:22,hostfwd=tcp::"${ETCD_PORT}"-:4001,hostname="${VM_NAME}" \
    "$@@"
d36 2
a37 1
localhost:4444를 4001로 포워딩해서 테스트를 진행한다.
d584 10
@


1.6
log
@119.64.102.68;;yundream;;
@
text
@d2 1
a2 1
[[TaboeOfContents]]
@


1.5
log
@119.64.102.68;;yundream;;
@
text
@d3 1
a3 1
== etcd API ==
d40 2
d43 5
a47 1
=== etcd 버전 가져오기 ===
d54 1
a54 7
=== Key Space Operations ===
etcd의 가장 중요한 API는 계층적인 키 공간의 관리다. 키 공간(key space)는 디렉토리 형식으로 구성되며, "nodes"에서 관리한다. 

=== 디렉토리 ===
etcd는 '''key'''와 '''디렉토리(directory)''' 두 가지 타입의 저장소를 가지고 있다. key는 일반 파일시스템의 파일, 디렉토리는 디렉토리에 대응된다. 디렉토리밑에는 새로운 key 혹은 디렉토리를 추가할 수 있다. 
=== API ===
==== 키와 값을 설정하기 ====
d74 1
a74 1
==== 응답 헤더 ====
d92 1
a92 1
==== Key로 부터 값 읽기 ====
d107 1
a107 1
==== Key의 값 변경 ====
d129 1
a129 1
==== Delete key ====
d147 1
a147 1
==== Key 만료기간 설정 ====
d197 1
a197 1
==== 이벤트 기다리기 ====
d226 1
a226 1
==== Automically Creating in-order keys ====
d272 1
a272 1
==== 디렉토리에 TTL 설정하기 ====
d311 1
a311 1
==== Atomic Compare and Swap ====
d368 1
a368 1
==== Automic Compare-and-Delete ====
d407 1
a407 1
==== 디렉토리 만들기 ====
d447 1
a447 1
==== 디렉토리 목록 ====
d480 1
a480 1
==== 디렉토리 삭제 ====
d512 1
a512 1
==== hidden 노드 만들기 ====
d516 60
@


1.4
log
@119.64.102.68;;yundream;;
@
text
@d50 4
d371 145
@


1.3
log
@119.64.102.68;;yundream;;
@
text
@d308 1
d310 57
@


1.2
log
@119.64.102.68;;yundream;;
@
text
@d193 1
a193 1
=== 이벤트 기다리기 ===
d198 111
a308 1
이제 '''/foo''' 키의 값이 변할 때까지 기다린다. /foo에  
@


1.1
log
@119.64.102.68;;yundream;;
@
text
@d2 1
a2 6

== etcd ==
etcd는 오픈소스 기반의 분산 key&value 저장 소프트웨어로 CoreOS 클러스터에서 서비스의 발견과 설정정보의 공유를 서비스 한다. Zookeeper, Consul 등과 비슷한 일을 하는 녀석이다. etcd는 클러스트의 각 머신에서 실행이 되며, 네트워크 파티션에서 선거를 통해서 마스터를 뽑아서, 정보를 조율한다.  

etcd는 HTTP 기반의 API를 제공한다. 여기에서는 '''etcdctl'''과 '''curl'''을 이용해서 데이터를 처리하는 법을 테스트 한다.

d64 135
@
