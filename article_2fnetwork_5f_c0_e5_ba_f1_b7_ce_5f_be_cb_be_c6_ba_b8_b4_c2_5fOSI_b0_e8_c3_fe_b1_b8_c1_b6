#title network 장비로 알아보는 OSI계층구조
[wiki:docbook_network_장비로_알아보는_OSI계층구조 Docbook 원문]

{{{#!html
<HTML
><HEAD
><TITLE
>network 장비로 알아보는 OSI계층구조</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.59"><META
http-equiv="Content-Type"
content="text/html; charset=euc-kr"></HEAD
><BODY
CLASS="ARTICLE"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="ARTICLE"
><DIV
CLASS="TITLEPAGE"
><H1
CLASS="TITLE"
><A
NAME="AEN2"
>network 장비로 알아보는 OSI계층구조</A
></H1
><H3
CLASS="AUTHOR"
><A
NAME="AEN4"
>윤 상배</A
></H3
><DIV
CLASS="AFFILIATION"
><DIV
CLASS="ADDRESS"
><P
CLASS="ADDRESS"
>				dreamyun@yahoo.co.kr<br>
			</P
></DIV
></DIV
><DIV
CLASS="REVHISTORY"
><TABLE
WIDTH="100%"
BORDER="0"
><TR
><TH
ALIGN="LEFT"
VALIGN="TOP"
COLSPAN="3"
><B
>&#44368;&#51221; &#44284;&#51221;</B
></TH
></TR
><TR
><TD
ALIGN="LEFT"
>&#44368;&#51221; 0.8</TD
><TD
ALIGN="LEFT"
>2003년 4월 14일 21시</TD
><TD
ALIGN="LEFT"
></TD
></TR
><TR
><TD
ALIGN="LEFT"
COLSPAN="3"
>최초 문서작성</TD
></TR
></TABLE
></DIV
><HR></DIV
><DIV
CLASS="TOC"
><DL
><DT
><B
>&#52264;&#47168;</B
></DT
><DT
>1&#51208;. <A
HREF="#AEN14"
>소개</A
></DT
><DT
>2&#51208;. <A
HREF="#AEN23"
>리피터(repeater)</A
></DT
><DT
>3&#51208;. <A
HREF="#AEN35"
>허브(hub)</A
></DT
><DD
><DL
><DT
>3.1&#51208;. <A
HREF="#AEN40"
>더미 허브(dumy hub)</A
></DT
><DT
>3.2&#51208;. <A
HREF="#AEN50"
>스위칭 허브(switching hub)</A
></DT
></DL
></DD
><DT
>4&#51208;. <A
HREF="#AEN63"
>브릿지(bridge)</A
></DT
><DT
>5&#51208;. <A
HREF="#AEN109"
>라우터</A
></DT
></DL
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN14"
>1&#51208;. 소개</A
></H1
><P
>		우리주변엔 많은 네트워크장비가 있다. 이들 장비는 매일매일 접하는 것에서 
		부터 지금은 거의 사용하지 않는 장비들까지 다양하게 존재한다.      
	</P
><P
>		아마도 당신은 네트워크상에서 장비개발 혹은 소프트웨어의 개발을 위해서 
		OSI7참조계층을 따른다는 것을 알고 있을것이다. 이번 글에서는 몇가지 
		중요한 네트워크장비들에 대한 개요와, 이들장비가 OSI의 각 계층과 
		어떠한 연관성을 가지면서 작동하는지에 대해서 알아보도록 하겠다.  
	</P
><P
>		물론 이글을 제대로 이해하기 위해서는 최소한 아래의 그림정도는 
		이해하고 있어야 할것이다.  
		<DIV
CLASS="FIGURE"
><A
NAME="AEN19"
></A
><P
><B
>&#44536;&#47548; 1. OSI7계층</B
></P
><P
><IMG
SRC="http://www.joinc.co.kr/albums/album01/aaj.gif"></P
></DIV
>
		OSI7계층에 대한 자세한 설명은 이 사이트의 다른 문서들을 참고하기 
		바란다. 위의 그림에서 가장 밑바닥이 7로 되어있어서 혼동될수 
		있는데 가장 밑층이 계층 1(layer 1)이 된다.  
	</P
><P
>		보통의 네트워크 장비들은 하드웨어장비들로 소프트웨어와는 
		별상관없음으로 위의 7계층중에서 4계층인 Transport계층까지를 
		다루게 된다. 이 글역시 OSI7계층중 4계층까지를 다루게 될것이다.      
	</P
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN23"
>2&#51208;. 리피터(repeater)</A
></H1
><P
>		LAN영역에서 다른 LAN영역을 서로 연결하기 위한 목적으로 사용된다. 
	</P
><P
>		지금은 네트워크상에서 오고가는 데이타가 많아서, 어떻게 하면 
		하나의 LAN영역을 좀더 효율적으로 나눌수 있느냐가 중요한 과제이지만 
		과거에는 어떻게 하면 분리되어있는 LAN영역을 하나의 LAN영역으로 
		통합할수 있느냐가 주된 과제이자 관심사였다.  		 
	</P
><P
>		과거에는 부서가 층이 나늬어져 있고, 각각의 LAN세그먼트들로 
		이루어져 있을경우 원할한 데이타 소통을 위해서 2개로 나뉘어진
		LAN세그먼트들을 하나로 묶기위한 작업이 자주 발생했었다. 
		그러나 지금은 같은 층의 같은 부서에서 조차도 세그먼트를 나누려고 하는 
		경우가 대부분 이다. 
	</P
><P
>		이처럼 2개의 LAN세그먼트를 하나의 LAN세그먼트로 통합하고자 할때 
		발생하는 문제는 데이타가 전달되어야 하는 망이 길어진다는 점이다.  
		망을 가로지르면서 데이타를 전송하는 매체는 전자기신호가 된다. 
		이 전자기 신호는 매체(구리선)을 타고 이동하면서 에너지를 잃고 
		신호가 감쇠되게 된다. 혹은 여러가지 잡음이 생겨날수도 있다. 
		이러한 신호감쇠와 잡음은 당연히 통과하고자하는 매체의 길이가 길어 
		질수록 심하게 일어나게 된다. 
	</P
><P
>		그럼으로 2개의 LAN세그먼트를 연결하고자 할때는 이러한 신호감쇠와 
		잡음을 처리하기 위한 장치를 필요로 하게 된다. 이러한 일을 해주는 
		네트워크 세그먼트간 연결장치가 바로 <B
CLASS="EMPHASIS"
>리피터</B
>이다.   
	</P
><P
>		리피터는 OSI계층과는 아무런 상관이 없다. OSI계층에 포함된 어떤 
		프로토콜을 다루는 장치가 아닌 단지 신호를 증폭하고 잡음을 없애는 
		장치이기 때문이다.  
		<DIV
CLASS="TIP"
><BLOCKQUOTE
CLASS="TIP"
><P
><B
>&#51089;&#51008; &#51221;&#48372;: </B
>				잡음을 없애지 않고 단순히 증폭만 하는걸 
				앰플리파이어(Amplifier) 혹은 증폭기라고 한다. 
				오디오기기에도 널리 쓰인다. 보통 오디오기기에서 
				앰프를 써서 사운드를 증폭시킬경우 잡음까지 함께 증폭되는걸 
				경험해보았을것이다. 하긴 요즘엔 잡음제거 기능까지 있는 
				앰플리파이어가 사용되기도 한다.  
			</P
></BLOCKQUOTE
></DIV
>
	</P
><P
>		지금은 거의 사용되어지지 않는 장비다.
	</P
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN35"
>3&#51208;. 허브(hub)</A
></H1
><P
>		hub의 사전적인 뜻은 "중심","중추"이다. 흔히 볼수 있는 자전거 바퀴살이 
		모인 중심부분을 허브라고 한다. 자전거에서 허브가 하는일은 바퀴살에 
		의해서 전달되는 힘을 중심으로 모으고 이를 다시 바퀴살에 골고루 
		분산시켜서 힘을 균일하게 받도록 하는 일이다.    
	</P
><P
>		우리가 관심을 가지고 있는 네트웍장비로써의 허브역시 자전거에서의 
		허브와 같은일을 한다. 자전거에서의 허브가 여러개의 바퀴살에 힘을 
		균등하게 나누기 위한 
		게 주 목적이였다면, 네트웍장비에서의 허브는 통신을 위해 물려있는 
		여러개의 호스트가 모두 통신을 할수 있도록 통신의 중심축이 되는게 
		주목적이다. 	 
	</P
><P
>		보통 하나의 지역 네트워크를 여러개의 호스트가 공유해서 
		사용하기 위한목적으로(여러개의 세그먼트로 분리하기위한) 널리 쓰이고 
		있다. 허브는 크게 2가지 종류가 있다.  
	</P
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN40"
>3.1&#51208;. 더미 허브(dumy hub)</A
></H2
><P
>			<DIV
CLASS="FIGURE"
><A
NAME="AEN43"
></A
><P
><B
>&#44536;&#47548; 2. 단순 무식한 더미 허브</B
></P
><P
><IMG
SRC="http://www.joinc.co.kr/albums/album01/acv.gif"></P
></DIV
>
			허브 본래의 목적에 충실한 허브이다. 위의 그림을 보면서 설명을 
			하겠다. A호스트가 B호스트에게 메시지를 보내고자 할때, 메시지는 
			허브로 전달되고, 허브는 B, C, D 각 호스트 모두에게 메시지를 전달 
			한다. 데이가 자신에게 전달된건지 그렇지 않은건지는 B, C, D 각 
			호스트의 몫이다. 이들 호스트는 받은 패킷이 자신에게 보내어진 
			패킷인지를 판단하게 된다. 만일 자신에게 보내어진 패킷이 아니라면 
			이 패킷은 버려지게 되고, 그렇지 않을경우 최종적으로 애플리케이션 
			계층까지 전달되게 될것이다. 
		</P
><P
>			더미허브는 구현이 간단하고 쉽게 사용할수 있고, 때문에 가격이 싸다는 
			장점을 가지고 있지만, 2가지 정도의 단점을 가진다. 
		</P
><P
>	
			첫번째 문제가 통신보안 문제다. 모든 호스트로 패키지가 전달된다는게 
			문제인데, 때문에 같은 LAN에 묶여있는 어떤 호스트의 패킷이라도 
			도청가능해지기 때문이다.  
		</P
><P
>			두번째 문제는 통신효율의 문제이다. 더미 허브의 경우 모든 호스트를 
			단일 세그먼트로 묶어버린다. 네트워크쪽을 공부해봤다면 알겠지만, 
			하나의 세그먼트 상에서는 오직 한번에 하나의 호스트만 데이타를 
			보낼수 있다. 이유는 동시에 2개의 호스트가 어떤 데이타를 
			보내게 될경우 충돌(collision)이 발생하기 때문이다. 이것은 
			노래방에서 노래를 부르기 위해서 마이크를 돌리는것과 유사하다. 
			마이크는 한번에 한명만이 가질수 있고, 때문에 사람이 많으면 많아질 
			수록 노래부르기는 점점힘들어 질것이다. 마찬가지로 호스트가 
			많으면 많아질수록 그리고 보내고자 하는 데이타가 많아 질수록 
			LAN에서이 효율은 극도로 떨어지게 될것이다.  
		</P
><P
>			리피터와 마찬가지로 단지 패킷을 복사해서 전달하는 일만을 
			하는 장치임으로 OSI계층과는 무관하게 작동한다. 
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN50"
>3.2&#51208;. 스위칭 허브(switching hub)</A
></H2
><P
>			위에서 설명했듯이 더미 허브의 가장큰 문제는 LAN을 하나의 
			세그먼트로 묶어버린다는 점이다. 
		</P
><P
>			이 문제를 해결한게 <B
CLASS="EMPHASIS"
>스위칭 허브</B
>이다. 
			스위칭 허브는 세그먼트를 여러개로 나누어준다. 
			A호스트에서 B호스트로 패킷을 보내려고 할때, 더미허브는 
			모든 호스트에 패킷을 복사해서 보냈지만, 스위칭 허브는 
			B호스트에게만 패킷을 보낸다.  
			<DIV
CLASS="FIGURE"
><A
NAME="AEN55"
></A
><P
><B
>&#44536;&#47548; 3. 세그먼트를 나누어서 관리하는 스위칭 허브</B
></P
><P
><IMG
SRC="http://www.joinc.co.kr/albums/album01/acw.gif"></P
></DIV
>
			<B
CLASS="EMPHASIS"
>스위칭 허브</B
>라는 이름처럼 이 장치는 
			패킷을 해당 세그먼트로 스위칭 시켜준다. 
		</P
><P
>			그런데 해당 호스트로 패킷을 스위칭하기 위해서는 패킷이 
			어디로 향하고 있는지에 대한 정보를 허브가 알고 있어야만 할것이다. 
			스위칭 허브는 MAC주소를 이용해서 어느 세그먼트로 패킷을 
			보내야할지를 결정할수 있다.   
			<DIV
CLASS="TIP"
><BLOCKQUOTE
CLASS="TIP"
><P
><B
>&#51089;&#51008; &#51221;&#48372;: </B
>					Media Access Control의 줄임말이다. 이더넷장치에 
					할당되는 유일한 번호이다. 6byte(48)비트의 크기를 가진다. 
					MAC 어드레스는 OSI 2계층에서 사용된다. 
				</P
><P
>					MAC주소는 유일해야 하기 때문에 IEEE에서 어드레스 할당을 
					관리하고 있다.  
				</P
></BLOCKQUOTE
></DIV
>
			MAC어드레스는 데이타링크 계층(Layer 2)에서 사용되어진다. 이런이유로 
			L2 스위치라고 부르기도 한다. L3, L4스위칭 허브역시 존재한다. 위로 
			올라갈수록 로드밸런싱등의 부가적인 기능을 제공해주긴 하지만 
			그만큼 가격을 지불해야 한다.  
		</P
></DIV
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN63"
>4&#51208;. 브릿지(bridge)</A
></H1
><P
>		브릿지의 뜻을 찾아보면, "다리", "교량", "이어주는" 이라는 뜻을 가진다. 
		때문에 보통 브릿지라함은 2개의 네트워크영역을 묶어주는것으로 생각할수 
		도 있는데, (굳이 틀렷다고 할수없긴 하지만)
		이것은 잘못된 생각이다. 브릿지는 하나의 네트워크 세그먼트를 
		2개이상으로 <B
CLASS="EMPHASIS"
>나누어서</B
>관리하기 위해서 만들어진 
		장비이다. 하나로 통합해서 관리하기 위한 허브와 비교될 수 있다.
	</P
><P
>		하나의 네트워크영역을 2개이상으로 나누어야할 필요는 자주 발생한다. 
		"가"라는 연구부서가 있다고 가정해 보자. 이 연구부서의 지역네트워크는 
		A에서 F, 6대의 호스트로 이루어져 있다. 이중 A, B, C 호스트는 내부 
		연구용호스트로 다량의 패킷을 발생시키는 매우 시끄러운 호스트들이다. 
		같은 네트워크 세그먼트에서 한쪽이 시끄러우면 이것은 전체 지역네트워크에 
		영향을 미친다. 그럼으로 시끄러운 호스트와 그렇지 않은 호스트를 
		분리 시켜야할 필요가 있다. 
	</P
><P
>		간단히 생각해서 방하나에 시끄러운 
		팀과 그렇지 않은 팀을 섞어 놓으면, 서로 방해가 될수 있음으로 
		이들 두팀을 분리하기 위해서 칸막이를 치는것과 같은 거라고 생각하면 
		된다. 
	</P
><P
>		브릿지가 바로 이 칸막이의 역활을 한다. 브릿지를 이용해서 
		하나의 지역 네트워크를 시끄러운 A,B,C호스트와 그렇지 않은 
		D,E,F 호스트가 서로방해 받지 않고 사용할수 있는 2개의 세그먼트로 
		분리시킬수 있다. 아래의 그림은 브릿지를 이용해서 2개의 네트워크 
		세그먼트로 분리된 "가"연구소의 네트워크 환경이다.   
		<DIV
CLASS="FIGURE"
><A
NAME="AEN70"
></A
><P
><B
>&#44536;&#47548; 4. 브릿지를 통해서 나누어진 지역네트워크</B
></P
><P
><IMG
SRC="http://www.joinc.co.kr/albums/album01/acx.gif"></P
></DIV
>	
	</P
><P
>		작동방식은 간단하다. A에서 B혹은 C로 가는 패킷은 D,E,F에는 전달되지 
		않고, 브릿지를 통해서 B와 C로만 패킷이 전달되도록 하는 것이다. 
		이러한 작동을 위해서 브릿지는 이더넷장치에 유일하게 부여되어 있는 
		MAC어드레스를 이용한다.  
	</P
><P
>		브릿지는 각 MAC주소를 이용해서 브릿지테이블을 작성한다. 이 테이블에는 			각 목적지 MAC이 어느 세그먼트에 포함되어 있는지에 대한 정보를 포함하고 
		있다. "가" 연구부서에 대한 브릿지 테이블은 다음과 같은 형식으로 
		작성될 수 있을것이다.
		<DIV
CLASS="TABLE"
><A
NAME="AEN75"
></A
><P
><B
>&#54364; 1. Bridging Table</B
></P
><TABLE
BORDER="1"
CLASS="CALSTABLE"
><TBODY
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>호스트 이름</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>호스트 MAC 주소</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>네트워크 세그먼트</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>A</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>11</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>1</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>B</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>28</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>1</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>C</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>17</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>D</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>19</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>2</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>E</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>20</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>2</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>F</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>9</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>2</TD
></TR
></TBODY
></TABLE
></DIV
>
		만약 A호스트에서 C호스트로 어떤 데이타를 보내고자 한다면, 
		이 데이타는 B, C호스트와 브릿지로 전달될것이다. B와 C호스트는 
		받은 패킷을 적당히 처리할것이다(B는 버리고 C는 처리한다).
		브릿지에서는 해당 데이타 패킷의 출발지 MAC주소와 도착지 MAC주소를 
		확인하고 동일한 세그먼트 1로 향하는 패킷임을 알아내게 될것이다.
		브릿지는 이 패킷을 버리게 된다.  
	</P
><P
>		A호스트에서 D호스트로 어떤 데이타를 보내고자 한다면, 
		역시 이데이타는 B, C, 브릿지로 전달될것이다. 브릿지에서는 브릿징 
		테이블을 확인해서 다른 세그먼트 2로 전달되는 패킷이라는걸 알아내고 
		세그먼트2로 패킷을 전달할것이다.   
	</P
><P
>		이런식으로 세그먼트 1의 호스트들끼리 다량의 패킷을 발생시킨다고 
		하더라도 세그먼트 2의 네트워크 환경에 영향을 미치지 않게 된다.   
	</P
><P
>		브릿징 테이블을 만들기 위해서 사용되는 프로토콜은 
		STP(spanning Tree Protocol)로 다중의 브릿지로 구분되어있는 
		네트웍환경에서 효과적으로 네트워크 토폴로지를 구성/변경 할수 있도록 
		도와준다. 주로 중소규모의 네트워크환경에서 사용된다. 
		이 프로토콜은 MAC주소 기반이다. MAC주소를 다루는 OSI레이어는 2계층인 
		데이타 링크계층임으로, 브릿지는 L2기반 장비로 분류할수 있을것이다.  
	</P
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN109"
>5&#51208;. 라우터</A
></H1
><P
>		리피터와 브릿지, 허브가 비교적 근거리에서 네트워크(LAN)를 
		통합하거나 분리하기 
		위해서 사용하는 반면, 라우터는 원거리에서 네트워크간 
		통합을 위해서(네트워크의 네트워크) 사용되는 장비이다.   
	</P
><P
>		특히 라우터는 인터넷 세계에서는 없어서는 안될 중요한 장비로 
		실제 인터넷이 존재가능 하도록 만들어주는 장비이다. 	
	</P
><P
>		라우터를 이용해서 거미줄 처럼 얽혀있는 인터넷상에서 원하는 
		목적지로 데이타를 보낼수 있으며, 원하는 곳의 데이타를 가져올수도 
		있다. 
	</P
><P
>		그렇다면 어떻게 라우터를 통해서 데이타를 목적지까지 보낼수 있는지에 
		대해서 간단히 알아보도록 하겠다. 이 내용은 이미 이 사이트에서 
		몇번 다루어본적이 있음으로 정리하는 마음으로 읽어내려가기 바란다.  
	</P
><P
>		인터넷은 네트워크의 네트워크임으로 결국에는 수많은 라우터들을 
		이용해서 이들 네트워크간을 묶어줘야 할것이다. 그래서 
		우리가 미국의 특정 호스트로 데이타를 보내고자 한다면, 때에 따라서는  			수십개의 라우터를 거쳐야할 경우도 생길것이다. 어쨋든 아주 가까운 
		거리에 있는 호스트를 찾아간다고 하더라도 
		최소한 3-4개 정도의 라우터는 거쳐야 한다.  
	</P
><P
>		각각의 라우터는 들어온 패킷이 주위에 있는 여러대의 라우터중 
		어느 라우터로 패킷을 보내야할런지를 결정할수 있어야만 한다.  
		모든 제대로된 결정을 위해서는 데이타와 정보가 필요하다. 
		라우터의 입장에서 데이타는 패킷에 적혀있는 목적지 주소(IP)이며
		정보는 라우팅 테이블이 된다. 
	</P
><P
>	
		라우팅 테이블은 진정으로 라우터가 라우터로써의 기능을 가능하도록 
		만드는 핵심정보를 가지고 있다. 즉 패키지가 목적지 주소로 올바르게 
		전달되기 위해서는 어느 인터페이스를 통해서 다음 라우터로 전달되어야 
		하는지에 대한 정보를 가지고 있는데 라우팅 테이블이다. 
		<DIV
CLASS="TABLE"
><A
NAME="AEN118"
></A
><P
><B
>&#54364; 2. Bridging Table</B
></P
><TABLE
BORDER="1"
CLASS="CALSTABLE"
><TBODY
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>목적지 주소</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>마스크</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>인터페이스</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>211.109.3.0</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>255.255.255.0</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>eth0</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>211.109.4.0</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>255.255.255.0</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>eth1</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>211.108.0.0</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>255.255.0.0</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>eth2</TD
></TR
></TBODY
></TABLE
></DIV
>
		라우팅 테이블의 구조는 위에서 처럼 간단하다. 목적지IP를 가지는 
		패킷이 어느 인터페이스를 사용하면 되는지에 대한 정보를 가진다. 
		만약 패킷이 들어왔는데, 패킷의 IP헤더에 포함된 목적지 주소가 
		211.109.3.1에서 211.109.3.254 사이의 값을 가진다면  
		라면 라우팅 테이블의 정보에 의해서 인터페이스 eth0으로 
		보내어질 것이다. 
	</P
><P
>		이러한 라우팅 테이블은 RIP이라는 프로토콜을 이용해서 네트워크 
		환경변화에 적응하여 변할수 있도록 되어 있다. 
		RIP을 이용한 라우팅테이블의 동적인 변화에 대해서는
		<A
HREF="http://www.joinc.co.kr/modules.php?name=News&file=article&sid=33"
TARGET="_top"
>TCP/IP 개요(2)</A
>를 참고하기 바란다. 	  
	</P
><P
>		이상으로 라우터는 기본적으로 네트워크 계층(Layer 3)
		장비임을 알수 있을것이다. 
	</P
><P
>		라우터는 소프트웨어만으로 충분히 구현가능하다. 
		리눅스를 이용해서 라우터를 만드는 프로젝트도 있는데, 
		관심있다면 
		<A
HREF="http://linuxrouter.kldp.org/"
TARGET="_top"
>리눅스 라우터 프로젝트</A
>를 
		방문해보기 바란다.
	</P
></DIV
></DIV
></BODY
></HTML
>
}}}
  * [wiki:Site/TCP_IP TCP/IP]
