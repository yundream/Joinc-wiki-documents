#title SNMP 개요
 * [wiki:docbook/SNMP_개요 Docbook 원문]
 * [wiki:Site/SNMP SNMP 위키페이지]

{{{#!html
<HTML
><HEAD
><TITLE
>SNMP</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.59"><META
http-equiv="Content-Type"
content="text/html; charset=euc-kr"></HEAD
><BODY
CLASS="ARTICLE"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="ARTICLE"
><DIV
CLASS="TITLEPAGE"
><H1
CLASS="TITLE"
><A
NAME="AEN2"
>SNMP</A
></H1
><H3
CLASS="AUTHOR"
><A
NAME="AEN4"
>윤 상배</A
></H3
><DIV
CLASS="AFFILIATION"
><DIV
CLASS="ADDRESS"
><P
CLASS="ADDRESS"
>				dreamyun@yahoo.co.kr<br>
			</P
></DIV
></DIV
><DIV
CLASS="REVHISTORY"
><TABLE
WIDTH="100%"
BORDER="0"
><TR
><TH
ALIGN="LEFT"
VALIGN="TOP"
COLSPAN="3"
><B
>&#44368;&#51221; &#44284;&#51221;</B
></TH
></TR
><TR
><TD
ALIGN="LEFT"
>&#44368;&#51221; 0.8</TD
><TD
ALIGN="LEFT"
>2003년 4월 20일 21시</TD
><TD
ALIGN="LEFT"
></TD
></TR
><TR
><TD
ALIGN="LEFT"
COLSPAN="3"
>최초 문서작성</TD
></TR
></TABLE
></DIV
><HR></DIV
><DIV
CLASS="TOC"
><DL
><DT
><B
>&#52264;&#47168;</B
></DT
><DT
>1&#51208;. <A
HREF="#AEN14"
>소개</A
></DT
><DT
>2&#51208;. <A
HREF="#AEN19"
>SNMP개요</A
></DT
><DD
><DL
><DT
>2.1&#51208;. <A
HREF="#AEN21"
>SNMP란 무엇인가</A
></DT
><DT
>2.2&#51208;. <A
HREF="#AEN28"
>SNMP로 할수 있는 것들</A
></DT
><DT
>2.3&#51208;. <A
HREF="#AEN48"
>SNMP를 통한 망의 구성</A
></DT
><DT
>2.4&#51208;. <A
HREF="#AEN55"
>MIB에 대해서</A
></DT
><DT
>2.5&#51208;. <A
HREF="#AEN69"
>SNMP 프로토콜의 동작과 구성</A
></DT
></DL
></DD
><DT
>3&#51208;. <A
HREF="#AEN102"
>SNMP 설치 및 운용</A
></DT
><DD
><DL
><DT
>3.1&#51208;. <A
HREF="#AEN106"
>ucd-snmp 설치</A
></DT
><DT
>3.2&#51208;. <A
HREF="#AEN112"
>SNMP AGENT 실행</A
></DT
><DT
>3.3&#51208;. <A
HREF="#AEN117"
>SNMP MANAGER 테스트</A
></DT
><DD
><DL
><DT
>3.3.1&#51208;. <A
HREF="#AEN119"
>동기적인 데이타 요청 - snmp get, get next</A
></DT
><DT
>3.3.2&#51208;. <A
HREF="#AEN135"
>비동기적인 데이타 요청 - snmp trap</A
></DT
></DL
></DD
></DL
></DD
><DT
>4&#51208;. <A
HREF="#AEN147"
>결론</A
></DT
></DL
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN14"
>1&#51208;. 소개</A
></H1
><P
>		개인적으로 최근들어 SNMP에 관심을 가지게 되었다. 
		(실은 상당히 오래되었지만) 그래서 앞으로 몇부? 에 걸쳐서 
		SNMP관련 강좌를 개설하고자 한다. 강좌는 SNMP개요및 설치운용에서 부터 
		시작해서 프로그래밍을 통해서 SNMP응용 애플리케이션을 제작하고, 
		확장 MIB(뒤에 설명한다)를 작성하는 것 까지를 다룰것이다.  
	</P
><P
>		이번글은 그중 첫번째 글로 SNMP개요와 설치및 운용에 대한 
		글이다. 설치및 운용은 실제 어떻게 작동되는지 눈으로 확인하는 차원의 
		수준에서 이루어질 것이며, 설치되는 snmp애플리케이션의 상세설치와 높은 수준에서의 
		운용에 대해서는 언급하지 않을것이다. 
		이러한 것들은 (필요할경우)해당 snmp애플리케이션의 메뉴얼을 
		참고해서 개인적으로 학습해야만 할것이다. 
	</P
><P
>		여기에서 얻은 지식은 나중에 SNMP애플리케이션을 제작하는 
		밑거름이 될것이다.    
	</P
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN19"
>2&#51208;. SNMP개요</A
></H1
><DIV
CLASS="SECTION"
><H2
CLASS="SECTION"
><A
NAME="AEN21"
>2.1&#51208;. SNMP란 무엇인가</A
></H2
><P
>			SNMP는 Simple Network Management Protocol의 약자이다. 
			해석을 해보자면 간단한 네트워크관리를 위한 규약 인데, 말그대로 SNMP는 
			네트워크관리를 위한 용도로 사용되는 프로토콜이다. 
			가장 앞에 Simple라는 단어가 붙어있는데, 진짜로 간단한 프로토콜인지 
			아닌지는 사람에 따라 약간씩 차이가 있을수 있다. 필자가 보기엔 
			그리 복잡한 프로토콜은 아닌것 같은데, 어떤 사람들은 매우 복잡한 프로토콜 
			이라고 말하는 사람들도 있다. 
		</P
><P
>			그럼 먼저 SNMP가 나타난 배경에 대해서 알아보도록 하겠다. 
			SNMP가 쓰이기 전에 일반적으로 사용되는 네트워크 관리는 ICMP에 의존했었다. 
			ICMP는 Network계층의 프로토콜로써, 운영체제에 관계없이 사용할수 있는 간단한 
			프로토콜이였다. 이 프로토콜을 이용해서 우리는 네트워크로 연결된 
			각각의 호스트가 작동하고 있는지, 작동한다면 어느정도의 응답시간을 가지고 
			작동하는지 등의 간단한 정보를 얻을수 있었으며, 초기에는 이정도로도 
			필요한 네트워크 관리가 가능했었다. ICMP를 이용한 가장 유용한 도구는 
			아마도 ping 프로그램일 것이다. 
		</P
><P
>			그러나 인터넷의 사용이 보편화되고 네트워크에 연결된 호스트의 수가 
			증가하자 거기에 따라서 네트워크 구성역시 복잡해지고, ICMP만을 가지고는 
			이러한 네트워크의 관리를 효율적으로 할수 없게 되었다. 
		</P
><P
>			그래서 몇가지 프로토콜에 대한 연구가 진행되었고, SGMP, HIMS, CMIP/CMIS등이 
			제안되게 되었다. 이중에서 SGMP를 발전시킨 SNMP가 사실상 네트워크 관리를 
			위한 표준적인 프로토콜로 자리잡게 되었다. 다른 프로토콜들이 사용되지 
			않은데에는 몇가지 이유가 있었다. CMIP/CMIS는 너무 방대하고 너무 복잡했으며, 
			HEMS의 경우에는 실제 적용사례가 적었기 때문이다. 	 
		</P
><P
>			어쨋든 SNMP는 거의 대부분의 운영체제에서 사용되어 지고 있다. 
			여러분이 사용하는 Linux, 그밖의 대부분의 유닉스와, 윈도우계열 운영체제는
			기본적으로 SNMP프로토콜을 사용하는 도구들을 제공하고 있다. 그외에도 
			router등 TCP/IP를 네트워크 프로토콜로 사용되는 운영체제들 역시 
			SNMP는 필수적으로 제공하고 있다. 
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN28"
>2.2&#51208;. SNMP로 할수 있는 것들</A
></H2
><P
>			SNMP를 이용해서 할수 있는 것들은 다음과 같다. 
			<P
></P
><DIV
CLASS="VARIABLELIST"
><DL
><DT
>네트워크 구성관리</DT
><DD
><P
>						네트워크상의 호스트들이 어떤 구조를 이루고 있는지 
						지도를 그리는게 가능하다. 
						</P
></DD
><DT
>성능관리</DT
><DD
><P
>						각 네트워크 세그먼트간 네트워크 사용량, 에러량, 처리속도, 응답시간 
						등 성능 분석에 필요한 통계정보를 얻어낼수 있다. 	 
					</P
></DD
><DT
>장비관리</DT
><DD
><P
>						SNMP의 주목적이 네트워크관리관리 이기는 하지만 SNMP특유의 유연한 
						확장성을 이용하여서 시스템정보(CPU, MEMORY, DISK 사용량)의 정보를 
						얻어올 수 있도록 많은 부분이 확장되었다. 
						이 정보는 네트워크문제를 해결하는데 큰도움을 준다. 
						예를들어 특정 세그먼트의 네트워크 사용량이 갑자기 급증했는데, 
						특정 호스트의 CPU사용율까지 갑자기 증가했다면, 우리는 해당 호스트에서 
						문제가 발생했을것이란걸 유추해낼수 있을것이다.  
					</P
></DD
><DT
>보안관리</DT
><DD
><P
>						정보의 제어 및 보호 기능, 최근버젼인 SNMP3는 특히 정보보호를 위한 
						기능이 향상되었다.   
					</P
></DD
></DL
></DIV
>
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN48"
>2.3&#51208;. SNMP를 통한 망의 구성</A
></H2
><P
>			SMTP는 인터넷상에서 메시지를 교환하기 위한 프로토콜로 사용되며, 
			주로 전자메일 교환을 위해서 사용되는 프로토콜이다. 그러나 SMTP는 어디까지나 
			프로토콜일 뿐이며, 실제 메시지를 인터넷상에서 주고 받기 위해서는 
			SMTP프로토콜을 사용하는 SMTP서버(Sendmail같은)와 SMTP클라이언트(mutt, pine같은)가 
			준비되어 있어야만 한다. 
		</P
><P
>			SNMP역시 그자체로는 프로토콜일 뿐이며 SNMP프로토콜을 활용해서 실제 네트워크 
			관리 정보를 얻어오기 위해서는 응용 애플리케이션이 준비되어있어야만 한다. 
			보통의 네트워크프로토콜을 사용하는 애플리케이션이 서버/클라이언트 모델로 
			구성되듯이 SNMP역시 서버와 클라이언트로 구성된다. 
			<DIV
CLASS="FIGURE"
><A
NAME="AEN52"
></A
><P
><B
>&#44536;&#47548; 1. SNMP망 관리 시스템</B
></P
><P
><IMG
SRC="http://www.joinc.co.kr/albums/album01/acz.gif"></P
></DIV
>
			일반적으로 SNMP망 에서는 서버/클라이언트라고 부르지 않고 
			snmp manager/snmp agent라고 부른다. 
			snmp agent는 관리대상이 되는 시스템에 설치되어서 
			필요한 정보(네트워크 혹은 시스템)를 수집하기 위한 snmp 모듈(혹은 애플리케이션) 
			이며, snmp manager은 snmp agent가 설치된 시스템에 필요한 정보를 요청하는 
			snmp 모듈이다. snmp agent는 서버, snmp manager은 클라이언트로 생각하면 
			이해하기가 좀더 수월할 것이다(그러나 반드시 agent가 서버, manager이 클라이언트가 
			되는건 아니다. 그냥 개념적으로 이해만 하고 있도록 하자).
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN55"
>2.4&#51208;. MIB에 대해서</A
></H2
><P
>			SNMP는 네트워크를 관리하기 위한 프로토콜이다. 그렇다면 무엇을 관리할 
			것인가(관리객체)를 결정해야 할것이다. 관리객체를 결정했다면, 
			이러한 관리객체를 효과적으로 관리하기 위해서 이를 분류해야 할것이다. 
			이게 바로 MIB이다. 
		</P
><P
>			MIB는 Man In Black의 줄임말이 아니다. 
			Management Information Base의 줄임말인데, 관리되어야할 
			자원 객체의 분류된 정보를 말한다. 관리되어야할 객체는 
			시스템정보, 네트워크사용량, 네트워크 인터페이스정보 등이 된다.  
		</P
><P
>			이 MIB객체들은 관리하기 편하도록 Tree구조를 가지게 된다. 
			다음은 MIB의 일반적인 구조이다. 
			<DIV
CLASS="FIGURE"
><A
NAME="AEN60"
></A
><P
><B
>&#44536;&#47548; 2. MIB계층 구조</B
></P
><P
><IMG
SRC="http://www.joinc.co.kr/albums/album01/acy.gif"></P
></DIV
>
			MIB는 위에서 처럼 계층적인(디렉토리) 구조를 가지게 된다(위의 그림은 MIB를 설명하기 
			위해 일부만을 표시하고 있다). 예를들어서 
			agent가 설치되어 있는 시스템으로 부터 시스템부가정보(sysDescr)를 
			얻어오길 원한다면 ISO.org.dod.internet.mgmt.mib-2.system.sysDescr과 같은 식으로 
			manger에서 데이타를 요청하면 된다.   
		</P
><P
>			위의 MIB계층 구조를 보면 각 MIB옆에 숫자가 있는것을 볼수 있다. 이 숫자가 OID번호이다. 
			즉 sysDescr의 OID값은 1.3.6.1.1.2.1.1.1 이 될것이다. OID번호를 이용하는 이유는 
			MIB고유 문자열을 통해서 원하는 데이타를 가져오기위해서는 아무래도 요청이 길어질수가 
			있기 때문이다. 
		</P
><P
>			MIB는 IANA(Internet Assigned Number Authority)라는 
			단체에서 관리하며 표준적으로 사용되고 있다. 그럼으로 표준적인 MIB구현을 
			위해서는 IANA에서 OID를 부여받아야만 한다. 그래야 전체네트워크상에서 
			다른 여러가지 MIB와 중복되지 않고 사용이 가능할것이다. 
			<DIV
CLASS="TIP"
><BLOCKQUOTE
CLASS="TIP"
><P
><B
>&#51089;&#51008; &#51221;&#48372;: </B
>				cisco과 같은 대중적인(거의 표준이나 마찬가지인) 제품들은 
				모두 자체적인 MIB를 구현해서 IANA에 등록하여 사용하고 있다. 
				여러분이 cisco 라우터등의 SNMP정보를 접근할수 있다면 
				cisco MIB가 등록되어 있음을 확인할수 있을것이다. 확인하는 방법은 
				다음 강좌에서 따로 언급하도록 하겠다.    
				</P
></BLOCKQUOTE
></DIV
>
		</P
><P
>			MIB는 계층적 구조를 가짐으로 필요에 따라서 확장해서 사용이 가능하며,
			(물론 프로그래밍 능력이 있어야 하지만)때에 따라서는 자체 회사내에서만 
			사용가능하거나 제한된 네트워크 영역의 네트워크상황을 관제하는 제품을 
			위한 MIB를 추가해야 하는경우가 생길수 있을것이다.  
			그래서 사설로 MIB를 만들어서 사용할수 있는 여지를 남겨두었다. 
			(마치 독립된 지역네트워크를 위해 사설IP를 사용하는 것처럼)
			이러한 사설 MIB는 private(4)의 enterprises(1)에 정의해서 사용할수 있다. 
			여러분이 그리 대중적이지 않은 그래서 IANA에 등록되지 않은 어떤 장비의 
			고유 SNMP정보를 얻어오고 싶다면 업체에 문의하거나, 메뉴얼을 확인하는 정도로 
			쉽게 SNMP정보를 얻어올수 있다.  
		</P
><P
>			현재 MIB는 버젼 2까지나와 있으며, 버젼의 구분을 위해서 MIB-1, MIB-2로 부르고 
			있다. MIB-2는 MIB-1의 확장판으로 MIB-1의 모든 객체를 포함하여 약 171개의 객체들을 
			더 포함하고 있다. 최근의 제품들은 대부분 MIB-2를 지원하고 있다. 
			물론 
			위에서 말했듯이 독자적인 MIB를 만들어서 사용할수 있으며, 이를 확장 MIB라고 부른다.    
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN69"
>2.5&#51208;. SNMP 프로토콜의 동작과 구성</A
></H2
><P
>			현재 SNMP는 버전 3가지 나와있는 상태이지만 아직까지는 버젼2가 가장 널리 사용
			되고 있다. 필자역시 SNMP 버젼 2에 대한 경험이 많은 관계로 버젼2를 기준으로 
			설명하도록 하겠다.   
		</P
><P
>			SNMP는 기본적으로 네트워크 정보를 수집하는데 그 목적이 있는데, 
			수집하는 몇가지 각각 다른 방법이 있다. 
			일반적으로 생각해서 우리가 생활중에 얻게 되는 정보는 우리가 
			요구해서 발생하는 정보와(신문을 구입한다든지, 인터넷으로 서핑을 하는등) 
			뉴스속보와 같은 형식으로 중요한 일이 있을때 발생하는 정보가 있을것이다. 
			또한 단지 정보를 얻는데 그치지 않고 정보를 입력하기도 한다.  
		</P
><P
>			SNMP정보수집역시 기본적으로 위의 일상생활에서의 정보수집과 같은 방식으로 
			이루어진다. 이하 snmp manager은 manager로 snmp agent는 agent로 부르도록 한다.    
			<P
></P
><DIV
CLASS="VARIABLELIST"
><DL
><DT
>GET</DT
><DD
><P
>							manager에서 agent로 특정 정보를 요청하기 위해서 사용한다. 
						</P
></DD
><DT
>GET NEXT</DT
><DD
><P
>							기본적으로는 GET과 같은일을 한다. 그러나 SNMP에서 각정보들은 
							계층적 구조로 관리된다. 위의 MIB계층 구조를 나타낸 이미지에서 
							우리는 system(1)계층밑에 있는 모든 정보를 가져오고 싶을 때가 
							있을것이다. 그럴경우 GET NEXT를 사용할수 있다. 
						</P
></DD
><DT
>SET</DT
><DD
><P
>							manager에서 agent로 특정 값을 설정하기 위해서 사용한다. 
						</P
></DD
><DT
>TRAP</DT
><DD
><P
>							agent에서 통보해야될 어떤 정보가 
							발생했을때(임계치를 넘는네트워크자원 사용등) 
							manager에게 해당 상황을 알리기 위해서 사용한다. 위의 다른 요청들이 동기적 
							요청이라면 이것은 비동기적 사건을 알리기 위해서 사용되어진다.  
						</P
></DD
></DL
></DIV
>
		</P
><P
>			SNMP프로토콜은 기본적으로 어떤 정보를 요청하는 메시지와 이에 대한 응답메시지로 
			이루어지며 다음과 같은 구조를 가지고 있다. 
			<DIV
CLASS="TABLE"
><A
NAME="AEN92"
></A
><P
><B
>&#54364; 1. SNMP 메시지</B
></P
><TABLE
BORDER="1"
CLASS="CALSTABLE"
><TBODY
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>Version</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>Community name</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>SNMP PDU</TD
></TR
></TBODY
></TABLE
></DIV
>
			Version은 말이 필요없다. SNMP프로토콜의 버젼번호를 나타낸다. 
			Community name은 메니저와 에이전트간의 관계를 나타내는데, 인증, 접근통제등의 
			목적으로 사용된다. 보통은 간단하게 public을 사용한다. <B
CLASS="EMPHASIS"
>PDU</B
>
			는 Physical Data Unit의 줄임말인데, 실제 전송되는 필요한 정보들을 담고 
			있는 Unit이다. Unit 이라고 하는 이유는 실제 전송되는 정보들의 부가 속성을 
			나타내기 위한 몇가지 값들을 포함하고 있기 때문이다. PDU는 
			PDU 타입(GET인지 Set인지 GET Next인지, TRAP인지등)과, Request-id, 실제보내고자 
			하는 데이타등(OID와 OID에 대한 값들)으로 구성되어 있다. 
		</P
><P
>			SNMP를 통해서 전달되는 메시지들은 기본적으로 UDP를 이용하게 된다. 
			바로위에서 PDU는 Request-id를 포함하고 있다고 했는데, 데이타그램처리방식인 
			UDP의 단점을 극복하기 위해서 사용되는 값으로, 각 메시지의 요청번호를 표시한다. 
			그래야만 수신된 SNMP메시지가 어떤 요청에 대해서 수신된 메시지인지 확인이 
			가능할것이기 때문이다.  
		</P
></DIV
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN102"
>3&#51208;. SNMP 설치 및 운용</A
></H1
><P
>		그럼 실제로 시스템에 SNMP(agent와 manager 애플리케이션)을 설치해서 
		정보를 가져오는걸 간단히 테스트 해보도록 하겠다. 
	</P
><P
>		설치는 Linux(Kernel-2.4.x)에서 ucd-snmp로 할것이다. 위에서 
		설명했듯이, SNMP는 manager과 agent로 운영되게 되는데, 
		테스트의 편의를 위해서 하나의 시스템(localhost)에서 manager와 agent를 
		운용하도록 하겠다. 
	</P
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN106"
>3.1&#51208;. ucd-snmp 설치</A
></H2
><P
>			ucd-snmp는 <A
HREF="http://www.net-snmp.sourceforge.net"
TARGET="_top"
>net-snmp.sourceforge.net</A
>에서 얻을수 있으며 
			애플리케이션 관련 정보들도 얻을수 있다. 
			ucd-snmp는 현재 버젼 5.x대까지 진행되어 있는데, 5.x부터는 net-snmp로 
			이름을 바꾸고 개발되어지고 있으며, 4.x버젼까지를 ucd-snmp라고 부르고 있다. 
			필자는 익숙한 ucd-snmp(버젼 4.x)를 설치하도록 할것이다. 
			비록 net-snmp가 최신이긴 하지만 별로 다루어본적이 없고, 대부분의 경우 
			아직까지는 ucd-snmp가 많이 사용되어지고 있기 때문이다. 
			최신이 아니라고 불만을 가질 필요는 없다. 근본적으로 net-snmp와 ucd-snmp간의 
			차이는 없으며, 우리의 목적은 최신의 snmp애플리케이션을 테스트하는게 아닌 
			snmp의 기능과 원리를 이해하고 이를 이용해서 필요한 응용 애플리케이션을 
			작성하는 것이기 때문이다.    
		</P
><P
>			위의 URL에서 ucd-snmp를 다운받아서 압축을 풀고 컴파일 하도록 하자. 
			컴파일 하는중에는 아마도 아무런 문제가 없을것이다. 
			컴파일은 매우 일반적인 방법을 따른다. 적당한 디렉토리에 
			압축을 풀고 ./configure, make, make install 하면된다.   
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>	
[root@localhost src]# tar -xvzf ucd-snmp-4.2.6.tar.gz 
[root@localhost src]# cd ucd-snmp-4.2.6 
[root@localhost ucd-snmp-4.2.6]# ./configure  
[root@localhost ucd-snmp-4.2.6]# make 
[root@localhost ucd-snmp-4.2.6]# make install
			</PRE
></TD
></TR
></TABLE
>
			헤에... 너무 간단하지 않은가 ?
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN112"
>3.2&#51208;. SNMP AGENT 실행</A
></H2
><P
>			make install 까지 했다면 agent와 manager프로그램이 모두 설치되어 있을 것이다. 
			그리고 여기에 더불어 개발자를 위한 각종 라이브러리와 헤더파일들도 설치된다. 
			이 라이브러리와 헤더파일들은 개발할때 필요하며 다음 강좌에서 다루게 될것이다.  
		</P
><P
>			ucd-snmp는 agent 프로그램으로 snmpd를 제공한다. agent환경을 제대로 만들려면 
			복잡해보이는(사실은 그리 복잡하다고 볼수없는) 설정파일을 만들어줘야 하지만 
			이것은 각자의 몫이다. net-snmp프로젝트 홈페이지에서 제공하는 메뉴얼을 참고하기 
			바란다. 어쨋든 현재로써는 단지 snmpd를 띄우는 정도로 snmp agent환경을 
			만들수 있다. 
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>[root@localhost root]# snmpd
			</PRE
></TD
></TR
></TABLE
>
			이것으로 snmp를 테스트할 최소한의 agent환경이 구축되었다. 
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN117"
>3.3&#51208;. SNMP MANAGER 테스트</A
></H2
><DIV
CLASS="SECTION"
><H3
CLASS="SECTION"
><A
NAME="AEN119"
>3.3.1&#51208;. 동기적인 데이타 요청 - snmp get, get next</A
></H3
><P
>				<B
CLASS="EMPHASIS"
>GET</B
>과 
				<B
CLASS="EMPHASIS"
>GET NEXT</B
>는 동기적인 정보요청을 위해서 사용한다. 
				manager에서 agent에 대해서 정보를 요청했을때 해당 정보를 agent에서 
				보내주는 방식이다. 
				GET은 단일정보요청을 위해서 사용하며, GET NEXT는 해당 계층의 하위에 있는
				모든 정보의 요청을 위해서 사용된다.  
			</P
><P
>				ucd-snmp는 이러한 정보요청을 위한 manager프로그램으로 
				<B
CLASS="EMPHASIS"
>snmpget</B
>과 <B
CLASS="EMPHASIS"
>snmpnext</B
>, 
				<B
CLASS="EMPHASIS"
>snmpwalk</B
>를 제공한다. 
			</P
><P
>				snmpget은 이름에서 알수 있듯이 agent로부터 특정한 정보를 얻어내기 위해서 사용한다. 
				정보를 얻기 위해 필요한 기본정보는 agent가 설치되어 있는 서버의 주소(혹은 이름) 
				와 커뮤니티(권한을 위한)이름 그리고 얻기 원하는 정보의 OID번호 혹은 MIB의 계층이름이다. 
				예를들어서 localhost로부터 public권한을 가지고 sysDescr(시스템 부가정보)정보를 얻어오고 싶다면 
				아래와 같이 하면 된다.    
				<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
> 
[root@localhost /root]# snmpget localhost public system.sysDescr.0
system.sysDescr.0 = Linux localhost 2.4.2-2 #1 Sun Apr 8 20:41:30 EDT 2001 i686
				</PRE
></TD
></TR
></TABLE
> 
				혹은 MIB이름대신에 OID번호를 사용해도 된다.  
				<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
> 
[root@localhost /root]# snmpget localhost public 1.1.0 
system.sysDescr.0 = Linux localhost 2.4.2-2 #1 Sun Apr 8 20:41:30 EDT 2001 i686
				</PRE
></TD
></TR
></TABLE
> 
			</P
><P
>				snmpwalk는 해당 MIB의 하위계층에 있는 모든 정보를 요청한다. 
				예를들어 system MIB의 하위 계층에 있는 모든 OID에 대한 정보를 요청하길 
				원한다면 아래와 같이 하면된다.   
				이게 가능한 이유는 snmpwalk가 정보를 요청하기 위해서 snmp메시지를 만들때 PDU타입을 
				GET NEXT를 사용하기 때문이다. 나중에 직접구현하게 
				될것이다. 지금은 구현에 신경쓰지 말자. 
				<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>[root@localhost /root]# snmpwalk localhost public system
system.sysDescr.0 = Linux localhost 2.4.2-2 #1 Sun Apr 8 20:41:30 EDT 2001 i686
system.sysObjectID.0 = OID: enterprises.ucdavis.ucdSnmpAgent.linux
system.sysUpTime.0 = Timeticks: (2685699) 7:27:36.99
system.sysContact.0 = yundream@joinc.co.kr
system.sysName.0 = localhost
system.sysLocation.0 = myhome 
system.sysORLastChange.0 = Timeticks: (0) 0:00:00.00
....
				</PRE
></TD
></TR
></TABLE
>
				system하위의 모든 OID에 대한 정보를 얻어오고 있음을 확인할수 있다.  
			</P
><P
>				snmpgetnext는 snmpwalk의 기능 축소판정도로 볼수 있을것이다. 즉 MIB계층구조에서 
				현재 요청한 OID의 다음 OID의 정보를 가져온다. 예를들어 
				system.sysDescr.0에 대한 정보를 요청하면 다음 OID인 system.sysObjectID.0의 정보를 
				요청하게 될것이다. 이게 가능한 이유는 snmpwalk와 마찬가지로 내부적으로 GET NEXT를 
				이용하고 있기 때문이다. snmpwalk가 더이상 얻을수 없을때까지 OID를 요청하는것과 
				달리 snmpgetnext 바로다음의 OID만을 요청한다. 
				<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
> 
[root@localhost /root]# snmpgetnext localhost public system system.sysDescr.0
system.sysDescr.0 = Linux localhost 2.4.2-2 #1 Sun Apr 8 20:41:30 EDT 2001 i686
system.sysObjectID.0 = OID: enterprises.ucdavis.ucdSnmpAgent.linux
				</PRE
></TD
></TR
></TABLE
>
			</P
></DIV
><DIV
CLASS="SECTION"
><HR><H3
CLASS="SECTION"
><A
NAME="AEN135"
>3.3.2&#51208;. 비동기적인 데이타 요청 - snmp trap</A
></H3
><P
>				기본적으로 GET, GET NEXT를 통한 데이타요청은 일정한 polling시간을 
				가지고 manager에서 agent로 필요한 정보를 요청하는 방식이다. 그러나 이걸 이용해서는 
				비동기적으로 발생하는 정보를 수집할수가 없다. 
			</P
><P
>				이러한 비동기적인 정보는 여러가지가 될수 있다. 예를들면 특정 네트워크 세그먼트에 
				문제가 생겼다거나 디스크나 메모리용량을 과다하게 사용하고 있다거나(많은 운영체제의 
				경우 시스템정보까지도 snmp를 통해서 얻을수 있도록 허용하고 있다)하는 사건들은 
				비동기적으로 발생할것이다. 이럴경우에는 agent에서 manager측으로 사건을 통보해야 
				할것이다. 이렇게 agent에서 manager측으로 비동기적으로 사건을 통보하는 것을 
				SNMP TRAP라고 한다(간단히 말해서 경고메시지 보내는거다). 	  
			</P
><P
>				ucd-snmp에서는 이러한 trap정보를 전송하고 받기 위해서 
				<B
CLASS="EMPHASIS"
>snmptrapd</B
>와 
				<B
CLASS="EMPHASIS"
>snmptrap</B
>를 제공한다.  
				snmptrapd는 agent에 제공되는 데몬프로그램으로 manager에서의 trap데이타 발생을 
				기다린다. snmptrap는 agent에 설치되어서 사용될수 있으며 trap데이타를 manager로 
				전송하는 일을한다.  
			</P
><P
>				이 snmptrap은 꽤 유용하게 사용할수 있다. 간단하게 스크립트로 만들어서 
				어떤 파일이 변조되었을경우 trap정보를 manager쪽으로 발생시킨다거나, 
				프로세스 갯수가 일정갯수 이상 초과했을때 이를 전송한다든지 하는 기능을 
				비교적 간단하게 추가시킬수 있을것이다.   
			</P
><P
>				다음은 ucd-snmp에서 제공하는 trap애플리케이션을 이용한 간단한 테스트이다.
				먼저 snmptrapd를 manager측에서 실행시켜야 한다. 
				이 애플리케이션은 옵션없이 실행할경우 데몬모드로 실행되며 표준출력을 
				시키지 않음으로 다음과 같이 옵션을 주고 실행시켜서 일반모드(forground)에서 
				받은 trap정보를 표준출력하도록 실행시키도록 하자.
				<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>[root@localhost root]# snmptrapd -f -P
2003-04-23 00:13:34 UCD-snmp version 4.2.6 Started.
				</PRE
></TD
></TR
></TABLE
>
				이제 agent측에서 snmptrap를 이용해서 trap정보를 manager로 전송해보도록 하자.  
				<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>[root@localhost root]# snmptrap -v 2c -c public localhost "" ucdStart sysContact.0 s "yundream"
				</PRE
></TD
></TR
></TABLE
>
				그러면 manager로 system.sysContact.0="yundream" 과 같은 정보가 전달되는걸 
				확인할수 있을것이다. 
			</P
><P
>				이들 ucd-snmp에서 제공하는 애플리케이션들의 자세한 사용법은 
				메뉴얼 페이지를 참고하기 바란다.  
			</P
></DIV
></DIV
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN147"
>4&#51208;. 결론</A
></H1
><P
>	
		이상 SNMP의 개념과 개념의 이해를 위해서 실제 사용되는 snmp애플리케이션을 
		설치해서 간단히 운영테스트까지 해보았다. 이러한 운영테스트를 위해서 ucd-snmp를 
		사용했는데, 다음 강좌는 ucd-snmp에서 제공하는 snmplib를 통해서 snmp애플리케이션을
		만드는 법을 다루도록 하겠다. 
	</P
></DIV
></DIV
></BODY
></HTML
>
}}}
