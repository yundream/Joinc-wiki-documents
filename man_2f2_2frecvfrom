#title linux man page : recvfrom - 소켓으로 부터 메시지를 읽어들인다. 

{{{#!html
<TITLE
><a href="/modules/moniwiki/wiki.php/manSearch?google=none&name=recvfrom">recvfrom</a>(2)</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.59"><META
http-equiv="Content-Type"
content="text/html; charset=euc-kr"></HEAD
><BODY
CLASS="CHAPTER"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="CHAPTER"
><H1
><A
NAME="AEN1"
>1&#51109;. <a href="/modules/moniwiki/wiki.php/manSearch?google=none&name=recvfrom">recvfrom</a>(2)</A
></H1
><DIV
CLASS="TOC"
><DL
><DT
><B
>&#52264;&#47168;</B
></DT
><DT
>1.1&#51208;. <A
HREF="#AEN4"
>사용법</A
></DT
><DT
>1.2&#51208;. <A
HREF="#AEN8"
>설명</A
></DT
><DT
>1.3&#51208;. <A
HREF="#AEN37"
>반환값</A
></DT
><DT
>1.4&#51208;. <A
HREF="#AEN40"
>에러</A
></DT
><DT
>1.5&#51208;. <A
HREF="#AEN64"
>예제</A
></DT
></DL
></DIV
><P
>	소켓(:12)으로 부터 메시지를 읽어들인다. </P
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN4"
>1.1&#51208;. 사용법</A
></H1
><P
>		<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;sys/socket.h&#62;

#include &#60;sys/types.h&#62;

int recvfrom(int s, void *buf, size_t len, int flags, 
     struct sockaddr *from, socklen_t *fromlen); 
		</PRE
></TD
></TR
></TABLE
>
	</P
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN8"
>1.2&#51208;. 설명</A
></H1
><P
>		이 함수는 소켓으로 부터 데이타를 읽어들이기 위해서 사용되며, 
		연결지향(:12)이든지 아니든지간에 데이타를 읽어들일수 있다. 
	</P
><P
>		<B
CLASS="EMPHASIS"
>s</B
>는 소켓지정자이며, 
		<B
CLASS="EMPHASIS"
>buf</B
>로 데이타를 읽어들이게 된다. 
		이때 읽어들일 데이타의 최대크기는 <B
CLASS="EMPHASIS"
>len</B
>을 
		통해서 결정된다. 
	</P
><P
>		<B
CLASS="EMPHASIS"
>from</B
>는 메시지의 원주소를 나타내는데, 
		연결지향소켓이 아닌경우에만 채워진다(연결지향소켓일 경우 
		accept할때 확인이 가능함으로 굳이 인자를 써서 원주소를 
		읽어들일 필요가 없다). <B
CLASS="EMPHASIS"
>fromlen</B
>은 주소구조체의 
		크기이다.  
	</P
><P
>		<B
CLASS="EMPHASIS"
>flags</B
>는 다음중 선택해서 지정할수 있다.  
		<P
></P
><DIV
CLASS="VARIABLELIST"
><DL
><DT
>MSG_OOB</DT
><DD
><P
>					out-of-band data를 이 개념을 지원하는 소켓으로 보낸다.
				</P
></DD
><DT
>MSG_DONTROUTE</DT
><DD
><P
>					패킷을 전송하는데 게이트웨이를 사용하지 않고 직접 연결된 
					네트워크를 통해서 호스트로 보낸다. 
					이것은 diagnostic 혹은 routing 프로그램에 의해서만 사용한다.
				</P
></DD
><DT
>MSG_DONTWAIT</DT
><DD
><P
>					non-blocking를 가능케 한다.
				</P
></DD
><DT
>MSG_NOSIGNAL</DT
><DD
><P
>					다른 한쪽의 소켓의 연결이 끊겼을때, 
					소켓으로부터 발생하는 스트림상의 SIGPIPE를 보내지 
					않도록 요구한다. 그러나 EPIPE에러는 여전히 반환된다.
				</P
></DD
></DL
></DIV
>

	</P
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN37"
>1.3&#51208;. 반환값</A
></H1
><P
>		성공할경우 0을 실패했을경우에는 -1을 반환하며, 적당한 errno 값을 
		설정한다. 
	</P
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN40"
>1.4&#51208;. 에러</A
></H1
><P
>		<P
></P
><DIV
CLASS="VARIABLELIST"
><DL
><DT
>EBADF</DT
><DD
><P
>	
					s 가 유효한 기술자가 아니다. 
				</P
></DD
><DT
>ENOTSOCK</DT
><DD
><P
>					s 가 소켓이 아닌 파일일경우
				</P
></DD
><DT
>EFAULT</DT
><DD
><P
>					실제하지 않는 사용자 공간주소가 매개변수로 지정되었다.
				</P
></DD
><DT
>EINTR</DT
><DD
><P
>					신호발생으로 인하여 인터럽트가 걸렸다.
				</P
></DD
><DT
>EPIPE</DT
><DD
><P
>					연결된 소켓이 깨졌다. 
					MSG_NOSIGNAL이 설정되어 있지 않을 경우 프로세스는 
					SIGPIPE신호를 받게 된다. 
				</P
></DD
></DL
></DIV
>	
	</P
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN64"
>1.5&#51208;. 예제</A
></H1
><P
>		<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;sys/socket.h&#62;

#include &#60;sys/stat.h&#62;
#include &#60;arpa/inet.h&#62;
#include &#60;stdio.h&#62;
#include &#60;string.h&#62;

int <a href="/modules/moniwiki/wiki.php/manSearch?google=none&name=main">main</a>(int argc, char **argv)
{
    int server_sockfd, client_sockfd;
    int client_len, n;
    char buf[80];
    struct sockaddr_in clientaddr, serveraddr;

    client_len = <a href="/modules/moniwiki/wiki.php/manSearch?google=none&name=sizeof">sizeof</a>(clientaddr);

    if ((server_sockfd = socket (AF_INET, SOCK_STREAM, 0)) &#60; 0)
    {
        <a href="/modules/moniwiki/wiki.php/manSearch?google=none&name=perror">perror</a>("socket error : ");
        <a href="/modules/moniwiki/wiki.php/manSearch?google=none&name=exit">exit</a>(0);
    }
    bzero(&#38;serveraddr, <a href="/modules/moniwiki/wiki.php/manSearch?google=none&name=sizeof">sizeof</a>(serveraddr));
    serveraddr.sin_family = AF_INET;
    serveraddr.sin_addr.s_addr = <a href="/modules/moniwiki/wiki.php/manSearch?google=none&name=htonl">htonl</a>(INADDR_ANY);
    serveraddr.sin_port = htons(atoi(argv[1]));

    bind (server_sockfd, (struct sockaddr *)&#38;serveraddr, <a href="/modules/moniwiki/wiki.php/manSearch?google=none&name=sizeof">sizeof</a>(serveraddr));
    <a href="/modules/moniwiki/wiki.php/manSearch?google=none&name=listen">listen</a>(server_sockfd, 5);

    <a href="/modules/moniwiki/wiki.php/manSearch?google=none&name=while">while</a>(1)
    {
        <a href="/modules/moniwiki/wiki.php/manSearch?google=none&name=memset">memset</a>(buf, 0x00, 80);
        client_sockfd = accept(server_sockfd, (struct sockaddr *)&#38;clientaddr,
                            &#38;client_len);

        if ((n = <a href="/modules/moniwiki/wiki.php/manSearch?google=none&name=recvfrom">recvfrom</a>(client_sockfd, buf, 80, 0, NULL, &#38;client_len)) &#60;= 0)
        {
            <a href="/modules/moniwiki/wiki.php/manSearch?google=none&name=close">close</a>(client_sockfd);
            continue;
        }
        sendto(client_sockfd,(void *)buf, 80, 0,
                        NULL, client_len);
        <a href="/modules/moniwiki/wiki.php/manSearch?google=none&name=close">close</a>(client_sockfd);
    }
}
		</PRE
></TD
></TR
></TABLE
>

	</P
></DIV
></DIV
></BODY
></HTML
>
}}}
