head	1.2;
access;
symbols;
locks
	root:1.2; strict;
comment	@# @;


1.2
date	2014.09.13.14.26.41;	author root;	state Exp;
branches;
next	1.1;

1.1
date	2014.09.13.08.20.35;	author root;	state Exp;
branches;
next	;


desc
@./data/text/man_2f12_2fgolang_2fAppLevelProtocol
@


1.2
log
@119.64.102.68;;yundream;;
@
text
@#title 애플리케이션 레벨 프로토콜

클라이언트와 서버 프로그램은 데이터의 타입과 데이터를 교환하는 것으로 서비스를 수행한다. 이러한 작업을 위해서는 클라이언트와 서버가 주고 받는 데이터를 해석하기 위한 프로토콜을 맞추는 작업이 선행되야 한다. 이번 장에서는 클라이언트 - 서버간 데이터 통신 프로토콜 설계 방법을 (작동 하는)예제 프로그램을 만들면서 고민해 보려 한다.

[[TableOfContents]]
== 소개 ==
클라이언트와 서버 프로그램은 서로 정보를 교환한다. TCP와 UDP는 이들 프로그램 사이에 데이터를 교환하는 전령역할을 한다. 하지만 TCP와 UDP는 데이터를 전송하는 일만 할 뿐, 데이터를 처리하는 일을 하는 건아니다. 데이터 처리는 어디까지나 (서비/클라이언트)프로세스가 하는 일이다. 프로세스가 데이터를 처리하기 위해서는 "애플리케이션을 위한 프로토콜"이 필요하다. 프로토콜은 데이터의 유형, 형식, 인코딩 방법등을 정의한 프로그래밍 규약서로 서버와 클라이언트 사이에서 일어날 수 있는 모든 일을 정의 한다.


== 프로토콜 디자인 ==
명시적으로 "프로토콜 디자인을 이렇게 해야 한다"라는 어떤 규격은 없다. 다만 프로토콜을 디자인 하기 위해서 고려해야 할 이슈들은 있다. 이들 이슈들을 잘 분류하고 정의 한다면, 좋은 프로토콜을 만들 가능성을 높일 수 있다.
  * 통신 방식 : 브로드캐스트인가 Point to Point 방식인가.
    브로드캐스트라면 반드시 UDP를 사용해야 한다. Local 네트워크에서의 사용은 기술적 이슈가 없지만, 광대역 네트워크에서 사용할 거라면 (실험적인)'''MBONE'''을 사용하는 등 해결해야 할 이슈가 있다. PtP는 UDP, TCP 아무거나 선택해도 된다. 
  * stateful 혹은 stateless : 연결을 유지할 것인가 유지 하지 않을 것인가 ? HTTP 같은 경우 stateless로 연결을 유지하지 않는다. Telnet은 연결을 유지한다. 어떤 방식을 선택하는게 더 단순하면서, 효율적으로 작동할지를 고민해야 한다.     
  * 전송 프로토콜의 신뢰성 : 신뢰성과 성능과는 교환(trade off)관계에 있다. 어떤 애플리케이션은 신뢰성이 그다지 중요하지 않을 수 있다.
  * 응답 메시지가 필요 한가 : 만약 그렇다면, 응답 메시지가 누락과 timeout에 대한 처리 방안을 고민해야 한다.
  * 데이터 형식은 : 보통 MIME 혹은 byte encoding 둘 중 하나를 사용한다. 
  * bursty한 서비스인가 아니면 steady 한 서비스인가 : Bursty는 일정한 간격을 두고 집중적으로 트래픽이 발생하는 서비스를 의미한다. steady는 지속적으로 트래픽이 발생하는 서비스다. 대부분의 인터넷 서비스들은 bursty한 트래픽을 발생한다. Steady 트래픽을 발생하는 대표적인 서비스들은 비디오 stream 이나 음성서비스들이다. 서비스 타입에 따라서 QoS 전략을 세워야 한다. 
  * Standalone 애플리케이션인지 아니면 다른 애플리케이션의 하부 컴포넌트 혹은 라이브러리인지  

== 버전 컨트롤 ==
서버/클라이언트 시스템은 시간에 따라서 진화한다. 프로토콜역시 애플리케이션 진화에 따라 변하기 마련이라서, 프로토콜 버전 변화에 따른 조치를 취해야 한다. 처음 개발한 프로토콜의 버전이 1.0이었다고 가정해 보자. 여기에 새로운 기능의 추가 혹은 성능 향상등을 위해서 2.0 버전의 새로운 프로토콜이 만들어졌다고 가정해보자. 버전 1.0을 지원하는 서버에 버전 2.0을 사용하는 클라이언트가 접속하면, 서버는 클라이언트의 요청을 이해하지 못할 수도 있다.  

가장 쉬운 해결방법 중 하나는 프로토콜에 버전을 명시하는 거다. 아래 그림을 보자.

{{{#!html
<img src="https://docs.google.com/drawings/d/1HlkE1TcAcSPFqgiW8DG6wiSWMlyQa-Xtxqb63alqTd0/pub?w=496&amp;h=171">
}}}
 * 서버 프로그램은 프로토콜 버전 1.0과 2.0을 모두 지원한다.
 * 클라이언트 프로그램은 요청을 보낼 때, 자신이 사용하는 프로토콜 버전 정보도 함께 전송한다.
 * 클라이언트가 v1.0 프로토콜로 요청을 보내면, 서버는 v1.0 프로토콜 규격에 따라서 요청을 처리하고 그 결과를 전송한다.
 * 클라이언트가 v2.0 프로토콜로 요청을 보내면, 서버는 v2.0 프로토콜 규격에 따라서 요청을 처리하고 그 결과를 전송한다.

=== Web ===
HTTP는 다른 버전의 프로토콜을 처리하는 방법을 보여주는 좋은 예제다. HTTP 클라이언트는 요청을 보낼 때, 자신이 사용하는 버전번호도 함께 보낸다.
||요청            ||버전                        ||
||GET /           ||1.0을 사용한다고 가정한다.  ||
||GET / HTTP/1.0  ||1.0 버전을 사용한다.        ||
||GET / HTTP/1.1  ||1.1 버전을 사용한다.        ||
@


1.1
log
@119.64.102.68;;yundream;;
@
text
@d3 37
a39 1
클라이언트와 서버 프로그램은 데이터의 타입과 데이터를 교환하는 것으로 서비스를 수행한다. 이러한 작업을 위해서는 클라이언트와 서버가 주고 받는 데이터를 해석하기 위한 프로토콜을 맞추는 작업이 선행되야 한다. 이번 장에서는 클라이언트 - 서버   
@
