 * 작성자 : [minzkn]
 * 목적 : 젠투 설치기 2탄 준비중
 * 설치문서의 [http://www.gentoo.org/doc/en/handbook/handbook.xml?style=printable&full=1 영문원본]
 * Gentoo linux 2004.0 ISO (liveCD) [http://ftp.ussg.iu.edu/linux/gentoo/releases/x86/2004.0/livecd/universal/install-x86-minimal-2004.0.iso download]
 * 초기 부팅화면
 {{{#!plain
Last login: Tue Mar  9 04:25:12 2004

Welcome to the Gentoo Linux LiveCD!

The root password on this system has been auto-scrambled for security.

If any ethernet adapters were detected at boot, they should be auto-configured
if DHCP is available on your network.  Type "net-setup eth0" to specify eth0 IP
address settings by hand.

/proc/config(.gz) for kernel configuration.

To start an ssh server on this system, type "/etc/init.d/sshd start".  If you
need to log in remotely as root, type "passwd root" to reset root's password to
a known value.

Stage tarball(s), distfiles and packages can be found in /mnt/cdrom/.

View installation instructions by typing "links
/mnt/cdrom/docs/handbook/html/index.html" or "links
http://www.gentoo.org/doc/en/handbook/handbook.xml" for the latest version from
the gentoo.org Web site.

Please report any bugs you find to http://bugs.gentoo.org. Be sure to include
detailed information about how to reproduce the bug you are reporting. Thanks
for using Gentoo Linux!

livecd root # _
}}}
----
 * 영문원본 퍼옴.
{{{#!html
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<link title="new" rel="stylesheet" href="/css/main.css" type="text/css">
<title>Printable Linux Documentation
    -- 
    Gentoo Handbook</title>
</head>
<body style="margin-right: 35mm;" bgcolor="#ffffff">
<h1>Gentoo Handbook</h1>
    <b><a class="altlink" href="mailto:drobbins@gentoo.org">Daniel Robbins</a></b>
<i>Chief Architect</i><br>
  <b><a class="altlink" href="mailto:swift@gentoo.org">Sven Vermeulen</a></b>
<i>Author</i><br>
  <b><a class="altlink" href="mailto:chouser@gentoo.org">Chris Houser</a></b>
<i>Author</i><br>
  <b><a class="altlink" href="mailto:jerry@gentoo.org">Jerry Alexandratos</a></b>
<i>Author</i><br>
  <b><a class="altlink" href="mailto:seemant@gentoo.org">Seemant Kulleen</a></b>
<i>Gentoo x86 Developer</i><br>
  <b><a class="altlink" href="mailto:taviso@gentoo.org">Tavis Ormandy</a></b>
<i>Gentoo Alpha Developer</i><br>
  <b><a class="altlink" href="mailto:agriffis@gentoo.org">Aron Griffis</a></b>
<i>Gentoo Alpha Developer</i><br>
  <b><a class="altlink" href="mailto:brad_mssw@gentoo.org">Brad House</a></b>
<i>Gentoo AMD64 Developer</i><br>
  <b><a class="altlink" href="mailto:gmsoft@gentoo.org">Guy Martin</a></b>
<i>Gentoo HPPA developer</i><br>
   <b><a class="altlink" href="mailto:pvdabeel@gentoo.org">Pieter Van den Abeele</a></b>
<i>Gentoo PPC developer</i><br>
  <b><a class="altlink" href="mailto:blademan@gentoo.org">Joe Kallar</a></b>
<i>Gentoo SPARC developer</i><br>
    <b><a class="altlink" href="mailto:zhen@gentoo.org">John P. Davis</a></b>
<i>Editor</i><br>Pierre-Henri Jondot<i>Editor</i><br>
    <b><a class="altlink" href="mailto:stocke2@gentoo.org">Eric Stockbridge</a></b>
<i>Editor</i><br>
    <b><a class="altlink" href="mailto:rajiv@gentoo.org">Rajiv Manglani</a></b>
<i>Editor</i><br>
    <b><a class="altlink" href="mailto:seo@gentoo.org">Jungmin Seo</a></b>
<i>Editor</i><br>
    <b><a class="altlink" href="mailto:zhware@gentoo.org">Stoyan Zhekov</a></b>
<i>Editor</i><br>
    <b><a class="altlink" href="mailto:jhhudso@gentoo.org">Jared Hudson</a></b>
<i>Editor</i><br>
    <b><a class="altlink" href="mailto:peitolm@gentoo.org">Colin Morey</a></b>
<i>Editor</i><br>
    <b><a class="altlink" href="mailto:peesh@gentoo.org">Jorge Paulo</a></b>
<i>Editor</i><br>
    <b><a class="altlink" href="mailto:carl@gentoo.org">Carl Anderson</a></b>
<i>Editor</i><br>
    <b><a class="altlink" href="mailto:avenj@gentoo.org">Jon Portnoy</a></b>
<i>Editor</i><br>
     <b><a class="altlink" href="mailto:klasikahl@gentoo.org">Zack Gilburd</a></b>
<i>Editor</i><br>
  <b><a class="altlink" href="mailto:jmorgan@gentoo.org">Jack Morgan</a></b>
<i>Editor</i><br>
  <b><a class="altlink" href="mailto:bennyc@gentoo.org">Benny Chuang</a></b>
<i>Editor</i><br>
  <b><a class="altlink" href="mailto:erwin@gentoo.org">Erwin</a></b>
<i>Editor</i><br>
  <b><a class="altlink" href="mailto:kumba@gentoo.org">Joshua Kinard</a></b>
<i>Editor</i><br>
    <b><a class="altlink" href="mailto:g2boojum@gentoo.org">Grant Goodyear</a></b>
<i>Reviewer</i><br>
    <b><a class="altlink" href="mailto:gerrynjr@gentoo.org">Gerald J. Normandin Jr.</a></b>
<i>Reviewer</i><br>
    <b><a class="altlink" href="mailto:spyderous@gentoo.org">Donnie Berkholz</a></b>
<i>Reviewer</i><br>
    <b><a class="altlink" href="mailto:antifa@gentoo.org">Ken Nowack</a></b>
<i>Reviewer</i><br>
   <b><a class="altlink" href="mailto:pylon@gentoo.org">Lars Weiler</a></b>
<i>Contributor</i><br><p>Content:</p>
<ul>
<li>
<b><a href="#book_part1">Installing Gentoo</a></b><br>
In this part you learn how to install Gentoo on your system.
<ol>
<li>
<b><a href="#book_part1_chap1">About the Gentoo Linux Installation</a></b><br>
Users not familiar with Gentoo do not always know that choice is what
Gentoo is all about. 
</li>
<li>
<b><a href="#book_part1_chap2">Choosing the Right Installation Medium</a></b><br>
You can install Gentoo in many ways. You can use our LiveCD, an existing
distribution etc. 
</li>
<li>
<b><a href="#book_part1_chap3">Configuring your Network</a></b><br>
If you want to install Gentoo using the Internet, you need to setup
networking.
</li>
<li>
<b><a href="#book_part1_chap4">Preparing the Disks</a></b><br>
To be able to install Gentoo, you must create the necessary partitions.
This chapter describes how to partition a disk for future usage.
</li>
<li>
<b><a href="#book_part1_chap5">Installing the Gentoo Installation Files</a></b><br>
Gentoo installs work through socalled stage-files. In this chapter we
describe how you extract a stage-file and configure Portage.
</li>
<li>
<b><a href="#book_part1_chap6">Installing the Gentoo Base System</a></b><br>
Independent of what stage you chose, the eventual result is that you
have a Gentoo base system at your disposal. This chapter describes how
to progress to that stadium.
</li>
<li>
<b><a href="#book_part1_chap7">Configuring the Kernel</a></b><br>
The Linux kernel is the core of every distribution. This chapter
explains how to configure your kernel.
</li>
<li>
<b><a href="#book_part1_chap8">Configuring your System</a></b><br>
You need to edit some important configuration files. In this chapter
you receive an overview of these files and an explanation on how to
proceed.
</li>
<li>
<b><a href="#book_part1_chap9">Configuring the Bootloader</a></b><br>
Several bootloaders exist. Each one of them has its own way of
configuration. In this chapter we'll describe all possibilities for you
and step you through the process of configuring a bootloader to your
needs.
</li>
<li>
<b><a href="#book_part1_chap10">Installing Necessary System Tools</a></b><br>
As mentioned before, Gentoo is about choices. In this chapter we help you
choose and install some important tools.
</li>
<li>
<b><a href="#book_part1_chap11">Finalizing your Gentoo Installation</a></b><br>
You're almost done. We'll just create one (or more) users for your
system and leave the installation to reboot into a brand new Gentoo
system.
</li>
<li>
<b><a href="#book_part1_chap12">Where to go from here?</a></b><br>
Now you have your Gentoo system, but what's next? 
</li>
</ol>
</li>
<li>
<b><a href="#book_part2">Working with Gentoo</a></b><br>
Learn how to work with Gentoo: installing software, altering variables, changing
portage behaviour etc. 
<ol>
<li>
<b><a href="#book_part2_chap1">USE flags</a></b><br>
USE-flags are a very important aspect of Gentoo. In this chapter, you learn to
work with USE-flags and understand how USE-flags interact with your system.
</li>
<li>
<b><a href="#book_part2_chap2">Portage and Software</a></b><br>
The main reason for portage is to maintain the software on your system. In this
chapter you learn how to get information from a package, update your package
database, install/remove/update software and more...
</li>
<li>
<b><a href="#book_part2_chap3">Portage Features</a></b><br>
Gentoo's Portage allows for several features that improve portage-related
aspects, such as build time. This chapter explains the existing features.
</li>
<li>
<b><a href="#book_part2_chap4">Controlling Portage Behaviour</a></b><br>
You can tweak Portage to your own needs/environment. Learn how to protect files,
select mirrors, change directory locations and more.
</li>
<li>
<b><a href="#book_part2_chap5">Initscripts</a></b><br>
Gentoo uses a special initscript format which, amongst other features, allows
dependency-driven decisions and virtual initscripts. This chapter explains all
these aspects and explains how to deal with these scripts.
</li>
<li>
<b><a href="#book_part2_chap6">Environment Variables</a></b><br>
With Gentoo you can easily manage the environment variables for your system.
This chapter explains how you do that, and also describes frequently used
variables.
</li>
</ol>
</li>
</ul>
<a name="book_part1"></a><h2>A. Installing Gentoo</h2>
<a name="book_part1_chap1"></a><h3>1. About the Gentoo Linux Installation</h3>
<a name="book_id2693634_chap1"></a><p class="chaphead">
<span class="chapnum">1.a. </span>Introduction</p>
<a name="book_id2693634_chap1_sect1"></a><p class="secthead">Welcome!</p>

<p>
First of all, <span class="emphasis">welcome</span> to Gentoo. You are about to enter the world
of choices and performance. Gentoo is all about choices. When
installing Gentoo, this is made clear to you several times -- you can
choose how much you want to compile yourself, how to install Gentoo,
what system logger you want, etc.
</p>

<p>
Gentoo is a fast, modern metadistribution with a clean and flexible
design. Gentoo is built around free software and doesn't hide to its
users what is beneath the hood. Portage, the package maintenance system
which Gentoo uses, is written in Python, meaning you can easily view and
modify the source code. Gentoo's packaging system uses source code
(although support for precompiled packages is included too) and
configuring Gentoo happens through regular textfiles. In other words,
openness everywhere.
</p>

<p>
It is very important that you understand that <span class="emphasis">choices</span> are what
makes Gentoo run. We try not to force you onto anything you don't like.
If you feel like we do, please <a href="http://bugs.gentoo.org">bugreport</a> it.
</p>

<a name="book_id2693634_chap1_sect2"></a><p class="secthead">How is the Installation Structured?</p>

<p>
The Gentoo Installation can be seen as a 10-step procedure,
corresponding to chapters 2 - 11. Every step results in
a certain state:
</p>

<ul>
<li>
  After step 1, you are in a working environment ready to install Gentoo
</li>
<li>
  After step 2, your internet connection is ready to install Gentoo
  (this can be optional in certain situations)
</li>
<li>
  After step 3, your hard disks are initialized to house your Gentoo
  installation
</li>
<li>
  After step 4, your installation environment is prepared and you are
  chrooted into the new environment
</li>
<li>
  After step 5, core packages, which are the same on all Gentoo
  installations, are installed
</li>
<li>
  After step 6, you have compiled your Linux kernel
</li>
<li>
  After step 7, you have written most of your Gentoo system
  configuration files
</li>
<li>
  After step 8, your choice of bootloader has been installed and
  configured
</li>
<li>
  After step 9, necessary system tools (which you can choose from a nice
  list) are installed
</li>
<li>
  After step 10, you are logged in into your new Gentoo installation
</li>
</ul>

<p>
When you are given a certain choice, we try our best to explain what the pros 
and cons are. We will continue then with a default
choice, identified by &quot;Default: &quot; in the title. The other
possibilities are marked by &quot;Alternative: &quot;. Do <span class="emphasis">not</span>
think that the default is what we recommend. It is however what we
believe most users will use.
</p>

<p>
Sometimes you can pursue an optional step. Such steps are marked as
&quot;Optional: &quot; and are therefore not needed to install Gentoo.
However, some optional steps are depending on a previous decision you
made. We will inform you when this happens, both when you make the
decision, and right before the optional step is described.
</p>

<a name="book_id2693634_chap1_sect3"></a><p class="secthead">What are my Options?</p>

<p>
You can install Gentoo in many different ways. You can download and install from
one of our LiveCDs (installation CDs), from an existing distribution, from a
bootable CD (such as Knoppix), from a netbooted environment, etc.
</p>

<p>
You also have several possibilities: you can compile your entire system from
scratch or install prebuilt packages to have your Gentoo environment up and
running in no time. And of course you have intermediate solutions in which you
don't compile everything but start from a semi-ready system.
</p>

<a name="book_id2693634_chap1_sect4"></a><p class="secthead">Troubles?</p>

<p>
If you find a problem in the installation (or in the installation
documentation), please check the <a href="/proj/en/releng/release/2004.0/x86/x86-release-notes.xml#doc_chap2_sect2">
release errata</a>, visit our <a href="http://bugs.gentoo.org">bugtracking
system</a> and check if the bug is known. If not, please create a bugreport 
for it so we can take care of it. Do not be afraid of the developers who are 
assigned to (your) bugs -- they generally don't eat people.
</p>

<p>
If you are uncertain if the problem is a user-problem (some error you
made despite having read the documentation carefully) or a
software-problem (some error we made despite having tested the
installation/documentation carefully) you are free to join #gentoo on
irc.freenode.net. Of course, you are welcome otherwise too :)
</p>

<p>
If you have a question regarding Gentoo, check out our <a href="/doc/en/faq.xml">Frequently Asked
Questions</a>, available from the <a href="/doc/en/">Gentoo Documentation</a>. You can
also view the <a href="http://forums.gentoo.org/viewforum.php?f=40">FAQs</a> on our
<a href="http://forums.gentoo.org">forums</a>. If you can't find the answer
there ask on #gentoo, our IRC-channel on irc.freenode.net. Yes, several of
us are freaks who sit on IRC :-)
</p>

<a name="book_id2693634_chap2"></a><p class="chaphead">
<span class="chapnum">1.b. </span>Prebuilt or Compile-All?</p>
<a name="book_id2693634_chap2_sect1"></a><p class="secthead">What is the Gentoo Reference Platform?</p>

<p>
The Gentoo Reference Platform, from now on abbreviated to GRP, is a snapshot of
prebuilt packages users (that means you!) can install during the installation of
Gentoo to speed up the installation process. The GRP consists out of all
packages required to have a fully functional Gentoo installation. They are not
only sufficient to have a base installation up to speed in no time, but all
lengthier builds (such as KDE, XFree, GNOME, OpenOffice, Mozilla, ...) are
available as GRP packages too.
</p>

<p>
However, these prebuilt packages aren't maintained during the lifetime of the
Gentoo distribution. They are snapshots released at every Gentoo release and
make it possible to have a functional environment in a short amount of time. You
can then upgrade your system in the background while working in your Gentoo
environment.
</p>

<a name="book_id2693634_chap2_sect2"></a><p class="secthead">How Portage Handles GRP Packages</p>

<p>
In order for Portage to be able to install the prebuilt packages they must
reside in the <span class="path">/usr/portage/packages/All</span> directory. If you are
installing Gentoo from a LiveCD that houses these packages and you wish to
install Gentoo using the GRP packages, we will tell you how to copy over those 
packages to this location later.
</p>

<p>
However, having the packages alone isn't sufficient: your Portage tree - the
collection of <span class="emphasis">ebuilds</span> (files that contain all information about a
package, such as its description, homepage, sourcecode URLs, compilation
instructions, dependencies, etc.) - must be synchronised with the GRP set: the
versions of the available ebuilds and their accompanying GRP packages must 
match.
</p>

<p>
For this reason you will have to install a Portage snapshot instead of
synchronising Portage with the latest available tree if you want to use the GRP
installation method.
</p>

<a name="book_id2693634_chap2_sect3"></a><p class="secthead">Is GRP Available?</p>

<p>
Not all architectures provide GRP packages. That doesn't mean GRP isn't
supported on the other architectures, but it means that we don't have the 
resources to build and test the GRP packages.
</p>

<p>
At this moment we provide GRP packages for the following architectures:
</p>

<ul>
  <li>
    The <b>x86</b> architecture (x86, i686, pentium3, pentium4, athlon-xp) and
    the special purpose <a href="http://hardened.gentoo.org">Gentoo
    Hardened</a> profile
  </li>
  <li>
    The <b>amd64</b> architecture (amd64)
  </li>
  <li>
    The <b>sparc</b> architecture (sparc64)
  </li>
  <li>
    The <b>ppc</b> architecture (ppc, G3, G4)
  </li>
</ul>

<p>
The <a href="http://hardened.gentoo.org">Gentoo Hardened</a> project offers
their own GRP set (and stages) focused on building a proactively secure system.
Anyone looking to build a server on the x86 architecture should investigate this
option.
</p>

<p>
If your architecture (or subarchitecture) isn't on this list, you are not
able to opt for a GRP installation.
</p>

<p>
Now that this introduction is over, let's continue with <a href="#book_part1_chap2">Choosing the Right Installation Medium</a>.
</p>

<a name="book_part1_chap2"></a><h3>2. Choosing the Right Installation Medium</h3>
<a name="book_id2682189_chap1"></a><p class="chaphead">
<span class="chapnum">2.a. </span>Hardware Requirements</p>
<a name="book_id2682189_chap1_sect1"></a><p class="secthead">Introduction</p>

<p>
Before we start, we first list what hardware requirements you need to
successfully install Gentoo on your box. This of course depends on your
architecture.
</p>

<a name="book_id2682189_chap1_sect2"></a><p class="secthead">Architectures</p>

<p>
Gentoo is officially available for seven architectures, and has experimental
support for one more. The official architectures are <b>x86</b> (including all
subarchitectures, like Pentium, Athlon, etc.), <b>sparc</b> (both Sparc32
and Sparc64), <b>ppc</b> (PowerPC), <b>hppa</b>, <b>alpha</b>, <b>mips</b> and
<b>amd64</b>. Experimental support is available for <b>ia64</b>.
</p>

<p>
Assuming you know your architecture, check the following requirements before you
continue with the Gentoo installation:
</p>

<ul>
<li>
  You need at least 1 Gb of free disk space
</li>
<li>
  If you do not use prebuilt packages, you need at least 300 Mb of memory (RAM +
  swap)
</li>
<li>
  For the <span class="emphasis">x86 architecture</span>, you need a 486+ processor and 
  at least 64 megabytes of memory
</li>
<li>
  For the <span class="emphasis">Alpha architecture</span>, you should check with the <a href="http://www.alphalinux.org/faq/FAQ-5.html">Alpha/Linux FAQ</a>
</li>
<li>
  For the <span class="emphasis">hppa architecture</span>, you should check with the <a href="http://www.pateam.org">PA Team website</a>
</li>
<li>
  For the <span class="emphasis">PowerPC architecture</span>, you need at least a PowerPC (at best a
  G3 or G4 like the iMac, iBook, PowerBook, etc.)
</li>
<li>
  For the <span class="emphasis">SPARC architecture</span>, you should check with the <a href="http://www.ultralinux.org/faq.html#s_2">UltraLinux FAQ</a>
</li>
<li>
  For the <span class="emphasis">MIPS architecture</span>, you should check with the <a href="/doc/en/mips-requirements.xml">MIPS Hardware Requirements</a> document
</li>
<li>
  For the <span class="emphasis">AMD64 architecture</span>, you should check with <a href="http://dev.gentoo.org/~brad_mssw/amd64-tech-notes.html">AMD64 Tech
  Notes</a>
</li>
</ul>

<a name="book_id2682189_chap2"></a><p class="chaphead">
<span class="chapnum">2.b. </span>Make your Choice</p>
<a name="book_id2682189_chap2_sect1"></a><p class="secthead">Introduction</p>

<p>
Still interested in trying out Gentoo? Well, then it is now time to
choose the installation medium you want to use. Yes, you have the
choice, no, they are not all equal, and yes, the result is always the same: a
Gentoo base system.
</p>

<p>
The installation media we will describe are:
</p>

<ul>
<li>Gentoo LiveCDs</li>
<li>Knoppix</li>
<li>Other Distribution</li>
<li>Net Booting</li>
</ul>

<p>
Every single media has its advantages and disadvantages. We will list
the pros and cons of every medium so you have all the information to
make a justified decision. But before we continue, let's explain our
three-stage installation.
</p>

<a name="book_id2682189_chap2_sect2"></a><p class="secthead">The Three Stages</p>

<p>
Gentoo Linux can be installed using one of three <span class="emphasis">stage</span> tarball files.
The one you choose depends on how much of the system you want to compile
yourself. The <span class="emphasis">stage1</span> tarball is used when you want to bootstrap and
build the entire system from scratch. The <span class="emphasis">stage2</span> tarball is used for
building the entire system from a bootstrapped &quot;semi-compiled&quot; state.
The <span class="emphasis">stage3</span> tarball already contains a basic Gentoo Linux system that has
been built for you. As we will explain later, you can also install
Gentoo without compiling anything (except your kernel and some optional 
packages). If you want this, you have to use a <span class="emphasis">stage3</span> tarball.
</p>

<p>
Now what stage do you have to choose?
</p>

<p>
Starting from a <span class="emphasis">stage1</span> allows you to have total control over the
optimization settings and optional build-time functionality that is
initially enabled on your system. This makes <span class="emphasis">stage1</span> installs good for
power users who know what they are doing. It is also a great
installation method for those who would like to know more about the
inner workings of Gentoo Linux.
</p>

<table class="ntable">
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>Stage1</b></td>
  <td bgcolor="#7a5ada" class="infohead"><b>Pros and Cons</b></td>
</tr>
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>+</b></td>
  <td bgcolor="#ddddff" class="tableinfo">
    Allows you to have total control over the optimization settings and optional
    build-time functionality that is initially enabled on your system
  </td>
</tr>
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>+</b></td>
  <td bgcolor="#ddddff" class="tableinfo">Suitable for powerusers that know what they are doing</td>
</tr>
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>+</b></td>
  <td bgcolor="#ddddff" class="tableinfo">Allows you to learn more about the inner workings of Gentoo</td>
</tr>
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>-</b></td>
  <td bgcolor="#ddddff" class="tableinfo">Takes a long time to finish the installation</td>
</tr>
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>-</b></td>
  <td bgcolor="#ddddff" class="tableinfo">
    If you don't intend to tweak the settings, it is probably a waste of time
  </td>
</tr>
</table>

<p>
<span class="emphasis">Stage2</span> installs allow you to skip the bootstrap process and doing this
is fine if you are happy with the optimization settings that we chose
for your particular <span class="emphasis">stage2</span> tarball.
</p>

<table class="ntable">
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>Stage2</b></td>
  <td bgcolor="#7a5ada" class="infohead"><b>Pros and Cons</b></td>
</tr>
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>+</b></td>
  <td bgcolor="#ddddff" class="tableinfo">You don't need to bootstrap</td>
</tr>
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>+</b></td>
  <td bgcolor="#ddddff" class="tableinfo">Faster than starting with stage1</td>
</tr>
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>+</b></td>
  <td bgcolor="#ddddff" class="tableinfo">You can still tweak your settings</td>
</tr>
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>-</b></td>
  <td bgcolor="#ddddff" class="tableinfo">You cannot tweak as much as with a stage1</td>
</tr>
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>-</b></td>
  <td bgcolor="#ddddff" class="tableinfo">It's not the fastest way to install Gentoo</td>
</tr>
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>-</b></td>
  <td bgcolor="#ddddff" class="tableinfo">You have to accept the optimizations we chose for the bootstrap</td>
</tr>
</table>

<p>
Choosing to go with a <span class="emphasis">stage3</span> allows for the fastest install of Gentoo
Linux, but also means that your base system will have the optimization
settings that we chose for you (which to be honest, are good settings
and were carefully chosen to enhance performance while maintaining
stability). <span class="emphasis">stage3</span> is also required if you want to install Gentoo using
prebuilt packages.
</p>

<table class="ntable">
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>Stage3</b></td>
  <td bgcolor="#7a5ada" class="infohead"><b>Pros and Cons</b></td>
</tr>
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>+</b></td>
  <td bgcolor="#ddddff" class="tableinfo">Fastest way to get a Gentoo base system</td>
</tr>
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>-</b></td>
  <td bgcolor="#ddddff" class="tableinfo">You cannot tweak the base system - it's built already</td>
</tr>
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>-</b></td>
  <td bgcolor="#ddddff" class="tableinfo">You cannot brag about having used stage1 or stage2</td>
</tr>
</table>

<p>
Write down (or remember) what stage you want to use. You need this later when
you decide what LiveCD (or other installation medium) you want to use. You might
be interested to know that, if you decide to use different optimization settings
after having installed Gentoo, you will be able to recompile your entire system
with the new optimization settings.
</p>

<p>
Now take a look at the available installation media:
</p>

<ul>
<li>
  <a href="#book_id2682189_chap2_sect3">Gentoo LiveCDs</a>
  <ul>
  <li><a href="#book_id2682189_chap2_sect4">Gentoo basic LiveCDs</a></li>
  <li><a href="#book_id2682189_chap2_sect5">Gentoo 2-CD LiveCD Set</a></li>
  <li><a href="#book_id2682189_chap2_sect6">Gentoo KDE/Gnome LiveCD</a></li>
  </ul>
</li>
<li><a href="#book_id2682189_chap2_sect7">Knoppix</a></li>
<li><a href="#book_id2682189_chap2_sect8">Existing Distribution</a></li>
<li><a href="#book_id2682189_chap2_sect9">Net Booting</a></li>
</ul>

<a name="book_id2682189_chap2_sect3"></a><p class="secthead">Gentoo LiveCDs</p>

<p>
The <span class="emphasis">Gentoo LiveCDs</span> are bootable CDs which contain a
self-sustained Gentoo environment. They allow you to boot Linux from the CD.
During the boot process your hardware is detected and the appropriate drivers
are loaded. They are maintained by Gentoo developers and are available
for all supported architectures (x86, alpha, sparc, ppc, hppa, amd64). Even
more, some architectures have several available LiveCDs. 
</p>

<p>
All LiveCDs allow you to boot, setup networking, initialize your
partitions and start installing Gentoo from the Internet. However, some
LiveCDs also contain all necessary source code or even precompiled
packages so you are able to install Gentoo without networking.
</p>

<p>
We provide several types of LiveCDs. The following table shows you what LiveCDs
are available for your architecture:
</p>

<table class="ntable">
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>Architecture</b></td>
  <td bgcolor="#7a5ada" class="infohead"><b>Basic LiveCD</b></td>
  <td bgcolor="#7a5ada" class="infohead"><b>2-CD LiveCD Set</b></td>
  <td bgcolor="#7a5ada" class="infohead"><b>KDE/Gnome LiveCD</b></td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">x86</td>
  <td bgcolor="#ddddff" class="tableinfo">+</td>
  <td bgcolor="#ddddff" class="tableinfo">+</td>
  <td bgcolor="#ddddff" class="tableinfo"></td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">sparc</td>
  <td bgcolor="#ddddff" class="tableinfo">+</td>
  <td bgcolor="#ddddff" class="tableinfo">+</td>
  <td bgcolor="#ddddff" class="tableinfo"></td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">ppc</td>
  <td bgcolor="#ddddff" class="tableinfo">+</td>
  <td bgcolor="#ddddff" class="tableinfo">+</td>
  <td bgcolor="#ddddff" class="tableinfo">+</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">hppa</td>
  <td bgcolor="#ddddff" class="tableinfo">+</td>
  <td bgcolor="#ddddff" class="tableinfo"></td>
  <td bgcolor="#ddddff" class="tableinfo"></td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">alpha</td>
  <td bgcolor="#ddddff" class="tableinfo">+</td>
  <td bgcolor="#ddddff" class="tableinfo"></td>
  <td bgcolor="#ddddff" class="tableinfo"></td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">amd64</td>
  <td bgcolor="#ddddff" class="tableinfo">+</td>
  <td bgcolor="#ddddff" class="tableinfo"></td>
  <td bgcolor="#ddddff" class="tableinfo"></td>
</tr>
</table>

<p>
Now what do these LiveCDs contain?
</p>

<a name="book_id2682189_chap2_sect4"></a><p class="secthead">Gentoo basic LiveCDs</p>

<p>
This is a small, no-nonsense, bootable CD which sole purpose is to boot the 
system, prepare the networking and continue with the Gentoo installation. It 
does not contain any stages (or, in some cases, a single stage1 file), 
source code or precompiled packages. For example the x86 variant of this basic
LiveCD can be found in the <span class="path">universal</span> subdirectory and is called
<span class="code">install-x86-minimal-2004.0.iso</span>.
</p>

<table class="ntable">
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>Basic LiveCD</b></td>
  <td bgcolor="#7a5ada" class="infohead"><b>Pros and Cons</b></td>
</tr>
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>+</b></td>
  <td bgcolor="#ddddff" class="tableinfo">Smallest download</td>
</tr>
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>+</b></td>
  <td bgcolor="#ddddff" class="tableinfo">Suitable for a complete architecture</td>
</tr>
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>+</b></td>
  <td bgcolor="#ddddff" class="tableinfo">
    You can do a stage1, stage2 or stage3 by getting the stage tarball off the
    net
  </td>
</tr>
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>-</b></td>
  <td bgcolor="#ddddff" class="tableinfo">
    Contains no stages, no portage snapshot, no GRP packages and therefore not 
    suitable for networkless installation
  </td>
</tr>
</table>

<a name="book_id2682189_chap2_sect5"></a><p class="secthead">Gentoo 2-CD LiveCD Set</p>

<p>
The first CD is a bootable CD suitable to install Gentoo without networking. It
contains a stage1 and several stage3 tarballs (optimized for the individual
subarchitectures) and the necessary sourcecode to install Gentoo from stage1
without the need for a working network connection. Some architectures also
provide stage2 tarballs and a set of prebuilt packages on the first CD. For
example the x86 variant of this CD is called <span class="code">install-x86-universal-2004.0.iso</span>
and can be found in the <span class="path">universal</span> subdirectory.
</p>

<p>
The second CD only contains precompiled packages and can be used to install 
software after a succesfull Gentoo Installation. To install Gentoo, you only 
need CD-1, but if you want OpenOffice.org, Mozilla, KDE, GNOME etc. without 
having to compile every single one of them, you need CD-2 too. For example the
Athlon-XP subarchitecture CD-2 is called <span class="code">packages-athlon-xp-2004.0.iso</span>
and can be found in the appropriate subarchitecture-directory.
</p>

<p>
We provide both a &quot;default&quot; LiveCD set, bootable on all subarchitectures for a
specific architecture, as well as optimized LiveCDs (CD 2) for the various
subarchitectures (such as Athlon-XP, G4, etc.).
</p>

<table class="ntable">
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>2-CD LiveCD Set</b></td>
  <td bgcolor="#7a5ada" class="infohead"><b>Pros and Cons</b></td>
</tr>
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>+</b></td>
  <td bgcolor="#ddddff" class="tableinfo">Optimized to your architecture and subarchitecture</td>
</tr>
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>+</b></td>
  <td bgcolor="#ddddff" class="tableinfo">Provide precompiled packages for fast Gentoo installations</td>
</tr>
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>+</b></td>
  <td bgcolor="#ddddff" class="tableinfo">
    Contains everything you need. You can even install without a network
    connection.
  </td>
</tr>
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>-</b></td>
  <td bgcolor="#ddddff" class="tableinfo">Huge download</td>
</tr>
</table>

<a name="book_id2682189_chap2_sect6"></a><p class="secthead">Gentoo KDE/Gnome LiveCD</p>

<p>
This cd contains a complete live Gentoo environment featuring the KDE and Gnome
desktop environment, an apache webserver, several webbrowsers, irc clients,
firewall/router stuff, network auditing stuff, a lot of CLI tools... It can be
used to fix a broken filesystem. The kde/gnome livecd contains an entire
gcc (distcc, ccache enabled) toolchain; boot all systems on your network using 
this cd and experience the power of distributed compilation. This cd can be
used to install Gentoo, but does not contain GRP, source code, nor a portage
snapshot or stages.
</p>

<table class="ntable">
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>KDE/Gnome LiveCD</b></td>
  <td bgcolor="#7a5ada" class="infohead"><b>Pros and Cons</b></td>
</tr>
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>+</b></td>
  <td bgcolor="#ddddff" class="tableinfo">You can work with Gentoo without installing it on your hard disk</td>
</tr>
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>+</b></td>
  <td bgcolor="#ddddff" class="tableinfo">You can also use it to install Gentoo :)</td>
</tr>
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>-</b></td>
  <td bgcolor="#ddddff" class="tableinfo">
    Huge download, but doesn't contain a portage snapshot, stages, precompiled
    packages or source code.
  </td>
</tr>
</table>

<a name="book_id2682189_chap2_sect7"></a><p class="secthead">Knoppix</p>

<p>
<span class="emphasis">Knoppix</span> is a well-known bootable CD with a fully working desktop
environment. It allows you to boot from CD and, without interaction with
your disk, start up office applications or system tools. In our case, we
will use the system and networking tools to install Gentoo.
</p>

<p>
If you plan on using Knoppix, you can download it from <a href="http://www.knoppix.com">the Knoppix homepage</a>.
</p>

<a name="book_id2682189_chap2_sect8"></a><p class="secthead">Existing Distribution</p>

<p>
If you start installing from another already installed Linux
distribution, then you benefit from all the tools already available in your
installed Linux distribution. If you want to install Gentoo from an existing
distribution, you should skip the rest of this chapter and 
continue with <a href="#book_part1_chap3">Configuring your Network</a>.
</p>

<a name="book_id2682189_chap2_sect9"></a><p class="secthead">Net Booting</p>

<p>
In some cases you do not have the possibility to boot from a CD or use an
existing installation to install Gentoo from. In case your system has a network
interface and BIOS/ROM capable of performing a netboot (PXE) you can have it
download a small system at boot time and install from that system onwards.
</p>

<p>
In case you want to use the net boot method (<span class="emphasis">MIPS</span> users have no choice)
you should already have a working DHCP and TFTP server. Information on setting
up a <a href="/doc/en/diskless-howto.xml#doc_chap3">DHCP server</a> and <a href="/doc/en/diskless-howto.xml#doc_chap4">TFTP server</a> are available in
the <a href="/doc/en/diskless-howto.xml">Diskless-HOWTO</a>. 
</p>

<p>
Depending on your setup, you might need to create or download a kernel image for
your system.
</p>

<a name="book_id2682189_chap2_sect10"></a><p class="secthead">Choosing the Installation Medium</p>

<p>
Now make your choice of installation medium and continue with the
appropriate section. As this is a Gentoo handbook, we'll default to using
the Gentoo LiveCDs, but you can find the necessary information about
using the other installation media as alternative sections.
</p>

<ul>
<li>
  <a href="#book_id2682189_chap3">Default: Download, Burn and Boot a Gentoo LiveCD</a>
</li>
<li>
  <a href="#book_id2682189_chap4">Alternative: Download, Burn and Boot Knoppix</a>
</li>
<li>
  <a href="#book_id2682189_chap5">Alternative: Net Booting</a>
</li>
</ul>

<a name="book_id2682189_chap3"></a><p class="chaphead">
<span class="chapnum">2.c. </span>Default: Download, Burn and Boot a Gentoo LiveCD</p>
<a name="book_id2682189_chap3_sect1"></a><p class="secthead">Downloading and Burning the LiveCDs</p>

<p>
You have chosen to use a Gentoo LiveCD (if not, then you are reading the
wrong section). We'll first start by downloading and burning the chosen
LiveCD. We previously discussed the several available LiveCDs, but where can you
find them? 
</p>

<p>
The following table lists the relative paths where you can find the LiveCD ISOs
(CD images). The path is relative to the main Gentoo directory on any of our
<a href="/main/en/mirrors.xml">mirrors</a>.
</p>

<table class="ntable">
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>Architecture</b></td>
  <td bgcolor="#7a5ada" class="infohead"><b>Path</b></td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">x86</td>
  <td bgcolor="#ddddff" class="tableinfo"><span class="path">releases/x86/2004.0/livecd</span></td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">sparc</td>
  <td bgcolor="#ddddff" class="tableinfo"><span class="path">releases/sparc/2004.0/livecd</span></td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">ppc</td>
  <td bgcolor="#ddddff" class="tableinfo"><span class="path">releases/ppc/2004.0/livecd</span></td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">hppa</td>
  <td bgcolor="#ddddff" class="tableinfo"><span class="path">experimental/hppa/livecd</span></td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">alpha</td>
  <td bgcolor="#ddddff" class="tableinfo"><span class="path">experimental/alpha/livecd</span></td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">amd64</td>
  <td bgcolor="#ddddff" class="tableinfo"><span class="path">releases/amd64/2004.0/livecd</span></td>
</tr>
</table>

<p>
Visit one of our <a href="/main/en/mirrors.xml">mirrors</a> and go to
the path where the LiveCD(s) of your choice are located. Inside that
directory you'll find so-called ISO-files. Those are full CD images
which you can write on a CD-R.
</p>

<p>
In case you wonder if your downloaded file is corrupted or not, you can
check its MD5 checksum and compare it with the MD5 checksum we provide (such as
<span class="path">install-x86-minimal-2004.0.iso.md5</span>). You can check the MD5 checksum
with the <span class="code">md5sum</span> tool under Linux/Unix or <a href="http://www.md5summer.org">md5summer</a> for Windows.
</p>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#bbffbb"><p class="note">
<b>Note: </b>
Please check the descriptions on the <a href="http://store.gentoo.org">Gentoo
Store</a> to know what LiveCD (or stage) you should use for your CPU. A 
common mistake is choosing a LiveCD (or stage) for a CPU that is more recent 
than yours (such as &quot;athlon-xp&quot; for a regular AMD Athlon).
</p></td></tr></table>

<p>
To burn the downloaded ISO(s), you have to select raw-burning. How you
do this is highly program-dependent. We will discuss a couple of popular
tools on how to do this.
</p>

<ul>
  <li>
    With EasyCD Creator you select <span class="code">File</span>, <span class="code">Record CD
    from CD image</span>. Then you change the <span class="code">Files of type</span> to <span class="code">ISO image
    file</span>. Then locate the ISO file and click <span class="code">Open</span>. When you click on
    <span class="code">Start recording</span> the ISO image will be burned correctly onto the CD-R.
  </li>
  <li>
    With Nero Burning ROM, select <span class="code">File</span>, <span class="code">Burn CD image</span>. Set the
    type of file to <span class="code">*.*</span> and select the ISO file. Older versions of Nero
    will tell you they don't recognize the format -- confirm here, it does
    recognize it but doesn't know it yet :) In the next dialog, set the
    following parameters:
    <ul>
      <li>Type of image: <span class="code">Data Mode 1</span>
</li>
      <li>Block size: <span class="code">2048 bytes</span>
</li>
      <li>File precursor and length of the image trailer: <span class="code">0 bytes</span>
</li>
      <li>Scrambled: <span class="code">no</span>
</li>
      <li>Swapped: <span class="code">no</span>
</li>
    </ul>
    Now click on <span class="code">OK</span> and then <span class="code">Burn</span> (the CD-R)
  </li>
  <li>
    With cdrecord, you simply type <span class="code">cdrecord dev=/dev/hdc</span> (replace
    <span class="path">/dev/hdc</span> with your CD-RW drive's device path) followed
    by the path to the ISO file :)
  </li>
  <li>
    With Mac OS X Panther, launch <span class="code">Disk Utility</span> from
    <span class="path">Applications/Utilities</span>, select <span class="code">Open</span> from the
    <span class="code">Images</span> menu, select the mounted disk image in the main window and 
    select <span class="code">Burn</span> in the <span class="code">Images</span> menu.
  </li>
  <li>
    With Mac OS X Jaguar, launch <span class="code">Disk Copy</span> from
    <span class="path">Applications/Utilities</span>, select <span class="code">Burn Image</span> from the
    <span class="code">File</span> menu, select the ISO and click the <span class="code">Burn</span> button.
  </li>
</ul>

<p>
The following subsections explain how to boot the architecture-specific LiveCDs. 
Be sure to pick the subsection which is relevant for your architecture. 
</p>

<ul>
<li><a href="#book_id2682189_chap3_sect2">Booting the x86 or AMD64 LiveCD(s)</a></li>
<li><a href="#book_id2682189_chap3_sect3">Booting the Alpha LiveCD(s)</a></li>
<li><a href="#book_id2682189_chap3_sect4">Booting the HPPA LiveCD(s)</a></li>
<li><a href="#book_id2682189_chap3_sect5">Booting the SPARC LiveCD(s)</a></li>
<li><a href="#book_id2682189_chap3_sect6">Booting the PPC LiveCD(s)</a></li>
</ul>

<a name="book_id2682189_chap3_sect2"></a><p class="secthead">Booting the x86 or AMD64 LiveCD(s)</p>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#ffffbb"><p class="note">
<b>Important: </b>
This subsection is for x86 and amd64 architectures <span class="emphasis">only</span>. Read this whole 
subsection before continuing, as you will not always have the time to read 
before acting.
</p></td></tr></table>

<p>
Once you have burned your installation CDs, it is time to boot them.
Reboot your system and enter the BIOS. This is usually done by hitting DEL, F1
or ESC, depending on your BIOS. Inside the BIOS, change the boot
order so that the CD-ROM is tried before the hard disk. This is often found
under &quot;CMOS Setup&quot;. If you don't do this, your system will just reboot from the 
hard disk, ignoring the CD-ROM.
</p>

<p>
Now place the installation CD in the CD-ROM drive (duh) and reboot. You
should see a fancy boot screen with the Gentoo Linux logo on it. At this
screen, you can hit Enter to begin the boot process with the default
boot options, or boot the LiveCD with custom boot options by specifying a 
kernel followed by boot options and then hitting Enter. 
</p>

<p>
Specifying a kernel? Yes, we provide several kernels on our LiveCDs. The
default one is <span class="code">gentoo</span>. Other kernels are <span class="code">smp</span>, which activates 
support for multi-cpu systems and the <span class="code">-nofb</span> variants which disable
framebuffer.
</p>

<p>
Below you'll find a short overview on the available kernels:
</p>

<table class="ntable">
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>Kernel</b></td>
  <td bgcolor="#7a5ada" class="infohead"><b>Description</b></td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">gentoo</td>
  <td bgcolor="#ddddff" class="tableinfo">Default kernel with framebuffer support</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">smp</td>
  <td bgcolor="#ddddff" class="tableinfo">Kernel with support for multiple CPUs</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">gentoo-nofb</td>
  <td bgcolor="#ddddff" class="tableinfo">Same as <span class="code">gentoo</span> but without framebuffer support</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">smp-nofb</td>
  <td bgcolor="#ddddff" class="tableinfo">Same as <span class="code">smp</span> but without framebuffer support</td>
</tr>
</table>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#bbffbb"><p class="note">
<b>Note: </b>
Some LiveCDs provide extra kernels, or don't provide kernels listed in
this document. To list the available kernels at boot-time, press F1 when
you are at the bootscreen.
</p></td></tr></table>

<p>
You can also provide kernel options. They represent optional settings
you can (de)activate at will. The following table explains all available
kernel options.
</p>

<table class="ntable">
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>Kernel Option</b></td>
  <td bgcolor="#7a5ada" class="infohead"><b>Description</b></td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">acpi</td>
  <td bgcolor="#ddddff" class="tableinfo">Activate ACPI support</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">doataraid</td>
  <td bgcolor="#ddddff" class="tableinfo">Activate support for ATA RAID devices</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">dofirewire</td>
  <td bgcolor="#ddddff" class="tableinfo">Activate support for FireWire devices</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">dopcmcia</td>
  <td bgcolor="#ddddff" class="tableinfo">Activate PCMCIA support</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">doscsi</td>
  <td bgcolor="#ddddff" class="tableinfo">Activate support for SCSI devices</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">noapm</td>
  <td bgcolor="#ddddff" class="tableinfo">Deactivate APM support</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">nodetect</td>
  <td bgcolor="#ddddff" class="tableinfo">Deactivate hardware detection (kudzu/hotplug)</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">nodhcp</td>
  <td bgcolor="#ddddff" class="tableinfo">Do not use DHCP to query for an IP address</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">noevms</td>
  <td bgcolor="#ddddff" class="tableinfo">Deactivate EVMS support</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">nohotplug</td>
  <td bgcolor="#ddddff" class="tableinfo">Deactivate hotplug (kernel loading program)</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">nousb</td>
  <td bgcolor="#ddddff" class="tableinfo">Deactivate USB support</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">ide=nodma</td>
  <td bgcolor="#ddddff" class="tableinfo">Deactivate DMA support</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">cdcache</td>
  <td bgcolor="#ddddff" class="tableinfo">
    Cache the entire runtime portion of the CD in memory, which allows
    you to unmount your CD and use another one during installation.
  </td>
</tr>
</table>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#bbffbb"><p class="note">
<b>Note: </b>
Some LiveCDs provide extra boot options, or don't provide boot options
listed in this document. To list the available kernels at boot-time,
press F2 when you are at the bootscreen.
</p></td></tr></table>

<p>
Now boot your CD, select a kernel (if you are not happy with the default
<span class="code">gentoo</span> kernel) and boot options. As an example, we show you how
to boot the <span class="code">gentoo</span> kernel, with <span class="code">dopcmcia cdcache</span> as kernel
parameters:
</p>

<a name="doc_chap_pre1"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;1: Booting a LiveCD</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
boot: <span class="input">gentoo dopcmcia cdcache</span>
</pre></td></tr>
</table>

<p>
You will then be greeted with another boot screen and progress bar. Once
the boot process completes, you will be automatically logged in to the
&quot;Live&quot; Gentoo Linux as &quot;root&quot;, the super user. You should 
have a root (&quot;#&quot;) prompt on the current console and can also switch 
to other consoles by pressing Alt-F2, Alt-F3 and Alt-F4. Get back to the one 
you started on by pressing Alt-F1.
</p>

<p>
If you are installing Gentoo on a system with a non-US keyboard, use
<span class="code">loadkeys</span> to load the keymap for your keyboard. To list the available
keymaps, execute <span class="code">ls /usr/share/keymaps</span>.
</p>

<a name="doc_chap_pre2"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;2: Listing available keymaps</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">ls /usr/share/keymaps</span>
</pre></td></tr>
</table>

<p>
Now load the keymap of your choice:
</p>

<a name="doc_chap_pre3"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;3: Loading a keymap</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">loadkeys be2-latin1</span>
</pre></td></tr>
</table>

<p>
Now continue with <a href="#book_id2682189_chap3_sect7">Extra Hardware 
Configuration</a>.
</p>

<a name="book_id2682189_chap3_sect3"></a><p class="secthead">Booting the Alpha LiveCD(s)</p>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#ffffbb"><p class="note">
<b>Important: </b>
This subsection is for alpha architectures <span class="emphasis">only</span>. Read this whole
subsection before continuing, as you will not always have the time to read 
before acting.
</p></td></tr></table>

<p>
When your Alpha is powered on, the first thing that gets started is the
firmware. It is loosely synonymous with the BIOS software on PC systems. There
are two types of firmware on Alpha systems: SRM (<span class="emphasis">Systems Reference 
Manual</span>) and ARC (<span class="emphasis">Advanced Risc Console</span>).
</p>

<p>
SRM is based on the Alpha Console Subsystem specification, which provides an
operating environment for OpenVMS, Tru64 UNIX, and Linux operating systems. ARM
is based on the Advanced RISC Computing (ARC) specification, which provides
an operating environment for Windows NT.
</p>

<p>
If your Alpha system supports both SRC and ARCs (ARC, AlphaBIOS, ARCSBIOS) you
should follow <a href="http://www.alphalinux.org/faq/x31.html">these
instructions</a> for switching to SRM. If your system already uses SRM, you
are all set. If your system can only use ARCs (Ruffian, nautilus, xl, etc.) you
will need to choose <span class="code">MILO</span> later on when we are talking about bootloaders.
</p>

<p>
Now to boot an Alpha LiveCD, put the CD-ROM in the tray and reboot the system.
You can use SRM to boot the LiveCD. If you cannot do that, you will have to use
<span class="code">MILO</span>. If you don't have <span class="code">MILO</span> installed already, use one of the
precompiled <span class="code">MILO</span> images available on <a href="http://dev.gentoo.org/~taviso/milo/">taviso's homepage</a>.
</p>

<a name="doc_chap_pre4"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;4: Booting a CD-ROM using SRM</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
<span class="comment">(Substitute dqa0 with your CD-ROM drive device)</span>
&gt;&gt;&gt; <span class="input">boot dqa0 -flags 0</span>
</pre></td></tr>
</table>

<a name="doc_chap_pre5"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;5: Booting a CD-ROM using MILO</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
<span class="comment">(Substitute hdb with your CD-ROM drive device)</span>
MILO&gt; <span class="input">boot hdb:boot/vmlinuz initrd=initrd.img root=/dev/ram0 init=/linuxrc</span>
</pre></td></tr>
</table>

<p>
You should have a root (&quot;#&quot;) prompt on the current console and can also switch
to other consoles by pressing Alt-F2, Alt-F3 and Alt-F4. Get back to the one you
started on by pressing Alt-F1.
</p>

<p>
Now continue with <a href="#book_id2682189_chap3_sect7">Extra Hardware 
Configuration</a>.
</p>

<a name="book_id2682189_chap3_sect4"></a><p class="secthead">Booting the HPPA LiveCD(s)</p>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#ffffbb"><p class="note">
<b>Important: </b>
This subsection is for HPPA architectures <span class="emphasis">only</span>. Read this whole 
subsection before continuing, as you will not always have the time to read 
before acting.
</p></td></tr></table>

<p>
Boot your HPPA system. During the boot process, you will see a message similar
to the following:
</p>

<a name="doc_chap_pre6"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;6: HPPA boot message</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Searching for Potential Boot Devices.
To terminate search, press and hold the ESCAPE key.
</pre></td></tr>
</table>

<p>
When this message appears, press and hold the Esc-key until an option menu
appears. This can take a while, be patient. By default, you should enter the
BOOT_ADMIN console. If you receive an option menu, choose <span class="code">Enter Boot
Administration mode</span> to enter the BOOT_ADMIN console. You should now have an
'&gt;' prompt.
</p>

<p>
Put the Gentoo LiveCD in the CD-ROM. If you do not know the SCSI ID of your
CD-ROM drive, your PA-RISC station will search for it when you issue the 
<span class="code">search</span> command.
</p>

<a name="doc_chap_pre7"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;7: Searching for SCSI ID</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
&gt; <span class="input">search</span>
Searching for Devices with Bootable Media.
To terminate search, please press and hold the ESCAPE key.
</pre></td></tr>
</table>

<p>
Your PA-RISC station will now display all the available boot media. This is an
example result of this command :
</p>

<a name="doc_chap_pre8"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;8: Available boot media</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Device Selection      Device Path             Device Type and Utilities
---------------------------------------------------------------------------

P0                    scsi.5.0                TOSHIBA CD-ROM XM-3301TA
                                                  IPL
P1                    scsi.2.0                COMPAQ ST32550N
                                                  IPL
P2                    lan.0010a7-06d1b6.3.6   server
                                                  IPL
</pre></td></tr>
</table>

<p>
To boot from a CD-ROM you need the accompanying Device Path. For instance, if we
want to boot from the TOSHIBA CD-ROM in the above example, we would need to type
the following command:
</p>

<a name="doc_chap_pre9"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;9: Booting from a CD-ROM</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
&gt; <span class="input">boot scsi.5.0 ipl</span>

Trying scsi.5.0
</pre></td></tr>
</table>

<p>
The <span class="code">ipl</span> keyword (Initial Program Loader) tells palo (the PA-RISC boot
LOader) to enter interactive mode. This will allow you to change, for example,
the kernel boot parameters.
</p>

<p>
When the boot is successful, palo will start in interactive mode:
</p>

<a name="doc_chap_pre10"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;10: PALO Interactive Mode</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Boot path initialized.
Attempting to load IPL.


Hard booted.
palo ipl 1.2 root@b180l.da-kot Tue Apr  8 12:43:07 CEST 2003

Boot image contains:
    0/vmlinux32 4028015 bytes @ 0x1520000
    0/ramdisk 834748 bytes @ 0xf800
Current command line:
0/vmlinux initrd=initrd.gz TERM=linux console=tty root=/dev/ram0 init=/linuxrc
  0: 0/vmlinux
  1: initrd=initrd.gz
  2: TERM=linux
  3: console=tty
  4: root=/dev/ram0
  5: init=/linuxrc

Edit which field?
(or 'b' to boot with this command line)? 
</pre></td></tr>
</table>

<p>
These parameters are suitable for most situations.
</p>

<p>
If you need extra features you must add the apropriate keyword(s) to the end of 
the command line. To add a keyword, edit the last field, add a space and type 
your keyword. The only implemented keyword as of now is <span class="code">cdcache</span> which 
tells the LiveCD to load itself into RAM, allowing you to unmount the CD.
</p>

<a name="doc_chap_pre11"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;11: Adding cdcache as boot option</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
(or 'b' to boot with this command line)? <span class="input">5</span>
init=/linuxrc <span class="input">cdcache</span>
</pre></td></tr>
</table>

<p>
Now that you have tweaked your kernel boot params, boot it.
</p>

<a name="doc_chap_pre12"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;12: Booting the kernel</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
(or 'b' to boot with this command line)? <span class="input">b</span>
</pre></td></tr>
</table>

<p>
You should have a root (&quot;#&quot;) prompt on the current console and can also switch
to other consoles by pressing Alt-F2, Alt-F3 and Alt-F4. Get back to the one you
started on by pressing Alt-F1.
</p>

<p>
Now continue with <a href="#book_id2682189_chap3_sect7">Extra Hardware 
Configuration</a>.
</p>

<a name="book_id2682189_chap3_sect5"></a><p class="secthead">Booting SPARC LiveCD(s)</p>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#ffffbb"><p class="note">
<b>Important: </b>
This subsection is for SPARC architectures <span class="emphasis">only</span>. Read this whole 
subsection before continuing, as you will not always have the time to read 
before acting.
</p></td></tr></table>

<p>
Insert the Gentoo LiveCD in the CD-ROM and boot your system. During startup,
press Stop-A to enter OpenBootPROM (OBP). Once you are in the OBP, boot from the
CD-ROM:
</p>

<a name="doc_chap_pre13"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;13: Booting the LiveCD</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
ok <span class="input">boot cdrom</span>
</pre></td></tr>
</table>

<p>
You will be greeted by the SILO boot manager (on the LiveCD). Type in
<span class="code">gentoo</span> (single-CPU kernel) or <span class="code">smp</span> (multi-CPU kernel) and press 
enter to continue booting the system. In the following example we'll boot the
<span class="code">gentoo</span> kernel.
</p>

<a name="doc_chap_pre14"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;14: Continue booting from the LiveCD</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
boot: <span class="input">gentoo</span>
</pre></td></tr>
</table>

<p>
Once the LiveCD is booted, you will be greeted by a login prompt. Log on as
<span class="code">root</span>. There is no password, so when you are asked for one, press Enter.
</p>

<a name="doc_chap_pre15"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;15: Logging on onto the LiveCD</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
login: <span class="input">root</span>
password: <span class="comment">(Press Enter here)</span>
</pre></td></tr>
</table>

<p>
You should have a root (&quot;#&quot;) prompt on the current console and can also switch
to other consoles by pressing Alt-F2, Alt-F3 and Alt-F4. Get back to the one you
started on by pressing Alt-F1.
</p>

<p>
Continue with <a href="#book_id2682189_chap3_sect7">Extra Hardware Configuration</a>.
</p>

<a name="book_id2682189_chap3_sect6"></a><p class="secthead">Booting the PPC LiveCD(s)</p>

<p>
Place the LiveCD in the CD-ROM and reboot the system. Hold down the 'C' key at
bootup (or run an OldWorld bootloader like BootX or quik). You will be greeted
by a friendly welcome message and a <span class="emphasis">boot:</span> prompt at the bottom of the 
screen.
</p>

<p>
At this prompt, hit enter, and a complete Gentoo Linux environment will be
loaded from the CD. If you experience problems booting, choose the <span class="code">-safe</span>
option at boot. The safe option passes the following extra arguments to the 
kernel: <span class="code">append=&quot;video=ofonly nol3 init=/linuxrc&quot;</span>.
</p>

<p>
When the LiveCD is booted, you will be greeted with a login prompt. Log on as
<span class="code">root</span> and leave the password blank (i.e. press Enter). 
</p>

<a name="doc_chap_pre16"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;16: Logging on onto the LiveCD</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
login: <span class="input">root</span>
password: <span class="comment">(Press Enter here)</span>
</pre></td></tr>
</table>

<p>
You should have a root (&quot;#&quot;) prompt on the current console and can also switch
to other consoles by pressing Alt-fn-F2, Alt-fn-F3 and Alt-fn-F4. Get back to 
the one you started on by pressing Alt-fn-F1.
</p>

<p>
If you are installing Gentoo on a system with a non-US keyboard, use
<span class="code">loadkeys</span> to load the keymap for your keyboard. To list the available
keymaps, execute <span class="code">ls /usr/share/keymaps</span>.
</p>

<a name="doc_chap_pre17"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;17: Listing available keymaps</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">ls /usr/share/keymaps</span>
</pre></td></tr>
</table>

<p>
Now load the keymap of your choice:
</p>

<a name="doc_chap_pre18"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;18: Loading a keymap</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">loadkeys be2-latin1</span>
</pre></td></tr>
</table>

<p>
Now continue with <a href="#book_id2682189_chap3_sect7">Extra Hardware 
Configuration</a>.
</p>

<a name="book_id2682189_chap3_sect7"></a><p class="secthead">Extra Hardware Configuration</p>

<p>
When the Live CD boots, it tries to detect all your hardware devices and
loads the appropriate kernel modules to support your hardware. In the
vast majority of cases, it does a very good job. However, in some cases,
it may not auto-load the kernel modules you need. If the PCI
auto-detection missed some of your system's hardware, you will have to
load the appropriate kernel modules manually. 
</p>

<p>
In the next example we try to load the <span class="code">8139too</span> module (support for 
certain kinds of network interfaces):
</p>

<a name="doc_chap_pre19"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;19: Loading kernel modules</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">modprobe 8139too</span>
</pre></td></tr>
</table>

<a name="book_id2682189_chap3_sect8"></a><p class="secthead">Optional: Tweaking Hard Disk Performance</p>

<p>
If you are an advanced user, you might want to tweak the IDE hard disk
performance using <span class="code">hdparm</span>. With the <span class="code">-tT</span> options you can
test the performance of your disk (execute it several times to get a
more precise impression):
</p>

<a name="doc_chap_pre20"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;20: Testing disk performance</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">hdparm -tT /dev/hda</span>
</pre></td></tr>
</table>

<p>
To tweak, you can use any of the following examples (or experiment
yourself) which use <span class="path">/dev/hda</span> as disk (substitute with your
disk):
</p>

<a name="doc_chap_pre21"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;21: Tweaking hard disk performance</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
<span class="comment">Activate DMA:</span>                                       # <span class="input">hdparm -d 1 /dev/hda</span>
<span class="comment">Activate DMA + Safe Performance-enhancing Options:</span>  # <span class="input">hdparm -d 1 -A 1 -m 16 -u 1 -a 64 /dev/hda</span>
</pre></td></tr>
</table>

<a name="book_id2682189_chap3_sect9"></a><p class="secthead">Optional: User Accounts</p>

<p>
If you plan on giving other people access to your installation
environment or you want to chat using <span class="code">irssi</span> without root privileges (for
security reasons), you need to create the necessary user accounts and change 
the root password.
</p>

<p>
To change the root password, use the <span class="code">passwd</span> utility:
</p>

<a name="doc_chap_pre22"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;22: Changing the root password</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">passwd</span>
New password: <span class="comment">(Enter your new password)</span>
Re-enter password: <span class="comment">(Re-enter your password)</span>
</pre></td></tr>
</table>

<p>
To create a user account, we first enter his credentials, followed by
its password. We use <span class="code">useradd</span> and <span class="code">passwd</span> for these tasks.
In the next example, we create a user called &quot;john&quot;.
</p>

<a name="doc_chap_pre23"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;23: Creating a user account</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">useradd john</span>
# <span class="input">passwd john</span>
New password: <span class="comment">(Enter john's password)</span>
Re-enter password: <span class="comment">(Re-enter john's password)</span>
</pre></td></tr>
</table>

<p>
You can change your user id from root to the newly created user by using
<span class="code">su</span>:
</p>

<a name="doc_chap_pre24"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;24: Changing user id</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">su john -</span>
</pre></td></tr>
</table>

<a name="book_id2682189_chap3_sect10"></a><p class="secthead">Optional: Starting the SSH Daemon</p>

<p>
If you want to allow other users to access your computer during the
Gentoo installation (perhaps because those users are going to help you
install Gentoo, or even do it for you), you need to create a user
account for them and perhaps even provide them with your root password 
(<span class="emphasis">only</span> do that <span class="emphasis">if</span> you <b>fully trust</b> that user).
</p>

<p>
To fire up the SSH daemon, execute the following command:
</p>

<a name="doc_chap_pre25"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;25: Starting the SSH daemon</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">/etc/init.d/sshd start</span>
</pre></td></tr>
</table>

<p>
Now continue with the next chapter on <a href="#book_part1_chap3">Configuring your Network</a>.
</p>

<a name="book_id2682189_chap4"></a><p class="chaphead">
<span class="chapnum">2.d. </span>Alternative: Download, Burn and Boot Knoppix</p>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#ffffbb"><p class="note">
<b>Important: </b>
You can only use Knoppix on x86-based systems.
</p></td></tr></table>

<p>
You can download Knoppix from the <a href="http://www.knoppix.com">Knoppix homepage</a>. Knoppix too is
available as ISO-files. After having downloaded the Knoppix ISO file,
burn it to a CD-R. You have to use &quot;raw&quot; burning. We'll
explain how to do this with a couple of popular tools.
</p>

<ul>
  <li>
    With EasyCD Creator you select <span class="code">File</span>, <span class="code">Record CD
    from CD image</span>. Then you change the <span class="code">Files of type</span> to <span class="code">ISO image
    file</span>. Then locate the ISO file and click <span class="code">Open</span>. When you click on
    <span class="code">Start recording</span> the ISO image will be burned correctly onto the CD-R.
  </li>
  <li>
    With Nero Burning ROM, select <span class="code">File</span>, <span class="code">Burn CD image</span>. Set the
    type of file to <span class="code">*.*</span> and select the ISO file. Older versions of Nero
    will tell you they don't recognize the format -- confirm here, it does
    recognize it but doesn't know it yet :) In the next dialog, set the
    following parameters:
    <ul>
      <li>Type of image: <span class="code">Data Mode 1</span>
</li>
      <li>Block size: <span class="code">2048 bytes</span>
</li>
      <li>File precursor and length of the image trailer: <span class="code">0 bytes</span>
</li>
      <li>Scrambled: <span class="code">no</span>
</li>
      <li>Swapped: <span class="code">no</span>
</li>
    </ul>
    Now click on <span class="code">OK</span> and then <span class="code">Burn</span> (the CD-R)
  </li>
  <li>
    With cdrecord, you simply type <span class="code">cdrecord dev=/dev/hdc</span> (replace
    <span class="path">/dev/hdc</span> with your CD-RW drive's device path) followed
    by the path to the ISO file :)
  </li>
</ul>

<p>
By default, Knoppix boots into a KDE 3.0 desktop. The first thing you'll
have to do is set the root password for knoppix. Open a konsole and type
in the following command:
</p>

<a name="doc_chap_pre26"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;26: Setting root password for Knoppix</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
$ <span class="input">sudo passwd root</span>
Password: <span class="comment">(Enter a password)</span>
Re-enter password: <span class="comment">(Re-enter the password)</span>
</pre></td></tr>
</table>

<p>
Next, <span class="code">su</span> to root and set the root home directory to
<span class="path">/root</span>. If you do not do this, you will receive errors when
emerging about &quot;/home/root: not found&quot;.
</p>

<a name="doc_chap_pre27"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;27: Changing root home directory</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
$ <span class="input">su -</span>
Password: <span class="comment">(Enter the root password created above)</span>
# <span class="input">usermod -d /root -m root</span>
</pre></td></tr>
</table>

<p>
Now exit the current shell by typing <span class="code">exit</span> and <span class="code">su</span> back into
root. This will load the made changes. 
</p>

<a name="doc_chap_pre28"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;28: Loading the changes</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">exit</span>
$ <span class="input">su -</span>
Password: <span class="comment">(Enter the root password)</span>
</pre></td></tr>
</table>

<p>
Create the <span class="path">/mnt/gentoo</span> mountpoint:
</p>

<a name="doc_chap_pre29"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;29: Creating the /mnt/gentoo mountpoint</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">mkdir -p /mnt/gentoo</span>
</pre></td></tr>
</table>

<p>
Now continue with <a href="#book_part1_chap3">Configuring your Network</a>.
</p>

<a name="book_id2682189_chap5"></a><p class="chaphead">
<span class="chapnum">2.e. </span>Alternative: Net Booting</p>
<a name="book_id2682189_chap5_sect1"></a><p class="secthead"></p>

<p>
To be able to install Gentoo, the image you download from the TFTP server should
provide the necessary tools to create filesystems, create and mount partitions,
extract a tarball and chroot. You can download existing net boot images which
have all tools in them...
</p>

<p>
At this time we know of only one architecture that has net boot images available
and that is the MIPS architecture. 
</p>

<ul>
  <li><a href="#book_id2682189_chap5_sect2">Net Booting a MIPS System</a></li>
</ul>

<a name="book_id2682189_chap5_sect2"></a><p class="secthead">Net Booting a MIPS System</p>

<p>
First download one of the available net boot images from 
<a href="http://dev.gentoo.org/~kumba/mips/netboot/">http://dev.gentoo.org/~kumba/mips/netboot/</a>.
</p>

<p>
Now configure your DHCP server to send this file to the booting client. SGI
machines however need some minor tweaks to the host system in order for TFTP to
work properly:
</p>

<a name="doc_chap_pre30"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;30: Some fixes to SGI machines to have TFTP work properly</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
<span class="comment">(Disable &quot;Path Maximum Transfer Unit&quot;, otherwise SGI Prom won't find the kernel)</span>
# <span class="input">echo 1 &gt; /proc/sys/net/ipv4/ip_no_pmtu_disc</span>
<span class="comment">(Set the port range usable by the SGI Prom)</span>
# <span class="input">echo &quot;2048 32767&quot; &gt; /proc/sys/net/ipv4/ip_local_port_range</span>
</pre></td></tr>
</table>

<p>
Now power on your machine, get into the PROM monitor and issue the command to
boot the kernel over the network:
</p>

<a name="doc_chap_pre31"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;31: Net booting a MIPS</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
        Running power-on diagnostics

System Maintenance Menu

1) Start System
2) Install System Software
3) Run Diagnostics
4) Recover System
5) Enter Command Monitor

Option? <span class="input">5</span>
Command Monitor. Type &quot;exit&quot; to return to the menu.
&gt;&gt; <span class="input">bootp(): root=/dev/ram0</span>
</pre></td></tr>
</table>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#bbffbb"><p class="note">
<b>Note: </b>
You may have to press the Esc key to get into the menu above, otherwise, the
system will attempt to boot the system directly. 
</p></td></tr></table>

<p>
Sometimes netbooting is a tricky endeavour. The following PROM commands below
may help, but this is not guaranteed. If your machine refuses to netboot, double
check things on the host TFTP machine to make sure that:
</p>

<ul>
  <li>dhcpd is giving the SGI Machine an IP Address</li>
  <li>
    Permissions are set properly in your tftp folder (typically 
    <span class="path">/tftpboot</span>)
  </li>
  <li>
    Check system logs to see what the tftp server is reporting (errors
    perhaps)
  </li>
  <li>
    Pray to a Tux plushie (this may or may not work, and is not an officially
    supported troubleshooting technique)
  </li>
</ul>

<a name="doc_chap_pre32"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;32: Net booting tricks</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
&gt;&gt; <span class="input">resetenv</span>
&gt;&gt; <span class="input">unsetenv netaddr</span>
&gt;&gt; <span class="input">unsetenv dlserver</span>
&gt;&gt; <span class="input">init</span>
&gt;&gt; <span class="input">bootp(): root=/dev/ram0</span>
</pre></td></tr>
</table>

<p>
If all things go well, you are now dropped off at busybox' <span class="code">ash</span> shell. You
can then continue with <a href="#book_part1_chap3">Configuring your
Network</a>.
</p>

<a name="book_part1_chap3"></a><h3>3. Configuring your Network</h3>
<a name="book_id2699961_chap1"></a><p class="chaphead">
<span class="chapnum">3.a. </span>You can do without, but...</p>
<a name="book_id2699961_chap1_sect1"></a><p class="secthead">Who can do without?</p>

<p>
Depending on the medium you chose to install Gentoo from, you can or
cannot continue without networking (and Internet). No, we are not
playing with your mind =) 
</p>

<p>
Generally you will need to setup networking (and Internet). 
However, Gentoo also provides the possibility to install without a network
connection. This exception is only possible with the following installation
media: 
</p>

<ul>
  <li>
    Gentoo x86 2-CD Installation LiveCD sets (including x86, i686, pentium3, 
    pentium4 and athlon-xp)
  </li>
  <li>
    Gentoo PPC 2-CD Installation LiveCD sets (including G3 and G4)
  </li>
</ul>

<a name="book_id2699961_chap1_sect2"></a><p class="secthead">Why do I need networking?</p>

<p>
Installing Gentoo from the Internet results in a fully updated Gentoo
Installation. You'll have an installation based on the most recent
Portage tree (which is the collection of packages we provide together with
the tools to manage your software). This is also the reason why a
network-installation is preferred. However, some people cannot or do not want 
to install Gentoo on a system with a running Internet connection.
</p>

<p>
If you are in this situation you will need to use the 2CD-sets. These sets
include the source code, a snapshot of the portage-tree and the tools to
install a Gentoo base-system and beyond. This method comes at a price:
You won't have the very latest software, although differences will be
minimal.
</p>

<p>
If you want to follow this networkless installation you have to use such a
2-CD set, skip the rest of this chapter and continue with <a href="#book_part1_chap4">Preparing the Disks</a>.
Otherwise, continue with the networking configuration sections below.
</p>

<a name="book_id2699961_chap1_sect3"></a><p class="secthead">Optional: Configure Proxy</p>

<p>
If you access the Internet through a proxy, you might need to setup proxy
information during the installation. It is very easy to define a proxy: you just
need to define a variable which contains the proxy server information. 
</p>

<p>
In most cases, you can just define the variables using the server hostname. As
an example, we assume the proxy is called <span class="emphasis">proxy.gentoo.org</span> and the port
is 8080.
</p>

<a name="doc_chap_pre1"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;1: Defining proxy servers</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
<span class="comment">(If the proxy filters HTTP traffic)</span>
# <span class="input">export http_proxy=&quot;http://proxy.gentoo.org:8080&quot;</span>
<span class="comment">(If the proxy filters FTP traffic)</span>
# <span class="input">export ftp_proxy=&quot;ftp://proxy.gentoo.org:8080&quot;</span>
<span class="comment">(If the proxy filters RSYNC traffic)</span>
# <span class="input">export RSYNC_PROXY=&quot;proxy.gentoo.org:8080&quot;</span>
</pre></td></tr>
</table>

<p>
If your proxy requires a username and password, you should use the following
syntax for the variable:
</p>

<a name="doc_chap_pre2"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;2: Adding username/password to the proxy variable</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
http://username:password@server
</pre></td></tr>
</table>

<p>
For instance, for HTTP proxying with our previous proxy server and a username 
of &quot;john&quot; with a password of &quot;f00b_r&quot; one would use:
</p>

<a name="doc_chap_pre3"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;3: Authenticated Proxy</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">export http_proxy=&quot;http://john:f00b_r@proxy.gentoo.org:8080&quot;</span>
</pre></td></tr>
</table>

<a name="book_id2699961_chap1_sect4"></a><p class="secthead">Networking from non-Gentoo Installation Mediums</p>

<p>
Most information in this section is meant for users who booted from a
Gentoo LiveCD. However, you can install Gentoo from several other media.
If you are in such a situation, make sure that the used medium has a
working Internet connection (the information available in <a href="#book_id2699961_chap4_sect2">Using DHCP</a> or <a href="#book_id2699961_chap4_sect3">Understanding Network Terminology</a> might come in 
handy) and continue with <a href="#book_part1_chap4">Preparing the 
Disks</a>. 
</p>

<a name="book_id2699961_chap2"></a><p class="chaphead">
<span class="chapnum">3.b. </span>Automatic Network Detection</p>
<a name="book_id2699961_chap2_sect1"></a><p class="secthead">Maybe it just works?</p>

<p>
If your system is plugged into an Ethernet network with a DHCP server, it is 
very likely that your networking configuration has already been set up 
automatically for you. If so, you should be able to take advantage of the many
included network-aware commands on the LiveCD such as <span class="code">ssh</span>, <span class="code">scp</span>, 
<span class="code">ping</span>, <span class="code">irssi</span>, <span class="code">wget</span> and <span class="code">links</span>, among others.
</p>

<p>
If networking has been configured for you, the <span class="code">/sbin/ifconfig</span> command
should list some network interfaces besides lo, such as eth0:
</p>

<a name="doc_chap_pre4"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;4: /sbin/ifconfig for a working network card</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">/sbin/ifconfig</span>
eth0      Link encap:Ethernet  HWaddr 00:50:BA:8F:61:7A
          inet addr:192.168.0.2  Bcast:192.168.0.255  Mask:255.255.255.0
          inet6 addr: fe80::50:ba8f:617a/10 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:1498792 errors:0 dropped:0 overruns:0 frame:0
          TX packets:1284980 errors:0 dropped:0 overruns:0 carrier:0
          collisions:1984 txqueuelen:100
          RX bytes:485691215 (463.1 Mb)  TX bytes:123951388 (118.2 Mb)
          Interrupt:11 Base address:0xe800 
</pre></td></tr>
</table>

<a name="book_id2699961_chap2_sect2"></a><p class="secthead">Testing the Network</p>

<p>
You may want to try pinging your ISP's DNS server (found in
<span class="path">/etc/resolv.conf</span>) and a Web site of choice, just to make sure 
that your packets are reaching the net, DNS name resolution is working 
correctly, etc..
</p>

<a name="doc_chap_pre5"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;5: Further network testing</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">ping -c 3 www.yahoo.com</span>
</pre></td></tr>
</table>

<p>
Are you able to use your network? If so, you can skip the rest of this
section and continue with <a href="#book_part1_chap4">Preparing the
Disks</a>. If not, bad luck, you'll have to pursue a bit harder :)
</p>

<a name="book_id2699961_chap3"></a><p class="chaphead">
<span class="chapnum">3.c. </span>Automatic Network Configuration</p>
<a name="book_id2699961_chap3_sect1"></a><p class="secthead"></p>

<p>
If the network doesn't work immediately, some installation media allow you to 
use <span class="code">net-setup</span> (for regular networks), <span class="code">adsl-setup</span> (for 
ADSL-users) or <span class="code">pptp</span> (for PPTP-users). 
</p>

<p>
If you installation medium does not contain any of these tools, continue with 
<a href="#book_id2699961_chap4">Manual Network Configuration</a>.
</p>

<ul>
  <li>
    Regular Ethernet users should continue with <a href="#book_id2699961_chap3_sect2">Default: Using net-setup</a>
  </li>
  <li>
    ADSL users should continue with <a href="#book_id2699961_chap3_sect3">Alternative:
    Using RP-PPPoE</a>
  </li>
  <li>
    PPTP users should continue with <a href="#book_id2699961_chap3_sect4">Alternative:
    Using PPTP</a>
  </li>
</ul>

<a name="book_id2699961_chap3_sect2"></a><p class="secthead">Default: Using net-setup</p>

<p>
The simplest way to set up networking if it didn't get configured
automatically is to run the <span class="code">net-setup</span> script:
</p>

<a name="doc_chap_pre6"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;6: Running the net-setup script</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">net-setup eth0</span>
</pre></td></tr>
</table>

<p>
<span class="code">net-setup</span> will ask you some questions about your network
environment. When all is done, you should have a working network
connection. Test your network connection as stated before. If the tests
are positive, congratulations! You are now ready to install Gentoo. Skip
the rest of this section and continue with <a href="#book_part1_chap4">Preparing the Disks</a>.
</p>

<p>
If your network still doesn't work, continue with <a href="#book_id2699961_chap4">Manual
Network Configuration</a>.
</p>


<a name="book_id2699961_chap3_sect3"></a><p class="secthead">Alternative: Using RP-PPPoE</p>

<p>
Assuming you need PPPoE to connect to the internet, the LiveCD (any version) has
made things easy for you by including <span class="code">rp-pppoe</span>. Use the provided 
<span class="code">adsl-setup</span> script to configure your connection. You will be prompted for
the ethernet device that is connected to your adsl modem, your username and 
password, the IPs of your DNS servers and if you need a basic firewall or not.
</p>

<a name="doc_chap_pre7"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;7: Using rp-pppoe</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">adsl-setup</span>
# <span class="input">adsl-start</span>
</pre></td></tr>
</table>

<p>
If something goes wrong, double-check that you correctly typed your username and
password by looking at <span class="path">/etc/ppp/pap-secrets</span> or 
<span class="path">/etc/ppp/chap-secrets</span> and make sure you are using the right 
ethernet device. If your ethernet device doesn't exist, you will have to load
the appropriate network modules. In that case you should continue with 
<a href="#book_id2699961_chap4">Manual Network Configuration</a> as we explain how to
load the appropriate network modules there.
</p>

<p>
If everything worked, continue with <a href="#book_part1_chap4">Preparing the
Disks</a>.
</p>

<a name="book_id2699961_chap3_sect4"></a><p class="secthead">Alternative: Using PPTP</p>

<p>
If you need PPTP support, you can use <span class="code">pptpclient</span> which is provided by our
LiveCDs. But first you need to make sure that your configuration is correct.
Edit <span class="path">/etc/ppp/pap-secrets</span> or <span class="path">/etc/ppp/chap-secrets</span> so
it contains the correct username/password combination:
</p>

<a name="doc_chap_pre8"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;8: Editing /etc/ppp/chap-secrets</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">nano -w /etc/ppp/chap-secrets</span>
</pre></td></tr>
</table>

<p>
Then adjust <span class="path">/etc/ppp/options.pptp</span> if necessary:
</p>

<a name="doc_chap_pre9"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;9: Editing /etc/ppp/options.pptp</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">nano -w /etc/ppp/options.pptp</span>
</pre></td></tr>
</table>

<p>
When all that is done, just run <span class="code">pptp</span> (along with the options you couldn't
set in <span class="path">options.pptp</span>) to connect the server:
</p>

<a name="doc_chap_pre10"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;10: Connection to a dial-in server</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">pptp &lt;server ip&gt;</span>
</pre></td></tr>
</table>

<p>
Now continue with <a href="#book_part1_chap4">Preparing the Disks</a>.
</p>

<a name="book_id2699961_chap4"></a><p class="chaphead">
<span class="chapnum">3.d. </span>Manual Network Configuration</p>
<a name="book_id2699961_chap4_sect1"></a><p class="secthead">Loading the Appropriate Network Modules</p>

<p>
When the Live CD boots, it tries to detect all your hardware devices and
loads the appropriate kernel modules (drivers) to support your hardware. In the
vast majority of cases, it does a very good job. However, in some cases,
it may not auto-load the kernel modules you need.
</p>

<p>
If <span class="code">net-setup</span> or <span class="code">adsl-setup</span> failed, then you can safely assume that
your networkcard wasn't found immediately. This means you will have to load
the appropriate kernel modules manually.
</p>

<p>
To find out what kernel modules we provide for networking, use
<span class="code">ls</span>:
</p>

<a name="doc_chap_pre11"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;11: Searching for provided modules</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">ls /lib/modules/`uname -r`/kernel/drivers/net</span>
</pre></td></tr>
</table>

<p>
If you find a driver for your network card, use <span class="code">modprobe</span> to load
the kernel module:
</p>

<a name="doc_chap_pre12"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;12: Using modprobe to load a kernel module</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
<span class="comment">(As an example, we load the pcnet32 module)</span>
# <span class="input">modprobe pcnet32</span>
</pre></td></tr>
</table>

<p>
To check if your network card is now detected, use <span class="code">ifconfig</span>. A
detected network card would result in something like this:
</p>

<a name="doc_chap_pre13"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;13: Testing availability of your network card, successful</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">ifconfig eth0</span>
eth0      Link encap:Ethernet  HWaddr FE:FD:00:00:00:00  
          BROADCAST NOARP MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:0 (0.0 b)  TX bytes:0 (0.0 b)
</pre></td></tr>
</table>

<p>
If however you receive the following error, the network card is not
detected:
</p>

<a name="doc_chap_pre14"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;14: Testing availability of your network card, failed</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">ifconfig eth0</span>
eth0: error fetching interface information: Device not found
</pre></td></tr>
</table>

<p>
Assuming that you now have a detected network card, you can 
retry <span class="code">net-setup</span> or <span class="code">adsl-setup</span> again (which should work 
now), but for the hardcore people amongst you, we explain how to configure your
network manually.
</p>

<p>
There are two possibilities here. Either you use DHCP (automatic IP retrieval), 
or you manually setup your network using the <span class="code">ifconfig</span> and <span class="code">route</span>
commands.
</p>

<a name="book_id2699961_chap4_sect2"></a><p class="secthead">Using DHCP</p>

<p>
DHCP (Dynamic Host Configuration Protocol) makes it possible to
automatically receive networking information (IP address, netmask,
broadcast address, gateway, nameservers etc.). This only works if you
have a DHCP server in your network (or if your provider provides a DHCP
service). To have a network interface receive this information automatically, 
use <span class="code">dhcpcd</span>:
</p>

<a name="doc_chap_pre15"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;15: Using dhcpcd</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">dhcpcd eth0</span>
</pre></td></tr>
</table>

<p>
If this works (try pinging some internet server, like <a href="http://www.google.com">Google</a>), then you are all set and
ready to continue. Skip the rest of this section and continue with <a href="#book_part1_chap4">Preparing the Disks</a>.
</p>

<a name="book_id2699961_chap4_sect3"></a><p class="secthead">Understanding Network Terminology</p>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#bbffbb"><p class="note">
<b>Note: </b>
If you know your IP address, broadcast address, netmask and nameservers,
then you can skip this subsection and continue with <a href="#book_id2699961_chap4_sect4">Using ifconfig and route</a>.
</p></td></tr></table>

<p>
If all above fails, you will have to configure your network manually.
Have no fear, it is far from difficult. But we are going to explain a
certain amount of networking to you as you will need it to be able to
configure your network to your satisfaction. When you're done reading this, you
will know what a <span class="emphasis">gateway</span> is, what a <span class="emphasis">netmask</span> serves for,
how a <span class="emphasis">broadcast</span> address is formed and why you need
<span class="emphasis">nameservers</span>.
</p>

<p>
In a network, hosts are identified by their <span class="emphasis">IP address</span> (Internet
Protocol address). Such an address is a combination of four numbers
between 0 and 255. Well, at least that is how we perceive it. In
reality, such an IP address consists of 32 bits (ones and zeros). Let's
view an example:
</p>

<a name="doc_chap_pre16"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;16: Example of an IP address</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
IP Address (numbers):   192.168.0.2
IP Address (bits):      11000000 10101000 00000000 00000010
                        -------- -------- -------- --------
                           192      168       0        2
</pre></td></tr>
</table>

<p>
Such an IP address is unique to a host as far as all accessible networks are
concerned (i.e. all hosts that you are able to reach must have unique IP
addresses). To be able to make a distinction between hosts inside a network, 
and hosts outside a network, the IP address is divided in two parts: the 
<span class="emphasis">network</span> part and the <span class="emphasis">host</span> part. 
</p>

<p>
The separation is written down with the <span class="emphasis">netmask</span>, a collection of
ones followed by a collection of zeros. The part of the IP that can be
mapped on the ones is the network-part, the other one is the host-part.
As usual, the netmask can be written down as an IP-address.
</p>

<a name="doc_chap_pre17"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;17: Example of network/host separation</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
IP-address:    192      168      0         2
            11000000 10101000 00000000 00000010
Netmask:    11111111 11111111 11111111 00000000
               255      255     255        0
           +--------------------------+--------+
                    Network              Host
</pre></td></tr>
</table>

<p>
In other words, 192.168.0.14 is still part of our example network, but
192.168.1.2 is not.
</p>

<p>
The <span class="emphasis">broadcast</span> address is an IP-address with the same network-part
as your network, but with only ones as host-part. Every host on your
network listens to this IP address. It is truely meant for broadcasting
packets.
</p>

<a name="doc_chap_pre18"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;18: Broadcast address</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
IP-address:    192      168      0         2
            11000000 10101000 00000000 00000010
Broadcast:  11000000 10101000 00000000 11111111
               192      168      0        255
           +--------------------------+--------+
                     Network             Host
</pre></td></tr>
</table>

<p>
To be able to surf on the internet, you must know which host shares the
Internet connection. This host is called the <span class="emphasis">gateway</span>. Since it is
a regular host, it has a regular IP address (for instance 192.168.0.1).
</p>

<p>
We previously stated that every host has its own IP address. To be able
to reach this host by a name (instead of an IP address) you need a
service that translates a name (such as <span class="emphasis">dev.gentoo.org</span>) to an IP
address (such as <span class="emphasis">64.5.62.82</span>). Such a service is called a name
service. To use such a service, you must define the necessary <span class="emphasis">name
servers</span> in <span class="path">/etc/resolv.conf</span>.
</p>

<p>
In some cases, your gateway also serves as nameserver. Otherwise you
will have to enter the nameservers provided by your ISP.
</p>

<p>
To summarise, you will need the following information before continuing:
</p>

<table class="ntable">
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>Network Item</b></td>
  <td bgcolor="#7a5ada" class="infohead"><b>Example</b></td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">Your IP address</td>
  <td bgcolor="#ddddff" class="tableinfo">192.168.0.2</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">Netmask</td>
  <td bgcolor="#ddddff" class="tableinfo">255.255.255.0</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">Broadcast</td>
  <td bgcolor="#ddddff" class="tableinfo">192.168.0.255</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">Gateway</td>
  <td bgcolor="#ddddff" class="tableinfo">192.168.0.1</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">Nameserver(s)</td>
  <td bgcolor="#ddddff" class="tableinfo">195.130.130.5, 195.130.130.133</td>
</tr>
</table>

<a name="book_id2699961_chap4_sect4"></a><p class="secthead">Using ifconfig and route</p>

<p>
Setting up your network consists of three steps. First we assign
ourselves an IP address using <span class="code">ifconfig</span>. Then we setup routing to
the gateway using <span class="code">route</span>. Then we finish up by placing the
nameserver IPs in <span class="path">/etc/resolv.conf</span>.
</p>

<p>
To assign an IP address, you will need your IP address, broadcast
address and netmask. Then execute the following command, substituting
<span class="code">${IP_ADDR}</span> with your IP address, <span class="code">${BROADCAST}</span> with your
broadcast address and <span class="code">${NETMASK}</span> with your netmask:
</p>

<a name="doc_chap_pre19"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;19: Using ifconfig</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">ifconfig eth0 ${IP_ADDR} broadcast ${BROADCAST} netmask ${NETMASK} up</span>
</pre></td></tr>
</table>

<p>
Now set up routing using <span class="code">route</span>. Substitute <span class="code">${GATEWAY}</span> with
your gateway IP address:
</p>

<a name="doc_chap_pre20"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;20: Using route</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">route add default gw ${GATEWAY}</span>
</pre></td></tr>
</table>

<p>
Now open <span class="path">/etc/resolv.conf</span> with your favorite editor (in our
example, we use <span class="code">nano</span>):
</p>

<a name="doc_chap_pre21"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;21: Creating /etc/resolv.conf</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">nano -w /etc/resolv.conf</span>
</pre></td></tr>
</table>

<p>
Now fill in your nameserver(s) using the following as a template. Make
sure you substitute <span class="code">${NAMESERVER1}</span> and <span class="code">${NAMESERVER2}</span> with
the appropriate nameserver addresses:
</p>

<a name="doc_chap_pre22"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;22: /etc/resolv.conf template</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
nameserver ${NAMESERVER1}
nameserver ${NAMESERVER2}
</pre></td></tr>
</table>

<p>
That's it. Now test your network by pinging some Internet server (like
<a href="http://www.google.com">Google</a>). If this works,
congratulations then. You are now ready to install Gentoo. Continue with <a href="#book_part1_chap4">Preparing the Disks</a>.
</p>

<a name="book_part1_chap4"></a><h3>4. Preparing the Disks</h3>
<a name="book_id2699632_chap1"></a><p class="chaphead">
<span class="chapnum">4.a. </span>Introduction to Block Devices</p>
<a name="book_id2699632_chap1_sect1"></a><p class="secthead">Block Devices</p>

<p>
We'll take a good look at disk-oriented aspects of Gentoo Linux
and Linux in general, including Linux filesystems, partitions and block devices.
Then, once you're familiar with the ins and outs of disks and filesystems,
you'll be guided through the process of setting up partitions and filesystems
for your Gentoo Linux installation.
</p>

<p>
To begin, we'll introduce <span class="emphasis">block devices</span>. The most famous block device is
probably the one that represents the first IDE drive in a Linux system, namely
<span class="path">/dev/hda</span>. If your system uses SCSI drives, then your first hard
drive would be <span class="path">/dev/sda</span>.
</p>

<p>
The block devices above represent an abstract interface to the disk. User
programs can use these block devices to interact with your disk without worrying
about whether your drives are IDE, SCSI or something else. The program can
simply address the storage on the disk as a bunch of contiguous,
randomly-accessible 512-byte blocks.
</p>

<a name="book_id2699632_chap1_sect2"></a><p class="secthead">Partitions and Slices</p>

<p>
Although it is theoretically possible to use a full disk to house your Linux
system, this is almost never done in practice. Instead, full disk block devices
are split up in smaller, more manageable block devices. On most systems,
these are called <span class="emphasis">partitions</span>. Other architectures use a similar technique,
called <span class="emphasis">slices</span>.
</p>

<a name="book_id2699632_chap1_sect3"></a><p class="secthead">Partitions</p>

<p>
Partitions are divided in three types:
<span class="emphasis">primary</span>, <span class="emphasis">extended</span> and <span class="emphasis">logical</span>.
</p>

<p>
A <span class="emphasis">primary</span> partition is a partition which has its information stored in
the MBR (master boot record). As an MBR is very small (512 bytes) only four
primary partitions can be defined (for instance, <span class="path">/dev/hda1</span> to
<span class="path">/dev/hda4</span>).
</p>

<p>
An <span class="emphasis">extended</span> partition is a special primary partition (meaning the
extended partition must be one of the four possible primary partitions) which
contains more partitions. Such a partition didn't exist originally, but as
four partitions were too few, it was brought to life to extend the formatting
scheme without losing backward compatibility.
</p>

<p>
A <span class="emphasis">logical</span> partition is a partition inside the extended partition. Their
definitions aren't placed inside the MBR, but are declared inside the extended
partition. 
</p>

<a name="book_id2699632_chap1_sect4"></a><p class="secthead">Advanced Storage</p>

<p>
If you are booted from a Gentoo LiveCD then you have the possibility to use EVMS
or LVM2 to increase the flexibility offered by your partitioning setup. During
the installation instructions, we will focus on &quot;regular&quot; partitions, but it is
still good to know EVMS and LVM2 are supported as well.
</p>

<a name="book_id2699632_chap2"></a><p class="chaphead">
<span class="chapnum">4.b. </span>Designing a Partitioning Scheme</p>
<a name="book_id2699632_chap2_sect1"></a><p class="secthead">Default Partitioning Scheme</p>

<p>
If you are not interested in drawing up a partitioning scheme for your system,
you can use the (non-LVM) partitioning scheme we use throughout this book:
</p>

<p>
For x86 or amd64:
</p>

<table class="ntable">
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>Partition</b></td>
  <td bgcolor="#7a5ada" class="infohead"><b>Filesystem</b></td>
  <td bgcolor="#7a5ada" class="infohead"><b>Size</b></td>
  <td bgcolor="#7a5ada" class="infohead"><b>Description</b></td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo"><span class="path">/dev/hda1</span></td>
  <td bgcolor="#ddddff" class="tableinfo">ext2</td>
  <td bgcolor="#ddddff" class="tableinfo">32M</td>
  <td bgcolor="#ddddff" class="tableinfo">Boot partition</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo"><span class="path">/dev/hda2</span></td>
  <td bgcolor="#ddddff" class="tableinfo">(swap)</td>
  <td bgcolor="#ddddff" class="tableinfo">512M</td>
  <td bgcolor="#ddddff" class="tableinfo">Swap partition</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo"><span class="path">/dev/hda3</span></td>
  <td bgcolor="#ddddff" class="tableinfo">ext3</td>
  <td bgcolor="#ddddff" class="tableinfo">Rest of the disk</td>
  <td bgcolor="#ddddff" class="tableinfo">Root partition</td>
</tr>
</table>

<p>
For ppc:
</p>

<table class="ntable">
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>Partition NewWorld</b></td>
  <td bgcolor="#7a5ada" class="infohead"><b>Partition OldWorld</b></td>
  <td bgcolor="#7a5ada" class="infohead"><b>Filesystem</b></td>
  <td bgcolor="#7a5ada" class="infohead"><b>Size</b></td>
  <td bgcolor="#7a5ada" class="infohead"><b>Description</b></td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo"><span class="path">/dev/hda1</span></td>
  <td bgcolor="#ddddff" class="tableinfo">(Not needed)</td>
  <td bgcolor="#ddddff" class="tableinfo">(bootstrap)</td>
  <td bgcolor="#ddddff" class="tableinfo">800k</td>
  <td bgcolor="#ddddff" class="tableinfo">Apple_Bootstrap</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo"><span class="path">/dev/hda2</span></td>
  <td bgcolor="#ddddff" class="tableinfo"><span class="path">/dev/hda1</span></td>
  <td bgcolor="#ddddff" class="tableinfo">(swap)</td>
  <td bgcolor="#ddddff" class="tableinfo">512M</td>
  <td bgcolor="#ddddff" class="tableinfo">Swap partition</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo"><span class="path">/dev/hda3</span></td>
  <td bgcolor="#ddddff" class="tableinfo"><span class="path">/dev/hda2</span></td>
  <td bgcolor="#ddddff" class="tableinfo">ext3</td>
  <td bgcolor="#ddddff" class="tableinfo">Rest of the disk</td>
  <td bgcolor="#ddddff" class="tableinfo">Root partition</td>
</tr>
</table>

<p>
For Sparc:
</p>

<table class="ntable">
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>Sun Disklabel</b></td>
  <td bgcolor="#7a5ada" class="infohead"><b>Filesystem</b></td>
  <td bgcolor="#7a5ada" class="infohead"><b>Size</b></td>
  <td bgcolor="#7a5ada" class="infohead"><b>Description</b></td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo"><span class="path">/dev/hda1</span></td>
  <td bgcolor="#ddddff" class="tableinfo">ext2</td>
  <td bgcolor="#ddddff" class="tableinfo">32M</td>
  <td bgcolor="#ddddff" class="tableinfo">Boot partition</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo"><span class="path">/dev/hda2</span></td>
  <td bgcolor="#ddddff" class="tableinfo">(swap)</td>
  <td bgcolor="#ddddff" class="tableinfo">512M</td>
  <td bgcolor="#ddddff" class="tableinfo">Swap partition</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo"><span class="path">/dev/hda3</span></td>
  <td bgcolor="#ddddff" class="tableinfo">(none)</td>
  <td bgcolor="#ddddff" class="tableinfo">Full disk</td>
  <td bgcolor="#ddddff" class="tableinfo">Sun Disk Label (required)</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo"><span class="path">/dev/hda4</span></td>
  <td bgcolor="#ddddff" class="tableinfo">ext3</td>
  <td bgcolor="#ddddff" class="tableinfo">Rest of the disk</td>
  <td bgcolor="#ddddff" class="tableinfo">Root partition</td>
</tr>
</table>

<p>
If you are installing Gentoo from an existing distribution, you should first
resize your existing partitions (if you don't have any spare room left) to be
able to install Gentoo. You can use <a href="http://www.gnu.org/software/parted">GNU/Parted</a> to resize your
partitions.
</p>

<p>
If you are interested in knowing how big a partition (or logical 
volume) should be, or even how many partitions (or volumes) you need, read on. 
Otherwise continue now with partitioning your disk:
</p>

<ul>
<li>
  <a href="#book_id2699632_chap3">Using fdisk on x86 or amd64 to Partition your 
  Disk</a>
</li>
<li>
  <a href="#book_id2699632_chap4">Using fdisk on Alpha to Partition your Disk</a>
</li>
<li>
  <a href="#book_id2699632_chap5">Using fdisk on SPARC to Partition your Disk</a>
</li>
<li>
  <a href="#book_id2699632_chap6">Using mac-fdisk on PPC to Partition your Disk</a>
</li>
<li>
  <a href="#book_id2699632_chap7">Using fdisk on HPPA to Partition your Disk</a>
</li>
<li>
  <a href="#book_id2699632_chap8">Using fdisk on MIPS to Partition your Disk</a>
</li>
</ul>

<a name="book_id2699632_chap2_sect2"></a><p class="secthead">How Many and How Big?</p>

<p>
The number of partitions is highly dependent on your environment. For instance,
if you have lots of users, you will most likely want to have your
<span class="path">/home</span> separate as it increases security and makes backups easier.
If you are installing Gentoo to perform as a mailserver, your 
<span class="path">/var</span> should be separate as all mails are stored inside 
<span class="path">/var</span>. A good choice of filesystem will then maximise your 
performance. Gameservers will have a separate <span class="path">/opt</span> as most gaming 
servers are installed there. The reason is similar for <span class="path">/home</span>: 
security and backups.
</p>

<p>
As you can see, it very much depends on what you want to achieve. Separate
partitions or volumes have the following advantages:
</p>

<ul>
<li>
  You can choose the most performant filesystem for each partition or volume
</li>
<li>
  Your entire system cannot run out of free space if one defunct tool is
  continuously writing files to a partition or volume
</li>
<li>
  If necessary, file system checks are reduced in time, as multiple checks can
  be done in parallel (although this advantage is more with multiple disks than
  it is with multiple partitions)
</li>
<li>
  Security can be enhanced by mounting some partitions or volumes read-only, 
  nosuid (setuid bits are ignored), noexec (executable bits are ignored) etc.
</li>
</ul>

<p>
However, multiple partitions have one big disadvantage: if not configured 
properly, you might result in having a system with lots
of free space on one partition and none on another.
</p>

<p>
As an example partitioning, we show you one for a 20Gb disk, used as a
demonstration laptop (containing webserver, mailserver, gnome, ...):
</p>

<a name="doc_chap_pre1"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;1: Filesystem usage example</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Filesystem    Type    Size  Used Avail Use% Mounted on
/dev/hda5     ext3    509M  132M  351M  28% /
/dev/hda2     ext3    5.0G  3.0G  1.8G  63% /home
/dev/hda7     ext3    7.9G  6.2G  1.3G  83% /usr
/dev/hda8     ext3   1011M  483M  477M  51% /opt
/dev/hda9     ext3    2.0G  607M  1.3G  32% /var
/dev/hda1     ext2     51M   17M   31M  36% /boot
/dev/hda6     swap    516M   12M  504M   2% &lt;not mounted&gt;
<span class="comment">(Unpartitioned space for future usage: 2 Gb)</span>
</pre></td></tr>
</table>

<p>
<span class="path">/usr</span> is rather full (83% used) here, but once
all software is installed, <span class="path">/usr</span> doesn't tend to grow that much.
For <span class="path">/var</span>, people might think the assigned
space is too much. However, Gentoo compiles all programs inside
<span class="path">/var/tmp/portage</span>, so you should have <span class="path">/var</span> with at
least 1G free if you don't want to compile big programs, up to 3G free if 
compiling KDE and OpenOffice.org at the same time is no big deal for you.
</p>

<p>
Now partition your disk(s) using the instructions available for your
architecture as an example:
</p>

<ul>
<li>
  <a href="#book_id2699632_chap3">Using fdisk on x86 or amd64 to Partition your 
  Disk</a>
</li>
<li>
  <a href="#book_id2699632_chap4">Using fdisk on Alpha to Partition your Disk</a>
</li>
<li>
  <a href="#book_id2699632_chap5">Using fdisk on SPARC to Partition your Disk</a>
</li>
<li>
  <a href="#book_id2699632_chap6">Using mac-fdisk on PPC to Partition your Disk</a>
</li>
<li>
  <a href="#book_id2699632_chap7">Using fdisk on HPPA to Partition your Disk</a>
</li>
<li>
  <a href="#book_id2699632_chap8">Using fdisk on MIPS to Partition your Disk</a>
</li>
</ul>

<a name="book_id2699632_chap3"></a><p class="chaphead">
<span class="chapnum">4.c. </span>Using fdisk on x86 or amd64 to Partition your Disk</p>
<a name="book_id2699632_chap3_sect1"></a><p class="secthead"></p>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#ffffbb"><p class="note">
<b>Important: </b>
Only users with <span class="emphasis">x86</span> or <span class="emphasis">amd64</span> based systems should read this 
section.
</p></td></tr></table>

<p>
The following parts explain how to create the example partition layout 
described previously, namely:
</p>

<table class="ntable">
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>Partition</b></td>
  <td bgcolor="#7a5ada" class="infohead"><b>Description</b></td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo"><span class="path">/dev/hda1</span></td>
  <td bgcolor="#ddddff" class="tableinfo">Boot partition</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo"><span class="path">/dev/hda2</span></td>
  <td bgcolor="#ddddff" class="tableinfo">Swap partition</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo"><span class="path">/dev/hda3</span></td>
  <td bgcolor="#ddddff" class="tableinfo">Root partition</td>
</tr>
</table>

<p>
Change your partition layout according to your own will.
</p>

<a name="book_id2699632_chap3_sect2"></a><p class="secthead">Viewing the Current Partition Layout</p>

<p>
<span class="code">fdisk</span> is a popular and powerful tool to split your disk into partitions.
Fire up <span class="code">fdisk</span> on your disk (in our example, we use
<span class="path">/dev/hda</span>):
</p>

<a name="doc_chap_pre2"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;2: Starting fdisk</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">fdisk /dev/hda</span>
</pre></td></tr>
</table>

<p>
Once in <span class="code">fdisk</span>, you'll be greeted with a prompt that looks like this:
</p>

<a name="doc_chap_pre3"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;3: fdisk prompt</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Command (m for help): 
</pre></td></tr>
</table>

<p>
Type <span class="code">p</span> to display your disk's current partition configuration:
</p>

<a name="doc_chap_pre4"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;4: An example partition configuration</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Command (m for help): <span class="input">p</span>

Disk /dev/hda: 240 heads, 63 sectors, 2184 cylinders
Units = cylinders of 15120 * 512 bytes

Device Boot    Start       End    Blocks   Id  System
/dev/hda1             1        14    105808+  83  Linux
/dev/hda2            15        49    264600   82  Linux swap
/dev/hda3            50        70    158760   83  Linux
/dev/hda4            71      2184  15981840    5  Extended
/dev/hda5            71       209   1050808+  83  Linux
/dev/hda6           210       348   1050808+  83  Linux
/dev/hda7           349       626   2101648+  83  Linux
/dev/hda8           627       904   2101648+  83  Linux
/dev/hda9           905      2184   9676768+  83  Linux

Command (m for help): 
</pre></td></tr>
</table>

<p>
This particular disk is configured to house seven Linux filesystems (each with a
corresponding partition listed as &quot;Linux&quot;) as well as a swap partition (listed
as &quot;Linux swap&quot;). 
</p>

<a name="book_id2699632_chap3_sect3"></a><p class="secthead">Removing all Partitions</p>

<p>
We will first remove all existing partitions from the disk. Type <span class="code">d</span> to
delete a partition. For instance, to delete an existing <span class="path">/dev/hda1</span>:
</p>

<a name="doc_chap_pre5"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;5: Deleting a partition</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Command (m for help): <span class="input">d</span>
Partition number (1-4): <span class="input">1</span>
</pre></td></tr>
</table>

<p>
The partition has been scheduled for deletion. It will no longer show up if you
type <span class="code">p</span>, but it will not be erased until your changes have been saved. If
you made a mistake and want to abort without saving your changes, type <span class="code">q</span>
immediately and hit enter and your partition will not be deleted.
</p>

<p>
Now, assuming that you do indeed want to wipe out all the partitions on your
system, repeatedly type <span class="code">p</span> to print out a partition listing and then type
<span class="code">d</span> and the number of the partition to delete it. Eventually, you'll end 
up with a partition table with nothing in it:
</p>

<a name="doc_chap_pre6"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;6: An empty partition table</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Disk /dev/hda: 30.0 GB, 30005821440 bytes
240 heads, 63 sectors/track, 3876 cylinders
Units = cylinders of 15120 * 512 = 7741440 bytes

Device Boot    Start       End    Blocks   Id  System

Command (m for help):
</pre></td></tr>
</table>

<p>
Now that the in-memory partition table is empty, we're ready to create the
partitions. We will use a default partitioning scheme as discussed previously.
Of course, don't follow these instructions to the letter if you don't want the
same partitioning scheme!
</p>

<a name="book_id2699632_chap3_sect4"></a><p class="secthead">Creating the Boot Partition</p>

<p>
We first create a small boot partition. Type <span class="code">n</span> to create a new partition,
then <span class="code">p</span> to select a primary partition, followed by <span class="code">1</span> to select the
first primary partition. When prompted for the first cylinder, hit enter. When
prompted for the last cylinder, type <span class="code">+32M</span> to create a partition 32 Mbyte
in size:
</p>

<a name="doc_chap_pre7"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;7: Creating the boot partition</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Command (m for help): <span class="input">n</span>
Command action
  e   extended
  p   primary partition (1-4)
<span class="input">p</span>
Partition number (1-4): <span class="input">1</span>
First cylinder (1-3876, default 1): <span class="comment">(Hit Enter)</span>
Using default value 1
Last cylinder or +size or +sizeM or +sizeK (1-3876, default 3876): <span class="input">+32M</span>
</pre></td></tr>
</table>

<p>
Now, when you type <span class="code">p</span>, you should see the following partition printout:
</p>

<a name="doc_chap_pre8"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;8: Created boot partition</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Command (m for help): <span class="input">p</span>

Disk /dev/hda: 30.0 GB, 30005821440 bytes
240 heads, 63 sectors/track, 3876 cylinders
Units = cylinders of 15120 * 512 = 7741440 bytes

Device Boot    Start       End    Blocks   Id  System
/dev/hda1          1        14    105808+  83  Linux
</pre></td></tr>
</table>

<p>
We need to make this partition bootable. Type <span class="code">a</span> to toggle the bootable
flag on this partition. If you press <span class="code">p</span> again, you will notice that an
<span class="path">*</span> is placed in the &quot;Boot&quot; column.
</p>

<a name="book_id2699632_chap3_sect5"></a><p class="secthead">Creating the Swap Partition</p>

<p>
Let's now create the swap partition. To do this, type <span class="code">n</span> to create a new 
partition, then <span class="code">p</span> to tell fdisk that you want a primary partition. Then 
type <span class="code">2</span> to create the second primary partition, <span class="path">/dev/hda2</span> in
our case. When prompted for the first cylinder, hit enter. When prompted for 
the last cylinder, type <span class="code">+512M</span> to create a partition 512MB in size. After
you've done this, type <span class="code">t</span> to set the partition type, <span class="code">2</span> to select 
the partition you just created and then type in <span class="code">82</span> to set the partition 
type to &quot;Linux Swap&quot;. After completing these steps, typing <span class="code">p</span> should
display a partition table that looks similar to this:
</p>

<a name="doc_chap_pre9"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;9: Partition listing after creating a swap partition</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Command (m for help): <span class="input">p</span>

Disk /dev/hda: 30.0 GB, 30005821440 bytes
240 heads, 63 sectors/track, 3876 cylinders
Units = cylinders of 15120 * 512 = 7741440 bytes

Device Boot    Start       End    Blocks   Id  System
/dev/hda1 *        1        14    105808+  83  Linux
/dev/hda2         15        81    506520   82  Linux swap
</pre></td></tr>
</table>

<a name="book_id2699632_chap3_sect6"></a><p class="secthead">Creating the Root Partition</p>

<p>
Finally, let's create the root partition. To do this, type <span class="code">n</span> to create a 
new partition, then <span class="code">p</span> to tell fdisk that you want a primary partition. 
Then type <span class="code">3</span> to create the third primary partition, <span class="path">/dev/hda3</span>
in our case. When prompted for the first cylinder, hit enter. When prompted for
the last cylinder, hit enter to create a partition that takes up the rest of the
remaining space on your disk. After completing these steps, typing <span class="code">p</span> 
should display a partition table that looks similar to this:
</p>

<a name="doc_chap_pre10"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;10: Partition listing after creating the root partition</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Command (m for help): <span class="input">p</span>

Disk /dev/hda: 30.0 GB, 30005821440 bytes
240 heads, 63 sectors/track, 3876 cylinders
Units = cylinders of 15120 * 512 = 7741440 bytes

Device Boot    Start       End    Blocks   Id  System
/dev/hda1 *        1        14    105808+  83  Linux
/dev/hda2         15        81    506520   82  Linux swap
/dev/hda3         82      3876  28690200   83  Linux
</pre></td></tr>
</table>


<a name="book_id2699632_chap3_sect7"></a><p class="secthead">Saving the Partition Layout</p>

<p>
To save the partition layout and exit <span class="code">fdisk</span>, type <span class="code">w</span>.
</p>

<a name="doc_chap_pre11"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;11: Save and exit fdisk</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Command (m for help): <span class="input">w</span>
</pre></td></tr>
</table>

<p>
Now that your partitions are created, you can now continue with <a href="#filesystems">Creating Filesystems</a>.
</p>

<a name="book_id2699632_chap4"></a><p class="chaphead">
<span class="chapnum">4.d. </span>Using fdisk on Alpha to Partition your Disk</p>
<a name="book_id2699632_chap4_sect1"></a><p class="secthead"></p>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#ffffbb"><p class="note">
<b>Important: </b>
Only users with <span class="emphasis">Alpha</span> based systems should read this section.
</p></td></tr></table>

<p>
The following parts explain how to create the example slice layout described
previously, namely:
</p>

<table class="ntable">
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>Slice</b></td>
  <td bgcolor="#7a5ada" class="infohead"><b>Description</b></td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo"><span class="path">/dev/sdaa</span></td>
  <td bgcolor="#ddddff" class="tableinfo">Swap slice</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo"><span class="path">/dev/sdab</span></td>
  <td bgcolor="#ddddff" class="tableinfo">Root slice</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo"><span class="path">/dev/sdac</span></td>
  <td bgcolor="#ddddff" class="tableinfo">Full disk (required)</td>
</tr>
</table>

<p>
Change your slice layout according to your own will.
</p>


<a name="book_id2699632_chap4_sect2"></a><p class="secthead">Identifying Available Disks</p>

<p>
To figure out what disks you have running, use the following commands:
</p>

<a name="doc_chap_pre12"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;12: Identifying available disks</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
<span class="comment">(For IDE disks)</span>      # <span class="input">dmesg | grep 'drive$'</span>
<span class="comment">(For SCSI disks)</span>     # <span class="input">dmesg | grep 'scsi'</span>
</pre></td></tr>
</table>

<p>
From this output you should be able to see what disks were detected and their
respective <span class="path">/dev</span> entry. In the following parts we assume that the
disk is a SCSI disk on <span class="path">/dev/sda</span>.
</p>

<p>
Now fire up <span class="code">fdisk</span>:
</p>

<a name="doc_chap_pre13"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;13: Starting fdisk</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">fdisk /dev/sda</span>
</pre></td></tr>
</table>

<a name="book_id2699632_chap4_sect3"></a><p class="secthead">Deleting All Slices</p>

<p>
We start with deleting all slices <span class="emphasis">except</span> the 'c'-slice. The following
shows how to delete a slice (in the example we use 'a'). Repeat the process to
delete all other slices (again, except the 'c'-slice).
</p>

<p>
Use <span class="code">p</span> to view all existing slices. <span class="code">d</span> is used to delete a slice.
</p>

<a name="doc_chap_pre14"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;14: Deleting a slice</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
BSD disklabel command (m for help): <span class="input">p</span>

8 partitions:
#       start       end      size     fstype   [fsize bsize   cpg]                                    
  a:        1       235*      234*    4.2BSD     1024  8192    16
  b:      235*      469*      234*      swap
  c:        1      5290*     5289*    unused        0     0
  d:      469*     2076*     1607*    unused        0     0
  e:     2076*     3683*     1607*    unused        0     0
  f:     3683*     5290*     1607*    unused        0     0
  g:      469*     1749*     1280     4.2BSD     1024  8192    16
  h:     1749*     5290*     3541*    unused        0     0

BSD disklabel command (m for help): <span class="input">d</span>
Partition (a-h): <span class="input">a</span>
</pre></td></tr>
</table>

<p>
After repeating this process for all slices, a listing should show you something
similar to this:
</p>

<a name="doc_chap_pre15"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;15: Viewing an empty scheme</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
BSD disklabel command (m for help): <span class="input">p</span>

3 partitions:
#       start       end      size     fstype   [fsize bsize   cpg]                                    
  c:        1      5290*     5289*    unused        0     0
</pre></td></tr>
</table>

<a name="book_id2699632_chap4_sect4"></a><p class="secthead">Creating the Swap Slice</p>

<p>
On Alpha based systems you don't need a separate boot partition. However, the
first cylinder cannot be used as the <span class="code">aboot</span> image will be placed there.
</p>

<p>
We will create a swap slice starting at the third cylinder, with a total
size of 1 Gbyte. Use <span class="code">n</span> to create a new slice. After creating the slice,
we will change its type to <span class="code">1</span>, meaning <span class="emphasis">swap</span>.
</p>

<a name="doc_chap_pre16"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;16: Creating the swap slice</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
BSD disklabel command (m for help): <span class="input">n</span>
Partition (a-p): <span class="input">a</span>
First cylinder (1-5290, default 1): <span class="input">3</span>
Last cylinder or +size or +sizeM or +sizeK (3-5290, default 5290): <span class="input">+1024M</span>

BSD disklabel command (m for help): <span class="input">t</span>
Partition (a-c): <span class="input">a</span>
Hex code (type L to list codes): <span class="input">1</span>
</pre></td></tr>
</table>

<p>
After these steps you should see a layout similar to the following:
</p>

<a name="doc_chap_pre17"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;17: Slice layout after creating the swap slice</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
BSD disklabel command (m for help): <span class="input">p</span>

3 partitions:
#       start       end      size     fstype   [fsize bsize   cpg]                                    
  a:        3      1003      1001       swap
  c:        1      5290*     5289*    unused        0     0
</pre></td></tr>
</table>

<a name="book_id2699632_chap4_sect5"></a><p class="secthead">Create the Root Slice</p>

<p>
We will now create the root slice, starting from the first cylinder <span class="emphasis">after</span>
the swap slice. Use the <span class="code">p</span> command to view where the swap slice ends. In
our example, this is at 1003, making the root partition start at 1004.
</p>

<p>
Another problem is that there is currently a bug in <span class="code">fdisk</span> making it think
the number of available cylinders is one above the real number of cylinders. In
other words, when you are asked for the last cylinder, decrease the cylinder
number (in this example: 5290) with one.
</p>

<p>
When the partition is created, we change the type to <span class="code">8</span>, for <span class="emphasis">ext2</span>.
</p>

<a name="doc_chap_pre18"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;18: Creating the root slice</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
D disklabel command (m for help): <span class="input">n</span>
Partition (a-p): <span class="input">b</span>
First cylinder (1-5290, default 1): <span class="input">1004</span>
Last cylinder or +size or +sizeM or +sizeK (1004-5290, default 5290): <span class="input">5289</span>

BSD disklabel command (m for help): <span class="input">t</span>
Partition (a-c): <span class="input">b</span>
Hex code (type L to list codes): <span class="input">8</span>
</pre></td></tr>
</table>

<p>
Your slice layout should now be similar to this:
</p>

<a name="doc_chap_pre19"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;19: Viewing the slice layout</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
BSD disklabel command (m for help): <span class="input">p</span>

3 partitions:
#       start       end      size     fstype   [fsize bsize   cpg]                                    
  a:        3      1003      1001       swap
  b:     1004      5289      4286       ext2
  c:        1      5290*     5289*    unused        0     0
</pre></td></tr>
</table>

<a name="book_id2699632_chap4_sect6"></a><p class="secthead">Save the Slice Layout and Exit</p>

<p>
Save <span class="code">fdisk</span> by typing <span class="code">w</span>. This will also save your slice layout.
</p>

<a name="doc_chap_pre20"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;20: Save and exit fdisk</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Command (m for help): <span class="input">w</span>
</pre></td></tr>
</table>

<p>
Now that your slices are created, you can now continue with <a href="#filesystems">Creating Filesystems</a>.
</p>

<a name="book_id2699632_chap5"></a><p class="chaphead">
<span class="chapnum">4.e. </span>Using fdisk on SPARC to Partition your Disk</p>
<a name="book_id2699632_chap5_sect1"></a><p class="secthead"></p>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#ffffbb"><p class="note">
<b>Important: </b>
Only users with <span class="emphasis">SPARC</span> based systems should read this section.
</p></td></tr></table>

<p>
The following parts explain how to create the example partition layout described
previously, namely:
</p>

<table class="ntable">
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>Partition</b></td>
  <td bgcolor="#7a5ada" class="infohead"><b>Description</b></td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo"><span class="path">/dev/hda1</span></td>
  <td bgcolor="#ddddff" class="tableinfo">Boot partition</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo"><span class="path">/dev/hda2</span></td>
  <td bgcolor="#ddddff" class="tableinfo">Swap partition</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo"><span class="path">/dev/hda3</span></td>
  <td bgcolor="#ddddff" class="tableinfo">Sun Disk Label (required)</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo"><span class="path">/dev/hda4</span></td>
  <td bgcolor="#ddddff" class="tableinfo">Root partition</td>
</tr>
</table>

<p>
Change your partition layout according to your own will.
</p>


<a name="book_id2699632_chap5_sect2"></a><p class="secthead">Firing up fdisk</p>

<p>
Start <span class="code">fdisk</span> with your disk as argument:
</p>

<a name="doc_chap_pre21"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;21: Starting fdisk</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">fdisk /dev/hda</span>
</pre></td></tr>
</table>

<p>
You should be greeted with the fdisk prompt:
</p>

<a name="doc_chap_pre22"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;22: The fdisk prompt</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Command (m for help):
</pre></td></tr>
</table>

<p>
To view the available partitions, type in <span class="code">p</span>:
</p>

<a name="doc_chap_pre23"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;23: Listing available partitions</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Command (m for help): <span class="input">p</span>

Disk /dev/hda (Sun disk label): 240 heads, 63 sectors/track, 3876 cylinders
Units = cylinders of 15120 * 512 bytes

Device Flag    Start       End    Blocks   Id  System
/dev/hda1   *         1        14    105808+  83  Linux
/dev/hda2            15        81    506520   82  Linux swap
/dev/hda3             0      3876  29302528    5  Whole Disk
/dev/hda4            82      3876  28690200   83  Linux
</pre></td></tr>
</table>

<p>
Note the <span class="code">Sun disk label</span> in the output. If this is missing, the disk is
using the DOS-partitioning, not the Sun partitioning. In this case, use <span class="code">s</span>
to ensure that the disk has a sun partition table.
</p>

<a name="book_id2699632_chap5_sect3"></a><p class="secthead">Deleting Existing Partitions</p>

<p>
It's time to delete any existing partitions. To do this, type <span class="code">d</span> and hit 
Enter. You will then be prompted for the partition number you would like to 
delete. To delete a pre-existing <span class="path">/dev/hda1</span>, you would type:
</p>

<a name="doc_chap_pre24"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;24: Deleting a partition</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Command (m for help): <span class="input">d</span>
Partition number (1-4): <span class="input">1</span>
</pre></td></tr>
</table>

<p>
Assuming you want to remove all existing partitions, press <span class="code">p</span> to view the
available partitions, and <span class="code">d</span> to delete those one by one. If you feel like
you made an error, press <span class="code">q</span> immediately -- <span class="code">fdisk</span> doesn't
immediately change the partitions but keeps the changes in memory. Only when you
press <span class="code">w</span> are the partitions saved.
</p>

<p>
After deleting all partitions, you should have a partition layout similar to the
following:
</p>

<a name="doc_chap_pre25"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;25: View an empty partition scheme</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Command (m for help): <span class="input">p</span>

Disk /dev/hda (Sun disk label): 240 heads, 63 sectors/track, 3876 cylinders
Units = cylinders of 15120 * 512 bytes

Device Flag    Start       End    Blocks   Id  System
</pre></td></tr>
</table>


<a name="book_id2699632_chap5_sect4"></a><p class="secthead">Create the Sun Disk Label</p>

<p>
Now that the in-memory partition table is empty, we're ready to create the Sun
Disk Label partition. To do this, type <span class="code">n</span> to create a new partition, then 
type <span class="code">3</span> to create the partition. When prompted for the first cylinder, 
hit enter. When prompted for the last cylinder, hit enter. After you've done 
this, type <span class="code">t</span> to set the partition type, and then type in <span class="code">5</span> to set
the partition type to &quot;Whole disk&quot;.
</p>

<a name="doc_chap_pre26"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;26: Steps to create a Sun Disk Label</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Command (m for help): <span class="input">n</span>
Partition number (1-4): <span class="input">3</span>
First cylinder (1-3876, default 0): <span class="input">0</span>
Last cylinder or +size or +sizeM or +sizeK (1-3876, default 3876): <span class="comment">(Press Enter)</span>
Using default value 3876

Command (m for help): <span class="input">t</span>
Partition number (1-8): <span class="input">3</span>
Hex code (type L to list codes): <span class="input">5</span>
</pre></td></tr>
</table>

<p>
After completing these steps, typing <span class="code">p</span> should display a partition table 
that looks similar to this:
</p>

<a name="doc_chap_pre27"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;27: View the partition layout</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Command (m for help): <span class="input">p</span>

Disk /dev/hda (Sun disk lable): 240 heads, 63 sectors/track, 3876 cylinders
Units = cylinders of 15120 * 512 bytes

Device Flag    Start       End    Blocks   Id  System
/dev/hda3             0      3876  29302528    5  Whole disk
</pre></td></tr>
</table>

<a name="book_id2699632_chap5_sect5"></a><p class="secthead">Creating the Boot Partition</p>

<p>
We're ready to create a boot partition. To do this, type <span class="code">n</span> to create a 
new partition, then type <span class="code">1</span> to create the partition. When prompted for the
first cylinder, hit enter. When prompted for the last cylinder, type <span class="code">+32M</span>
to create a partition <span class="code">32MB</span> in size. Make sure that the entire boot
partition must be contained entirely within the first 2Gb of the disk. 
You can see output from these steps below:
</p>

<a name="doc_chap_pre28"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;28: Creating a boot partition</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Command (m for help): <span class="input">n</span>
Partition number (1-4): <span class="input">1</span>
First cylinder (1-3876, default 1): <span class="comment">(Press Enter)</span>
Using default value 1
Last cylinder or +size or +sizeM or +sizeK (1-3876, default 3876): <span class="input">+32M</span>
</pre></td></tr>
</table>

<p>
Now, when you type <span class="code">p</span>, you should see the following partition printout:
</p>

<a name="doc_chap_pre29"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;29: Listing the partition layout</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Command (m for help): <span class="input">p</span>

Disk /dev/hda (Sun disk label): 240 heads, 63 sectors/track, 3876 cylinders
Units = cylinders of 15120 * 512 bytes

Device Flag    Start       End    Blocks   Id  System
/dev/hda1             1        14    105808+  83  Linux
/dev/hda3             0      3876  29302528    5  Whole disk
</pre></td></tr>
</table>
<a name="book_id2699632_chap5_sect6"></a><p class="secthead">Creating a swap partition</p>

<p>
Next, let's create the swap partition. To do this, type <span class="code">n</span> to create a new
partition, then <span class="code">2</span> to create the second partition, <span class="path">/dev/hda2</span>
in our case. When prompted for the first cylinder, hit enter. When prompted for 
the last cylinder, type <span class="code">+512M</span> to create a partition 512MB in size. After 
you've done this, type <span class="code">t</span> to set the partition type, and then type in 
<span class="code">82</span> to set the partition type to &quot;Linux Swap&quot;. After completing these 
steps, typing <span class="code">p</span> should display a partition table that looks similar to 
this:
</p>

<a name="doc_chap_pre30"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;30: Listing of available partitions</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Command (m for help): <span class="input">p</span>

Disk /dev/hda (Sun disk label): 240 heads, 63 sectors/track, 3876 cylinders
Units = cylinders of 15120 * 512 bytes

Device Flag    Start       End    Blocks   Id  System
/dev/hda1             1        14    105808+  83  Linux
/dev/hda2            15        81    506520   82  Linux swap
/dev/hda3             0      3876  29302528    5  Whole disk
</pre></td></tr>
</table>

<a name="book_id2699632_chap5_sect7"></a><p class="secthead">Creating the root partition</p>

<p>
Finally, let's create the root partition. To do this, type <span class="code">n</span> to create a 
new partition, then type <span class="code">4</span> to create the third partition, 
<span class="path">/dev/hda4</span> in our case. When prompted for the first cylinder, hit 
enter. When prompted for the last cylinder, hit enter to create a partition 
that takes up the rest of the remaining space on your disk. After completing 
these steps, typing <span class="code">p</span> should display a partition table that looks similar
to this:
</p>

<a name="doc_chap_pre31"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;31: Listing complete partition table</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Command (m for help): <span class="input">p</span>

Disk /dev/hda (Sun disk label): 240 heads, 63 sectors/track, 3876 cylinders
Units = cylinders of 15120 * 512 bytes

Device Flag    Start       End    Blocks   Id  System
/dev/hda1             1        14    105808+  83  Linux
/dev/hda2            15        81    506520   82  Linux swap
/dev/hda3             0      3876  29302528    5  Whole disk
/dev/hda4            82      3876  28690200   83  Linux
</pre></td></tr>
</table>

<a name="book_id2699632_chap5_sect8"></a><p class="secthead">Save and Exit</p>

<p>
To save your partition layout and exit <span class="code">fdisk</span>, type <span class="code">w</span>:
</p>

<a name="doc_chap_pre32"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;32: Save and exit fdisk</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Command (m for help): <span class="input">w</span>
</pre></td></tr>
</table>

<p>
Now that your partitions are created, you can now continue with <a href="#filesystems">Creating Filesystems</a>.
</p>

<a name="book_id2699632_chap6"></a><p class="chaphead">
<span class="chapnum">4.f. </span>Using mac-fdisk on PPC to Partition your Disk</p>

<p>
At this point, create your partitions using <span class="code">mac-fdisk</span>:
</p>

<a name="doc_chap_pre33"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;33: Starting mac-fdisk</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">mac-fdisk /dev/hda</span>
</pre></td></tr>
</table>

<p>
First delete the partitions you have cleared previously to make room for your
Linux partitions. Use <span class="code">d</span> in <span class="code">mac-fdisk</span> to delete those partition(s).
It will ask for the partition number to delete.
</p>

<p>
Second, create an <span class="emphasis">Apple_Bootstrap</span> partition by using <span class="code">b</span>. It will
ask for what block you want to start. If you previously selected <span class="code">3</span> as
partition number, enter <span class="code">3p</span>. 
</p>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#bbffbb"><p class="note">
<b>Note: </b>
This partition is <span class="emphasis">not</span> a &quot;boot&quot; partition. It is not used by Linux at all;
you don't have to place any filesystem on it and you should never mount it. PPC
users don't need a boot partition.
</p></td></tr></table>

<p>
Now create a swap partition by pressing <span class="code">c</span>. Again <span class="code">mac-fdisk</span> will
ask for what block you want to start this partition from. As we used <span class="code">3</span>
before to create the Apple_Bootstrap partition, you now have to enter
<span class="code">4p</span>. When you're asked for the size, enter <span class="code">512M</span> (or whatever size
you want -- 512 is recommended though). When asked for a name, enter <span class="code">swap</span>
(mandatory).
</p>

<p>
To create the root partition, enter <span class="code">c</span>, followed by <span class="code">5p</span> to select
from what block the root partition should start. When asked for the size, enter
<span class="code">5p</span> again. <span class="code">mac-fdisk</span> will interprete this as &quot;Use all available
space&quot;. When asked for the name, enter <span class="code">root</span> (mandatory).
</p>

<p>
To finish up, write the partition to the disk using <span class="code">w</span> and <span class="code">q</span> to
quit <span class="code">mac-fdisk</span>.
</p>

<p>
Now that your partitions are created, you can now continue with <a href="#filesystems">Creating Filesystems</a>.
</p>

<a name="book_id2699632_chap7"></a><p class="chaphead">
<span class="chapnum">4.g. </span>Using fdisk on HPPA to Partition your Disk</p>

<p>
Use <span class="code">fdisk</span> to create the partitions you want:
</p>

<a name="doc_chap_pre34"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;34: Partitioning the disk</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">fdisk /dev/sda</span>
</pre></td></tr>
</table>

<p>
PALO needs a special partition to work. You have to create a partition of at
least 16Mb at the beginning of your disk. The partition type must be of type
<span class="emphasis">f0</span> (Linux/PA-RISC boot).
</p>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#ffffbb"><p class="note">
<b>Important: </b>
If you ignore this and continue without a special PALO partition, your system
will stop loving you and fail to start.
</p></td></tr></table>

<p>
Also, if your disk is larger than 2Gb, make sure that the boot partition is in
the first 2Gb of your disk. PALO is unable to read a kernel after the 2Gb limit.
</p>

<p>
Now that your partitions are created, you can now continue with <a href="#filesystems">Creating Filesystems</a>.
</p>

<a name="book_id2699632_chap8"></a><p class="chaphead">
<span class="chapnum">4.h. </span>Using fdisk on MIPS to Partition your Disk</p>
<a name="book_id2699632_chap8_sect1"></a><p class="secthead">Creating an SGI Disk Label</p>

<p>
All disks in an SGI System require an <span class="emphasis">SGI Disk Label</span>, which serves a 
similar function as Sun &amp; MS-DOS disklabels -- It stores information about 
the disk partitions. Creating a new SGI Disk Label will create two special 
partitions on the disk:
</p>

<ul>
  <li>
    <span class="emphasis">SGI Volume Header</span> (9th partition): This partition is important. It
    is where the kernel images will go. To store kernel images, you will utilize
    the tool known as <span class="code">dvhtool</span> to copy kernel images to this partition. 
    You will then be able to boot kernels from this partition via the SGI PROM 
    Monitor.
  </li>
  <li>
    <span class="emphasis">SGI Volume</span> (11th partition): This partition is similar in purpose to
    the Sun Disklabel's third partition of &quot;Whole Disk&quot;. This partition spans
    the entire disk, and should be left untouched. It serves no special purpose
    other than to assist the PROM in some undocumented fashion (or it is used by
    IRIX in some way).
  </li>
</ul>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#ffbbbb"><p class="note">
<b>Warning: </b>
The SGI Volume Header <span class="emphasis">must</span> begin at cylinder 0. Failure to do so means
you won't be able to boot from the disk.
</p></td></tr></table>

<p>
The following is an example excerpt from an <span class="code">fdisk</span> session. Read and
tailor it to your needs...
</p>

<a name="doc_chap_pre35"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;35: Creating an SGI Disklabel</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">fdisk /dev/sda</span>

Command (m for help): <span class="input">x</span>

Expert command (m for help): <span class="input">m</span>
Command action
   b   move beginning of data in a partition
   c   change number of cylinders
   d   print the raw data in the partition table
   e   list extended partitions
   f   fix partition order
   g   create an IRIX (SGI) partition table
   h   change number of heads
   m   print this menu
   p   print the partition table
   q   quit without saving changes
   r   return to main menu
   s   change number of sectors/track
   v   verify the partition table
   w   write table to disk and exit

Expert command (m for help): <span class="input">g</span>
Building a new SGI disklabel. Changes will remain in memory only,
until you decide to write them. After that, of course, the previous
content will be unrecoverably lost.

Expert command (m for help): <span class="input">r</span>

Command (m for help): <span class="input">p</span>

Disk /dev/sda (SGI disk label): 64 heads, 32 sectors, 17482 cylinders
Units = cylinders of 2048 * 512 bytes

----- partitions -----
Pt#     Device  Info     Start       End   Sectors  Id  System
 9:  /dev/sda1               0         4     10240   0  SGI volhdr
11:  /dev/sda2               0     17481  35803136   6  SGI volume
----- Bootinfo -----
Bootfile: /unix
----- Directory Entries -----

Command (m for help):
</pre></td></tr>
</table>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#bbffbb"><p class="note">
<b>Note: </b>
If your disk already has an existing SGI Disklabel, then fdisk will not allow
the creation of a new label. There are two ways around this. One is to create a
Sun or MS-DOS disklabel, write the changes to disk, and restart fdisk. The
second is to overwrite the partition table with null data via the following
command: <span class="code">dd if=/dev/zero of=/dev/sda bs=512 count=1</span>.
</p></td></tr></table>

<a name="book_id2699632_chap8_sect2"></a><p class="secthead">Getting the SGI Volume Header to just the right size</p>

<p>
Now that an SGI Disklabel is created, partitions may now be defined. In the
above example, there are already two partitions defined for you. These are the
special partitions mentioned above and should not normally be altered. However,
for installing Gentoo, we'll need to load multiple kernel images directly into
the volume header, as there is no supported SGI Bootloader available in Portage
yet. The volume header itself can hold up to <span class="emphasis">eight</span> images of any size, 
with each image allowed eight-character names.
</p>

<p>
The process of making the volume header larger isn't exactly straight-forward --
there's a bit of a trick to it. One cannot simply delete and re-add the volume
header due to odd fdisk behavior. In the example provided below, we'll create a
50MB Volume header in conjunction with a 50MB /boot partition. The actual layout
of your disk may vary, but this is for illustrative purposes only.
</p>

<a name="doc_chap_pre36"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;36: Resizing the SGI Volume Header correctly</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Command (m for help): <span class="input">n</span>
Partition number (1-16): <span class="input">1</span>
First cylinder (5-8682, default 5): <span class="input">51</span>
 Last cylinder (51-8682, default 8682): <span class="input">101</span>
<span class="comment">(Notice how fdisk only allows Partition #1 to be re-created starting at a minimum of cylinder 5)</span>
<span class="comment">(Had you attempted to delete &amp; re-create the SGI Volume Header this way, this is the same issue
 you would have encountered.)</span>
<span class="comment">(In our example, we want /boot to be 50MB, so we start it at cylinder 51 (the Volume Header needs to 
 start at cylinder 0, remember?), and set its ending cylinder to 101, which will roughly be 50MB (+/- 1-5MB))</span>

Command (m for help): <span class="input">d</span>
Partition number (1-16): <span class="input">9</span>
<span class="comment">(Delete Partition #9 (SGI Volume Header))</span>

Command (m for help): <span class="input">n</span>
Partition number (1-16): <span class="input">9</span>
First cylinder (0-50, default 0): <span class="input">0</span>
 Last cylinder (0-50, default 50): <span class="input">50</span>
<span class="comment">(Re-Create Partition #9, ending just before Partition #1)</span>
</pre></td></tr>
</table>

<a name="book_id2699632_chap8_sect3"></a><p class="secthead">Final partition layout</p>

<p>
Once this is done, you are safe to create the rest of your partitions as you see
fit. After all your partitions are laid out, make sure you set the partition ID
of your swap partition to <span class="code">82</span>, which is Linux Swap. By default, it will be
<span class="code">83</span>, Linux Native. 
</p>

<p>
Now that your partitions are created, you can now continue with <a href="#filesystems">Creating Filesystems</a>.
</p>

<a name="book_id2699632_chap9"></a><a name="filesystems"></a><p class="chaphead">
<span class="chapnum">4.i. </span>Creating Filesystems</p>
<a name="book_id2699632_chap9_sect1"></a><p class="secthead">Introduction</p>

<p>
Now that your partitions are created, it is time to place a filesystem on them. 
If you don't care about what filesystem to choose and are happy with what we use
as default in this handbook, continue with <a href="#filesystems-apply">Applying a Filesystem to a Partition</a>.
Otherwise read on to learn about the available filesystems...
</p>

<a name="book_id2699632_chap9_sect2"></a><p class="secthead">Filesystems?</p>

<p>
Several filesystems are available. Some of them are found stable on all
architectures, others only on a few. The following table lists the available
filesystems and the architectures they are known to work on. If an architecture
is contained within &quot;(...)&quot; then the filesystem should work but is untested.
</p>

<table class="ntable">
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>Filesystem</b></td>
  <td bgcolor="#7a5ada" class="infohead"><b>Journaled</b></td>
  <td bgcolor="#7a5ada" class="infohead"><b>Architectures</b></td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">ext2</td>
  <td bgcolor="#ddddff" class="tableinfo">no</td>
  <td bgcolor="#ddddff" class="tableinfo">All architectures</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">ext3</td>
  <td bgcolor="#ddddff" class="tableinfo">yes</td>
  <td bgcolor="#ddddff" class="tableinfo">All architectures</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">reiserfs</td>
  <td bgcolor="#ddddff" class="tableinfo">yes</td>
  <td bgcolor="#ddddff" class="tableinfo">x86, hppa, alpha, (mips), (pcc), (amd64)</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">xfs</td>
  <td bgcolor="#ddddff" class="tableinfo">yes</td>
  <td bgcolor="#ddddff" class="tableinfo">x86, alpha, amd64, (ppc)</td> 
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">jfs</td>
  <td bgcolor="#ddddff" class="tableinfo">yes</td>
  <td bgcolor="#ddddff" class="tableinfo">x86, alpha, (mips), (amd64)</td>
</tr>
</table>

<p>
<b>ext2</b> is the tried and true Linux filesystem but doesn't have metadata
journaling, which means that routine ext2 filesystem checks at startup time can
be quite time-consuming. There is now quite a selection of newer-generation
journaled filesystems that can be checked for consistency very quickly and are
thus generally preferred over their non-journaled counterparts. Journaled
filesystems prevent long delays when you boot your system and your filesystem
happens to be in an inconsistent state.
</p>

<p>
<b>ext3</b> is the journaled version of the ext2 filesystem, providing metadata
journaling for fast recovery in addition to other enhanced journaling modes like
full data and ordered data journaling. ext3 is a very good and reliable
filesystem. It offers generally decent performance under most conditions.
Because it does not extensively employ the use of &quot;trees&quot; in its internal
design, it doesn't scale very well, meaning that it is not an ideal choice for
very large filesystems, or situations where you will be handling very large
files or large quantities of files in a single directory. But when used within
its design parameters, ext3 is an excellent filesystem.
</p>

<p>
<b>ReiserFS</b> is a B*-tree based filesystem that has very good overall 
performance and greatly outperforms both ext2 and ext3 when dealing with small 
files (files less than 4k), often by a factor of 10x-15x. ReiserFS also scales 
extremely well and has metadata journaling. As of kernel 2.4.18+, ReiserFS is 
solid and usable as both general-purpose filesystem and for extreme cases such 
as the creation of large filesystems, the use of many small files, very large 
files and directories containing tens of thousands of files. 
</p>

<p>
<b>XFS</b> is a filesystem with metadata journaling that is fully supported 
under Gentoo Linux's xfs-sources kernel. It comes with a robust feature-set and
is optimized for scalability. We only recommend using this filesystem on Linux
systems with high-end SCSI and/or fibre channel storage and a uninterruptible
power supply. Because XFS aggressively caches in-transit data in RAM, improperly
designed programs (those that don't take proper precautions when writing files
to disk and there are quite a few of them) can lose a good deal of data if the
system goes down unexpectedly.
</p>

<p>
<b>JFS</b> is IBM's high-performance journaling filesystem. It has recently 
become production-ready and there hasn't been a sufficient track record to 
comment positively nor negatively on its general stability at this point.
</p>

<a name="book_id2699632_chap9_sect3"></a><a name="filesystems-apply"></a><p class="secthead">Applying a Filesystem to a Partition</p>

<p>
To create a filesystem on a partition or volume, there are tools available for 
each possible filesystem:
</p>

<table class="ntable">
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>Filesystem</b></td>
  <td bgcolor="#7a5ada" class="infohead"><b>Creation Command</b></td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">ext2</td>
  <td bgcolor="#ddddff" class="tableinfo"><span class="code">mke2fs</span></td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">ext3</td>
  <td bgcolor="#ddddff" class="tableinfo"><span class="code">mke2fs -j</span></td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">reiserfs</td>
  <td bgcolor="#ddddff" class="tableinfo"><span class="code">mkreiserfs</span></td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">xfs</td>
  <td bgcolor="#ddddff" class="tableinfo"><span class="code">mkfs.xfs</span></td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">jfs</td>
  <td bgcolor="#ddddff" class="tableinfo"><span class="code">mkfs.jfs</span></td>
</tr>
</table>

<p>
For instance, to have the boot partition (<span class="path">/dev/hda1</span> in our
example) in ext2 and the root partition (<span class="path">/dev/hda3</span> in our example)
in ext3 (as in our example), you would use:
</p>

<a name="doc_chap_pre37"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;37: Applying a filesystem on a partition</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">mke2fs /dev/hda1</span>
# <span class="input">mke2fs -j /dev/hda3</span>
</pre></td></tr>
</table>

<p>
Now create the filesystems on your newly created partitions (or logical
volumes).
</p>

<a name="book_id2699632_chap9_sect4"></a><p class="secthead">Activating the Swap Partition</p>

<p>
<span class="code">mkswap</span> is the command that is used to initialize swap partitions:
</p>

<a name="doc_chap_pre38"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;38: Creating a Swap signature</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">mkswap /dev/hda2</span>
</pre></td></tr>
</table>

<p>
To activate the swap partition, use <span class="code">swapon</span>:
</p>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#bbffbb"><p class="note">
<b>Note: </b>
Knoppix users who already have a swap partition on their system may skip this as
Knoppix automatically activates existing swap partitions.
</p></td></tr></table>

<a name="doc_chap_pre39"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;39: Activating the swap partition</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">swapon /dev/hda2</span>
</pre></td></tr>
</table>

<p>
Create and activate the swap now.
</p>

<a name="book_id2699632_chap10"></a><p class="chaphead">
<span class="chapnum">4.j. </span>Mounting</p>

<p>
Now that your partitions are initialized and are housing a filesystem, it is
time to mount those partitions. Use the <span class="code">mount</span> command. Don't forget to
create the necessary mount directories for every partition you created. As an
example we mount the root and boot partition:
</p>

<a name="doc_chap_pre40"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;40: Mounting partitions</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">mount /dev/hda3 /mnt/gentoo</span>
# <span class="input">mkdir /mnt/gentoo/boot</span>
# <span class="input">mount /dev/hda1 /mnt/gentoo/boot</span>
</pre></td></tr>
</table>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#bbffbb"><p class="note">
<b>Note: </b>
If you want your <span class="path">/tmp</span> to reside on a separate partition, be sure to
change its permissions after mounting: <span class="code">chmod 1777 /mnt/gentoo/tmp</span>. This
also holds for <span class="path">/var/tmp</span>.
</p></td></tr></table>

<p>
We also need to mount the proc filesystem (a virtual interface with the kernel)
on <span class="path">/proc</span>. We first create the <span class="path">/mnt/gentoo/proc</span> 
mountpoint:
</p>

<a name="doc_chap_pre41"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;41: Creating the /mnt/gentoo/proc mountpoint</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">mkdir /mnt/gentoo/proc</span>
</pre></td></tr>
</table>

<p>
If you are installing Gentoo from a LiveCD, you just need to mount
<span class="path">proc</span>:
</p>

<a name="doc_chap_pre42"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;42: Mounting proc</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">mount -t proc none /mnt/gentoo/proc</span>
</pre></td></tr>
</table>

<p>
If you are not installing Gentoo from a Gentoo LiveCD, you need to
bindmount <span class="path">/proc</span>:
</p>

<a name="doc_chap_pre43"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;43: Bind-mounting proc</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">mount -o bind /proc /mnt/gentoo/proc</span>
</pre></td></tr>
</table>

<p>
Now continue with <a href="#book_part1_chap5">Installing the Gentoo
Installation Files</a>.
</p>

<a name="book_part1_chap5"></a><h3>5. Installing the Gentoo Installation Files</h3>
<a name="book_id2718347_chap1"></a><p class="chaphead">
<span class="chapnum">5.a. </span>Installing a Stage Tarball</p>
<a name="book_id2718347_chap1_sect1"></a><p class="secthead">Making your Choice</p>

<p>
The next step you need to perform is to install the <span class="emphasis">stage</span> tarball of your
choice onto your system. You have the option of downloading the required tarball
from the Internet or, if you are booted from one of the Gentoo LiveCDs, copy it
over from the CD itself.
</p>

<ul>
<li><a href="#book_id2718347_chap2">Default: Using a Stage from the Internet</a></li>
<li><a href="#book_id2718347_chap3">Alternative: Using a Stage from the LiveCD</a></li>
</ul>

<a name="book_id2718347_chap2"></a><p class="chaphead">
<span class="chapnum">5.b. </span>Default: Using a Stage from the Internet</p>
<a name="book_id2718347_chap2_sect1"></a><p class="secthead">Downloading the Stage Tarball</p>

<p>
Go to the Gentoo mountpoint at which you mounted your filesystems
(most likely <span class="path">/mnt/gentoo</span>):
</p>

<a name="doc_chap_pre1"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;1: Going to the Gentoo mountpoint</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">cd /mnt/gentoo</span>
</pre></td></tr>
</table>

<p>
Depending on your installation medium, you have a couple of tools available to
download a stage. If you have <span class="code">lynx</span> available, then you can immediately
surf to <a href="/main/en/mirrors.xml">the Gentoo
mirrorlist</a> and choose a mirror close to you. Then pick the
<span class="path">releases/</span> directory, followed by the Gentoo version
(<span class="path">2004.0</span>) and your architecture (for instance <span class="path">x86/</span>) 
to finish up with the <span class="path">stages/</span> directory. There you should see all 
available stage files for your architecture. Select one and press <span class="code">D</span> to 
download. When you're finished, press <span class="code">Q</span> to quit the browser.
</p>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#bbffbb"><p class="note">
<b>Note: </b>
The <a href="http://hardened.gentoo.org">Gentoo Hardened</a> stages (for the
x86 architecture) are inside the subdirectory <span class="path">hardened/stages/</span>.
</p></td></tr></table>

<a name="doc_chap_pre2"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;2: Surfing to the mirror listing with lynx</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">lynx http://www.gentoo.org/main/en/mirrors.xml</span>
</pre></td></tr>
</table>

<p>
If you do not have <span class="code">lynx</span>, you should have <span class="code">links2</span> at your disposal.
<span class="code">links2</span> is more powerful than <span class="code">lynx</span>, but has some drawbacks. One of
them is that it doesn't listen to the proxy variables we have declared
previously. If you need to setup a proxy, use <span class="code">links2 -http-proxy
proxy.server.com:8080</span>. From there on, you should follow the same steps as
with <span class="code">lynx</span> as they are equivalent.
</p>

<a name="doc_chap_pre3"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;3: Surfing to the mirror listing with links2</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
<span class="comment">(Without proxy)</span>   # <span class="input">links2 http://www.gentoo.org/main/en/mirrors.xml</span>
<span class="comment">(With proxy)</span>      # <span class="input">links2 -http-proxy proxy.server.com:8080 http://www.gentoo.org/main/en/mirrors.xml</span>
</pre></td></tr>
</table>

<p>
If you want to check the integrity of the downloaded stage tarball, use
<span class="code">md5sum</span> and compare the output with the MD5 checksum provided on the
mirror.
</p>

<a name="doc_chap_pre4"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;4: Checking integrity of a stage tarball</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">md5sum stage1-x86-20030910.tar.bz2</span>
6cda1cc745ba882731ac07fbae0dd973  stage1-x86-20030910.tar.bz2
</pre></td></tr>
</table>

<a name="book_id2718347_chap2_sect2"></a><p class="secthead">Unpacking the Stage Tarball</p>

<p>
Now unpack your downloaded stage onto your system. We use GNU's <span class="code">tar</span> to
proceed as it is the easiest method:
</p>

<a name="doc_chap_pre5"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;5: Unpacking the stage</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">tar -xvjpf stage?-*.tar.bz2</span>
</pre></td></tr>
</table>

<p>
Make sure that you use the same options (<span class="code">-xvjpf</span>). The <span class="code">x</span> stands for
<span class="emphasis">Extract</span>, the <span class="code">v</span> for <span class="emphasis">Verbose</span> (okay, yes, this is optional),
the <span class="code">j</span> for <span class="emphasis">Decompress with bzip2</span>, the <span class="code">p</span> for <span class="emphasis">Preserve
permissions</span> and the <span class="code">f</span> to denote that we want to extract a file, not
standard input.
</p>

<p>
Now that the stage is installed, continue with <a href="#installing_portage">Installing Portage</a>.
</p>

<a name="book_id2718347_chap3"></a><p class="chaphead">
<span class="chapnum">5.c. </span>Alternative: Using a Stage from the LiveCD</p>
<a name="book_id2718347_chap3_sect1"></a><p class="secthead">Extracting the Stage Tarball</p>

<p>
The stages on the CD reside in the <span class="path">/mnt/cdrom/stages</span> directory. To
see a listing of available stages, use <span class="code">ls</span>:
</p>

<a name="doc_chap_pre6"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;6: List all available stages</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">ls /mnt/cdrom/stages</span>
</pre></td></tr>
</table>

<p>
If the system replies with an error, you may need to mount the CD-ROM first:
</p>

<a name="doc_chap_pre7"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;7: Mounting the CD-ROM</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">ls /mnt/cdrom/stages</span>
ls: /mnt/cdrom/stages: No such file or directory
# <span class="input">mount /dev/cdroms/cdrom0 /mnt/cdrom</span>
# <span class="input">ls /mnt/cdrom/stages</span>
</pre></td></tr>
</table>

<p>
Now go into your Gentoo mountpoint (usually <span class="path">/mnt/gentoo</span>):
</p>

<a name="doc_chap_pre8"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;8: Changing directory to /mnt/gentoo</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">cd /mnt/gentoo</span>
</pre></td></tr>
</table>

<p>
We will now extract the stage tarball of your choice. We will do this with the
GNU <span class="code">tar</span> tool. Make sure you use the same options (<span class="code">-xvjpf</span>)! In the
next example, we extract the stage tarball <span class="path">stage3-20031011.tar.bz2</span>.
Be sure to substitute the tarball filename with your stage.
</p>

<a name="doc_chap_pre9"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;9: Extracting the stage tarball</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">tar -xvjpf /mnt/cdrom/stages/stage3-20031011.tar.bz2</span>
</pre></td></tr>
</table>

<p>
Now that the stage is installed, continue with <a href="#installing_portage">Installing Portage</a>.
</p>

<a name="book_id2718347_chap4"></a><a name="installing_portage"></a><p class="chaphead">
<span class="chapnum">5.d. </span>Installing Portage</p>
<a name="book_id2718347_chap4_sect1"></a><p class="secthead">Network or No Network?</p>

<p>
If you don't have a working network connection, you have to install a portage 
snapshot provided by one of our LiveCDs. If you want to use prebuilt packages
later on to speed up the installation, you <span class="emphasis">must</span> use a portage snapshot,
either from the LiveCD or from one of our mirrors. Other users will download a
fully updated Portage tree using <span class="code">emerge</span> later on.
</p>

<p>
Continue with the appropriate part:
</p>

<ul>
  <li>
    <a href="#installing_from_LiveCD">Installing a Portage Snapshot and
    Source Code from LiveCD</a> (for networkless installations or GRP
    installations)
  </li>
  <li>
    <a href="#installing_from_Internet">Installing a Portage Snapshot from
    a Gentoo Mirror</a> (for GRP installations)
  </li>
  <li>
    <a href="#compile_options">Configuring the Compile Options</a> (all 
    other installation methods)
  </li>
</ul>

<a name="book_id2718347_chap4_sect2"></a><a name="installing_from_LiveCD"></a><p class="secthead">Installing a Portage Snapshot and Source Code from LiveCD</p>

<p>
There is a Portage snapshot available on some LiveCDs. Since you are reading
this, we can safely assume you are using such a LiveCD. To install this
snapshot, take a look inside <span class="path">/mnt/cdrom/snapshots/</span> to see what
snapshot we have available:
</p>

<a name="doc_chap_pre10"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;10: Checking the /mnt/cdrom/snapshots content</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">ls /mnt/cdrom/snapshots</span>
</pre></td></tr>
</table>

<p>
Now extract the snapshot using the following construct. Again,
make sure you use the correct options to <span class="code">tar</span>. Also, the <span class="code">-C</span> is with
a capital <span class="code">C</span>, not <span class="code">c</span>. In the next example we use
<span class="path">portage-20031011.tar.bz2</span> as the snapshot filename. Be sure to
substitute with your snapshot.
</p>

<a name="doc_chap_pre11"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;11: Extracting a Portage snapshot</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">tar -xvjf /mnt/cdrom/snapshots/portage-20031011.tar.bz2 -C /mnt/gentoo/usr</span>
</pre></td></tr>
</table>

<p>
You also need to copy over all source code from the CD:
</p>

<a name="doc_chap_pre12"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;12: Copy over source code</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">mkdir /mnt/gentoo/usr/portage/distfiles</span>
# <span class="input">cp /mnt/cdrom/distfiles/* /mnt/gentoo/usr/portage/distfiles/</span>
</pre></td></tr>
</table>

<p>
Now that your Portage snapshot is installed, continue with <a href="#compile_options">Configuring the Compile Options</a>.
</p>

<a name="book_id2718347_chap4_sect3"></a><a name="installing_from_Internet"></a><p class="secthead">Installing a Portage Snapshot from a Gentoo Mirror</p>

<p>
In order to succesfully use GRP, you need to download a matching Portage
snapshot. Go to one of our <a href="/main/en/mirrors.xml">mirrors</a> 
with <span class="code">lynx</span> (or <span class="code">links2</span>) and download the Portage snapshot available
from <span class="path">snapshots</span>. Be sure you are 
located inside <span class="path">/mnt/gentoo</span> so that the downloaded snapshot is 
saved on your disk.
</p>

<a name="doc_chap_pre13"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;13: Downloading a Portage Snapshot</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">cd /mnt/gentoo</span>
# <span class="input">lynx http://www.gentoo.org/main/en/mirrors.xml</span>
</pre></td></tr>
</table>

<p>
Now extract the snapshot using the following construct. Again,
make sure you use the correct options to <span class="code">tar</span>. Also, the <span class="code">-C</span> is with
a capital <span class="code">C</span>, not <span class="code">c</span>. In the next example we use
<span class="path">portage-20031011.tar.bz2</span> as the snapshot filename. Be sure to
substitute with your snapshot.
</p>

<a name="doc_chap_pre14"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;14: Extracting a Portage snapshot</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">tar -xvjf /mnt/gentoo/portage-20031011.tar.bz2 -C /mnt/gentoo/usr</span>
</pre></td></tr>
</table>

<p>
Now that your Portage snapshot is installed, continue with <a href="#compile_options">Configuring the Compile Options</a>.
</p>

<a name="book_id2718347_chap5"></a><a name="compile_options"></a><p class="chaphead">
<span class="chapnum">5.e. </span>Configuring the Compile Options</p>
<a name="book_id2718347_chap5_sect1"></a><p class="secthead">Introduction</p>

<p>
To optimize Gentoo, you can set a couple of variables which impact Portage 
behaviour. All those variables can be set as environment variables (using
<span class="code">export</span>) but that isn't permanent. To keep your settings, Portage provides
you with <span class="path">/etc/make.conf</span>, a configuration file for Portage. It is
this file we will edit now. 
</p>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#bbffbb"><p class="note">
<b>Note: </b>
A commented listing of all possible variables can be found in
<span class="path">/mnt/gentoo/etc/make.conf.example</span>. For a successful Gentoo 
installation you'll only need to set the variables which are mentioned beneath.
</p></td></tr></table>

<p>
Fire up your favorite editor (in this guide we use <span class="code">nano</span>) so we can alter
the optimization variables we will discuss hereafter.
</p>

<a name="doc_chap_pre15"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;15: Opening /etc/make.conf</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">nano -w /mnt/gentoo/etc/make.conf</span>
</pre></td></tr>
</table>

<p>
As you probably notice now, the <span class="path">make.conf.example</span> file is
structured in a generic way: commented lines start with &quot;#&quot;, other lines define
variables using the <span class="code">VARIABLE=&quot;content&quot;</span> syntax. Several of those
variables are discussed next.
</p>

<a name="book_id2718347_chap5_sect2"></a><p class="secthead">CHOST</p>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#ffbbbb"><p class="note">
<b>Warning: </b>
Although it might be tempting for non-stage1 users, they should <span class="emphasis">not</span>
change the <span class="code">CHOST</span> setting in <span class="path">make.conf</span>. Doing so might render
their system unusable. Again: only change this variable if you use a
<span class="emphasis">stage1</span> installation.
</p></td></tr></table>

<p>
The <span class="code">CHOST</span> variable defines what architecture <span class="code">gcc</span> has to
compile programs for. The possibilities are:
</p>

<table class="ntable">
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>Architecture</b></td>
  <td bgcolor="#7a5ada" class="infohead"><b>Subarchitecture</b></td>
  <td bgcolor="#7a5ada" class="infohead"><b>CHOST Setting</b></td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">x86</td>
  <td bgcolor="#ddddff" class="tableinfo">i386</td>
  <td bgcolor="#ddddff" class="tableinfo">i386-pc-linux-gnu</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">x86</td>
  <td bgcolor="#ddddff" class="tableinfo">i486</td>
  <td bgcolor="#ddddff" class="tableinfo">i486-pc-linux-gnu</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">x86</td>
  <td bgcolor="#ddddff" class="tableinfo">i586</td>
  <td bgcolor="#ddddff" class="tableinfo">i586-pc-linux-gnu</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">x86</td>
  <td bgcolor="#ddddff" class="tableinfo">i686 and above (incl. athlon)</td>
  <td bgcolor="#ddddff" class="tableinfo">i686-pc-linux-gnu</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">alpha</td>
  <td bgcolor="#ddddff" class="tableinfo"></td>
  <td bgcolor="#ddddff" class="tableinfo">alpha-unknown-linux-gnu</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">ppc</td>
  <td bgcolor="#ddddff" class="tableinfo"></td>
  <td bgcolor="#ddddff" class="tableinfo">powerpc-unknown-linux-gnu</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">sparc</td>
  <td bgcolor="#ddddff" class="tableinfo"></td>
  <td bgcolor="#ddddff" class="tableinfo">sparc-unknown-linux-gnu</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">hppa</td>
  <td bgcolor="#ddddff" class="tableinfo">(generic)</td>
  <td bgcolor="#ddddff" class="tableinfo">hppa-unknown-linux-gnu</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">hppa</td>
  <td bgcolor="#ddddff" class="tableinfo">pa7000</td>
  <td bgcolor="#ddddff" class="tableinfo">hppa1.1-unknown-linux-gnu</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">hppa</td>
  <td bgcolor="#ddddff" class="tableinfo">pa8000 and above</td>
  <td bgcolor="#ddddff" class="tableinfo">hppa2.0-unknown-linux-gnu</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">mips</td>
  <td bgcolor="#ddddff" class="tableinfo"></td>
  <td bgcolor="#ddddff" class="tableinfo">mips-unknown-linux-gnu</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">amd64</td>
  <td bgcolor="#ddddff" class="tableinfo"></td>
  <td bgcolor="#ddddff" class="tableinfo">x86_64-pc-linux-gnu</td>
</tr>
</table>

<a name="book_id2718347_chap5_sect3"></a><p class="secthead">CFLAGS and CXXFLAGS</p>

<p>
The <span class="code">CFLAGS</span> and <span class="code">CXXFLAGS</span> variables define the optimization flags 
for the <span class="code">gcc</span> C and C++ compiler respectively. Although we define those
generally here, you will only have maximum performance if you optimize these
flags for each program separately. The reason for this is because every program
is different.
</p>

<p>
In <span class="path">make.conf</span> you should define the optimization flags you think
will make your system the most responsive <span class="emphasis">generally</span>. Don't place
experimental settings in this variable; too much optimization can make 
programs behave bad (crash, or even worse, malfunction).
</p>

<p>
We will not explain all possible optimization options. If you want to know
them all, read the <a href="http://www.gnu.org/software/gcc/onlinedocs/">GNU
Online Manual(s)</a> or the <span class="code">gcc</span> info page (<span class="code">info gcc</span> -- only
works on a working Linux system). The <span class="path">make.conf.example</span> file 
itself also contains lots of examples and information; don't forget to read it 
too. 
</p>

<p>
A first setting is the <span class="code">-march=</span> flag, which specifies the name of the
target architecture. Possible options are described in the
<span class="path">make.conf.example</span> file (as comments). For instance, for the x86 
Athlon XP architecture:
</p>

<a name="doc_chap_pre16"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;16: The GCC march setting</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
-march=athlon-xp
</pre></td></tr>
</table>

<p>
A second one is the <span class="code">-O</span> flag (that is a capital O, not a zero)
, which specifies the <span class="code">gcc</span> optimization
class flag. Possible classes are <span class="code">s</span> (for size-optimized),
<span class="code">0</span> (zero - for no optimizations), <span class="code">1</span>, <span class="code">2</span> or <span class="code">3</span> for more
speed-optimization flags (every class has the same flags as the one before, plus
some extras). For instance, for a class-2 optimization:
</p>

<a name="doc_chap_pre17"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;17: The GCC O setting</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
-O2
</pre></td></tr>
</table>

<p>
Other popular optimization flags are <span class="code">-pipe</span> (use pipes rather than
temporary files for communication between the various stages of compilation) and
<span class="code">-fomit-frame-pointer</span> (which doesn't keep the frame pointer in a register
for functions that don't need one).
</p>

<p>
When you define the <span class="code">CFLAGS</span> and <span class="code">CXXFLAGS</span>, you should combine
several optimization flags, like in the following example:
</p>

<a name="doc_chap_pre18"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;18: Defining the CFLAGS and CXXFLAGS variable</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
CFLAGS=&quot;-march=athlon-xp -pipe -O2&quot;
CXXFLAGS=&quot;${CFLAGS}&quot;                  <span class="comment"># Use the same settings for both variables</span>
</pre></td></tr>
</table>

<a name="book_id2718347_chap5_sect4"></a><p class="secthead">MAKEOPTS</p>

<p>
With <span class="code">MAKEOPTS</span> you define how many parallel compilations should occur when
you install a package. The suggested number is the number of CPUs in your system
plus one.
</p>

<a name="doc_chap_pre19"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;19: MAKEOPTS for a regular, 1-CPU system</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
MAKEOPTS=&quot;-j2&quot;
</pre></td></tr>
</table>

<a name="book_id2718347_chap5_sect5"></a><p class="secthead">Ready, Set, Go!</p>

<p>
Update your <span class="path">/mnt/gentoo/etc/make.conf</span> to your own will and save. 
You are now ready to continue with <a href="#book_part1_chap6">Installing the
Gentoo Base System</a>.
</p>

<a name="book_part1_chap6"></a><h3>6. Installing the Gentoo Base System</h3>
<a name="book_id2699981_chap1"></a><p class="chaphead">
<span class="chapnum">6.a. </span>Chrooting</p>
<a name="book_id2699981_chap1_sect1"></a><p class="secthead">Optional: Selecting Mirrors</p>

<p>
If you have booted from a Gentoo LiveCD, you are able to use <span class="code">mirrorselect</span>
to update <span class="path">/etc/make.conf</span> so fast mirrors are used for both Portage
and source code (of course in case you have a working network connection):
</p>

<a name="doc_chap_pre1"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;1: Selecting fast mirrors</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">mirrorselect -a -s4 -o &gt;&gt; /mnt/gentoo/etc/make.conf</span>
</pre></td></tr>
</table>

<p>
If for some reason <span class="code">mirrorselect</span> fails, don't panic. This step is
completely optional. If <span class="code">mirrorselect</span> fails, the default values suffice.
</p>

<a name="book_id2699981_chap1_sect2"></a><p class="secthead">Copy DNS Info</p>

<p>
One thing still remains to be done before we enter the new environment and that
is copying over the DNS information in <span class="path">/etc/resolv.conf</span>. You need
to do this to ensure that networking still works even after entering the new
environment. <span class="path">/etc/resolv.conf</span> contains the nameservers for your
network.
</p>

<a name="doc_chap_pre2"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;2: Copy over DNS information</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">cp /etc/resolv.conf /mnt/gentoo/etc/resolv.conf</span>
</pre></td></tr>
</table>

<a name="book_id2699981_chap1_sect3"></a><p class="secthead">Entering the new Environment</p>

<p>
Now that all partitions are initialized and the base environment
installed, it is time to enter our new installation environment by
<span class="emphasis">chrooting</span> into it. This means that we change from the current
installation environment (LiveCD or other installation medium) to your
installation system (namely the initialized partitions).
</p>

<p>
This chrooting is done in three steps. First we will change the root
from <span class="path">/</span> (on the installation medium) to <span class="path">/mnt/gentoo</span> 
(on your partitions) using <span class="code">chroot</span>. Then we will create a new environment
using <span class="code">env-update</span>, which essentially creates environment variables.
Finally, we load those variables into memory using <span class="code">source</span>.
</p>

<a name="doc_chap_pre3"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;3: Chrooting into the new environment</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">chroot /mnt/gentoo /bin/bash</span>
# <span class="input">env-update</span>
Regenerating /etc/ld.so.cache...
# <span class="input">source /etc/profile</span>
</pre></td></tr>
</table>

<p>
Congratulations! You are now inside your own Gentoo Linux environment.
Of course it is far from finished, which is why the installation still
has some sections left :-)
</p>

<a name="book_id2699981_chap1_sect4"></a><p class="secthead">Optional: Updating Portage</p>

<p>
If you haven't installed a Portage snapshot in the previous chapter, you must 
download a recent Portage tree from the Internet. <span class="code">emerge sync</span> does this 
for you. Other users should skip this and continue with <a href="#configure_USE">Configuring the USE variable</a>.
</p>

<a name="doc_chap_pre4"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;4: Updating Portage</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge sync</span>
<span class="comment">(In case you are unable to use rsync, use &quot;emerge-webrsync&quot; which
downloads and installs a portage snapshot for you)</span>
# <span class="input">emerge-webrsync</span>
</pre></td></tr>
</table>

<p>
If you are warned that a new Portage version is available and that you should
update Portage, you can safely ignore it. Portage will be updated for you later
on during the installation.
</p>

<a name="book_id2699981_chap1_sect5"></a><a name="configure_USE"></a><p class="secthead">Configuring the USE variable</p>

<p>
<span class="code">USE</span> is one of the most powerful variables Gentoo provides to its users.
Several programs can be compiled with or without optional support for certain
items. For instance, some programs can be compiled with gtk-support, or with
qt-support. Others can be compiled with or without SSL support. Some programs
can even be compiled with framebuffer support (svgalib) instead of X11 support
(X-server).
</p>

<p>
Most distributions compile their packages with support for as much as possible,
increasing the size of the programs and startup time, not to mention an enormous
amount of dependencies. With Gentoo you can define what options a package 
should be compiled with. This is where <span class="code">USE</span> comes into play.
</p>

<p>
In the <span class="code">USE</span> variable you define keywords which are mapped onto
compile-options. For instance, <span class="emphasis">ssl</span> will compile ssl-support in the
programs that support it. <span class="emphasis">-X</span> will remove X-server support (note the minus
sign in front). <span class="emphasis">gnome gtk -kde -qt</span> will compile your programs with gnome
(and gtk) support, and not with kde (and qt) support, making your system fully
tweaked for GNOME.
</p>

<p>
The default <span class="code">USE</span> settings are placed in
<span class="path">/etc/make.profile/make.defaults</span>. What you place in
<span class="path">/etc/make.conf</span> is calculated against these defaults settings. If
you add something to the <span class="code">USE</span> setting, it is added to the default list. If
you remove something from the <span class="code">USE</span> setting (by placing a minus sign in
front of it) it is removed from the default list (if it was in the default list
at all). <span class="emphasis">Never</span> alter anything inside the <span class="path">/etc/make.profile</span>
directory; it gets overwritten when you update Portage!
</p>

<p>
A full description on <span class="code">USE</span> can be found in the second part of the Gentoo
Handbook, <a href="#book_part2_chap1">Chapter 1: USE flags</a>. A full
description on the available USE flags can be found on your system in
<span class="path">/usr/portage/profiles/use.desc</span>. 
</p>

<a name="doc_chap_pre5"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;5: Viewing available USE flags</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">less /usr/portage/profiles/use.desc</span>
</pre></td></tr>
</table>

<p>
As an example we show a <span class="code">USE</span> setting for a KDE-based system with DVD, ALSA
and CD Recording support:
</p>

<a name="doc_chap_pre6"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;6: Opening /etc/make.conf</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">nano -w /etc/make.conf</span>
</pre></td></tr>
</table>

<a name="doc_chap_pre7"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;7: USE setting</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
USE=&quot;-gtk -gnome qt kde dvd alsa cdr&quot;
</pre></td></tr>
</table>

<a name="book_id2699981_chap1_sect6"></a><p class="secthead">Optional: Using Distributed Compiling</p>

<p>
If you are interested in using a collection of systems to help in compiling your
system you might want to take a look at our <a href="/doc/en/distcc.xml">DistCC Guide</a>. By using <span class="code">distcc</span> you can use
the processing power of several systems to aid you with the installation.
</p>

<a name="book_id2699981_chap2"></a><p class="chaphead">
<span class="chapnum">6.b. </span>Differences between Stage1, Stage2 and Stage3</p>

<p>
Now take a seat and think of your previous steps. We asked you to
select a <span class="emphasis">stage1</span>, <span class="emphasis">stage2</span> or <span class="emphasis">stage3</span> and warned you
that your choice is important for further installation steps. Well, this
is the first place where your choice defines the further steps.
</p>

<ul>
<li>
  If you chose <span class="emphasis">stage1</span>, then you have to follow <span class="emphasis">both</span> steps in
  this chapter (starting with <a href="#book_id2699981_chap3">Progressing from Stage1 
  to Stage2</a>)
</li>
<li>
  If you chose <span class="emphasis">stage2</span> you only can skip the first step
  and immediately start with the second one (<a href="#book_id2699981_chap4">Progressing
  from Stage2 to Stage3</a>)
</li>
<li>
  If you chose <span class="emphasis">stage3</span> (either with or without GRP) then you can skip both
  steps and continue with <a href="#book_part1_chap7">Configuring the 
  Kernel</a>
</li>
</ul>

<a name="book_id2699981_chap3"></a><p class="chaphead">
<span class="chapnum">6.c. </span>Progressing from Stage1 to Stage2</p>
<a name="book_id2699981_chap3_sect1"></a><p class="secthead">Introduction to Bootstrapping</p>

<p>
So, you want to compile everything from scratch? Okay then :-)
</p>

<p>
In this step, we will <span class="emphasis">bootstrap</span> your Gentoo system. This takes a
long time, but the result is a system that has been optimized from the
ground up for your specific machine and needs.
</p>

<p>
<span class="emphasis">Bootstrapping</span> means building the GNU C Library, GNU Compiler
Collection and several other key system programs. The GNU Compiler
Collection even has to be built twice: first with the &quot;generic&quot; compiler
we provide, and a second time with the compiler you then just built.
</p>

<p>
Before starting the bootstrap, we list a couple of options you might or
might not want. If you do not want to read those, continue with <a href="#book_id2699981_chap3_sect4">Bootstrapping the System</a>.
</p>

<a name="book_id2699981_chap3_sect2"></a><p class="secthead">Optional: Decreasing Compilation Time</p>

<p>
If you want to speed up the bootstrapping, you can temporarily deselect
java-support. This means that the GNU Compiler Collection and the GNU C
Library will be compiled without java-support (which decreases
compilation time considerably). Although this means that you wont have
the GNU Java Compiler (<span class="code">gcj</span>) this does <span class="emphasis">not</span> mean that your
system won't be able to use java applets and other java-related stuff.
</p>

<p>
To deselect java-support temporarily, define <span class="emphasis">USE=&quot;-java&quot;</span> before
firing up the bootstrap script.
</p>

<a name="doc_chap_pre8"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;8: Deselecting java support</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">export USE=&quot;-java&quot;</span>
</pre></td></tr>
</table>

<p>
Don't forget to unset the variable after bootstrapping:
</p>

<a name="doc_chap_pre9"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;9: Unsetting USE</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">unset USE</span>
</pre></td></tr>
</table>

<a name="book_id2699981_chap3_sect3"></a><p class="secthead">Optional: Downloading the Sources First</p>

<p>
If you haven't copied over all source code before, then the bootstrap
script will download all necessary files. It goes without saying that
this only works if you have a working network connnection :-) If you want to 
download the source code first and later bootstrap the system (for instance 
because you don't want to have your internet connection open during the 
compilation) use the <span class="emphasis">-f</span> option of the bootstrap script, which will 
fetch (hence the letter <span class="emphasis">f</span>) all source code for you.
</p>

<a name="doc_chap_pre10"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;10: Downloading the necessary sources</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">cd /usr/portage</span>
# <span class="input">scripts/bootstrap.sh -f</span>
</pre></td></tr>
</table>

<a name="book_id2699981_chap3_sect4"></a><p class="secthead">Bootstrapping the System</p>

<p>
Okay then, take your keyboard and punch in the next commands to start
the bootstrap. Then go amuse yourself with something else (for instance harass
Gentoo developers on #gentoo), because this step takes quite some time to 
finish.
</p>

<a name="doc_chap_pre11"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;11: Bootstrapping the system</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">cd /usr/portage</span>
# <span class="input">scripts/bootstrap.sh</span>
</pre></td></tr>
</table>

<p>
If you have altered the <span class="code">CHOST</span> setting in <span class="path">/etc/make.conf</span>
previously, you need to reinitialize some variables in order for <span class="code">gcc</span> to
work fast:
</p>

<a name="doc_chap_pre12"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;12: Reinitialize environment variables</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">source /etc/profile</span>
</pre></td></tr>
</table>

<p>
Now continue with the next step, <a href="#book_id2699981_chap4">Progressing from Stage2
to Stage3</a>.
</p>

<a name="book_id2699981_chap4"></a><p class="chaphead">
<span class="chapnum">6.d. </span>Progressing from Stage2 to Stage3</p>
<a name="book_id2699981_chap4_sect1"></a><p class="secthead">Introduction</p>

<p>
If you are reading this section, then you have a bootstrapped system
(either because you bootstrapped it previously, or you are using a
<span class="emphasis">stage2</span>). Then it is now time to build all system packages.
</p>

<p>
<span class="emphasis">All</span> system packages? No, not really. In this step, you will build
the system packages of which there are no alternatives to use.
Some system packages have several alternatives (such as system loggers)
and as Gentoo is all about choices, we don't want to force one upon you.
</p>

<a name="book_id2699981_chap4_sect2"></a><p class="secthead">Optional: Viewing what will be done</p>

<p>
If you want to know what packages will be installed, execute <span class="code">emerge
--pretend system</span>. This will list all packages that will be built. As this
list is pretty big, you should also use a pager like <span class="code">less</span> or
<span class="code">more</span> to go up and down the list.
</p>

<a name="doc_chap_pre13"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;13: View what 'emerge system' will do</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge --pretend system | less</span>
</pre></td></tr>
</table>

<a name="book_id2699981_chap4_sect3"></a><p class="secthead">Optional: Downloading the Sources</p>

<p>
If you want <span class="code">emerge</span> to download the sources before you continue
(for instance because you don't want the internet connection to be left
open while you are building all packages) you can use the <span class="emphasis">--fetchonly</span>
option of <span class="code">emerge</span> which will fetch all sources for you. 
</p>

<a name="doc_chap_pre14"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;14: Fetching the sources</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge --fetchonly system</span>
</pre></td></tr>
</table>

<a name="book_id2699981_chap4_sect4"></a><p class="secthead">Building the System</p>

<p>
To start building the system, execute <span class="code">emerge system</span>. Then go do
something to keep your mind busy, because this step takes a long time to 
complete.
</p>

<a name="doc_chap_pre15"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;15: Building the System</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge system</span>
</pre></td></tr>
</table>

<p>
You can for now safely ignore any warnings about updated configuration files
(and running <span class="code">etc-update</span>). When your Gentoo system is fully installed and
booted, do read our documentation on <a href="#book_part2_chap4#doc_chap1">Configuration File Protection</a>.
</p>

<p>
When the build process has completed, continue with <a href="#book_part1_chap7">Configuring the Kernel</a>.
</p>

<a name="book_part1_chap7"></a><h3>7. Configuring the Kernel</h3>
<a name="book_id2728681_chap1"></a><p class="chaphead">
<span class="chapnum">7.a. </span>Timezone</p>

<p>
You first need to select your timezone so that your system knows where it is
located. Look for your timezone in <span class="path">/usr/share/zoneinfo</span>, then make a
symlink to <span class="path">/etc/localtime</span> using <span class="code">ln</span>:
</p>

<a name="doc_chap_pre1"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;1: Setting the timezone information</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">ls /usr/share/zoneinfo</span>
<span class="comment">(Suppose you want to use GMT)</span>
# <span class="input">ln -sf /usr/share/zoneinfo/GMT /etc/localtime</span>
</pre></td></tr>
</table>

<a name="book_id2728681_chap2"></a><p class="chaphead">
<span class="chapnum">7.b. </span>Installing the Sources</p>
<a name="book_id2728681_chap2_sect1"></a><p class="secthead">Choosing a Kernel</p>

<p>
The core around which all distributions are built is the Linux kernel. It is the
layer between the user programs and your system hardware. Gentoo provides its
users several possible kernel sources. A full listing with description is
available at the <a href="/doc/en/gentoo-kernel.xml">Gentoo Kernel
Guide</a>. 
</p>

<p>
For x86-based systems we have, amongst other kernels, <span class="code">vanilla-sources</span>
(the default kernel source as developed by the linux-kernel developers),
<span class="code">gentoo-sources</span> (kernel source patched with performance-enhancing
features), <span class="code">gentoo-dev-sources</span> (kernel v2.6 source patched with
performance-enhancing features and stability improvements), <span class="code">xfs-sources</span> 
(kernel source with the latest XFS support), <span class="code">gs-sources</span> (kernel source 
patched for server usage), <span class="code">gaming-sources</span> (kernel source patched for 
optimal gaming performance), <span class="code">development-sources</span> (vanilla 2.6 kernel
source), ...
</p>

<p>
For alpha-based systems we have <span class="code">vanilla-sources</span> (the default kernel
source as developed by the linux-kernel developers), <span class="code">alpha-sources</span>
(kernel source optimized for alpha users) and <span class="code">compaq-sources</span> (kernel
source as used by RedHat for Alpha, maintained by Compaq).
</p>

<p>
For sparc-based systems we have <span class="code">vanilla-sources</span> (the default kernel
source as developed by the linux-kernel developers) and <span class="code">sparc-sources</span>
(kernel source optimized for SPARC users).
</p>

<p>
MIPS-based systems can choose from <span class="code">mips-sources</span> (the default kernel
source for the MIPS architecture) and <span class="code">mips-prepatch-sources</span> (prerelease
kernel tree).
</p>

<p>
For AMD64-based systems we have <span class="code">gentoo-dev-sources</span> (kernel v2.6 source
patched with amd64 specific fixes for stability, performance and hardware
support). 
</p>

<p>
Other architectures should use the kernel source specifically optimized for
their architecture: <span class="code">hppa-sources</span> (HPPA) or <span class="code">ppc-sources</span> (PowerPC).
</p>

<p>
If you are performing a network-less install you can't pick any of the available
kernels as we only provide sources for a few of them. The following table lists
the available kernel sources for network-less installations.
</p>

<table class="ntable">
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>Architecture</b></td>
  <td bgcolor="#7a5ada" class="infohead"><b>Available Kernel Source</b></td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">x86</td>
  <td bgcolor="#ddddff" class="tableinfo">vanilla-sources-2.4.24</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">ppc</td>
  <td bgcolor="#ddddff" class="tableinfo">ppc-sources-2.4.24-r2, ppc-development-sources-2.6.3-r2</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">sparc</td>
  <td bgcolor="#ddddff" class="tableinfo">sparc-sources</td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">amd64</td>
  <td bgcolor="#ddddff" class="tableinfo">gentoo-dev-sources-2.6.3-r2</td>
</tr>
</table>

<p>
Choose your kernel source and install it using <span class="code">emerge</span>. 
</p>

<p>
In the next example we install the <span class="code">vanilla-sources-2.4.24</span> (as 
this is the available kernel source for network-less x86 installations). 
Of course substitute with your choice of sources, this is merely an example:
</p>

<a name="doc_chap_pre2"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;2: Installing a kernel source</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge =vanilla-sources-2.4.24</span>
</pre></td></tr>
</table>

<p>
When you take a look in <span class="path">/usr/src</span> you should see a symlink called
<span class="path">linux</span> pointing to your kernel source:
</p>

<a name="doc_chap_pre3"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;3: Viewing the kernel source symlink</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">ls -l /usr/src/linux</span>
lrwxrwxrwx    1 root     root           12 Oct 13 11:04 /usr/src/linux -&gt; linux-2.4.24
</pre></td></tr>
</table>

<p>
If this isn't the case (i.e. the symlink points to a different kernel source) 
change the symlink before you continue:
</p>

<a name="doc_chap_pre4"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;4: Changing the kernel source symlink</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">rm /usr/src/linux &amp;&amp; ln -s /usr/src/linux-2.4.24 /usr/src/linux</span>
</pre></td></tr>
</table>

<p>
Now it is time to configure and compile your kernel source. All architectures 
can use <span class="code">genkernel</span> for this, which will build a generic kernel as used 
by the LiveCD. We explain the &quot;manual&quot; configuration first though, as it is 
the best way to optimize your environment.
</p>

<p>
If you want to manually configure your kernel, continue now with <a href="#book_id2728681_chap3">Default: Manual Configuration</a>. If you want to use 
<span class="code">genkernel</span> you should read <a href="#book_id2728681_chap4">Alternative: Using 
genkernel</a> instead.
</p>

<a name="book_id2728681_chap3"></a><p class="chaphead">
<span class="chapnum">7.c. </span>Default: Manual Configuration</p>
<a name="book_id2728681_chap3_sect1"></a><p class="secthead">Introduction</p>

<p>
Manually configuring a kernel is often seen as the most difficult course every
Linux users ever has to go through. Nothing is less true -- after configuring a
couple of kernels you don't even remember that it was difficult ;)
</p>

<p>
However, one thing <span class="emphasis">is</span> true: you must know your system when you start
configuring a kernel manually. Most information can be gathered by viewing the
contents of <span class="path">/proc/pci</span> (or by using <span class="code">lspci</span> if available). You
can also run <span class="code">lsmod</span> to see what kernel modules the LiveCD uses (it might
provide you with a nice hint on what to enable).
</p>

<p>
Now go to your kernel source directory and execute <span class="code">make menuconfig</span>. This
will fire up an ncurses-based configuration menu.
</p>

<a name="doc_chap_pre5"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;5: Invoking menuconfig</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">cd /usr/src/linux</span>
# <span class="input">make menuconfig</span>
</pre></td></tr>
</table>

<p>
You will be greeted with several configuration sections. We'll first list some
options you must activate (otherwise Gentoo will not function, or not function
properly without additional tweaks).
</p>

<a name="book_id2728681_chap3_sect2"></a><p class="secthead">Activating Required Options</p>

<p>
First of all, activate the use of development and experimental code/drivers.
You need this, otherwise some very important code/drivers won't show up:
</p>

<a name="doc_chap_pre6"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;6: Selecting experimental code/drivers</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Code maturity level options ---&gt;
  [*] Prompt for development and/or incomplete code/drivers
</pre></td></tr>
</table>

<p>
Now go to <span class="code">File Systems</span> and select support for the filesystems you use.
<span class="emphasis">Don't</span> compile them as modules, otherwise your Gentoo system will not be
able to mount your partitions. Also select <span class="code">Virtual memory</span>, <span class="code">/proc
file system</span>, <span class="code">/dev file system</span> + <span class="code">Automatically mount at boot</span>:
</p>

<a name="doc_chap_pre7"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;7: Selecting necessary file systems</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
File systems ---&gt;
  [*] Virtual memory file system support (former shm fs)
  [*] /proc file system support
  [*] /dev file system support (EXPERIMENTAL)
  [*]   Automatically mount at boot

<span class="comment">(Deselect the following unless you have a 2.6 kernel)</span>
  [ ] /dev/pts file system for Unix98 PTYs

<span class="comment">(Select one or more of the following options as needed by your system)</span>
  &lt;*&gt; Reiserfs support
  &lt;*&gt; Ext3 journalling file system support
  &lt;*&gt; JFS filesystem support
  &lt;*&gt; Second extended fs support
  &lt;*&gt; XFS filesystem support
</pre></td></tr>
</table>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#bbffbb"><p class="note">
<b>Note: </b>
Users of a 2.6 kernel will find some of the mentioned options under <span class="code">Pseudo
filesystems</span> which is a subpart of <span class="code">File systems</span>.
</p></td></tr></table>

<p>
If you are using PPPoE to connect to the Internet, you will need the following
options in the kernel:
</p>

<a name="doc_chap_pre8"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;8: Selecting PPPoE necessary drivers</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Network device support ---&gt;
  &lt;*&gt; PPP (point-to-point protocol) support
  &lt;*&gt;   PPP support for async serial ports
  &lt;*&gt;   PPP support for sync tty ports
</pre></td></tr>
</table>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#bbffbb"><p class="note">
<b>Note: </b>
Users of a 2.6 kernel will find the mentioned options under <span class="code">Networking
support</span> which is a subpart of <span class="code">Device Drivers</span>.
</p></td></tr></table>

<p>
The two compression options won't harm but are not definitely needed, neither
does the <span class="code">PPP over Ethernet</span> option, that might only be used by 
<span class="code">rp-pppoe</span> when configured to do kernel mode PPPoE.
</p>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#bbffbb"><p class="note">
<b>Note: </b>
Users of a 2.6 kernel will find the mentioned options under <span class="code">Device
Drivers</span>.
</p></td></tr></table>

<p>
If you require it, don't forget to include support in the kernel for your
ethernet card.
</p>

<p>
Now, dependent on your architecture, you might need to select more options:
</p>

<ul>
<li><a href="#book_id2728681_chap3_sect3">Activating x86-recommended Options</a></li>
<li><a href="#book_id2728681_chap3_sect4">Activating Alpha-recommended Options</a></li>
<li><a href="#book_id2728681_chap3_sect5">Activating HPPA-recommended Options</a></li>
<li><a href="#book_id2728681_chap3_sect6">Activating PPC-recommended Options</a></li>
<li><a href="#book_id2728681_chap3_sect7">Activating SPARC-recommended Options</a></li>
<li><a href="#book_id2728681_chap3_sect8">Activating MIPS-recommended Options</a></li>
<li><a href="#book_id2728681_chap3_sect9">Activating AMD64-recommended Options</a></li>
</ul>

<a name="book_id2728681_chap3_sect3"></a><p class="secthead">Activating x86-recommended Options</p>

<p>
If you have an Intel CPU that supports HyperThreading (tm), or you have a
multi-CPU system, you should activate &quot;Symmetric multi-processing support&quot;:
</p>

<a name="doc_chap_pre9"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;9: Activating SMP support</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Processor type and features  ---&gt;
  [*] Symmetric multi-processing support
</pre></td></tr>
</table>

<p>
When you've finished configuring the kernel, continue with <a href="#compiling">Compiling and Installing</a>.
</p>

<a name="book_id2728681_chap3_sect4"></a><p class="secthead">Activating Alpha-recommended Options</p>

<p>
The following options are recommended for Alpha-users:
</p>

<a name="doc_chap_pre10"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;10: Alpha-specific options</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
General setup ---&gt;
  &lt;*&gt; SRM environment through procfs
  &lt;*&gt; Configure uac policy via sysctl

Plug and Play configuration ---&gt;
  &lt;*&gt; Plug and Play support
  &lt;M&gt;   ISA Plug and Play support

SCSI support ---&gt;
  SCSI low-level drivers ---&gt;
    &lt;*&gt; SYM53C8XX Version 2 SCSI support (NEW)
    &lt;*&gt; Qlogic ISP SCSI support

Network device support ---&gt;
  Ethernet (10 or 100 Mbit) ---&gt;
    &lt;M&gt; DECchip Tulip (dc21x4x) PCI support
    &lt;M&gt; Generic DECchip &amp; DIGITAL EtherWORKS PCI/EISA
    &lt;M&gt; EtherExpressPro/100 support (eepro100)
    &lt;M&gt; EtherExpressPro/100 support (e100)
  Ethernet (1000 Mbit) ---&gt;
    &lt;M&gt; Alteon AceNIC
      [*] Omit support for old Tigon I
    &lt;M&gt; Broadcom Tigon3
  [*] FDDI driver support
  &lt;M&gt; Digital DEFEA and DEFPA
  &lt;*&gt; PPP support
    &lt;*&gt; PPP Deflate compression

Character devices ---&gt;
  [*] Support for console on serial port
  [*] Direct Rendering Manager

File systems ---&gt;
  &lt;*&gt; Kernel automounter version 4 support
  Network File Systems ---&gt;
    &lt;*&gt; NFS
      [*] NFSv3 client
      &lt;*&gt; NFS server
      [*] NFSv3 server
  Partition Types ---&gt;
    [*] Advanced partition selection
    [*] Alpha OSF partition support
  Native Language Support
    &lt;*&gt; NLS ISO 8859-1

Sound ---&gt;
  &lt;M&gt; Sound card support
    &lt;M&gt; OSS sound modules
      [*] Verbose initialisation
      [*] Persistent DMA buffers
      &lt;M&gt; 100% Sound Blaster compatibles
</pre></td></tr>
</table>

<p>
When you've finished configuring the kernel, continue with <a href="#compiling">Compiling and Installing</a>.
</p>

<a name="book_id2728681_chap3_sect5"></a><p class="secthead">Activating HPPA-recommended Options</p>

<p>
If you have a HIL mouse or keyboard, do not forget to compile in support for
them.
</p>

<a name="doc_chap_pre11"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;11: Activating HIL support</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Input core support ---&gt;
  [*] Keyboard support
  [*] Mouse support
  [*] Event interface support
</pre></td></tr>
</table>

<p>
If you have no mouse on your HIL port, only use the basic support:
</p>

<a name="doc_chap_pre12"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;12: Basic HIL support</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
HIL support ---&gt;
  [*] HIL Keyboard (basic) support
</pre></td></tr>
</table>

<p>
If you however want <span class="emphasis">full</span> HIL support, select the following options:
</p>

<a name="doc_chap_pre13"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;13: Full HIL support</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
HIL support ---&gt;
  [*] HP System Device Controller i8042 Support
  [*] HIL MLC Support
  [*] HIL Keyboard (full) support
  [*] HIL Mouse &amp; Pointer support
</pre></td></tr>
</table>

<p>
Also include display driver support:
</p>

<a name="doc_chap_pre14"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;14: Display Driver support</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Graphics support ---&gt;
  [*] Support for frame buffer devices
      [*] HP STI frame buffer device support
  Console display driver support ---&gt;
      [*] STI text console
</pre></td></tr>
</table>

<p>
When you're done configuring your kernel, continue with <a href="#compiling">Compiling and Installing</a>.
</p>

<a name="book_id2728681_chap3_sect6"></a><p class="secthead">Activating PPC-recommended Options</p>

<p>
First of all, disable ADB raw keycodes:
</p>

<a name="doc_chap_pre15"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;15: Disabling ADB raw keycodes</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Macintosh Device Drivers ---&gt;
  [ ] Support for ADB raw keycodes
</pre></td></tr>
</table>

<p>
Also choose the correct RTC support (<span class="emphasis">disable</span> the <span class="code">Enhanced RTC</span> 
option):
</p>

<a name="doc_chap_pre16"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;16: Activating the correct RTC option</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Character devices ---&gt;
  [ ] Enhanced RTC

General setup ---&gt;
  [*] Support for /dev/rtc
</pre></td></tr>
</table>

<p>
Users of OldWorld machines will want HFS support so they can copy compiled
kernels to the MacOS partition.
</p>

<a name="doc_chap_pre17"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;17: Activating HFS support</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
File Systems ---&gt;
  [*] HFS Support
</pre></td></tr>
</table>

<p>
When you're done configuring your kernel, continue with <a href="#compiling">Compiling and Installing</a>.
</p>

<a name="book_id2728681_chap3_sect7"></a><p class="secthead">Activating SPARC-recommended Options</p>

<p>
First activate the correct bus-support:
</p>

<a name="doc_chap_pre18"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;18: Activating SBUS/UPA</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Console drivers ---&gt;
  Frame-buffer support ---&gt;
    [*] SBUS and UPA framebuffers             
      [*] Creator/Creator3D support     <span class="comment">(Only for UPA slot adapter used in many Ultras)</span>
    [*] CGsix (GX,TurboGX) support      <span class="comment">(Only for SBUS slot adapter used in many SPARCStations)</span>
</pre></td></tr>
</table>

<p>
Of course you want support for the OBP:
</p>

<a name="doc_chap_pre19"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;19: Activating OBP Support</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Misc Linux/SPARC drivers ---&gt;
  [*]  /dev/openprom device support
</pre></td></tr>
</table>

<p>
You will also need SCSI-specific support:
</p>

<a name="doc_chap_pre20"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;20: Activating SCSI-specific support</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
SCSI support ---&gt;
  SCSI low-level drivers ---&gt;
    &lt;*&gt; Sparc ESP Scsi Driver             <span class="comment">(Only for SPARC ESP on-board SCSI adapter)</span>
    &lt;*&gt; PTI Qlogic, ISP Driver            <span class="comment">(Only for SBUS SCSI controllers from PTI or QLogic)</span>
    &lt;*&gt; SYM53C8XX Version 2 SCSI support  <span class="comment">(Only for Ultra 60 on-board SCSI adapter)</span>
</pre></td></tr>
</table>

<p>
To support your network card, select one of the following:
</p>

<a name="doc_chap_pre21"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;21: Activating networking support</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Network device support ---&gt;
  Ethernet (10 or 100Mbit) ---&gt;
    &lt;*&gt; Sun LANCE support                   <span class="comment">(Only for SPARCStation, older Ultra systems, and as Sbus option)</span>
    &lt;*&gt; Sun Happy Meal 10/100baseT support  <span class="comment">(Only for Ultra; also supports &quot;qfe&quot; quad-ethernet on PCI and Sbus)</span>
</pre></td></tr>
</table>

<p>
When you're done configuring your kernel, continue with <a href="#compiling">Compiling and Installing</a>. However, after having
compiled the kernel, check its size:
</p>

<a name="doc_chap_pre22"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;22: Check kernel size</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">ls -lh vmlinux</span>
-rw-r--r--    1 root     root         2.4M Oct 25 14:38 vmlinux
</pre></td></tr>
</table>

<p>
If the (uncompressed) size is bigger than 2.5Mb (for Sparc32) or 3.5Mb (for 
Sparc64), reconfigure your kernel untill it doesn't exceed these limits. One way
of accomplishing this is by having most kernel drivers compiled as modules.
Ignoring this can lead to a non-booting kernel.
</p>

<p>
Also, if your kernel is just a tad too big, you can try stripping it using the
<span class="code">strip</span> command:
</p>

<a name="doc_chap_pre23"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;23: Stripping the kernel</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">strip -R .comment -R .note vmlinux</span>
</pre></td></tr>
</table>

<a name="book_id2728681_chap3_sect8"></a><p class="secthead">Activating MIPS-recommended Options</p>

<p>
If you are using an Indy/Indigo2 based system, you need to activate support for
it.
</p>

<a name="doc_chap_pre24"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;24: Activating SGI IP22</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Machine selection ---&gt;
  [*] Support for SGI IP22 (Indy/Indigo2)
</pre></td></tr>
</table>

<p>
If you want to run Irix binaries, include the following option:
</p>

<a name="doc_chap_pre25"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;25: Including IRIX Binary support</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
General setup ---&gt;
  [*] Include IRIX binary compatibility
</pre></td></tr>
</table>

<p>
If you have ISA/EISA cards in your SGI Indigo2, enable support for it.
</p>

<a name="doc_chap_pre26"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;26: Enabling ISA/EISA support for SGI Indigo2</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
General setup ---&gt;
  [*] Indigo-2 (IP22) EISA bus support
  [*]   ISA bus support
</pre></td></tr>
</table>

<p>
If you have a SGI parallel port, you can enable support for it. If you have an
ISA parallel port you should select &quot;PC-style hardware&quot; instead.
</p>

<a name="doc_chap_pre27"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;27: Enabling SGI Parallel Port Support</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Parallel port support  ---&gt;
  &lt;*&gt; Parallel port support
  &lt;*&gt;   SGI Indy/Indigo2 hardware (EXPERIMENTAL) (NEW)
  &lt;*&gt;   IEEE 1284 transfer modes (NEW)
</pre></td></tr>
</table>

<p>
If you want to use the Indigo2 ISA slots, enable the plug and play support.
</p>

<a name="doc_chap_pre28"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;28: Enabling PnP support for ISA</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Plug and Play configuration  ---&gt;
  &lt;*&gt; Plug and Play support
  &lt;*&gt;   ISA Plug and Play support
</pre></td></tr>
</table>

<p>
Don't forget to enable SCSI support, and use the SGI WD93C93 Driver:
</p>

<a name="doc_chap_pre29"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;29: Enabling WD93C93 Driver Support</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
SCSI low-level drivers  ---&gt;
  &lt;*&gt; SGI WD93C93 SCSI Driver
</pre></td></tr>
</table>

<p>
For network cards you probably need support for the SGI Seeq ethernet
controller:
</p>

<a name="doc_chap_pre30"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;30: Enabling SGI Seeq Support</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Network device support  ---&gt;
  Ethernet (10 or 100Mbit)  ---&gt;
    [*] Ethernet (10 or 100Mbit)
    [*]   SGI Seeq ethernet controller support
</pre></td></tr>
</table>

<p>
Don't forget to enable serial console support and enable support for the SGI
Zilog85C30:
</p>

<a name="doc_chap_pre31"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;31: Enable SGI Zilog85C30 Support</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Character devices ---&gt;
  [*] Non-standard serial port support
  [*]   SGI Zilog85C30 serial support
</pre></td></tr>
</table>

<p>
Also don't forget to enable the Indy/I2 Watchdog support as well as the SGI
DS1286 RTC support:
</p>

<a name="doc_chap_pre32"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;32: Enable Watchdog and RTC Support</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Character Devices ---&gt;
  [*] SGI DS1286 RTC support
  Watchdog Cards  ---&gt;
    [*] Watchdog Timer Support
    &lt;*&gt;   Indy/I2 Hardware Watchdog
</pre></td></tr>
</table>

<p>
You should also enable support for SGI partitions :)
</p>

<a name="doc_chap_pre33"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;33: Enabling Support for SGI Partitions</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
File Systems ---&gt;
  Partition Types ---&gt;
    [*] Advanced partition selection
    [*]   SGI partition support
</pre></td></tr>
</table>

<p>
If you have an SGI Newport (XL Gfx) Card and want to use it, then you'll want to
enable support for it:
</p>

<a name="doc_chap_pre34"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;34: Enabling Support for the SGI Newport Card</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Console drivers  ---&gt;
  &lt;*&gt; SGI Newport Console support (NEW)
</pre></td></tr>
</table>

<p>
If you want sound support on your Indy/Indigo2, enable support for it:
</p>

<a name="doc_chap_pre35"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;35: Enabling Support for the SGI HAL2</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Sound  ---&gt;
  &lt;*&gt; Sound card support
  &lt;*&gt;   SGI HAL2 sound (EXPERIMENTAL)
</pre></td></tr>
</table>

<p>
When you're done configuring your kernel, continue with <a href="#compiling">Compiling and Installing</a>.
</p>

<a name="book_id2728681_chap3_sect9"></a><p class="secthead">Activating AMD64-recommended Options</p>

<p>
If you have a multi-CPU Opteron system, you should activate &quot;Symmetric
multi-processing support&quot;:
</p>

<a name="doc_chap_pre36"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;36: Activating SMP support</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Processor type and features ---&gt;
  [*] Symmetric multi-processing support
</pre></td></tr>
</table>

<p>
When you've finished configuring the kernel, continue with <a href="#compiling">Compiling and Installing</a>.
</p>

<a name="book_id2728681_chap3_sect10"></a><a name="compiling"></a><p class="secthead">Compiling and Installing</p>

<p>
Now that your kernel is configured, it is time to compile and install it. Exit 
the configuration and run <span class="code">make dep &amp;&amp; make bzImage modules 
modules_install</span>:
</p>

<a name="doc_chap_pre37"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;37: Compiling the kernel</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
<span class="comment">(For x86-based systems, 2.4 kernel)</span>
# <span class="input">make dep &amp;&amp; make bzImage modules modules_install</span>

<span class="comment">(For other systems, 2.4 kernel)</span>
# <span class="input">make dep &amp;&amp; make vmlinux modules modules_install</span>

<span class="comment">(For 2.6 kernel)</span>
# <span class="input">make &amp;&amp; make modules_install</span>
</pre></td></tr>
</table>

<p>
When the kernel is done compiling, copy over the kernel image to
<span class="path">/boot</span>. In the next example we assume you have configured and
compiled <span class="code">vanilla-sources-2.4.24</span> (which may not be the right kernel for
your architecture!):
</p>

<a name="doc_chap_pre38"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;38: Installing the kernel</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
<span class="comment">(For x86-based systems)</span>
# <span class="input">cp arch/i386/boot/bzImage /boot/kernel-2.4.24</span>
# <span class="input">cp System.map /boot/System.map-2.4.24</span>

<span class="comment">(For amd64-based systems)</span>
# <span class="input">cp arch/x86_64/boot/bzImage /boot/kernel-2.4.24</span>

<span class="comment">(For other systems)</span>
# <span class="input">cp vmlinux /boot/kernel-2.4.24</span>
# <span class="input">cp System.map /boot/System.map-2.4.24</span>
</pre></td></tr>
</table>

<p>
It is also wise to copy over your kernel configuration file to
<span class="path">/boot</span>, just in case :)
</p>

<a name="doc_chap_pre39"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;39: Backing up your kernel configuration</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">cp .config /boot/config-2.4.24</span>
</pre></td></tr>
</table>

<p>
If you are a MIPS user and your system doesn't boot ELF kernels, compile the
kernel using <span class="code">make vmlinux.ecoff</span> instead of <span class="code">make vmlinux</span>. The
kernel image will be saved as <span class="path">arch/mips/boot/vmlinux.ecoff</span> instead
of <span class="path">vmlinux</span>.
</p>

<p>
Now continue with <a href="#book_id2728681_chap5">Installing Separate Kernel
Modules</a>.
</p>

<a name="book_id2728681_chap4"></a><p class="chaphead">
<span class="chapnum">7.d. </span>Alternative: Using genkernel</p>

<p>
If you are reading this section, you have chosen to use our <span class="code">genkernel</span>
script to configure your kernel for you.
</p>

<p>
Now that your kernel source tree is installed, it's now time to compile your 
kernel by using our <span class="code">genkernel</span> script to automatically build a kernel for 
you. <span class="code">genkernel</span> works by configuring a kernel nearly identically to the 
way our LiveCD kernel is configured. This means that when you use 
<span class="code">genkernel</span> to build your kernel, your system will generally detect all 
your hardware at boot-time, just like our Live CD does. Because genkernel 
doesn't require any manual kernel configuration, it is an ideal solution for 
those users who may not be comfortable compiling their own kernels.
</p>

<p>
Now, let's see how to use genkernel. First, emerge the genkernel ebuild:
</p>

<a name="doc_chap_pre40"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;40: Emerging genkernel</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge genkernel</span>
</pre></td></tr>
</table>

<p>
Now, compile your kernel sources by running <span class="code">genkernel all</span>.
Be aware though, as <span class="code">genkernel</span> compiles a kernel that supports almost all 
hardware, this compilation will take quite a while to finish!
</p>

<a name="doc_chap_pre41"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;41: Running genkernel</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">genkernel all</span>
GenKernel v3.0.1_beta10
* ARCH: x86    
* KERNEL VER: 2.4.24
* kernel: configuring source
* kernel: running mrproper
<span class="comment">(Output removed to increase readability)</span>
* Kernel compiled successfully!
* Required Kernel Params:
*   : root=/dev/ram0 init=/linuxrc real_root=/dev/$ROOT
*     where $ROOT is the devicenode for your root partition as
*     you should have specified in /etc/fstab
*              
* You MUST tell your bootloader to use the generated initrd
*              
* Recommended Kernel Params:
*   : vga=0x317 splash=verbose
*              
* Do NOT report kernel bugs (configs included) as genkernel bugs.
* Make sure you have the latest genkernel before reporting bugs
*              
* For more info see /usr/share/genkernel/README
</pre></td></tr>
</table>

<p>
Once <span class="code">genkernel</span> completes, a kernel, full set of modules and 
<span class="emphasis">initial root disk</span> (initrd) will be created. We will use the kernel 
and initrd when configuring a boot loader later in this document. Write
down the names of the kernel and initrd as you will need it when writing
the bootloader configuration file. The initrd will be started immediately after 
booting to perform hardware autodetection (just like on the Live CD) before 
your &quot;real&quot; system starts up.
</p>

<p>
Now, let's perform one more step to get our system to be more like the Live 
CD -- let's emerge <span class="code">hotplug</span>. While the initrd autodetects hardware that 
is needed to boot your system, <span class="code">hotplug</span> autodetects everything else.
To emerge and enable <span class="code">hotplug</span>, type the following:
</p>

<a name="doc_chap_pre42"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;42: Emerging and enabling hotplug</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge hotplug</span>
# <span class="input">rc-update add hotplug default</span>
</pre></td></tr>
</table>

<a name="book_id2728681_chap5"></a><p class="chaphead">
<span class="chapnum">7.e. </span>Installing Separate Kernel Modules</p>
<a name="book_id2728681_chap5_sect1"></a><p class="secthead">Installing Extra Modules</p>

<p>
If appropriate, you should emerge ebuilds for any additional hardware that is 
on your system. Here is a list of kernel-related ebuilds that you could emerge:
</p>

<table class="ntable">



<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>Ebuild</b></td>
  <td bgcolor="#7a5ada" class="infohead"><b>Purpose</b></td>
  <td bgcolor="#7a5ada" class="infohead"><b>Command</b></td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">nvidia-kernel</td>
  <td bgcolor="#ddddff" class="tableinfo">Accelerated NVIDIA graphics for XFree86</td>
  <td bgcolor="#ddddff" class="tableinfo"><span class="code">emerge nvidia-kernel</span></td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">nforce-net</td>
  <td bgcolor="#ddddff" class="tableinfo">On-board ethernet controller on NVIDIA NForce(2) motherboards</td>
  <td bgcolor="#ddddff" class="tableinfo"><span class="code">emerge nforce-net</span></td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">nforce-audio</td>
  <td bgcolor="#ddddff" class="tableinfo">On-board audio on NVIDIA NForce(2) motherboards</td>
  <td bgcolor="#ddddff" class="tableinfo"><span class="code">emerge nforce-audio</span></td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">e100</td>
  <td bgcolor="#ddddff" class="tableinfo">Intel e100 Fast Ethernet Adapters</td>
  <td bgcolor="#ddddff" class="tableinfo"><span class="code">emerge e100</span></td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">e1000</td>
  <td bgcolor="#ddddff" class="tableinfo">Intel e1000 Gigabit Ethernet Adapters</td>
  <td bgcolor="#ddddff" class="tableinfo"><span class="code">emerge e1000</span></td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">emu10k1</td>
  <td bgcolor="#ddddff" class="tableinfo">Creative Sound Blaster Live!/Audigy support</td>
  <td bgcolor="#ddddff" class="tableinfo"><span class="code">emerge emu10k1</span></td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">ati-drivers</td>
  <td bgcolor="#ddddff" class="tableinfo">Accelerated ATI Radeon 8500+/FireGL graphics for XFree86</td>
  <td bgcolor="#ddddff" class="tableinfo"><span class="code">emerge ati-drivers</span></td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">ati-drivers-extra</td>
  <td bgcolor="#ddddff" class="tableinfo">Graphical ATI tools</td>
  <td bgcolor="#ddddff" class="tableinfo"><span class="code">emerge ati-drivers-extra</span></td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">xfree-drm</td>
  <td bgcolor="#ddddff" class="tableinfo">
    Accelerated graphics for ATI Radeon up to 9200, Rage128, Matrox, Voodoo and
    other cards for XFree86. Please check the <span class="code">IUSE_VIDEO_CARDS</span> variable
    in the <span class="path">/usr/portage/x11-base/xfree-drm</span> ebuilds to see what you
    need to fill in as <span class="code">yourcard</span>.
  </td>
  <td bgcolor="#ddddff" class="tableinfo"><span class="code">VIDEO_CARDS=&quot;yourcard&quot; emerge xfree-drm</span></td>
</tr>
</table>

<p>
Beware though, some of these ebuilds might deal with big dependencies. To verify
what packages will be installed by emerging an ebuild, use <span class="code">emerge 
--pretend</span>. For instance, for the <span class="code">emu10k1</span> package:
</p>

<a name="doc_chap_pre43"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;43: View full installation package listing</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge --pretend emu10k1</span>
</pre></td></tr>
</table>

<p>
If you don't like the packages it wants to install, use <span class="code">emerge --pretend 
--verbose</span> to see what USE-flags are checked when deciding the dependencies:
</p>

<a name="doc_chap_pre44"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;44: View USE-flag usage</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge --pretend --verbose emu10k1</span>
<span class="comment">...</span>
[ebuild  N    ] media-sound/aumix-2.8  +gpm +nls +gtk +gnome +alsa -gtk2
</pre></td></tr>
</table>

<p>
In the previous example you can see that one of <span class="code">emu10k1</span>'s dependencies
(<span class="code">aumix</span>) uses the <span class="code">gtk</span> and <span class="code">gnome</span> USE-flags, making gtk (which
depends on XFree) be compiled with it.
</p>

<p>
If you don't want all this to be compiled, deselect all USE-flags, for instance:
</p>

<a name="doc_chap_pre45"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;45: Emerging emu10k1 with all USE-flags deselected</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">USE=&quot;-gpm -nls -gtk -gnome -alsa&quot; emerge --pretend emu10k1</span>
</pre></td></tr>
</table>

<p>
When you're happy with the results, remove the <span class="code">--pretend</span> to start
installing <span class="code">emu10k1</span>.
</p>

<a name="book_id2728681_chap5_sect2"></a><p class="secthead">Configuring the Modules</p>

<p>
If you are not using <span class="code">hotplug</span>, you should list the modules you want
automatically loaded in <span class="path">/etc/modules.autoload.d/kernel-2.4</span> (or
<span class="path">kernel-2.6</span>). You can add extra options to the modules too if you 
want.
</p>

<p>
To view all available modules, run the following <span class="code">find</span> command. Don't
forget to substitute &quot;&lt;kernel version&gt;&quot; with the version of the kernel you
just compiled:
</p>

<a name="doc_chap_pre46"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;46: Viewing all available modules</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">find /lib/modules/&lt;kernel version&gt;/ -type f -iname '*.o' -or -iname '*.ko'</span>
</pre></td></tr>
</table>

<p>
For instance, to automatically load the <span class="code">3c59x.o</span> module, edit the
<span class="path">kernel-2.4</span> or <span class="path">kernel-2.6</span> file and enter the module
name in it.
</p>

<a name="doc_chap_pre47"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;47: Editing /etc/modules.autoload.d/kernel-2.4</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
<span class="comment">(Example for 2.4 kernels)</span>
# <span class="input">nano -w /etc/modules.autoload.d/kernel-2.4</span>
</pre></td></tr>
</table>

<a name="doc_chap_pre48"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;48: /etc/modules.autoload.d/kernel-2.4 or kernel-2.6</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
3c59x
</pre></td></tr>
</table>

<p>
Now run <span class="code">modules-update</span> to commit your changes to the
<span class="path">/etc/modules.conf</span> file:
</p>

<a name="doc_chap_pre49"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;49: Running modules-update</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">modules-update</span>
</pre></td></tr>
</table>

<p>
Continue the installation with <a href="#book_part1_chap8">Configuring 
your System</a>.
</p>

<a name="book_part1_chap8"></a><h3>8. Configuring your System</h3>
<a name="book_id2737367_chap1"></a><p class="chaphead">
<span class="chapnum">8.a. </span>Filesystem Information</p>
<a name="book_id2737367_chap1_sect1"></a><p class="secthead">What is fstab?</p>

<p>
Under Linux, all partitions used by the system must be listed in
<span class="path">/etc/fstab</span>. This file contains the mountpoints of those partitions
(where they are seen in the file system structure), how they should be mounted
(special options) and when (automatically or not, can users mount those or not,
etc.).
</p>

<a name="book_id2737367_chap1_sect2"></a><p class="secthead">Creating /etc/fstab</p>

<p>
<span class="path">/etc/fstab</span> uses a special syntax. Every line consists of six
fields, separated by whitespace (space(s), tabs or a mixture). Each field has
its own meaning:
</p>

<ul>
<li>
  The first field shows the <b>partition</b> described (the path to the device
  file)
</li>
<li>
  The second field shows the <b>mountpoint</b> at which the partition should be
  mounted
</li>
<li>
  The third field shows the <b>filesystem</b> used by the partition
</li>
<li>
  The fourth field shows the <b>mountoptions</b> used by <span class="code">mount</span> when it
  wants to mount the partition. As every filesystem has its own mountoptions,
  you are encouraged to read the mount manpage (<span class="code">man mount</span>) for a full
  listing. Multiple mountoptions are comma-separated.
</li>
<li>
  The fifth field is used by <span class="code">dump</span> to determine if the partition needs to
  be <b>dump</b>ed or not. You can generally leave this as <span class="code">0</span> (zero).
</li>
<li>
  The sixth field is used by <span class="code">fsck</span> to determine the order in which 
  filesystems should be <b>check</b>ed if the system wasn't shut down properly. 
  The root filesystem should have <span class="code">1</span> while the rest should have <span class="code">2</span> 
  (or <span class="code">0</span> in case a filesystem check isn't necessary).
</li>
</ul>

<p>
So start <span class="code">nano</span> (or your favorite editor) to create your 
<span class="path">/etc/fstab</span>:
</p>

<a name="doc_chap_pre1"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;1: Opening /etc/fstab</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">nano -w /etc/fstab</span>
</pre></td></tr>
</table>

<p>
Let us take a look at how we write down the options for the <span class="path">/boot</span>
partition. This is just an example, so if your architecture doesn't require a
<span class="path">/boot</span> partition, don't copy it verbatim.
</p>

<p>
In our default x86 partitioning example <span class="path">/boot</span> is the
<span class="path">/dev/hda1</span> partition, with <span class="code">ext2</span> as filesystem. It shouldn't
be mounted automatically (<span class="code">noauto</span>) but does need to be checked. So we
would write down:
</p>

<a name="doc_chap_pre2"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;2: An example /boot line for /etc/fstab</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
/dev/hda1   /boot     ext2    noauto        1 2
</pre></td></tr>
</table>

<p>
Now, to improve performance, most users would want to add the <span class="code">noatime</span>
option as mountoption, which results in a faster system since access times
aren't registered (you don't need those generally anyway):
</p>

<a name="doc_chap_pre3"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;3: An improved /boot line for /etc/fstab</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
/dev/hda1   /boot     ext2    noauto,noatime    1 2
</pre></td></tr>
</table>

<p>
If we continue with this, we would end up with the following three lines (for
<span class="path">/boot</span>, <span class="path">/</span> and the swap partition):
</p>

<a name="doc_chap_pre4"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;4: Three /etc/fstab lines</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
/dev/hda1   /boot     ext2    noauto,noatime    1 2
/dev/hda2   none      swap    sw                0 0
/dev/hda3   /         ext3    noatime           0 1
</pre></td></tr>
</table>

<p>
To finish up, you should add a rule for <span class="path">/proc</span>, <span class="code">tmpfs</span>
(required) and for your CD-ROM drive (and of course, if you have other 
partitions or drives, for those too):
</p>

<a name="doc_chap_pre5"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;5: A full /etc/fstab example</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
/dev/hda1   /boot     ext2    noauto,noatime    1 2
/dev/hda2   none      swap    sw                0 0
/dev/hda3   /         ext3    noatime           0 1

none        /proc     proc    defaults          0 0
none        /dev/shm  tmpfs   defaults          0 0

/dev/cdroms/cdrom0    /mnt/cdrom    auto      noauto,user    0 0
</pre></td></tr>
</table>

<p>
<span class="code">auto</span> makes <span class="code">mount</span> guess for the filesystem (recommended for 
removable media as they can be created with one of many filesystems) and 
<span class="code">user</span> makes it possible for non-root users to mount the CD.
</p>

<p>
Now use the above example to create your <span class="path">/etc/fstab</span>. If you are a
SPARC-user, you should add the following line to your <span class="path">/etc/fstab</span>
too:
</p>

<a name="doc_chap_pre6"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;6: Adding openprom filesystem to /etc/fstab</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
none        /proc/openprom  openpromfs    defaults      0 0
</pre></td></tr>
</table>

<p>
If you need <span class="code">usbfs</span>, add the following line to <span class="path">/etc/fstab</span>:
</p>

<a name="doc_chap_pre7"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;7: Adding usbfs filesystem to /etc/fstab</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
none        /proc/bus/usb   usbfs         defaults      0 0
</pre></td></tr>
</table>

<p>
Reread your <span class="path">/etc/fstab</span>, save and quit to continue.
</p>

<a name="book_id2737367_chap2"></a><p class="chaphead">
<span class="chapnum">8.b. </span>Networking Information</p>
<a name="book_id2737367_chap2_sect1"></a><p class="secthead">Hostname, Domainname etc.</p>

<p>
One of the choices the user has to make is name his PC. This seems to be quite
easy, but <span class="emphasis">lots</span> of users are having difficulties finding the appropriate
name for their Linux-pc. To speed things up, know that any name you choose can
be changed afterwards. For all we care, you can just call your system
<span class="code">tux</span> and domain <span class="code">homenetwork</span>. 
</p>

<p>
We use these values in the next examples. First we set the hostname:
</p>

<a name="doc_chap_pre8"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;8: Setting the hostname</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">echo tux &gt; /etc/hostname</span>
</pre></td></tr>
</table>

<p>
Second we set the domainname:
</p>

<a name="doc_chap_pre9"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;9: Setting the domainname</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">echo homenetwork &gt; /etc/dnsdomainname</span>
</pre></td></tr>
</table>

<p>
If you have a NIS domain (if you don't know what that is, then you don't have
one), you need to define that one too:
</p>

<a name="doc_chap_pre10"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;10: Setting the NIS domainname</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">echo nis.homenetwork &gt; /etc/nisdomainname</span>
</pre></td></tr>
</table>

<p>
Now add the <span class="code">domainname</span> script to the default runlevel:
</p>

<a name="doc_chap_pre11"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;11: Adding domainname to the default runlevel</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">rc-update add domainname default</span>
</pre></td></tr>
</table>

<a name="book_id2737367_chap2_sect2"></a><p class="secthead">Configuring your Network</p>

<p>
Before you get that &quot;Hey, we've had that already&quot;-feeling, you should remember
that the networking you set up in the beginning of the gentoo installation was 
just for the installation. Right now you are going to configure networking for 
your Gentoo system permanently.
</p>

<p>
All networking information is gathered in <span class="path">/etc/conf.d/net</span>. It uses
a straightforward yet not intuitive syntax if you don't know how to setup
networking manually. But don't fear, we'll explain everything :)
</p>

<p>
First open <span class="path">/etc/conf.d/net</span> with your favorite editor (<span class="code">nano</span>
is used in this example):
</p>

<a name="doc_chap_pre12"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;12: Opening /etc/conf.d/net for editing</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">nano -w /etc/conf.d/net</span>
</pre></td></tr>
</table>

<p>
The first variable you'll find is <span class="code">iface_eth0</span>. It uses the following
syntax:
</p>

<a name="doc_chap_pre13"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;13: iface_eth0 syntaxis</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
iface_eth0=&quot;<span class="input">&lt;your ip address&gt;</span> broadcast <span class="input">&lt;your broadcast address&gt;</span> netmask <span class="input">&lt;your netmask&gt;</span>&quot;
</pre></td></tr>
</table>

<p>
If you use DHCP (automatic IP retrieval), you should just set <span class="code">iface_eth0</span>
to <span class="code">dhcp</span>. If you use rp-pppoe (e.g. for ADSL), set it to <span class="code">up</span>. 
If you need to setup your network manually and you're 
not familiar with all the above terms, please read the section on <a href="#book_part1_chap3#doc_chap4_sect3">Understanding Network
Terminology</a> if you haven't done so already.
</p>

<p>
So let us give three examples; the first one uses DHCP, the second one a static 
IP (192.168.0.2) with netmask 255.255.255.0, broadcast 192.168.0.255 and 
gateway 192.168.0.1 while the third one just activates the interface for
rp-pppoe usage:
</p>

<a name="doc_chap_pre14"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;14: Examples for /etc/conf.d/net</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
<span class="comment">(For DHCP)</span>
iface_eth0=&quot;dhcp&quot;

<span class="comment">(For static IP)</span>
iface_eth0=&quot;192.168.0.2 broadcast 192.168.0.255 netmask 255.255.255.0&quot;
gateway=&quot;eth0/192.168.0.1&quot;

<span class="comment">(For rp-pppoe)</span>
iface_eth0=&quot;up&quot;
</pre></td></tr>
</table>

<p>
If you have several network interfaces, create extra <span class="code">iface_eth</span> variables,
like <span class="code">iface_eth1</span>, <span class="code">iface_eth2</span> etc. The <span class="code">gateway</span> variable
shouldn't be reproduced as you can only set one gateway per computer.
</p>

<p>
Now save the configuration and exit to continue.
</p>

<a name="book_id2737367_chap2_sect3"></a><p class="secthead">Automatically Start Networking at Boot</p>

<p>
To have your network interfaces activated at boot, you need to add those to the
default runlevel. If you have PCMCIA interfaces you should skip this action as
the PCMCIA interfaces are started by the PCMCIA init script.
</p>

<a name="doc_chap_pre15"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;15: Adding net.eth0 to the default runlevel</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">rc-update add net.eth0 default</span>
</pre></td></tr>
</table>

<p>
If you have several network interfaces, you need to create the appropriate
<span class="path">net.eth1</span>, <span class="path">net.eth2</span> etc. initscripts for those. You can
use <span class="code">ln</span> to do this:
</p>

<a name="doc_chap_pre16"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;16: Creating extra initscripts</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">cd /etc/init.d</span>
# <span class="input">ln -s net.eth0 net.eth1</span>
# <span class="input">rc-update add net.eth1 default</span>
</pre></td></tr>
</table>

<a name="book_id2737367_chap2_sect4"></a><p class="secthead">Writing Down Network Information</p>

<p>
You now need to inform Linux about your network. This is defined in
<span class="path">/etc/hosts</span> and helps in resolving hostnames to IP addresses
for hosts that aren't resolved by your nameserver. For instance, if your 
internal network consists of three PCs called <span class="code">jenny</span> (192.168.0.5), 
<span class="code">benny</span> (192.168.0.6) and <span class="code">tux</span> (192.168.0.7 - this system) you would
open <span class="path">/etc/hosts</span> and fill in the values:
</p>

<a name="doc_chap_pre17"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;17: Opening /etc/hosts</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">nano -w /etc/hosts</span>
</pre></td></tr>
</table>

<a name="doc_chap_pre18"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;18: Filling in the networking information</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
127.0.0.1     localhost
192.168.0.5   jenny.homenetwork jenny
192.168.0.6   benny.homenetwork benny
192.168.0.7   tux.homenetwork tux
</pre></td></tr>
</table>

<p>
If your system is the only system (or the nameservers handle all name
resolution) a single line is sufficient:
</p>

<a name="doc_chap_pre19"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;19: /etc/hosts for lonely or fully integrated PCs</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
127.0.0.1     localhost
</pre></td></tr>
</table>

<p>
Save and exit the editor to continue.
</p>

<p>
If you don't have PCMCIA, you can now continue with <a href="#book_id2737367_chap3">System Information</a>. PCMCIA-users should read the
following topic on PCMCIA.
</p>

<a name="book_id2737367_chap2_sect5"></a><p class="secthead">Optional: Get PCMCIA Working</p>

<p>
PCMCIA-users should first install the <span class="code">pcmcia-cs</span> package:
</p>

<a name="doc_chap_pre20"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;20: Installing pcmcia-cs</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge pcmcia-cs</span>
</pre></td></tr>
</table>

<p>
When <span class="code">pcmcia-cs</span> is installed, add <span class="code">pcmcia</span> to the <span class="emphasis">default</span> 
runlevel:
</p>

<a name="doc_chap_pre21"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;21: Adding pcmcia to the default runlevel</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">rc-update add pcmcia default</span>
</pre></td></tr>
</table>

<a name="book_id2737367_chap3"></a><p class="chaphead">
<span class="chapnum">8.c. </span>System Information</p>

<p>
Gentoo uses <span class="path">/etc/rc.conf</span> for general, system-wide configuration.
Open up <span class="path">/etc/rc.conf</span> and enjoy all the comments in that file :)
</p>

<a name="doc_chap_pre22"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;22: Opening /etc/rc.conf</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">nano -w /etc/rc.conf</span>
</pre></td></tr>
</table>

<p>
As you can see, this file is well commented to help you set up the necessary
configuration variables. Take special care with the <span class="code">KEYMAP</span> setting: if
you select the wrong <span class="code">KEYMAP</span> you will get weird results when typing on
your keyboard.
</p>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#bbffbb"><p class="note">
<b>Note: </b>
Users of USB-based SPARC systems and SPARC clones might need to select an i386
keymap (such as &quot;us&quot;) instead of &quot;sunkeymap&quot;.
</p></td></tr></table>

<p>
When you're finished configuring <span class="path">/etc/rc.conf</span>, save and exit, then 
continue with <a href="#book_part1_chap9">Configuring the Bootloader</a>.
</p>

<a name="book_part1_chap9"></a><h3>9. Configuring the Bootloader</h3>
<a name="book_id2742101_chap1"></a><p class="chaphead">
<span class="chapnum">9.a. </span>Making your Choice</p>
<a name="book_id2742101_chap1_sect1"></a><p class="secthead">Introduction</p>

<p>
Now that your kernel is configured and compiled and the necessary system
configuration files are filled in correctly, it is time to install a
program that will fire up your kernel when you start the system. Such a
program is called a <span class="emphasis">bootloader</span>. But before you start, consider
your options...
</p>

<p>
Several bootloaders exist for Linux. However, these bootloaders only
function on a small set of architectures. Therefore you must choose between the
bootloaders that support your architecture.
</p>

<p>
The next table lists the architectures and the supported bootloaders.
Pick a bootloader based on your architecture. For instance, if you have
a Pentium IV, then your architecture is <span class="emphasis">x86</span>. You have the choice
between GRUB (recommended) and LILO.
</p>

<table class="ntable">
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>Architecture</b></td>
  <td bgcolor="#7a5ada" class="infohead"><b>Recommended</b></td>
  <td bgcolor="#7a5ada" class="infohead"><b>Alternatives</b></td>
</tr>
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>x86</b></td>
  <td bgcolor="#ddddff" class="tableinfo"><a href="#book_id2742101_chap2">GRUB</a></td>
  <td bgcolor="#ddddff" class="tableinfo"><a href="#book_id2742101_chap3">LILO</a></td>
</tr>
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>alpha</b></td>
  <td bgcolor="#ddddff" class="tableinfo"><a href="#book_id2742101_chap4">aBoot</a></td>
  <td bgcolor="#ddddff" class="tableinfo"><a href="#book_id2742101_chap5">MILO</a></td>
</tr>
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>sparc</b></td>
  <td bgcolor="#ddddff" class="tableinfo"><a href="#book_id2742101_chap6">SILO</a></td>
  <td bgcolor="#ddddff" class="tableinfo"></td>
</tr>
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>ppc</b></td>
  <td bgcolor="#ddddff" class="tableinfo">
    <a href="#book_id2742101_chap8">yaBoot</a> (NewWorld), 
    <a href="#book_id2742101_chap9">BootX</a> (OldWorld)
  </td>
  <td bgcolor="#ddddff" class="tableinfo"></td>
</tr>
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>hppa</b></td>
  <td bgcolor="#ddddff" class="tableinfo"><a href="#book_id2742101_chap7">PALO</a></td>
  <td bgcolor="#ddddff" class="tableinfo"></td>
</tr>
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>mips</b></td>
  <td bgcolor="#ddddff" class="tableinfo"><a href="#book_id2742101_chap10">MIPS PROM</a></td>
  <td bgcolor="#ddddff" class="tableinfo"></td>
</tr>
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>amd64</b></td>
  <td bgcolor="#ddddff" class="tableinfo"><a href="#book_id2742101_chap2">GRUB</a></td>
  <td bgcolor="#ddddff" class="tableinfo"></td>
</tr>
</table>

<a name="book_id2742101_chap1_sect2"></a><p class="secthead">Optional: Framebuffer</p>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#bbffbb"><p class="note">
<b>Note: </b>
This section only applies to x86, AMD64 and PPC users who have configured 
framebuffer support in their kernel. This includes <span class="code">genkernel</span> users.
</p></td></tr></table>

<p>
<span class="emphasis">If</span> you have configured your kernel with framebuffer support, you
have to add a <span class="code">vga</span>-statement to your bootloader configuration
file if you require framebuffer. The next table lists the available 
<span class="code">vga</span>-values you can use. In the example configuration files we use 
<span class="emphasis">800x600 @ 16bpp</span>, thus <span class="emphasis">788</span>.
</p>

<table class="ntable">
<tr>
  <td bgcolor="#ddddff" class="tableinfo"></td>
<td bgcolor="#7a5ada" class="infohead"><b>640x480</b></td>
<td bgcolor="#7a5ada" class="infohead"><b>800x600</b></td>
<td bgcolor="#7a5ada" class="infohead"><b>1024x768</b></td>
<td bgcolor="#7a5ada" class="infohead"><b>1280x1024</b></td>
</tr>
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>8 bpp</b></td>
<td bgcolor="#ddddff" class="tableinfo">769</td>
<td bgcolor="#ddddff" class="tableinfo">771</td>
<td bgcolor="#ddddff" class="tableinfo">773</td>
<td bgcolor="#ddddff" class="tableinfo">775</td>
</tr>
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>16 bpp</b></td>
<td bgcolor="#ddddff" class="tableinfo">785</td>
<td bgcolor="#ddddff" class="tableinfo">788</td>
<td bgcolor="#ddddff" class="tableinfo">791</td>
<td bgcolor="#ddddff" class="tableinfo">794</td>
</tr>
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>32 bpp</b></td>
<td bgcolor="#ddddff" class="tableinfo">786</td>
<td bgcolor="#ddddff" class="tableinfo">789</td>
<td bgcolor="#ddddff" class="tableinfo">792</td>
<td bgcolor="#ddddff" class="tableinfo">795</td>
</tr>
</table>

<p>
Remember (or write down) your value; you will need it shortly hereafter.
</p>

<p>
Now select the bootloader of your choice from the table above.
</p>

<a name="book_id2742101_chap2"></a><p class="chaphead">
<span class="chapnum">9.b. </span>Default: Using GRUB</p>
<a name="book_id2742101_chap2_sect1"></a><p class="secthead">Understanding GRUB's terminology</p>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#ffffbb"><p class="note">
<b>Important: </b>
GRUB can only be used with x86- and AMD64-based systems!
</p></td></tr></table>

<p>
The most critical part of understanding GRUB is getting comfortable with
how GRUB refers to hard drives and partitions. Your Linux partition
<span class="path">/dev/hda1</span> is called <span class="path">(hd0,0)</span> under GRUB. Notice the 
parenthesis around the <span class="path">hd0,0</span> - they are required.
</p>

<p>
Hard drives count from zero rather than &quot;a&quot; and partitions start at zero 
rather than one. Be aware too that with the hd devices, only hard drives are 
counted, not atapi-ide devices such as cdrom players and burners.  Also, the 
same construct is used with scsi drives. (Normally they get higher numbers 
than ide drives except when the bios is configured to boot from scsi devices.)
</p>

<p>
Assuming you have a hard drive on <span class="path">/dev/hda</span>, a cdrom player on 
<span class="path">/dev/hdb</span>, a burner on <span class="path">/dev/hdc</span>, a second hard drive 
on <span class="path">/dev/hdd</span> and no SCSI hard drive, <span class="path">/dev/hdd7</span> gets 
translated to <span class="path">(hd1,6)</span>. It might sound tricky and tricky it is 
indeed, but as we will see, GRUB offers a tab completion mechanism
that comes handy for those of you having a lot of hard drives and
partitions and who are a little lost in the GRUB numbering scheme.
</p>

<p>
Having gotten the feel for that, it is time to install GRUB.
</p>

<a name="book_id2742101_chap2_sect2"></a><p class="secthead">Installing GRUB</p>

<p>
To install GRUB, let's first emerge it. Users of the x86 architecture have to
install <span class="code">grub</span>, AMD64 users will need to emerge <span class="code">grub-static</span>:
</p>

<a name="doc_chap_pre1"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;1: Installing GRUB</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
<span class="comment">(For the x86 architecture:)</span>
# <span class="input">emerge --usepkg grub</span>

<span class="comment">(For the AMD64 architecture:)</span>
# <span class="input">emerge --usepkg grub-static</span>
# <span class="input">cp -Rpv /usr/share/grub/i386-pc/* /boot/grub</span>
</pre></td></tr>
</table>

<p>
To start configuring GRUB, you type in <span class="code">grub</span>. You'll be presented
with the <span class="path">grub&gt;</span> grub command-line prompt. Now, you need to type 
in the right commands to install the GRUB boot record onto your hard drive.
</p>

<a name="doc_chap_pre2"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;2: Starting the GRUB shell</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">grub</span>
</pre></td></tr>
</table>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#bbffbb"><p class="note">
<b>Note: </b>
If your system does not have any floppy drives, add the <span class="code">--no-floppy</span>
option to the above command to prevent grub from probing the (non-existing) 
floppy drives.
</p></td></tr></table>

<p>
In the example configuration we want to install GRUB so that it reads its 
information from the boot-partition <span class="path">/dev/hda1</span>, and installs the 
GRUB boot record on the hard drive's MBR (master boot record) so that the first
thing we see when we turn on the computer is the GRUB prompt. Of course, if you
haven't followed the example configuration during the installation,
change the commands accordingly.
</p>

<p>
The tab completion mechanism of GRUB can be used from within GRUB.
For instance, if you type in &quot;<span class="code">root (</span>&quot; followed by a TAB, you will
be presented with a list of devices (such as <span class="path">hd0</span>). If you
type in &quot;<span class="code">root (hd0,</span>&quot; followed by a TAB, you will receive a list
of available partitions to choose from (such as <span class="path">hd0,0</span>).
</p>

<p>
By using the tab completion, setting up GRUB should be not that hard.
Now go on, configure GRUB, shall we? :-)
</p>

<a name="doc_chap_pre3"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;3: Installing GRUB in the MBR</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
grub&gt; <span class="input">root (hd0,0)</span>          <span class="comment">(Specify where your /boot partition resides)</span>
grub&gt; <span class="input">setup (hd0)</span>           <span class="comment">(Install GRUB in the MBR)</span>
grub&gt; <span class="input">quit</span>                  <span class="comment">(Exit the GRUB shell)</span>
</pre></td></tr>
</table>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#bbffbb"><p class="note">
<b>Note: </b>
If you want to install GRUB in a certain partition instead of the MBR,
you have to alter the <span class="code">setup</span> command so it points to the right
partition. For instance, if you want GRUB installed in
<span class="path">/dev/hda3</span>, then the command becomes <span class="code">setup (hd0,2)</span>.
Few users however want to do this.
</p></td></tr></table>

<p>
Although GRUB is now installed, we still need to write up a
configuration file for it, so that GRUB automatically boots your newly
created kernel. Create <span class="path">/boot/grub/grub.conf</span> with
<span class="code">nano</span> (or, if applicable, another editor):
</p>

<a name="doc_chap_pre4"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;4: Creating /boot/grub/grub.conf</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">nano -w /boot/grub/grub.conf</span>
</pre></td></tr>
</table>

<p>
Now we are going to write up a <span class="path">grub.conf</span>. Beneath you'll
find three possible <span class="path">grub.conf</span> for the partitioning example we use 
in this guide, with kernel image <span class="path">kernel-2.4.24</span>. We've only
extensively commented the first <span class="path">grub.conf</span>. 
</p>

<ul>
  <li>
    The first <span class="path">grub.conf</span> is for people who have not used 
    <span class="code">genkernel</span> to build their kernel
  </li>
  <li>
    The second <span class="path">grub.conf</span> is for people who have used the
    <span class="code">genkernel</span> from the LiveCD (i.e. <span class="code">genkernel</span> installed using GRP
    packages) to build their kernel
  </li>
  <li>
    The third <span class="path">grub.conf</span> is for people who have used a downloaded
    <span class="code">genkernel</span> to build their kernel
  </li>
</ul>

<a name="doc_chap_pre5"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;5: grub.conf for non-genkernel users</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
<span class="comment"># Which listing to boot as default. 0 is the first, 1 the second etc.</span>
default 0
<span class="comment"># How many seconds to wait before the default listing is booted.</span>
timeout 30
<span class="comment"># Nice, fat splash-image to spice things up :)</span>
splashimage=(hd0,0)/grub/splash.xpm.gz

title=Gentoo Linux 2.4.24
<span class="comment"># Partition where the kernel image (or operating system) is located</span>
root (hd0,0)
kernel (hd0,0)/kernel-2.4.24 root=/dev/hda3

<span class="comment"># The next three lines are only if you dualboot with a Windows system.</span>
<span class="comment"># In this case, Windows is hosted on /dev/hda6.</span>
title=Windows XP
root (hd0,5)
chainloader +1
</pre></td></tr>
</table>

<a name="doc_chap_pre6"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;6: grub.conf for GRP genkernel users</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
default 0
timeout 30
splashimage=(hd0,0)/grub/splash.xpm.gz

title=Gentoo Linux 2.4.24
root (hd0,0)
kernel (hd0,0)/kernel-2.4.24 root=/dev/hda3
initrd (hd0,0)/initrd-2.4.24

<span class="comment"># Only in case you want to dual-boot</span>
title=Windows XP
root (hd0,5)
chainloader +1
</pre></td></tr>
</table>

<a name="doc_chap_pre7"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;7: grub.conf for non-GRP genkernel users</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
default 0
timeout 30
splashimage=(hd0,0)/grub/splash.xpm.gz

title=Gentoo Linux 2.4.24
root (hd0,0)
kernel (hd0,0)/kernel-2.4.24 root=/dev/ram0 init=/linuxrc real_root=/dev/hda3
initrd (hd0,0)/initrd-2.4.24

<span class="comment"># Only in case you want to dual-boot</span>
title=Windows XP
root (hd0,5)
chainloader +1
</pre></td></tr>
</table>


<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#bbffbb"><p class="note">
<b>Note: </b>
If you use a different partitioning scheme and/or kernel image, adjust 
accordingly. However, make sure that anything that follows a GRUB-device 
(such as <span class="path">(hd0,0)</span>) is relative to the mountpoint, not the root. In 
other words, <span class="path">(hd0,0)/grub/splash.xpm.gz</span> is in reality 
<span class="path">/boot/grub/splash.xpm.gz</span> since <span class="path">(hd0,0)</span> is 
<span class="path">/boot</span>.
</p></td></tr></table>

<p>
If you need to pass any additional options to the kernel, simply add
them to the end of the kernel command. We're already passing one option
(<span class="code">root=/dev/hda3</span> or <span class="code">real_root=/dev/hda3</span>), but you can pass others 
as well. As an example we use the <span class="code">vga</span> statement for framebuffer we 
discussed previously:
</p>

<a name="doc_chap_pre8"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;8: Adding the vga-statement as a kernel option</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
title=Gentoo Linux
  root (hd0,0)
  kernel (hd0,0)/kernel-2.4.24 root=/dev/hda3 vga=788
</pre></td></tr>
</table>

<p>
<span class="code">genkernel</span> users should know that their kernels use the same boot options
as is used for the LiveCD. For instance, if you have SCSI devices, you should
add <span class="code">doscsi</span> as kernel option.
</p>

<p>
Now save the <span class="path">grub.conf</span> file and exit. As of now, GRUB is
fully configured, and you can continue with <a href="#book_part1_chap10">Installing Necessary System Tools</a>.
</p>

<a name="book_id2742101_chap3"></a><p class="chaphead">
<span class="chapnum">9.c. </span>Alternative: Using LILO</p>
<a name="book_id2742101_chap3_sect1"></a><p class="secthead">Installing LILO</p>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#ffffbb"><p class="note">
<b>Important: </b>
LILO can only be used with x86-based systems!
</p></td></tr></table>

<p>
LILO, the LInuxLOader, is the tried and true workhorse of Linux
bootloaders. However, it lacks some features that GRUB has (which is
also the reason why GRUB is currently gaining popularity). The reason
why LILO is still used is that, on some systems, GRUB doesn't work and
LILO does. Of course, it is also used because some people know LILO and
want to stick with it. Either way, Gentoo supports both, and apparently
you have chosen to use LILO.
</p>

<p>
Installing LILO is a breeze; just use <span class="code">emerge</span>.
</p>

<a name="doc_chap_pre9"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;9: Installing LILO</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge --usepkg lilo</span>
</pre></td></tr>
</table>

<a name="book_id2742101_chap3_sect2"></a><p class="secthead">Configuring LILO</p>

<p>
To configure LILO, you must create <span class="path">/etc/lilo.conf</span>. Fire up
your favorite editor (in this handbook we use <span class="code">nano</span> for
consistency) and create the file.
</p>

<a name="doc_chap_pre10"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;10: Creating /etc/lilo.conf</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">nano -w /etc/lilo.conf</span>
</pre></td></tr>
</table>

<p>
Some sections ago we have asked you to remember the kernel-image name
you have created. In the next example <span class="path">lilo.conf</span> we assume
the imagename is <span class="path">kernel-2.4.24</span>. We also use the
example partitioning scheme in this example. There are three separate parts: 
</p>

<ul>
  <li>
    One for those who have not used <span class="code">genkernel</span> to build their kernel
  </li>
  <li>
    One for those who have used a GRP <span class="code">genkernel</span> to build their kernel
  </li>
  <li>
    One for those who have used a recent (downloaded) <span class="code">genkernel</span> to build 
    their kernel
  </li>
</ul>

<a name="doc_chap_pre11"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;11: Example /etc/lilo.conf</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
boot=/dev/hda             <span class="comment"># Install LILO in the MBR</span>
prompt                    <span class="comment"># Give the user the chance to select another section</span>
delay=50                  <span class="comment"># Wait 5 (five) seconds before booting the default section</span>
default=gentoo            <span class="comment"># When the timeout has passed, boot the &quot;gentoo&quot; section</span>
<span class="comment"># Only if you use framebuffer. Otherwise remove the following line:</span>
vga=788                   <span class="comment"># Framebuffer setting. Adjust to your own will</span>

<span class="comment"># For non-genkernel users</span>
image=/boot/kernel-2.4.24
  label=gentoo            <span class="comment"># Name we give to this section</span>
  read-only               <span class="comment"># Start with a read-only root. Do not alter!</span>
  root=/dev/hda3          <span class="comment"># Location of the root filesystem</span>

<span class="comment"># For GRP genkernel users</span>
image=/boot/kernel-2.4.24
  label=gentoo
  read-only
  root=/dev/hda3
  initrd=/boot/initrd-2.4.24

<span class="comment"># For recent genkernel users</span>
image=/boot/kernel-2.4.24
  label=gentoo
  read-only
  root=/dev/ram0
  append=&quot;init=/linuxrc real_root=/dev/hda3&quot;
  initrd=/boot/initrd-2.4.24

<span class="comment"># The next two lines are only if you dualboot with a Windows system.</span>
<span class="comment"># In this case, Windows is hosted on /dev/hda6.</span>
other=/dev/hda6
  label=windows
</pre></td></tr>
</table>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#bbffbb"><p class="note">
<b>Note: </b>
If you use a different partitioning scheme and/or kernel image, adjust
accordingly.
</p></td></tr></table>

<p>
If you need to pass any additional options to the kernel, add an
<span class="code">append</span> statement to the section. As an example, we add the
<span class="code">acpi=off</span> statement to disable ACPI support:
</p>

<a name="doc_chap_pre12"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;12: Using append to add kernel options</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
image=/boot/kernel-2.4.24
  label=gentoo
  read-only
  root=/dev/hda3
  <span class="input">append=&quot;acpi=off&quot;</span>
</pre></td></tr>
</table>

<p>
<span class="code">genkernel</span> users should know that their kernels use the same boot options
as is used for the LiveCD. For instance, if you have SCSI devices, you should
add <span class="code">doscsi</span> as kernel option.
</p>


<p>
Now save the file and exit. To finish up, you have to run
<span class="code">/sbin/lilo</span> so LILO can apply the <span class="path">/etc/lilo.conf</span> to
your system (i.e. install itself on the disk).
</p>

<a name="doc_chap_pre13"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;13: Finishing the LILO installation</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">/sbin/lilo</span>
</pre></td></tr>
</table>

<p>
Now continue with <a href="#book_part1_chap10">Installing Necessary System
Tools</a>.
</p>

<a name="book_id2742101_chap4"></a><p class="chaphead">
<span class="chapnum">9.d. </span>Alternative: Using aboot</p>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#ffffbb"><p class="note">
<b>Important: </b>
aboot can only be used with alpha-based systems!
</p></td></tr></table>

<p>
We first install aboot on our system. Of course we use <span class="code">emerge</span> to
do so:
</p>

<a name="doc_chap_pre14"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;14: Installing aboot</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge --usepkg aboot</span>
</pre></td></tr>
</table>

<p>
The next step is to make our bootdisk bootable. This will start
<span class="code">aboot</span> when you boot your system. We make our bootdisk bootable by
writing the <span class="code">aboot</span> bootloader to the start of the disk.
</p>

<a name="doc_chap_pre15"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;15: Making your bootdisk bootable</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">swriteboot -f3 /dev/sda /boot/bootlx</span> 
# <span class="input">abootconf /dev/sda 2</span>
</pre></td></tr>
</table>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#bbffbb"><p class="note">
<b>Note: </b>
If you use a different partitioning scheme than the one we use
throughout this chapter, you have to change the commands accordingly.
Please read the appropriate manual pages (<span class="code">man 8 swriteboot</span> and
<span class="code">man 8 abootconf</span>).
</p></td></tr></table>

<p>
Additionally, you can make Gentoo boot more easily by setting up the
aboot configuration file and SRM boot_osflags variable. You will need to
make sure that the bootdef_dev is also properly set (easier to do at the
console than from Linux).
</p>

<a name="doc_chap_pre16"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;16: Improve booting Gentoo</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">echo '0:2/boot/vmlinux.gz root=/dev/sda2' &gt; /etc/aboot.conf</span>
# <span class="input">echo -n 0 &gt; /proc/srm_environment/named_variables/boot_osflags</span>
# <span class="input">echo -n '' &gt; /proc/srm_environment/named_variables/boot_file</span>
</pre></td></tr>
</table>

<p>
If you're installing using a serial console, don't forget to include
the serial console boot flag in <span class="path">aboot.conf</span>. See 
<span class="path">/etc/aboot.conf.example</span> for some further information. 
Additionally, you need to allow login on the serial port:
</p>

<a name="doc_chap_pre17"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;17: Allowing login on the serial port</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">echo tts/0 &gt;&gt; /etc/securetty</span>
# <span class="input">echo 's0:12345:respawn:/sbin/agetty 9600 tts/0 vt100' &gt;&gt; /etc/inittab</span>
</pre></td></tr>
</table>

<p>
Aboot is now configured and ready to use. Continue with <a href="#book_part1_chap10">Installing Necessary System Tools</a>.
</p>

<a name="book_id2742101_chap5"></a><p class="chaphead">
<span class="chapnum">9.e. </span>Alternative: Using MILO</p>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#ffffbb"><p class="note">
<b>Important: </b>
MILO can only be used with alpha-based systems!
</p></td></tr></table>

<p>
Before continuing, you should decide on how to use MILO. In this
section, we will assume that you want to make a MILO boot floppy. If you
are going to boot from an MS-DOS partition on your hard disk, you should
amend the commands appropriately.
</p>

<p>
To install MILO, we use <span class="code">emerge</span>.
</p>

<a name="doc_chap_pre18"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;18: Installing MILO</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge --usepkg milo</span>
</pre></td></tr>
</table>

<p>
After MILO has been installed, the MILO images should be in
<span class="path">/opt/milo</span>. The commands below make a bootfloppy for use
with MILO. Remember to use the correct image for your Alpha-system.
</p>

<a name="doc_chap_pre19"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;19: Installing MILO on a floppy</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
<span class="comment">(First insert a blank floppy)</span>
# <span class="input">fdformat /dev/fd0</span>
# <span class="input">mformat a:</span>
# <span class="input">mcopy /opt/milo/milo-2.2-18-gentoo-ruffian a:\milo</span>
# <span class="input">mcopy /opt/milo/linload.exe a:\lilnload.exe</span>
<span class="comment">(Only if you have a Ruffian:</span>     
  # <span class="input">mcopy /opt/milo/ldmilo.exe a:\ldmilo.exe</span>
<span class="comment">)</span>
# <span class="input">echo -ne '\125\252' | dd of=/dev/fd0 bs=1 seek=510 count=2</span>
</pre></td></tr>
</table>

<p>
Your MILO boot floppy is now ready to boot Gentoo Linux. You may need to
set environment variables in your ARCS Firmware to get MILO to start;
this is all explained in the <a href="http://tldp.org/HOWTO/MILO-HOWTO/">MILO-HOWTO</a> with some examples 
on common systems, and examples of the commands to use in interactive mode.
</p>

<p>
Not reading the <a href="http://tldp.org/HOWTO/MILO-HOWTO/">MILO-HOWTO</a> 
is a <span class="emphasis">bad</span> idea.
</p>

<p>
Now continue with <a href="#book_part1_chap10">Installing Necessary System
Tools</a>.
</p>

<a name="book_id2742101_chap6"></a><p class="chaphead">
<span class="chapnum">9.f. </span>Alternative: Using SILO</p>

<p>
It is now time to install and configure <a href="http://www.sparc-boot.org">SILO</a>, the Sparc Improved boot
LOader.
</p>

<a name="doc_chap_pre20"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;20: Installing SILO</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge --usepkg silo</span>
</pre></td></tr>
</table>

<p>
Now open up your favorite editor (we use <span class="code">nano</span> as an example) and
create <span class="path">/etc/silo.conf</span>.
</p>

<a name="doc_chap_pre21"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;21: Creating /etc/silo.conf</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">nano -w /etc/silo.conf</span>
</pre></td></tr>
</table>

<p>
Beneath you find an example <span class="path">silo.conf</span> file. It uses the
partitioning scheme we use throughout this book and
<span class="path">kernel-2.4.24</span> as kernelimage.
</p>

<a name="doc_chap_pre22"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;22: Example /etc/silo.conf</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
partition = 1         <span class="comment"># Boot partition</span>
root = /dev/hda4      <span class="comment"># Root partition</span>
timeout = 15          <span class="comment"># Wait 15 seconds before booting the default section</span>

image = /boot/kernel-2.4.24
  label = linux
</pre></td></tr>
</table>

<p>
If you use the example <span class="path">silo.conf</span> delivered by Portage, be
sure to comment out <span class="emphasis">all</span> lines that you do not need.
</p>

<p>
If you have a separate <span class="path">/boot</span> partition, copy over the
configuration file to <span class="path">/boot</span> and run <span class="code">/sbin/silo</span>:
</p>

<a name="doc_chap_pre23"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;23: Only if you have /boot on a separate partition</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">cp /etc/silo.conf /boot</span>
# <span class="input">/sbin/silo -C /boot/silo.conf</span>
/boot/silo.conf appears to be valid
</pre></td></tr>
</table>

<p>
If your <span class="path">/boot</span> directory resides on your root partition,
just run <span class="code">/sbin/silo</span>:
</p>

<a name="doc_chap_pre24"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;24: Run silo</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">/sbin/silo</span>
/etc/silo.conf appears to be valid
</pre></td></tr>
</table>

<p>
Now continue with <a href="#book_part1_chap10">Installing Necessary System
Tools</a>.
</p>

<a name="book_id2742101_chap7"></a><p class="chaphead">
<span class="chapnum">9.g. </span>Alternative: Using PALO</p>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#ffffbb"><p class="note">
<b>Important: </b>
PALO can only be used on HPPA-based systems!
</p></td></tr></table>

<p>
On the PA-RISC platform, the boot loader is called palo. You can find
the configuration file in <span class="path">/etc/palo.conf</span>. Here is a sample 
configuration:
</p>

<a name="doc_chap_pre25"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;25: /etc/palo.conf example</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
--commandline=2/vmlinux root=/dev/sdb2 HOME=/
--recoverykernel=/vmlinux.old
--init-partitioned=/dev/sdb
</pre></td></tr>
</table>

<p>
The first line tells palo the location of the kernel and which boot
parameters it must use. <span class="code">2/vmlinux</span> means the kernel named <span class="code">/vmlinux</span>
resides on the second partition. Beware, the path to the kernel is
relative to the partition, not to the root of your filesystem.
</p>

<p>
The second line indicates which recovery kernel to use. If it is your
first install and you do not have a recovery kernel, please comment this
out. The third line indicates on which disk palo will reside. 
</p>

<p>
When configuration is done, just run <span class="code">palo</span>.
</p>

<a name="doc_chap_pre26"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;26: Applying the PALO configuration</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">palo</span>
</pre></td></tr>
</table>

<p>
Now continue with <a href="#book_part1_chap10">Installing Necessary System
Tools</a>.
</p>

<a name="book_id2742101_chap8"></a><p class="chaphead">
<span class="chapnum">9.h. </span>Alternative: Using yaBoot</p>
<a name="book_id2742101_chap8_sect1"></a><p class="secthead">Introduction</p>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#ffffbb"><p class="note">
<b>Important: </b>
yaBoot can only be used on NewWorld PPC-based systems!
</p></td></tr></table>

<p>
There are two ways to configure yaBoot for your system. You can use the
new and improved <span class="code">yabootconfig</span> included with
<span class="path">yaboot-1.3.8-r1</span> and later to automatically setup yaboot. If
for some reason you do not want to run <span class="code">yabootconfig</span> to
automatically setup <span class="path">/etc/yaboot.conf</span> or you are installing Gentoo
on a G5 (on which <span class="code">yabootconfig</span> does not always work), you can just edit 
the sample file already installed on your system.
</p>

<ul>
  <li><a href="#book_id2742101_chap8_sect2">Default: Using yabootconfig</a></li>
  <li>
    <a href="#book_id2742101_chap8_sect3">Alternative: Manual yaBoot Configuration</a>
  </li>
</ul>

<a name="book_id2742101_chap8_sect2"></a><p class="secthead">Default: Using yabootconfig</p>

<p>
<span class="code">yabootconfig</span> will auto-detect the partitions on your machine and will
setup dual and triple boot combinations with Linux, Mac OS, and Mac OS
X.
</p>

<p>
To use <span class="code">yabootconfig</span>, your drive must have a bootstrap partition, and
<span class="path">/etc/fstab</span> must be configured with your Linux partitions. Both of 
these should have been done already in the steps above. To start, ensure that
you have the latest version of yaboot installed by running <span class="code">emerge --update
yaboot</span>. This is necessary as the latest version will be available via
Portage, but it may not have made it into the stage files.
</p>

<a name="doc_chap_pre27"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;27: Installing yaboot</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge --usepkg --update yaboot</span>
</pre></td></tr>
</table>

<p>
Now run <span class="code">yabootconfig</span>. The program will run and it will confirm
the location of the bootstrap partition. Type <span class="code">Y</span> if it is correct. If
not, double check <span class="path">/etc/fstab</span>. yabootconfig will then scan your
system setup, create <span class="path">/etc/yaboot.conf</span> and run <span class="code">mkofboot</span> for
you. <span class="code">mkofboot</span> is used to format the bootstrap partition, and install 
the yaboot configuration file into it.
</p>

<p>
You might want to verify the contents of <span class="path">/etc/yaboot.conf</span>. If 
you make changes to <span class="path">/etc/yaboot.conf</span> (like setting the 
default/boot OS), make sure to rerun <span class="code">ybin -v</span> to apply changes to the 
bootstrap partition.
</p>

<p>
Now continue with <a href="#book_part1_chap10">Installing Necessary System
Tools</a>.
</p>

<a name="book_id2742101_chap8_sect3"></a><p class="secthead">Alternative: Manual yaBoot Configuration</p>

<p>
First make sure you have the latest <span class="code">yaboot</span> installed on your
system:
</p>

<a name="doc_chap_pre28"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;28: Installing yaboot</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge --usepkg --update yaboot</span>
</pre></td></tr>
</table>

<p>
Below you find a completed <span class="path">yaboot.conf</span> file. Alter it at
will. G5 users should be aware that their disks are Serial ATA disks which are
seen as SCSI disks by the Linux kernel (so substitute <span class="path">/dev/hda</span> with
<span class="path">/dev/sda</span>).
</p>

<a name="doc_chap_pre29"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;29: /etc/yaboot.conf</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
<span class="comment">## /etc/yaboot.conf
##
## run: &quot;man yaboot.conf&quot; for details. Do not make changes until you have!!
## see also: /usr/share/doc/yaboot/examples for example configurations.
##
## For a dual-boot menu, add one or more of:
## bsd=/dev/hdaX, macos=/dev/hdaY, macosx=/dev/hdaZ

## our bootstrap partition:</span>

boot=/dev/hda9

<span class="comment">## ofboot is the openfirmware way to specify the bootstrap partition.
## If this isn't defined, yaboot fails on the G5 (unless you pass the necessary
## arguments to the mkofboot/ybin program).
## hd:X means /dev/sdaX (or /dev/hdaX).
## 
## G5 users should uncomment this line!!

#ofboot=hd:9</span>

<span class="comment">##hd: is open firmware speak for hda</span>
device=hd:
partition=11

delay=5
defaultos=macosx
timeout=30
install=/usr/lib/yaboot/yaboot
magicboot=/usr/lib/yaboot/ofboot

<span class="comment">#################
## This section can be duplicated if you have more than one kernel or set of
## boot options
#################</span>
image=/boot/vmlinux
  label=Linux
  root=/dev/hda11
  sysmap=/boot/System.map
  read-only
<span class="comment">##################</span>

<span class="comment">## G5 users should set 
##   macos=hd:13
##   macosx=hd:12
## instead of the example values.</span>
macos=/dev/hda13
macosx=/dev/hda12
enablecdboot
enableofboot
</pre></td></tr>
</table>

<p>
Once <span class="path">yaboot.conf</span> is set up the way you want it, you run 
<span class="code">mkofboot -v</span> to install the settings in the bootstrap partition. <span class="emphasis">Don't 
forget this!</span> If all goes well, and you have the same options as the sample 
above, your next reboot will give you a simple, five-entry boot menu. If you 
update your yaboot config later on, you'll just need to run <span class="code">ybin -v</span> to 
update the bootstrap partition - <span class="code">mkofboot</span> is for initial setup only.
</p>

<p>
For more information on yaboot, take a look at the <a href="http://penguinppc.org/projects/yaboot">yaboot project</a>. For
now, continue the installation with <a href="#book_part1_chap10">Installing
Necessary System Tools</a>.
</p>

<a name="book_id2742101_chap9"></a><p class="chaphead">
<span class="chapnum">9.i. </span>Alternative: BootX</p>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#ffffbb"><p class="note">
<b>Important: </b>
BootX can only be used on OldWorld PPC-based systems!
</p></td></tr></table>

<p>
If you want to use BootX, then you don't have to do anything at this
stage. However, after rebooting, you will have to some configuration in
the BootX control panel (inside MacOS). We discuss this later in the
installation.
</p>

<p>
For now, continue with <a href="#book_part1_chap10">Installing Necessary
System Tools</a>.
</p>

<a name="book_id2742101_chap10"></a><p class="chaphead">
<span class="chapnum">9.j. </span>Alternative: MIPS PROM</p>
<a name="book_id2742101_chap10_sect1"></a><p class="secthead"></p>

<p>
MIPS doesn't require that you install a bootloader. The MIPS PROM handles the
booting, but you need to install your kernel as a viable option. 
</p>

<p>
First, install <span class="code">dvhtool</span>, needed to copy the kernel to the SGI Volume
Header.
</p>

<a name="doc_chap_pre30"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;30: Installing dvhtool</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge dvhtool</span>
</pre></td></tr>
</table>

<p>
Now copy over the kernel to the SGI Volume Header. By default <span class="code">dvhtool</span>
assumes that the SGI Volume Header is on <span class="path">/dev/sda</span>. If this is not
the case (for instance when IRIX is installed on <span class="path">/dev/sda</span> and
Gentoo/MIPS on <span class="path">/dev/sdb</span>) you need to inform <span class="code">dvhtool</span> about it
using <span class="code">-d &lt;device&gt;</span>.
</p>

<a name="doc_chap_pre31"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;31: Copying a kernel to the SGI Volume Header</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">dvhtool --unix-to-vh &lt;kernel name in /boot&gt; &lt;name you want to give in volume header&gt;</span>
</pre></td></tr>
</table>

<p>
If you want to see all available entries in the volume, use
<span class="code">--print-volume-directory</span>:
</p>

<a name="doc_chap_pre32"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;32: Viewing all available entries in the volume</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">dvhtool --print-volume-directory</span>
</pre></td></tr>
</table>

<p>
To setup your system to boot Gentoo/MIPS you need to go tweak some settings in
the MIPS PROM. We will describe this later on when the Gentoo installation has
finished.
</p>

<p>
Now continue with <a href="#book_part1_chap10">Installing Necessary System
Tools</a>.
</p>

<a name="book_part1_chap10"></a><h3>10. Installing Necessary System Tools</h3>
<a name="book_id2750961_chap1"></a><p class="chaphead">
<span class="chapnum">10.a. </span>System Logger</p>

<p>
When we mentioned what <span class="emphasis">stage3</span> was, we said that it contained all
necessary system tools for which we cannot provide a choice to our users. We 
also said that we would install the other tools later on. Well, here we are :)
</p>

<p>
The first tool you need to decide on has to provide logging facilities for your
system. Unix and Linux have an excellent history of logging capabilities -- if
you want you can log everything that happens on your system in logfiles. This
happens through the <span class="emphasis">system logger</span>.
</p>

<p>
Gentoo offers several system loggers to choose from. There are <span class="code">sysklogd</span>,
which is the traditional set of system logging daemons, <span class="code">msyslog</span>, a
flexible system logger with a modularized design, <span class="code">syslog-ng</span>, an advanced
system logger, and <span class="code">metalog</span> which is a highly-configurable system logger.
</p>

<p>
If you can't choose one, use <span class="code">syslog-ng</span> as it is very powerful yet comes
with a great default configuration.
</p>

<p>
To install the system logger of your choice, <span class="code">emerge</span> it and have it added
to the default runlevel using <span class="code">rc-update</span>. The following example installs
<span class="code">syslog-ng</span>. Of course substitute with your system logger:
</p>

<a name="doc_chap_pre1"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;1: Installing a system logger</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge syslog-ng</span>
# <span class="input">rc-update add syslog-ng default</span>
</pre></td></tr>
</table>

<a name="book_id2750961_chap2"></a><p class="chaphead">
<span class="chapnum">10.b. </span>Optional: Cron Daemon</p>

<p>
Next is the cron daemon. Although it is optional and not required for your
system, it is wise to install one. But what is a cron daemon? A cron daemon 
executes scheduled commands. It is very handy if you need to execute some 
command regularly (for instance daily, weekly or monthly).
</p>

<p>
Gentoo offers three possible cron daemons: <span class="code">dcron</span>, <span class="code">fcron</span> and
<span class="code">vixie-cron</span>. Installing one of them is similar to installing a system 
logger. However, <span class="code">dcron</span> and <span class="code">fcron</span> require an extra configuration 
command, namely <span class="code">crontab /etc/crontab</span>. If you don't know what to choose, 
use <span class="code">vixie-cron</span>.
</p>

<a name="doc_chap_pre2"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;2: Installing a cron daemon</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge vixie-cron</span>
# <span class="input">rc-update add vixie-cron default</span>
<span class="comment">(Only if you have chosen dcron or fcron)</span> # <span class="input">crontab /etc/crontab</span>
</pre></td></tr>
</table>

<a name="book_id2750961_chap3"></a><p class="chaphead">
<span class="chapnum">10.c. </span>File System Tools</p>

<p>
Depending on what file systems you are using, you need to install the necessary
file system utilities (for checking the filesystem integrity, creating 
additional file systems etc.).
</p>

<p>
The following table lists the tools you need to install if you use a certain
file system:
</p>

<table class="ntable">
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>File System</b></td>
  <td bgcolor="#7a5ada" class="infohead"><b>Tool</b></td>
  <td bgcolor="#7a5ada" class="infohead"><b>Install Command</b></td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">XFS</td>
  <td bgcolor="#ddddff" class="tableinfo">xfsprogs</td>
  <td bgcolor="#ddddff" class="tableinfo"><span class="code">emerge xfsprogs</span></td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">ReiserFS</td>
  <td bgcolor="#ddddff" class="tableinfo">reiserfsprogs</td>
  <td bgcolor="#ddddff" class="tableinfo"><span class="code">emerge reiserfsprogs</span></td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">JFS</td>
  <td bgcolor="#ddddff" class="tableinfo">jfsutils</td>
  <td bgcolor="#ddddff" class="tableinfo"><span class="code">emerge jfsutils</span></td>
</tr>
</table>



<p>
If you don't need <span class="code">rp-pppoe</span> to connect to the Internet, continue with <a href="#book_part1_chap11">Finalizing your Gentoo Installation</a>. Otherwise
continue with <a href="#book_id2750961_chap4">Optional: Networking Tools</a>.
</p>

<a name="book_id2750961_chap4"></a><p class="chaphead">
<span class="chapnum">10.d. </span>Optional: Networking Tools</p>

<p>
If you need <span class="code">rp-pppoe</span> to connect to the net, you need to install it.
</p>

<a name="doc_chap_pre3"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;3: Installing rp-pppoe</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">USE=&quot;-X&quot; emerge rp-pppoe</span>
</pre></td></tr>
</table>

<p>
The <span class="code">USE=&quot;-X&quot;</span> will prohibit XFree to be installed as a dependency
(<span class="code">rp-pppoe</span> has graphical tools; if you want those enabled, you can
recompile <span class="code">rp-pppoe</span> later on or have XFree installed now -- which takes a
long time to compile).
</p>

<p>
Now continue with <a href="#book_part1_chap11">Finalizing your Gentoo
Installation</a>.
</p>

<a name="book_part1_chap11"></a><h3>11. Finalizing your Gentoo Installation</h3>
<a name="book_id2750980_chap1"></a><p class="chaphead">
<span class="chapnum">11.a. </span>User Administration</p>
<a name="book_id2750980_chap1_sect1"></a><p class="secthead">Setting a root Password</p>

<p>
Before you forget, set the root password by typing:
</p>

<a name="doc_chap_pre1"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;1: Setting the root password</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">passwd</span>
</pre></td></tr>
</table>

<p>
If you want root to be able to log on through the serial console, add
<span class="code">ttyS0</span> to <span class="path">/etc/securetty</span>.
</p>

<a name="doc_chap_pre2"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;2: Adding ttyS0 to /etc/securetty</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">echo &quot;ttyS0&quot; &gt;&gt; /etc/securetty</span>
</pre></td></tr>
</table>

<a name="book_id2750980_chap1_sect2"></a><p class="secthead">Adding a User for Daily Use</p>

<p>
Working as root on a Unix/Linux system is <span class="emphasis">dangerous</span> and should be avoided
as much as possible. Therefore it is <span class="emphasis">strongly</span> recommended to add a user 
for day-to-day use.
</p>

<p>
For instance, to create a user called <span class="code">john</span> who is member of the
<span class="code">wheel</span> group (be able to change to root using <span class="code">su</span>), <span class="code">users</span>
group (default for all users) and <span class="code">audio</span> group (be able to use audio
devices):
</p>

<a name="doc_chap_pre3"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;3: Adding a user for day-to-day use</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">useradd john -m -G users,wheel,audio -s /bin/bash</span>
# <span class="input">passwd john</span>
Password: <span class="comment">(Enter the password for john)</span>
Re-enter password: <span class="comment">(Re-enter the password to verify)</span>
</pre></td></tr>
</table>

<p>
If this user ever needs to perform some task as root, he can use <span class="code">su -</span> to
temporarily receive root privileges. Another way is to use the <span class="code">sudo</span> 
package which is, if correctly configured, very secure.
</p>

<a name="book_id2750980_chap2"></a><p class="chaphead">
<span class="chapnum">11.b. </span>Reboot and Enjoy</p>
<a name="book_id2750980_chap2_sect1"></a><p class="secthead">Rebooting</p>

<p>
Congratulations! Your Gentoo system is now ready. Exit the chrooted environment 
and unmount all mounted partitions and, in case you had to bind-mount
<span class="path">/mnt/gentoo/dev</span>, don't forget to unmount it too. Then type in that 
one magical command you have been waiting for: <span class="code">reboot</span>.
</p>

<a name="doc_chap_pre4"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;4: Rebooting the system</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">exit</span>
# <span class="input">cd /</span>
# <span class="input">umount /mnt/gentoo/boot /mnt/gentoo/proc /mnt/gentoo</span>
# <span class="input">reboot</span>
</pre></td></tr>
</table>

<p>
Of course, don't forget to remove the bootable CD, otherwise the CD will be
booted again instead of your new Gentoo system.
</p>

<p>
OldWorld PPC users will boot in MacOS since their bootloader
isn't installed yet. Those users should read <a href="#book_id2750980_chap2_sect2">Optional: Configuring BootX</a>. MIPS users will have
to do some more tweaking in their MIPS PROM to get Gentoo to work. Those users
should read <a href="#book_id2750980_chap2_sect3">Optional: Getting Gentoo/MIPS to 
Work</a>. 
</p>

<p>
GRP users can continue with <a href="#book_id2750980_chap2_sect4">Optional: 
Install GRP Packages</a>, all the rest can finish up with <a href="#book_part1_chap12">Where to go from here?</a>.
</p>

<a name="book_id2750980_chap2_sect2"></a><p class="secthead">Optional: Configuring BootX</p>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#ffffbb"><p class="note">
<b>Important: </b>
This subsection is <span class="emphasis">only</span> for PPC-users who want to use BootX as
bootloader. All other readers should skip this subsection.
</p></td></tr></table>

<p>
Now your machine is booted in MacOS, open the BootX control panel.
Select <span class="code">Options</span>, and uncheck <span class="code">Used specified RAM disk</span>. When you 
return to the BootX main screen, you will now find an option to specify your
machine's root disk and partition. Fill these in with the appropriate
values.
</p>

<p>
BootX can be configured to start Linux upon boot. If you do this, you will
first see your machine boot into MacOS then, during startup, BootX will
load and start Linux. See the <a href="http://penguinppc.org/projects/bootx/">BootX home page</a> for more 
information.
</p>

<p>
If you are a GRP users you can continue with <a href="#book_id2750980_chap2_sect4">Optional: Install GRP Packages</a>, otherwise go to
<a href="#book_part1_chap12">Where to go from here?</a>.
</p>

<a name="book_id2750980_chap2_sect3"></a><p class="secthead">Optional: Getting Gentoo/MIPS to Work</p>

<p>
When you are rebooted, go to the <span class="emphasis">System Maintenance Menu</span> and select
<span class="emphasis">Enter Command Monitor</span> (<span class="code">5</span>). If you want to test your new Gentoo
installation, you can just run <span class="code">boot -f &lt;kernel name&gt;</span>. To have your
system permanently boot into the Gentoo installation, you need to set some
variables in the MIPS PROM:
</p>

<a name="doc_chap_pre5"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;5: Configuring the PROM to Boot Gentoo</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
1) Start System
2) Install System Software
3) Run Diagnostics
4) Recover System
5) Enter Command Monitor

Option? <span class="input">5</span>
Command Monitor.  Type &quot;exit&quot; to return to the menu.

<span class="comment">(&lt;root device&gt; = Gentoo's root partition, e.g. /dev/sda3)</span>
&gt;&gt; <span class="input">setenv OSLoadPartition &lt;root device&gt;</span>

<span class="comment">(To list the available kernels, type &quot;ls&quot;)</span>
&gt;&gt; <span class="input">setenv OSLoader &lt;kernel name&gt;</span>
&gt;&gt; <span class="input">setenv OSLoadFilename &lt;kernel name&gt;</span>

<span class="comment">(Declare the kernel parameters you want to pass)</span>
&gt;&gt; <span class="input">setenv OSLoadOptions &lt;kernel parameters&gt;</span>

<span class="comment">(Provide the location of the Volume Header)</span>
&gt;&gt; <span class="input">setenv SystemPartition scsi(0)disk(1)rdisk(0)partition(8)</span>

<span class="comment">(Automatically boot Gentoo)</span>
&gt;&gt; <span class="input">setenv AutoLoad Yes</span>

<span class="comment">(Set the timezone)</span>
&gt;&gt; <span class="input">setenv TimeZone EST5EDT</span>

<span class="comment">(Use the serial console - graphic adapter users should have &quot;g&quot; instead of &quot;d1&quot; (one))</span>
&gt;&gt; <span class="input">setenv console d1</span>
</pre></td></tr>
</table>

<p>
Now you're ready to enjoy Gentoo!
</p>

<a name="book_id2750980_chap2_sect4"></a><p class="secthead">Optional: Install GRP Packages</p>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#ffffbb"><p class="note">
<b>Important: </b>
This part is for GRP users only. Other users should skip this part and continue
with <a href="#book_part1_chap12">Where to go from here?</a>.
</p></td></tr></table>

<p>
Now that your system is booted, log on as the user you created (for instance,
<span class="code">john</span>) and use <span class="code">su -</span> to gain root privileges:
</p>

<a name="doc_chap_pre6"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;6: Gaining root privileges</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
$ <span class="input">su -</span>
Password: <span class="comment">(Enter your root password)</span>
</pre></td></tr>
</table>

<p>
Now we need to change the Portage configuration to look for the prebuilt 
binaries from the second CD (CD-2). First mount this CD:
</p>

<a name="doc_chap_pre7"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;7: Mount the CD-2</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">mkdir /mnt/cdrom</span>
<span class="comment">(Put CD-2 in the CD tray)</span>
# <span class="input">mount /mnt/cdrom</span>
</pre></td></tr>
</table>

<p>
Now configure Portage to use <span class="path">/mnt/cdrom</span> for its prebuilt packages:
</p>

<a name="doc_chap_pre8"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;8: Configuring Portage to use /mnt/cdrom</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">ls /mnt/cdrom</span>

<span class="comment">(If there is a /mnt/cdrom/packages directory:)</span>
# <span class="input">export PKGDIR=&quot;/mnt/cdrom/packages&quot;</span>

<span class="comment">(Otherwise:)</span>
# <span class="input">export PKGDIR=&quot;/mnt/cdrom&quot;</span>
</pre></td></tr>
</table>

<p>
Now install the packages you want. CD-2 contains several prebuilt binaries, for
instance KDE:
</p>

<a name="doc_chap_pre9"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;9: Installing KDE</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">USE=&quot;bindist&quot; emerge --usepkg kde</span>
</pre></td></tr>
</table>

<p>
The <span class="code">USE=&quot;bindist&quot;</span> is needed when you install XFree (either directly or as
a dependency). It prevents the downloading of Microsoft's core fonts (which we
cannot distribute on our LiveCDs).
</p>

<p>
Be sure to install the binaries now. When you do an <span class="code">emerge sync</span> to update
Portage (as you will learn later), the prebuilt binaries might not match against
the ebuilds in your updated Portage. You can try to circumvent this by using
<span class="code">emerge --usepkgonly</span> instead of <span class="code">emerge --usepkg</span>.
</p>

<p>
Congratulations, your system is now fully equiped! Continue with <a href="#book_part1_chap12">Where to go from here?</a> to learn more about
Gentoo.
</p>

<a name="book_part1_chap12"></a><h3>12. Where to go from here?</h3>
<a name="book_id2753674_chap1"></a><p class="chaphead">
<span class="chapnum">12.a. </span>Documentation</p>
<a name="book_id2753674_chap1_sect1"></a><p class="secthead"></p>

<p>
Congratulations! You now have a working Gentoo system. But where to go from
here? What are your options now? What to explore first? Gentoo provides its
users with lots of possibilities, and therefore lots of documented (and less
documented) features.
</p>

<p>
You should definately take a look at the next part of the Gentoo Handbook
entitled <a href="#book_part2">Working with Gentoo</a> which explains how to
keep your software up to date, how to install more software, what USE flags are,
how the Gentoo Init system works, etc.
</p>

<p>
If you are interested in optimizing your system for desktop-use, or you want to
learn how to configure your system to be a full working desktop system, consult
our extensive <a href="/doc/en/desktop.xml">Desktop Configuration Guide</a>.
</p>

<p>
For a full listing of all our available documentation check out our <a href="/doc/en/index.xml">Documentation Resources</a> page.
</p>

<a name="book_id2753674_chap2"></a><p class="chaphead">
<span class="chapnum">12.b. </span>Gentoo Online</p>

<p>
You are of course always welcome on our <a href="http://forums.gentoo.org">Gentoo Forums</a> or on one of our many 
<a href="/main/en/irc.xml">Gentoo IRC channels</a>.
</p>

<p>
We also have several <a href="/main/en/lists.xml">mailinglists</a> open to all 
our users. Information on how to join is contained in that page.
</p>

<p>
We'll shut up now and let you enjoy your installation :)
</p>

<a name="book_part2"></a><h2>B. Working with Gentoo</h2>
<a name="book_part2_chap1"></a><h3>1. USE flags</h3>
<a name="book_id2757595_chap1"></a><p class="chaphead">
<span class="chapnum">1.a. </span>What are USE-flags?</p>
<a name="book_id2757595_chap1_sect1"></a><p class="secthead">The ideas behind USE-flags</p>

<p>
When you are installing Gentoo (or any other distribution, or even operating
system for that matter) you make choices depending on the environment you are 
working with. A setup for a server differs from a setup for a workstation.
A gaming workstation differs from a 3D rendering workstation.
</p>

<p>
This is not only true for choosing what packages you want to install, but also
what features a certain package should support. If you don't need OpenGL, why
would you bother installing OpenGL and build OpenGL support in most of your
packages? If you don't want to use KDE, why would you bother compiling packages
with KDE-support if those packages work flawlessly without?
</p>

<p>
To help users in deciding what to install/activate and what not, we wanted the
user to specify his environment in an easy way. This forces the user into
deciding what he really wants and eases the process for Portage, our package 
managment system, to make useful decisions.
</p>

<a name="book_id2757595_chap1_sect2"></a><p class="secthead">Definition of a USE-flag</p>

<p>
Enter the USE-flags. Such a flag is a keyword that embodies support and
dependency-information for a certain concept. If you define a certain USE-flag, 
Portage will know that you want support for the chosen keyword. Of course
this also alters the dependency information for a package.
</p>

<p>
Let us take a look at a specific example: the <span class="code">kde</span> keyword. If you do not
have this keyword in your <span class="code">USE</span> variable, all packages that have
<span class="emphasis">optional</span> KDE support will be compiled <span class="emphasis">without</span> KDE support. All
packages that have an <span class="emphasis">optional</span> KDE dependency will be installed
<span class="emphasis">without</span> installing the KDE libraries (as dependency). If you have defined
the <span class="code">kde</span> keyword, then those packages <span class="emphasis">will</span> be compiled with KDE
support, and the KDE libraries will be installed as dependency.
</p>

<p>
By correctly defining the keywords you will receive a system tailored
specifically to your needs.
</p>

<a name="book_id2757595_chap1_sect3"></a><p class="secthead">What USE-flags exist?</p>

<p>
There are two types of USE-flags: <span class="emphasis">global</span> and <span class="emphasis">local</span> USE-flags.
</p>

<ul>
  <li>
    A <span class="emphasis">global</span> USE-flag is used by several packages, system-wide. This is 
    what most people see as USE-flags.
  </li>
  <li>
    A <span class="emphasis">local</span> USE-flag is used by a single package to make package-specific
    decisions.
  </li>
</ul>

<p>
A list of available global USE-flags can be found <a href="/dyn/use-index.xml">online</a> or locally in
<span class="path">/usr/portage/profiles/use.desc</span>. A short (<span class="emphasis">very</span> incomplete)
snippet:
</p>

<a name="doc_chap_pre1"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;1: A short snippet of available USE-flags</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
gtk     - Adds support for x11-libs/gtk+ (The GIMP Toolkit)
gtk2    - Use gtk+-2.0.0 over gtk+-1.2 in cases where a program supports both.
gtkhtml - Adds support for gnome-extra/gtkhtml
guile   - Adds support for dev-util/guile (interpreter for Scheme)
icc     - Use the Intel C++ Compiler if the package supports it
icc-pgo - Enable PGO data generation or use when use icc.
imap    - Adds support for IMAP
</pre></td></tr>
</table>

<a name="book_id2757595_chap2"></a><p class="chaphead">
<span class="chapnum">1.b. </span>Using USE-flags</p>
<a name="book_id2757595_chap2_sect1"></a><p class="secthead">Declare permanent USE-flags</p>

<p>
In the hope you are convinced of the importance of USE-flags we will now inform
you how to declare USE-flags.
</p>

<p>
As previously mentioned, all USE-flags are declared inside the <span class="code">USE</span>
variable. To make it easy for users to search and pick USE-flags, we already
provide a <span class="emphasis">default</span> USE setting. This setting is a collection of USE-flags
we think are commonly used by the Gentoo users. This default setting is declared
in the <span class="path">/etc/make.profile/make.defaults</span> file. Let us take a look at
this default setting:
</p>

<a name="doc_chap_pre2"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;2: /etc/make.profile/make.defaults USE variable</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
USE=&quot;x86 oss apm arts avi berkdb crypt cups encode foomaticdb gdbm gif gpm gtk 
     imlib jpeg kde gnome libg++ libwww mad mikmod motif mpeg ncurses nls 
     oggvorbis opengl pam pdflib png python qt quicktime readline sdl slang 
     spell ssl svga tcpd truetype X xml2 xmms xv zlib&quot;
</pre></td></tr>
</table>

<p>
As you can see, this variable already contains quite a lot of keywords. Do
<b>not</b> alter the <span class="path">/etc/make.profile/make.defaults</span> file to tailor
the <span class="code">USE</span> variable to your needs: changes in this file will be undone when
you update Portage!
</p>

<p>
To change this default setting, you need to add or remove keywords to the
<span class="code">USE</span> variable. This is done globally by defining the <span class="code">USE</span> variable 
in <span class="path">/etc/make.conf</span>. In this variable you add the extra USE-flags you
require, or remove the USE-flags you don't want. This latter is done by
prefixing the keyword with the minus-sign (&quot;-&quot;).
</p>

<p>
For instance, to remove support for KDE and QT but add support for ldap, the
following <span class="code">USE</span> can be defined in <span class="path">/etc/make.conf</span>:
</p>

<a name="doc_chap_pre3"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;3: An example USE setting in /etc/make.conf</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
USE=&quot;-kde -qt ldap&quot;
</pre></td></tr>
</table>

<a name="book_id2757595_chap2_sect2"></a><p class="secthead">Declare temporary USE-flags</p>

<p>
Sometimes you want to set a certain USE-setting only once. Instead of editing
<span class="path">/etc/make.conf</span> twice (to do and undo the USE-changes) you can just 
declare the USE-variable as environment variable.
</p>

<p>
As an example we will temporarily remove java from the USE-setting
during the installation of mozilla.
</p>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#bbffbb"><p class="note">
<b>Note: </b>
The <span class="code">emerge</span> command will be discussed more thoroughly in <a href="#book_part2_chap2">Portage and Software</a>.
</p></td></tr></table>

<a name="doc_chap_pre4"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;4: Using USE as evironment variable</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">USE=&quot;-java&quot; emerge mozilla</span>
</pre></td></tr>
</table>

<a name="book_id2757595_chap2_sect3"></a><p class="secthead">Inheriting USE-flags</p>

<p>
Some packages don't only listen to USE-flags, but also provide USE-flags. When
you install such a package, the USE-flag they provide is added to your USE
setting. To view the list of packages that provide a USE-flag, check
<span class="path">/etc/make.profile/use.defaults</span>:
</p>

<a name="doc_chap_pre5"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;5: A snippet from /etc/make.profile/use.defaults</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
gnome           gnome-base/gnome
gtk             x11-libs/gtk+
qt              x11-libs/qt
kde             kde-base/kdebase
motif           x11-libs/openmotif
</pre></td></tr>
</table>

<a name="book_id2757595_chap2_sect4"></a><p class="secthead">Precendence</p>

<p>
Of course there is a certain precendence on what setting has priority over the
USE setting. You don't want to declare <span class="code">USE=&quot;-java&quot;</span> only to see that
<span class="code">java</span> is declared anyway. The precedence for the USE setting is, ordered
by priority (first has lowest priority):
</p>

<ol>
  <li>
    Default USE setting declared in <span class="path">/etc/make.profile/make.defaults</span>
  </li>
  <li>
    Inherited USE setting if a package from
    <span class="path">/etc/make.profile/use.defaults</span> is installed
  </li>
  <li>
    User-defined USE setting in <span class="path">/etc/make.conf</span>
  </li>
  <li>
    User-defined USE setting as environment variable
  </li>
</ol>

<p>
To view the final <span class="code">USE</span> setting as seen by Portage, run <span class="code">emerge info</span>.
This will list all relevant variables (including the <span class="code">USE</span> variable) with
the content used by Portage.
</p>

<a name="doc_chap_pre6"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;6: Running emerge info</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge info</span>
</pre></td></tr>
</table>

<a name="book_id2757595_chap3"></a><p class="chaphead">
<span class="chapnum">1.c. </span>Package specific USE-flags</p>
<a name="book_id2757595_chap3_sect1"></a><p class="secthead">Viewing available USE-flags</p>

<p>
In the next chapter on <a href="#book_part2_chap2">Portage and Software</a>
we will explain how to manage your installed software and how to work with 
<span class="code">emerge</span>. However, we will give you a primer on <span class="code">emerge</span> by showing
you how to view what USE-flags a package uses.
</p>

<p>
Let us take the example of <span class="code">mozilla</span>: what USE-flags does it listen to? To
find out, we use <span class="code">emerge</span> with the <span class="code">--pretend</span> (don't really do
anything) and <span class="code">--verbose</span> (give more output) options:
</p>

<a name="doc_chap_pre7"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;7: Viewing the used USE-flags</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge --pretend --verbose mozilla</span>
These are the packages that I would merge, in order:

Calculating dependencies ...done!
[ebuild  N    ] net-www/mozilla-1.5-r1 +java +crypt -ipv6 -gtk2 +ssl +ldap 
+gnome -debug +mozcalendar -mozaccess -mozxmlterm -moznoirc -moznomail
-moznocompose -moznoxft 
</pre></td></tr>
</table>

<p>
<span class="code">emerge</span> isn't the only tool for this job. In fact, we have a tool
dedicated to package information called <span class="code">etcat</span> which resides in the
<span class="code">gentoolkit</span> package. First, install <span class="code">gentoolkit</span>:
</p>

<a name="doc_chap_pre8"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;8: Installing gentoolkit</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge --usepkg gentoolkit</span>
</pre></td></tr>
</table>

<p>
Now run <span class="code">etcat</span> with the <span class="code">uses</span> argument to view the USE-flags of a
certain package. For instance, for the <span class="code">gnumeric</span> package:
</p>

<a name="doc_chap_pre9"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;9: Using etcat to view used USE-flags</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">etcat uses gnumeric</span>
[ Colour Code : <span class="input">set</span> <span class="comment">unset</span> ]
[ Legend      : (U) Col 1 - Current USE flags        ]
[             : (I) Col 2 - Installed With USE flags ]

 U I [ Found these USE variables in : app-office/gnumeric-1.2.0 ]
 - - <span class="comment">libgda</span>  : Adds GNU Data Access (CORBA wrapper) support for gnumeric
 - - <span class="comment">gnomedb</span> : unknown
 + + <span class="input">python</span>  : Adds support/bindings for the Python language
 + + <span class="input">bonobo</span>  : Adds support for gnome-base/bonobo (Gnome CORBA interfaces)
</pre></td></tr>
</table>

<a name="book_part2_chap2"></a><h3>2. Portage and Software</h3>
<a name="book_id2762740_chap1"></a><p class="chaphead">
<span class="chapnum">2.a. </span>Obtaining Package Information</p>
<a name="book_id2762740_chap1_sect1"></a><p class="secthead">The Lord of All Tools: emerge</p>

<p>
The main Portage tool that most users will use is <span class="code">emerge</span>. We have already
used it during the Gentoo installation and in the previous chapter, but we just
briefly explained how to use it. This chapter will elaborate on <span class="code">emerge</span>
and teach you how to use <span class="code">emerge</span> to fix all your software-related needs.
</p>

<p>
<span class="code">emerge</span> is the command used to install, remove, query and maintain
software packages. It is a front-end for <span class="code">ebuild</span>; people interested in
becoming Gentoo professionals will learn how to use <span class="code">ebuild</span> later on. For
now, we will focus on <span class="code">emerge</span> as it has functionality that <span class="code">ebuild</span>
lacks (such as resolving dependencies, searching the Portage tree, etc.).
</p>

<p>
Since <span class="code">emerge</span> is the most important tool for Gentoo users, it has an
extensive manpage you can read by issuing <span class="code">man emerge</span>. You can also view
the in-command help by running <span class="code">emerge --help</span>.
</p>

<a name="doc_chap_pre1"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;1: Retrieving help for emerge</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">man emerge</span>
# <span class="input">emerge --help</span>
</pre></td></tr>
</table>

<a name="book_id2762740_chap1_sect2"></a><p class="secthead">The Portage Tree</p>

<p>
Before we continue describing <span class="code">emerge</span>, let us first take a look at the
Portage Tree. Go to <span class="path">/usr/portage</span> and do a listing of the available
directories. We use <span class="code">ls --classify</span> to list the contents of a
directory as it will show directories with a trailing &quot;/&quot;.
</p>

<a name="doc_chap_pre2"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;2: Viewing the Portage Tree</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">cd /usr/portage; ls --classify</span>
app-admin/       dev-ml/            gnome-libs/     net-print/
app-arch/        dev-perl/          gnome-office/   net-wireless/
app-benchmarks/  dev-php/           header.txt      net-www/
app-cdr/         dev-python/        incoming/       net-zope/
app-crypt/       dev-ruby/          jython/         packages/
app-dicts/       dev-tcltk/         kde-apps/       profiles/
app-doc/         dev-tex/           kde-base/       releases/
app-editors/     dev-util/          kde-i18n/       scripts/
app-emacs/       distfiles/         kde-libs/       sec-policy/
app-emulation/   eclass/            licenses/       skel.ChangeLog
app-games/       experimental/      media-fonts/    skel.ebuild
app-gnustep/     files/             media-gfx/      skel.metadata.xml
app-i18n/        fresco-base/       media-libs/     snapshots/
app-misc/        games-action/      media-plugins/  sys-apps/
app-office/      games-arcade/      media-radio/    sys-build/
app-pda/         games-board/       media-sound/    sys-cluster/
app-portage/     games-emulation/   media-tv/       sys-devel/
app-sci/         games-engines/     media-video/    sys-fs/
app-shells/      games-fps/         metadata/       sys-kernel/
app-text/        games-kids/        net-analyzer/   sys-kmods/
app-vim/         games-misc/        net-apache/     sys-libs/
app-xemacs/      games-mud/         net-dialup/     unix2tcp/
berlin-base/     games-puzzle/      net-dns/        x11-base/
dev-ada/         games-roguelike/   net-firewall/   x11-libs/
dev-cpp/         games-rpg/         net-fs/         x11-misc/
dev-db/          games-server/      net-ftp/        x11-plugins/
dev-dotnet/      games-simulation/  net-im/         x11-terms/
dev-embedded/    games-sports/      net-irc/        x11-themes/
dev-games/       games-strategy/    net-libs/       x11-wm/
dev-haskell/     games-util/        net-mail/       xfce-base/
dev-java/        glep/              net-misc/       xfce-extra/
dev-lang/        gnome-apps/        net-nds/
dev-libs/        gnome-base/        net-news/
dev-lisp/        gnome-extra/       net-p2p/
</pre></td></tr>
</table>

<p>
As you can see, the Portage tree has several subdirectories. Most of them are
the <span class="emphasis">categories</span> in which the Gentoo packages, called <span class="emphasis">ebuilds</span>,
reside. Take a look at, for instance, <span class="path">app-office</span>:
</p>

<a name="doc_chap_pre3"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;3: Viewing a category</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">cd app-office; ls --classify</span>
abiword/     gnotime/   kmymoney2/  ooodi/              plan/     timestamp.x
dia/         gnucash/   koffice/    oooqs/              qhacc/
dia2code/    gnumeric/  lxbank/     openoffice/         sc/
facturalux/  ical/      lyx/        openoffice-bin/     scribus/
gaby/        kbudget/   mdbtools/   openoffice-ximian/  siag/
gnofin/      khacc/     mrproject/  phprojekt/          texmacs/
</pre></td></tr>
</table>

<p>
Inside a category you will find the packages belonging to that category, with a
separate directory for each package. Let us take a look at the <span class="code">openoffice</span>
package:
</p>

<a name="doc_chap_pre4"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;4: Viewing a package</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">cd openoffice; ls --classify</span>
ChangeLog  files/        openoffice-1.0.3-r1.ebuild  openoffice-1.1.0-r2.ebuild
Manifest   metadata.xml  openoffice-1.1.0-r1.ebuild  openoffice-1.1.0.ebuild
</pre></td></tr>
</table>

<p>
Remember that we told you that a Gentoo package is called an ebuild? Well, in
the example directory four of such ebuilds are stored. Their naming is
almost identical: they only differ in the version name.
You are free to view the contents of such a package: they are plain scripts. We
will not discuss it right now as it isn't important to know if you plan on just
using Gentoo.
</p>

<p>
The other files are the <span class="path">ChangeLog</span> (which contains a listing of all
the changes done to the ebuilds), <span class="path">Manifest</span> (which contains the
checksums and filesizes of all the files in the directory) and
<span class="path">metadata.xml</span> (which contains more information about the package,
such as the responsible development group -- called <span class="emphasis">herd</span> -- and a more
extensive description).
</p>

<p>
Inside the <span class="path">files</span> directory you will find extra files, needed by
Portage: digests (checksums and permissions of the files needed by a single
version of the package), patches, example configuration files, etc.
</p>

<a name="doc_chap_pre5"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;5: Viewing the extra files</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">cd files; ls --classify</span>
1.0.3/  digest-openoffice-1.0.3-r1  digest-openoffice-1.1.0-r1
1.1.0/  digest-openoffice-1.1.0     digest-openoffice-1.1.0-r2
# <span class="input">cd 1.1.0; ls --classify</span>
fixed-gcc.patch      ooffice-wrapper-1.3
newstlportfix.patch  openoffice-1.1.0-linux-2.6-fix.patch
no-mozab.patch       openoffice-1.1.0-sparc64-fix.patch
nptl.patch
</pre></td></tr>
</table>

<p>
If you go back to the root of the Portage tree (<span class="path">/usr/portage</span>) you
will notice that there are other, non-category directories too. We will discuss
those later in this chapter. 
</p>

<a name="book_id2762740_chap1_sect3"></a><p class="secthead">Search for a Package</p>

<p>
If you are new to Linux or Gentoo, you might not know what tool you need for
what job. To facilitate searching, <span class="code">emerge</span> provides you with a way to
search through the available packages on your system. There are two ways you can
search through packages: by <span class="emphasis">name</span>, or by <span class="emphasis">name</span> and 
<span class="emphasis">description</span>.
</p>

<p>
To search through the Portage tree by name, use <span class="code">emerge search</span>. For
instance, to find out more about <span class="code">mozilla</span>:
</p>

<a name="doc_chap_pre6"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;6: Showing information about mozilla</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge search mozilla</span>
Searching...   
[ Results for search key : mozilla ]
[ Applications found : 5 ]
<span class="comment">(Some output removed to improve readability)</span>
*  net-www/mozilla
      Latest version available: 1.5-r1
      Latest version installed: 1.4-r3
      Size of downloaded files: 29,153 kB
      Homepage:    http://www.mozilla.org
      Description: The Mozilla Web Browser

*  net-www/mozilla-firebird
      Latest version available: 0.7
      Latest version installed: [ Not Installed ]
      Size of downloaded files: 37,850 kB
      Homepage:    http://www.mozilla.org/projects/firebird/
      Description: The Mozilla Firebird Web Browser
<span class="comment">(...)</span>
</pre></td></tr>
</table>

<p>
If you want to include a search through the descriptions too, use the
<span class="code">--searchdesc</span> argument:
</p>

<a name="doc_chap_pre7"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;7: Search through the descriptions too</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge --searchdesc mozilla</span>
Searching...   
[ Results for search key : mozilla ]
[ Applications found : 10 ]
<span class="comment">(Some output removed to improve readability)</span>
*  dev-libs/nss-3.8
      Latest version available: 3.8
      Latest version installed: 3.8
      Size of downloaded files:  2,782 kB
      Homepage:    http://www.mozilla.org/projects/security/pki/nss/
      Description: Mozilla's Netscape Security Services Library that implements PKI support
</pre></td></tr>
</table>

<p>
As you can see, the output of <span class="code">emerge</span> informs you about the category and
name of the package, the available version, the currently installed version, 
the size of the downloaded files, the homepage and the small description.
</p>

<p>
You see something new? Yes, <span class="emphasis">downloaded files</span>. When you tell Portage to
install a package, it of course needs to have the necessary sources (or
precompiled packages) available. It therefore checks the contents of
<span class="path">/usr/portage/distfiles</span> (for source code) or
<span class="path">/usr/portage/packages/All</span> (for precompiled packages) to see if the
necessary files are already available. If not, it downloads the necessary files
and places them in those directories.
</p>



<a name="book_id2762740_chap1_sect4"></a><p class="secthead">Viewing the ChangeLog</p>

<p>
While browsing through the Portage Tree, you saw that there was a ChangeLog for
each package. You can view the ChangeLog entries between the available version
and the installed version with <span class="code">emerge</span> too. Use the
<span class="code">--pretend --changelog</span> (<span class="code">-pl</span> in short) options. As an example we
will view the ChangeLog entries for <span class="code">gnumeric</span>:
</p>

<a name="doc_chap_pre8"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;8: Viewing the ChangeLog entries for gnumeric</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge --pretend --changelog gnumeric</span>
<span class="comment">(Some output removed to improve readability)</span>
*gnumeric-1.2.2

  27 Nov 2003; foser &lt;foser@gentoo.org&gt; gnumeric-1.2.2.ebuild :
  New release, requested in #34492
  updated deps

  12 Nov 2003; Jason Wever &lt;weeve@gentoo.org&gt; gnumeric-1.2.0.ebuild:
  Marked stable on sparc, fixes bug #32405.

  14 Oct 2003; Jason Wever &lt;weeve@gentoo.org&gt; gnumeric-1.0.8.ebuild:
  Added ~sparc keyword.  Fixes bug #31150.
</pre></td></tr>
</table>

<a name="book_id2762740_chap2"></a><p class="chaphead">
<span class="chapnum">2.b. </span>Updating Portage</p>
<a name="book_id2762740_chap2_sect1"></a><p class="secthead">Introduction</p>

<p>
Searching through Portage is nice, but if you don't update your Portage Tree
regularly, you will be stuck with the packages and versions available on your
system. This means that your system will get outdated pretty soon and that
you will be missing bugfixes and remedies for possible security problems.
</p>

<p>
There are several ways to update your Portage Tree. The most popular method is
by using one of our <a href="/main/en/mirrors.xml">rsync mirrors</a>.
Another one is by using a Portage snapshot (in case a firewall or unavailability
of a network prohibits the use of the rsync server).
</p>

<a name="book_id2762740_chap2_sect2"></a><p class="secthead">Selecting a Mirror for rsync</p>

<p>
It is adviseable to first select a fast <a href="/main/en/mirrors.xml">mirror</a> close to you. You can do this manually
(by setting the <span class="code">SYNC</span> variable in <span class="path">/etc/make.conf</span>) or use
<span class="code">mirrorselect</span> to do this for you automatically. As the <span class="code">SYNC</span>
variable will be discussed later on, we will focus on using <span class="code">mirrorselect</span>.
First install <span class="code">mirrorselect</span> by emerging it:
</p>

<a name="doc_chap_pre9"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;9: Installing mirrorselect</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge --usepkg mirrorselect</span>
</pre></td></tr>
</table>

<p>
Now run <span class="code">mirrorselect</span> to automatically select mirrors for you (it will
also setup Portage to use a mirror for the source code):
</p>

<a name="doc_chap_pre10"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;10: Running mirrorselect</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">mirrorselect -a -s3</span>
</pre></td></tr>
</table>

<a name="book_id2762740_chap2_sect3"></a><p class="secthead">Updating Portage</p>

<p>
To update Portage using rsync, simply run <span class="code">emerge sync</span>:
</p>

<a name="doc_chap_pre11"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;11: Updating Portage using emerge sync</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge sync</span>
</pre></td></tr>
</table>

<p>
If this fails (due to network problems, or a firewall), you can try using
<span class="code">emerge-webrsync</span> which will download a Portage Tree snapshot using
<span class="code">wget</span>. This also means that you can use proxies if you want. We discussed
how to setup your system to use proxies during the Gentoo installation.
</p>

<a name="doc_chap_pre12"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;12: Updating Portage using emerge-webrsync</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge-webrsync</span>
</pre></td></tr>
</table>

<a name="book_id2762740_chap3"></a><p class="chaphead">
<span class="chapnum">2.c. </span>Maintaining Software</p>
<a name="book_id2762740_chap3_sect1"></a><p class="secthead">Building or Prebuilt?</p>

<p>
Gentoo provides ebuilds, the Gentoo packages if you like. But when you want to
install such an ebuild, you can choose between <span class="emphasis">building</span> the package and
using a <span class="emphasis">prebuilt</span> package. But what are the advantages/disadvantages of
both approaches, and can they be used next to each other?
</p>

<p>
As you probably have guessed, building packages takes a lot of time (especially
if you have little resources or want to build big packages, such as <a href="http://www.kde.org">KDE</a>, <a href="http://www.openoffice.org">OpenOffice.org</a>, etc.). By building the
package, you can use the <span class="code">USE</span> setting to tweak the package to your system.
Of course, you can also define high optimization options (in the <span class="code">CFLAGS</span> 
and <span class="code">CXXFLAGS</span> variables) to compile the package with.
</p>

<p>
Using prebuilt packages improves the installation time (as no more compilation
is needed), but you will lose the advantages of the <span class="code">USE</span> setting and the
<span class="code">CFLAGS</span> &amp; <span class="code">CXXFLAGS</span> variables.
</p>

<p>
As previously stated, prebuilt packages are stored in the
<span class="path">/usr/portage/packages/All</span> directory, while the source code of the
packages is placed in <span class="path">/usr/portage/distfiles</span>. If you have finished
installing a package you can remove the package or source code from the
respective directory. However, you might want to keep the package/source code of
the latest version, just in case you want to reinstall the package (so you don't
have to redownload it).
</p>

<a name="book_id2762740_chap3_sect2"></a><p class="secthead">Installing Software from Sources</p>

<p>
Okay, enough talking, let's cut to the chase. To install a package, you will use
the <span class="code">emerge</span> command. If you don't want to use any prebuilt packages, you
can just use <span class="code">emerge &lt;package-name&gt;</span> or <span class="code">emerge
&lt;category&gt;/&lt;package-name&gt;</span>. As an example we'll install
<span class="code">gnumeric</span>:
</p>

<a name="doc_chap_pre13"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;13: Building gnumeric</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge gnumeric</span>
</pre></td></tr>
</table>

<p>
This will download the source code for you and unpacks, compiles and installs 
the package on your system. It will also do the same for all the dependencies. 
If you want to see what dependencies will be installed with it, use the
<span class="code">--pretend</span> option (<span class="code">-p</span> in short):
</p>

<a name="doc_chap_pre14"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;14: Pretending to build gnumeric</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge --pretend gnumeric</span>
</pre></td></tr>
</table>

<p>
If you want to download the source code of the package and its dependencies, 
but don't want to build the package, use the <span class="code">--fetchonly</span> option 
(<span class="code">-f</span> in short):
</p>

<a name="doc_chap_pre15"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;15: Fetching sources for gnumeric</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge --fetchonly gnumeric</span>
</pre></td></tr>
</table>

<p>
If you want to see where <span class="code">emerge</span> downloads the sources from, combine the
<span class="code">--fetchonly</span> and <span class="code">--pretend</span> options:
</p>

<a name="doc_chap_pre16"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;16: Showing URLs of the sources for gnumeric</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge --fetchonly --pretend gnumeric</span>
</pre></td></tr>
</table>

<p>
You can also opt to install a specific version of a package.
For instance, if you want to install a gnumeric version older than 1.2 -- for
any reason whatsoever :) you would type:
</p>

<a name="doc_chap_pre17"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;17: Installing a specific gnumeric version</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge &quot;&lt;gnumeric-1.2&quot;</span>
</pre></td></tr>
</table>

<p>
Other possibilities are of course &quot;&gt;&quot; (later version) and &quot;=&quot; (the exact
version).
</p>

<a name="book_id2762740_chap3_sect3"></a><p class="secthead">Installing Prebuilt Packages</p>

<p>
When you want to install a prebuilt package, you should use the <span class="code">--usepkg</span>
option (<span class="code">-k</span> in short). This will use the binary package available in
<span class="path">/usr/portage/packages/All</span> <span class="emphasis">if</span> the package and the version of
the application you want to install match.
</p>

<a name="doc_chap_pre18"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;18: Installing a prebuilt package for gnumeric</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge --usepkg gnumeric</span>
</pre></td></tr>
</table>

<p>
If you want to use the binary package, even if the versions don't match, use
<span class="code">--usepkgonly</span> (<span class="code">-K</span> in short).
</p>

<a name="doc_chap_pre19"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;19: Installing the prebuilt package for gnumeric</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge --usepkgonly gnumeric</span>
</pre></td></tr>
</table>

<p>
If you don't have the prebuilt package on your system yet, you can have
<span class="code">emerge</span> download it from a mirror, defined in the <span class="code">PORTAGE_BINHOST</span>
variable declared in <span class="path">/etc/make.conf</span>.
</p>

<p>
To download the binary package in case this package doesn't exist on
your system already, use <span class="code">--getbinpkg</span> (<span class="code">-g</span> in short):
</p>

<a name="doc_chap_pre20"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;20: Downloading and installing a prebuilt package for gnumeric</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge --getbinpkg gnumeric</span>
</pre></td></tr>
</table>

<p>
This will download the package and the package-related information for you and 
install it on your system, together with the dependencies. If you want to see 
what dependencies will be installed with it, use the <span class="code">--pretend</span> option 
(<span class="code">-p</span> in short):
</p>

<a name="doc_chap_pre21"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;21: Pretending to download the prebuilt packages for gnumeric</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge --getbinpkg --pretend gnumeric</span>
</pre></td></tr>
</table>

<p>
You can also opt to download the prebuilt package (and the package-related
information) <span class="emphasis">without</span> checking the information on your local system and
<span class="emphasis">without</span> using the prebuilt package already on your system (if
applicable), use the <span class="code">--getbinpkgonly</span> option (<span class="code">-G</span> in short):
</p>

<a name="doc_chap_pre22"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;22: Installing a prebuilt package without using local information</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge --getbinpkgonly gnumeric</span>
</pre></td></tr>
</table>

<p>
You can also opt to install a specific version of a package.
For instance, if you want to install a gnumeric version older than 1.2 -- for
any reason whatsoever :) you would type:
</p>

<a name="doc_chap_pre23"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;23: Installing a specific gnumeric version</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge --usepkg &quot;&lt;gnumeric-1.2&quot;</span>
</pre></td></tr>
</table>

<p>
Other possibilities are of course &quot;&gt;&quot; (later version) and &quot;=&quot; (the exact
version).
</p>


<a name="book_id2762740_chap3_sect4"></a><p class="secthead">Working with Dependencies</p>

<p>
Portage has an extensive support for dependency handling. Although you usually
don't need to even think about this (as dependencies are automatically handled
by Portage) some users might want to know how you can work with <span class="code">emerge</span>
and dependencies.
</p>

<p>
For instance, if you want Portage to pretend that none of the dependencies of a
package are installed, you can use <span class="code">--emptytree</span> (<span class="code">-e</span> in short). This
is useful with <span class="code">--pretend</span> to display a complete tree of dependencies for
any particular package. Without <span class="code">--pretend</span>, <span class="code">emerge</span> will (re)compile
all listed packages. However, <span class="code">glibc</span> will <span class="emphasis">not</span> be listed as
dependency for safety reasons. 
</p>

<a name="doc_chap_pre24"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;24: Show all dependencies of gnumeric</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge --emptytree --pretend gnumeric</span>
</pre></td></tr>
</table>

<p>
Another argument is <span class="code">--nodeps</span>, which will ask Portage to try install the
given package without taking care of the dependencies. It is trivial that this
can lead to failures.
</p>

<a name="doc_chap_pre25"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;25: Installing gnumeric without taking care of the dependencies</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge --nodeps gnumeric</span>
</pre></td></tr>
</table>

<p>
The opposite of <span class="code">--nodeps</span> is <span class="code">--onlydeps</span>, which will have Portage
install all dependencies of a given package, but not the package itself:
</p>

<a name="doc_chap_pre26"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;26: Installing the dependencies of gnumeric</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge --onlydeps gnumeric</span>
</pre></td></tr>
</table>

<a name="book_id2762740_chap3_sect5"></a><p class="secthead">Updating your System</p>

<p>
Portage knows two special tags to denote a set of software packages:
<span class="emphasis">system</span> and <span class="emphasis">world</span>. You have already seen the former while 
installing Gentoo if you didn't use a <span class="emphasis">stage3</span> installation. To refresh
things: <span class="emphasis">system</span> is the collection of <span class="emphasis">core</span> packages, necessary to
have a working Gentoo system.
</p>

<p>
The <span class="emphasis">world</span> tag consists of all software you have installed yourself on
your system plus the <span class="emphasis">system</span> information. In other words, every time you
emerge a package using <span class="code">emerge &lt;package-name&gt;</span>, the
<span class="code">&lt;package-name&gt;</span> is registered in the <span class="emphasis">world</span> file
(<span class="path">/var/cache/edb/world</span>). Dependencies are <span class="emphasis">not</span> part of the
<span class="emphasis">world</span> file, but we will get to that later.
</p>

<p>
If you want to update the system packages, use the <span class="code">--update</span> option
(<span class="code">-u</span> in short):
</p>

<a name="doc_chap_pre27"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;27: Updating the system packages</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge --update system</span>
</pre></td></tr>
</table>

<p>
An identical approach can be used for the world packages:
</p>

<a name="doc_chap_pre28"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;28: Updating your entire system</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge --update world</span>
</pre></td></tr>
</table>

<p>
Again, if you want to see what <span class="code">emerge</span> wants to update, use the
<span class="code">--pretend</span> option together with the <span class="code">--update</span> option:
</p>

<a name="doc_chap_pre29"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;29: Pretending to update your entire system</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge --pretend --update world</span>
<span class="comment">(Some output removed to improve readability)</span>
[ebuild     U ] net-misc/wget-1.9-r1 [1.9] 
[ebuild     UD] media-video/dvdauthor-0.5.0 [0.5.3] 
[ebuild     U ] net-analyzer/ethereal-0.9.16 [0.9.14] 
</pre></td></tr>
</table>

<p>
Right next to the word &quot;ebuild&quot; you will notice a letter (or combination of
letters) which gives you more information about the package:
</p>

<ul>
  <li>
    <span class="emphasis">B</span> (blocks) The package listed to the left is blocking the emerge of
    the package listed to the right
  </li>
  <li>
    <span class="emphasis">N</span> (new) The package is new to your system and will be emerged for the
    first time
  </li>
  <li>
    <span class="emphasis">R</span> (reemerge) The package isn't new, but needs to be reemerged
  </li>
  <li>
    <span class="emphasis">F</span> (fetch) The package requires that you download the source code
    manually (for instance due to licencing issues)
  </li>
  <li>
    <span class="emphasis">U</span> (update) The package already exists on your system but will be
    upgraded
  </li>
  <li>
    <span class="emphasis">UD</span> (downgrade) The package already exists on your system but will be
    downgraded
  </li>
  <li>
    <span class="emphasis">U-</span> (slot warning) The package you have installed on your system
    is listed as a package that can not coexist with a different version, but
    your update does. The update will be installed and the older version will be
    removed.
  </li>
</ul>

<p>
In certain cases, an update may mean a downgrade (i.e. install an older version
instead of a newer version). If you don't want this to happen, use the
<span class="code">--upgradeonly</span> option (<span class="code">-U</span> in short):
</p>

<a name="doc_chap_pre30"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;30: Upgrading your entire system</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge --update --upgradeonly world</span>
</pre></td></tr>
</table>

<p>
Of course, we are talking here about <span class="emphasis">system</span> and <span class="emphasis">world</span>, but you can
perform the same actions for individual software packages.
</p>

<a name="book_id2762740_chap3_sect6"></a><p class="secthead">Removing Software</p>

<p>
If you want to remove software from your system, you can use the <span class="code">unmerge</span>
option (<span class="code">-C</span> - capital C - in short):
</p>

<a name="doc_chap_pre31"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;31: Uninstalling software</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge unmerge gnumeric</span>
</pre></td></tr>
</table>

<p>
If you want to test a removal (but not perform it), you can use <span class="code">--pretend</span>
again:
</p>

<a name="doc_chap_pre32"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;32: Pretending to uninstall software</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge --pretend unmerge gnumeric</span>
</pre></td></tr>
</table>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#ffbbbb"><p class="note">
<b>Warning: </b>
Portage doesn't verify if a package is a dependency for another
installed package. It also doesn't warn you if the package is part of
<span class="emphasis">system</span>, i.e. a core application necessary for the correct functioning of
your system!
</p></td></tr></table>

<p>
Once the unmerge begins you will see a long list of filenames belonging to the
package. Some of these filenames will have a flag displayed to the
left of the filename. The flags <span class="code">!mtime</span>, <span class="code">!empty</span>, and <span class="code">cfgpro</span>
specify reasons why certain files are not being removed while the package is. 
Files listed without any of these three flags are removed from the 
filesystem successfully. The three flags specify the following reasons:
</p>

<ul>
  <li>
    <span class="code">!mtime</span> : The listed file has been changed since it was installed,
    probably by you or some tool
  </li>
  <li>
    <span class="code">!empty</span> : The listed directory is not empty
  </li>
  <li>
    <span class="code">cfgpro</span> : This file is located inside a protected directory and will
    not be touched for safety
  </li>
</ul>

<a name="book_id2762740_chap4"></a><p class="chaphead">
<span class="chapnum">2.d. </span>Software Availability</p>
<a name="book_id2762740_chap4_sect1"></a><p class="secthead">ARCH or not?</p>

<p>
Gentoo places its packages in two possible stadia called <span class="emphasis">ARCH</span> and
<span class="emphasis">~ARCH</span>. Don't take this literally: the stadia depend on the architecture
you are using. In other words, for x86-based systems you have <span class="emphasis">x86</span> and
<span class="emphasis">~x86</span>, for ppc-based systems you have <span class="emphasis">ppc</span> and <span class="emphasis">~ppc</span> etc.
</p>

<p>
The <span class="emphasis">~ARCH</span> stadium means that the package works for the developer in
charge of the package, but that the package hasn't been tested thoroughly enough
by the community to be placed in <span class="emphasis">ARCH</span>. <span class="emphasis">~ARCH</span> packages usually go
to <span class="emphasis">ARCH</span> after being bugfree for a sufficient amount of time.
</p>

<p>
Your system will use <span class="emphasis">ARCH</span> packages per default. If you want to live on
the edge, don't mind having a broken package once in a while, know how to deal
with a broken system and you like submitting bugreports to <a href="http://bugs.gentoo.org">bugs.gentoo.org</a>, then you can opt to use
<span class="emphasis">~ARCH</span> packages. To &quot;move&quot; your system to a <span class="emphasis">~ARCH</span>-using system,
edit the <span class="code">ACCEPT_KEYWORDS</span> variable in <span class="path">/etc/make.conf</span> so that
it reads <span class="emphasis">~ARCH</span> (again: for x86-based systems: <span class="emphasis">~x86</span>, etc.).
</p>

<p>
Note though that it is far from trivial (if even impossible) to go back to 
<span class="emphasis">ARCH</span> from <span class="emphasis">~ARCH</span>. 
</p>

<p>
If you want to update your system now, you will notice that <span class="emphasis">a lot</span> of
packages will be updated!
</p>

<a name="book_id2762740_chap4_sect2"></a><p class="secthead">Masked Packages</p>

<p>
When you want to install a package, you might come across the following message:
</p>

<a name="doc_chap_pre33"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;33: Message about masked packages</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Calculating dependencies   
!!! <span class="comment">all ebuilds that could satisfy </span>&lt;your package&gt;<span class="comment"> have been masked.</span>
</pre></td></tr>
</table>

<p>
A package can be masked due to two reasons: 
</p>

<ol>
  <li>The package is in <span class="emphasis">~ARCH</span> while you use <span class="emphasis">ARCH</span>
</li>
  <li>The package is hard-masked explicitly</li>
</ol>

<p>
If the package is masked because of the first reason, and you <span class="emphasis">really</span> want
to install it (knowing that there <span class="emphasis">is</span> a reason why it isn't available in
<span class="emphasis">ARCH</span>), you can temporarily accept <span class="emphasis">~ARCH</span> packages:
</p>

<a name="doc_chap_pre34"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;34: Temporarily accepting ~ARCH packages</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">ACCEPT_KEYWORDS=&quot;~x86&quot; emerge gnumeric</span>
</pre></td></tr>
</table>

<p>
A package is hardmasked if it is listed in
<span class="path">/usr/portage/profiles/package.mask</span>. If you read this file, you
will also read the reason why the package is hardmasked (it is usually added as
a comment). If you want to install the package nevertheless (despite all the
possible warnings we could ever throw at your head about &quot;breaking your system&quot;,
&quot;breaks other packages&quot;, or &quot;badly needs testing&quot;), create the
<span class="path">/etc/portage/package.unmask</span> file and list the package in it (use
the same format as is used in <span class="path">/usr/portage/profiles/package.mask</span>).
</p>

<p>
Do <span class="emphasis">not</span> alter the <span class="path">/usr/portage/profiles/package.mask</span> file as
all changes are undone the next time you update your Portage tree. If you want
to hardmask a package create <span class="path">/etc/portage/package.mask</span> and list the
package in it (use the same format as mentioned above).
</p>



<a name="book_id2762740_chap4_sect3"></a><p class="secthead">Blocked Packages</p>

<p>
You have a situation when you receive the following error on your screen:
</p>

<a name="doc_chap_pre35"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;35: Blocking package</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
[blocks B     ] gnome-base/bonobo-activation (from pkg gnome-base/libbonobo-2.4.0) 
</pre></td></tr>
</table>

<p>
In the above example, the package <span class="code">bonobo-activation</span> is blocking the
emerge of <span class="code">libbonobo</span>. To resolve this issue, remove the
<span class="code">bonobo-activation</span> package and continue:
</p>

<a name="doc_chap_pre36"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;36: Resolving a blocking situation</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge unmerge bonobo-activation</span>
</pre></td></tr>
</table>

<a name="book_part2_chap3"></a><h3>3. Portage Features</h3>
<a name="book_id2753738_chap1"></a><p class="chaphead">
<span class="chapnum">3.a. </span>DistCC</p>
<a name="book_id2753738_chap1_sect1"></a><p class="secthead">What is DistCC?</p>

<p>
<span class="code">distcc</span> is a program to distribute compilations across several, not 
necessarily identical, machines on a network. The <span class="code">distcc</span> client sends all
necessary information to the available DistCC servers (running <span class="code">distccd</span>)
so they can compile pieces of source code for the client. The net result is a
faster compilation time.
</p>

<p>
You can find more elaborate information about <span class="code">distcc</span> (and information on
how to have it work with Gentoo) in our <a href="/doc/en/distcc.xml">Gentoo
Distcc Documentation</a>.
</p>

<a name="book_id2753738_chap1_sect2"></a><p class="secthead">Installing DistCC</p>

<p>
Distcc ships with a graphical monitor to monitor tasks that your computer is
sending away for compilation. If you use Gnome then put 'gnome' in your
<span class="code">USE</span> setting. However, if you don't use Gnome and would still like to have
the monitor then you should put 'gtk' in your <span class="code">USE</span> setting.
</p>

<p>
Installing distcc is, as is with all software available through Gentoo's
Portage, extremely easy:
</p>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#bbffbb"><p class="note">
<b>Note: </b>
From now on, as you now know how to install binary packages if you want, we will
omit the <span class="code">--usepkg</span> option throughout the rest of the Gentoo Handbook.
</p></td></tr></table>

<a name="doc_chap_pre1"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;1: Installing Distcc</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge distcc</span>
</pre></td></tr>
</table>

<a name="book_id2753738_chap1_sect3"></a><p class="secthead">Activating Portage Support</p>

<p>
Well, if installation is easy, the rest should be easy too :) So let us quickly
activate the Portage support for <span class="code">distcc</span>.
</p>

<p>
First, open <span class="path">/etc/make.conf</span> and edit the <span class="code">FEATURES</span> variable so
it contains the <span class="code">distcc</span> keyword. Next, edit the <span class="code">MAKEOPTS</span> variable
so it reads <span class="code">-jX</span> with <span class="code">X</span> the number of CPUs that run <span class="code">distccd</span>
(including the current host) plus one:
</p>

<a name="doc_chap_pre2"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;2: Possible MAKEOPTS setting in /etc/make.conf</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
<span class="comment"># Suppose you have 2 single-CPU distccd hosts excluding this host:</span>
MAKEOPTS=&quot;-j4&quot;
</pre></td></tr>
</table>

<p>
Now, still inside <span class="path">/etc/make.conf</span>, uncomment the
<span class="code">PORTAGE_TMPDIR</span> line and add the following line at the end
of the file:
</p>

<a name="doc_chap_pre3"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;3: Add an extra, distcc-specific variable to /etc/make.conf</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
<span class="comment"># Don't forget to uncomment the PORTAGE_TMPDIR variable</span>
DISTCC_DIR=${PORTAGE_TMPDIR}/portage/.distcc
</pre></td></tr>
</table>

<p>
Now run <span class="code">distcc-config</span> and enter the list of available DistCC servers. For
a simple example we assume that the available DistCC servers are
<span class="code">192.168.1.102</span> (the current host), <span class="code">192.168.1.103</span> and 
<span class="code">192.168.1.104</span> (two &quot;remote&quot; hosts):
</p>

<a name="doc_chap_pre4"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;4: Configuring distcc to use three available DistCC servers</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">distcc-config --set-hosts &quot;192.168.1.102 192.168.1.103 192.168.1.104&quot;</span>
</pre></td></tr>
</table>

<p>
Of course, don't forget to run the <span class="code">distccd</span> daemon too:
</p>

<a name="doc_chap_pre5"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;5: Starting the distcc daemon</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">/etc/init.d/distccd start</span>
</pre></td></tr>
</table>

<p>
Congratulations, your system will now use distributed compiling! For more
in-depth information about DistCC and Gentoo, please read our <a href="/doc/en/distcc.xml">Gentoo DistCC Documentation</a>.
</p>

<a name="book_id2753738_chap2"></a><p class="chaphead">
<span class="chapnum">3.b. </span>ccache</p>
<a name="book_id2753738_chap2_sect1"></a><p class="secthead">What is ccache?</p>

<p>
<span class="code">ccache</span> is a fast compiler cache. When you compile a program, it will
cache intermediate results so that, when you ever recompile the same program,
the compilation time is greatly reduced. In common compilations this can result
in 5 to 10 times faster compilation times.
</p>

<p>
If you are interested in the ins and outs of <span class="code">ccache</span>, please visit the
<a href="http://ccache.samba.org">ccache homepage</a>.
</p>

<a name="book_id2753738_chap2_sect2"></a><p class="secthead">Installing ccache</p>

<p>
Installing <span class="code">ccache</span> with Gentoo is a breeze. Just emerge it and you're done
:)
</p>

<a name="doc_chap_pre6"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;6: Installing ccache</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge ccache</span>
</pre></td></tr>
</table>

<a name="book_id2753738_chap2_sect3"></a><p class="secthead">Activating Portage Support</p>

<p>
First, edit <span class="path">/etc/make.conf</span> and alter the <span class="code">FEATURES</span> variable
so that it contains the <span class="code">ccache</span> keyword:
</p>

<a name="doc_chap_pre7"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;7: Editing FEATURES in /etc/make.conf</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
FEATURES=&quot;ccache&quot;
</pre></td></tr>
</table>

<p>
Next, edit (or create) the <span class="code">CCACHE_SIZE</span> variable (also in
<span class="path">/etc/make.conf</span>) so it contains the amount of diskspace you want to
sacrifice for <span class="code">ccache</span>:
</p>

<a name="doc_chap_pre8"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;8: Editing CCACHE_SIZE in /etc/make.conf</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
CCACHE_SIZE=&quot;2G&quot;
</pre></td></tr>
</table>

<p>
As of now, Portage will use <span class="code">ccache</span> to speed up compilations where
possible. If you are uncertain that <span class="code">ccache</span> works, you can run <span class="code">ccache
-s</span> to view the <span class="code">ccache</span> statistics:
</p>

<a name="doc_chap_pre9"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;9: Viewing ccache statistics</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">ccache -s</span>
</pre></td></tr>
</table>

<a name="book_id2753738_chap3"></a><p class="chaphead">
<span class="chapnum">3.c. </span>Binary Packages</p>
<a name="book_id2753738_chap3_sect1"></a><p class="secthead">Creating binary packages</p>

<p>
We have already discussed how to work with prebuilt packages, but how do you
create your own prebuilt packages?
</p>

<p>
If the package is already installed, you can use the <span class="code">quickpkg</span> command
which will make a tarball of the installed files. This is very interesting for
backup purposes!
</p>

<a name="doc_chap_pre10"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;10: Using quickpkg</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">quickpkg gnumeric</span>
</pre></td></tr>
</table>

<p>
If the package isn't installed yet, you can install it using <span class="code">emerge</span> and
ask to build a binary package too. <span class="code">emerge</span> uses the <span class="code">--buildpkg</span>
option (<span class="code">-b</span> in short) for this:
</p>

<a name="doc_chap_pre11"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;11: Installing gnumeric and building binary packages too</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge --buildpkg gnumeric</span>
</pre></td></tr>
</table>

<p>
If you want Portage to do this by default, you should set the <span class="code">buildpkg</span>
keyword in the <span class="code">FEATURES</span> variable declared in <span class="path">/etc/make.conf</span>.
</p>

<a name="doc_chap_pre12"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;12: Automatically creating binary packages</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
FEATURES=&quot;buildpkg&quot;
</pre></td></tr>
</table>

<p>
If you don't want to install the software, but only build the package, you can
use the <span class="code">--buildpkgonly</span> option (<span class="code">-B</span> in short):
</p>

<a name="doc_chap_pre13"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;13: Building a binary package for gnumeric</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge --buildpkgonly gnumeric</span>
</pre></td></tr>
</table>

<a name="book_id2753738_chap4"></a><p class="chaphead">
<span class="chapnum">3.d. </span>Security Related Features</p>
<a name="book_id2753738_chap4_sect1"></a><p class="secthead">Sandbox</p>

<p>
While building and installing packages, Portage uses a <span class="emphasis">sandbox</span> to protect
your live system. This means that, as long as the package isn't installed on
your system, the package cannot touch any file outside the sandbox. This 
ensures that Portage knows what files are created and modified by a package.
</p>

<p>
When the package compilation is finished, Portage will &quot;preinstall&quot; the package
in the sandbox, registering what files are placed and where. It will then move
those files from the sandbox on your live system.
</p>

<a name="book_id2753738_chap4_sect2"></a><p class="secthead">User Privileges</p>

<p>
Portage also supports building packages as non-root user (more precisely, as
user &quot;portage&quot;, group &quot;portage&quot;). This improves the security during the
build process. You can opt to use user privileges with or without sandboxing. Of
course, it goes without saying that user privileges and sandboxing is the most
preferred method :)
</p>

<a name="book_id2753738_chap4_sect3"></a><p class="secthead">Activating sandbox and/or userpriv</p>

<p>
Portage will use <span class="code">sandbox</span> per default. If you want <span class="code">userpriv</span>, you
should add it to the <span class="code">FEATURES</span> variable. Note that activating
<span class="code">userpriv</span> will drop <span class="code">sandbox</span> support, unless you also activate
<span class="code">usersandbox</span>:
</p>

<a name="doc_chap_pre14"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;14: Activating userpriv and usersandbox</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
FEATURES=&quot;userpriv usersandbox&quot;
</pre></td></tr>
</table>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#ffbbbb"><p class="note">
<b>Warning: </b>
Do <span class="emphasis">not</span> remove <span class="code">sandbox</span> from the <span class="code">FEATURES</span> variable!
</p></td></tr></table>

<a name="book_id2753738_chap4_sect4"></a><p class="secthead">Strict Checking</p>

<p>
Portage can be asked to react strongly to possibly dangerous conditions (such as
missing or incorrect Manifest files). To activate this strict checking, add the
<span class="code">strict</span> keyword to the <span class="code">FEATURES</span> variable:
</p>

<a name="doc_chap_pre15"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;15: Activating strict checking</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
FEATURES=&quot;strict&quot;
</pre></td></tr>
</table>

<a name="book_id2753738_chap4_sect5"></a><p class="secthead">Smart File System Permissions</p>

<p>
Portage can be told to automatically deal with potentially dangerous file
permissions that could pose a security risk. It does this by removing the
&quot;group&quot; and &quot;other&quot; readable bits on setuid files and removing the &quot;other&quot;
readable bit on setgid files in the pre install phase.  To activate the
smart file permissions, add the <span class="code">sfperms</span> keyword to the
<span class="code">FEATURES</span> variable:
</p>

<a name="doc_chap_pre16"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;16: Activating smart file system permissions</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
FEATURES=&quot;sfperms&quot;
</pre></td></tr>
</table>

<a name="book_id2753738_chap5"></a><p class="chaphead">
<span class="chapnum">3.e. </span>Other Features</p>
<a name="book_id2753738_chap5_sect1"></a><p class="secthead">Portage Help</p>

<p>
There are several other keywords you can place in the <span class="code">FEATURES</span> variable.
Most of them are targeted towards developers and less interesting for the casual
user. If you are interested in learning more about these features (or Portage
generally), don't forget to read the <span class="path">make.conf</span> manpage we provide.
</p>

<a name="doc_chap_pre17"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;17: More Portage-related information</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">man make.conf</span>
</pre></td></tr>
</table>

<a name="book_part2_chap4"></a><h3>4. Controlling Portage Behaviour</h3>
<a name="book_id2770739_chap1"></a><p class="chaphead">
<span class="chapnum">4.a. </span>Configuration File Protection</p>
<a name="book_id2770739_chap1_sect1"></a><p class="secthead">Protecting?</p>

<p>
Portage knows the concept of &quot;protected files&quot;. This means that, when you update
software, it will not immediately overwrite certain files with newer versions,
but inform you that a newer version exists. This is of course very usefull for
configuration files (the files that reside in <span class="path">/etc</span>).
</p>

<p>
Instead of overwriting such files, it will create a new file called
<span class="path">._cfg0000_&lt;name&gt;</span> with <span class="path">&lt;name&gt;</span> being the 
original file name. It is then up to the user to merge the necessary differences
in the existing file. He can use the <span class="code">etc-update</span> command to ease this
operation. We will talk about <span class="code">etc-update</span> later.
</p>

<a name="book_id2770739_chap1_sect2"></a><p class="secthead">Declaring CONFIG_PROTECT</p>

<p>
Portage cannot protect on a file per file basis. Instead it protects entire
directories. The <span class="code">CONFIG_PROTECT</span> variable lists all protected directories.
All subdirectories of the listed directories are protected too. The
<span class="code">CONFIG_PROTECT</span> variable is defined in <span class="path">/etc/make.globals</span>,
but if you want to change it, you should declare it in
<span class="path">/etc/make.conf</span> (to keep things consistent
<span class="path">/etc/make.conf</span> is used for all Portage configuration).
</p>

<a name="doc_chap_pre1"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;1: An example CONFIG_PROTECT setting</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
CONFIG_PROTECT=&quot;/etc /usr/share/config /usr/kde/3.1/share/config&quot;
</pre></td></tr>
</table>

<p>
If you want a certain directory protected, but not all of its subdirectories,
you can &quot;unprotect&quot; these directories by listing them in the
<span class="code">CONFIG_PROTECT_MASK</span> variable, which also has a default value defined in
<span class="path">/etc/make.globals</span> but should be altered by declaring it in
<span class="path">/etc/make.conf</span>:
</p>

<a name="doc_chap_pre2"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;2: An example CONFIG_PROTECT_MASK setting</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
CONFIG_PROTECT_MASK=&quot;/etc/init.d&quot;
</pre></td></tr>
</table>

<p>
More information about the Configuration File Protection can be found in
<span class="code">emerge</span>'s online help:
</p>

<a name="doc_chap_pre3"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;3: Getting information about Configuration File Protection</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge --help config</span>
</pre></td></tr>
</table>

<a name="book_id2770739_chap1_sect3"></a><p class="secthead">etc-update</p>

<p>
<span class="code">etc-update</span> is a tool that aids in merging the
<span class="path">._cfg0000_&lt;name&gt;</span> files. It provides an interactive merging
setup and can also auto-merge trivial changes.
</p>

<p>
Running <span class="code">etc-update</span> is pretty straight-forward:
</p>

<a name="doc_chap_pre4"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;4: Running etc-update</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">etc-update</span>
</pre></td></tr>
</table>

<p>
After merging the trivial changes, you will be prompted with a list of protected
files that have an update waiting. At the bottom you are greeted by the possible
options:
</p>

<a name="doc_chap_pre5"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;5: etc-update options</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Please select a file to edit by entering the corresponding number.
              (-1 to exit) (-3 to auto merge all remaining files)
                           (-5 to auto-merge AND not use 'mv -i'): 
</pre></td></tr>
</table>

<p>
If you enter <span class="code">-1</span>, <span class="code">etc-update</span> will exit without performing any
changes. If you enter <span class="code">-3</span> or <span class="code">-5</span>, <span class="emphasis">all</span> listed configuration
files will be overwritten with the newer versions. It is therefore very
important to first select the configuration files that should not be
automatically updated. This is as easy as entering the number listed to the left
of that configuration file.
</p>

<p>
As an example, we select the configuration file <span class="path">/etc/pear.conf</span>:
</p>

<a name="doc_chap_pre6"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;6: Updating a specific configuration file</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
Beginning of differences between /etc/pear.conf and /etc/._cfg0000_pear.conf
<span class="comment">[...]</span>
End of differences between /etc/pear.conf and /etc/._cfg0000_pear.conf
1) Replace original with update
2) Delete update, keeping original as is
3) Interactively merge original with update
4) Show differences again
</pre></td></tr>
</table>

<p>
You can now see the differences between the two files. If you believe that the
updated configuration file can be used without problems, enter <span class="code">1</span>. If you
believe that the updated configuration file isn't necessary, or doesn't provide
any new or usefull information, enter <span class="code">2</span>. If you want to interactively
update your current configuration file, enter <span class="code">3</span>. 
</p>

<p>
It is not usefull to elaborate about the interactive merging here. For
completeness sake, we will list the possible commands you can use while you are
interactively merging the two files. You are greeted with two lines (the
original one, and the proposed new one) and a prompt at which you can enter one
of the following commands:
</p>

<a name="doc_chap_pre7"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;7: Commands available for the interactive merging</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
ed:     Edit then use both versions, each decorated with a header.
eb:     Edit then use both versions.
el:     Edit then use the left version.
er:     Edit then use the right version.
e:      Edit a new version.
l:      Use the left version.
r:      Use the right version.
s:      Silently include common lines.
v:      Verbosely include common lines.
q:      Quit.
</pre></td></tr>
</table>

<p>
When you have finished updating the important configuration files, you can now
automatically update all the other configuration files. <span class="code">etc-update</span> will
exit if it doesn't find any more updateable configuration files.
</p>

<a name="book_id2770739_chap2"></a><p class="chaphead">
<span class="chapnum">4.b. </span>Networking Options</p>
<a name="book_id2770739_chap2_sect1"></a><p class="secthead">Mirrors</p>

<p>
As Gentoo is becoming increasingly popular, the use of mirrors is greatly
appreciated. Portage uses three variables for the mirrors: one for the rsync
mirrors (which is used to synchronise your Portage Tree with), one for the
distfiles (which is used to download the source code) and one for the prebuilt
packages.
</p>

<p>
All possible distfiles mirrors are listed on our <a href="/main/en/mirrors.xml">Gentoo mirrors page</a>. You can also use 
<span class="code">mirrorselect</span> which will ease the setup of mirrors for your system. But 
let us first check out the individual variables...
</p>

<p>
The <span class="code">SYNC</span> variable contains a list of rsync-mirrors you wish to use. For
instance, to use <a href="rsync://rsync.namerica.gentoo.org/gentoo-portage">rsync://rsync.namerica.gentoo.org/gentoo-portage</a> as
first choice, and <a href="rsync://rsync.samerica.gentoo.org/gentoo-portage">rsync://rsync.samerica.gentoo.org/gentoo-portage</a> as
second, you would define this in <span class="path">/etc/make.conf</span>:
</p>

<a name="doc_chap_pre8"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;8: Defining SYNC in /etc/make.conf</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
SYNC=&quot;rsync://rsync.namerica.gentoo.org/gentoo-portage
      rsync://rsync.samerica.gentoo.org/gentoo-portage&quot;
</pre></td></tr>
</table>

<p>
The <span class="code">GENTOO_MIRRORS</span> variable contains a list of distfiles mirrors you wish
to use. For instance, to use
<a href="ftp://ibiblio.org/pub/Linux/distributions/gentoo">ftp://ibiblio.org/pub/Linux/distributions/gentoo</a> as first choice,
and <a href="http://www.gtlib.cc.gatech.edu/pub/gentoo">http://www.gtlib.cc.gatech.edu/pub/gentoo</a> as second, you would
define this in <span class="path">/etc/make.conf</span>:
</p>

<a name="doc_chap_pre9"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;9: Defining GENTOO_MIRRORS in /etc/make.conf</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
GENTOO_MIRRORS=&quot;ftp://ibiblio.org/pub/Linux/distributions/gentoo
                http://www.gtlib.cc.gatech.edu/pub/gentoo&quot;
</pre></td></tr>
</table>


<p>
The <span class="code">PORTAGE_BINHOST</span> variable contains a list of prebuilt package mirrors
you wish to use. For instance, to use 
<a href="ftp://login:pass@grp.mirror.site/pub/grp/i686/athlon-xp">ftp://login:pass@grp.mirror.site/pub/grp/i686/athlon-xp</a>, you would 
define this in <span class="path">/etc/make.conf</span>:
</p>

<a name="doc_chap_pre10"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;10: Defining PORTAGE_BINHOST in /etc/make.conf</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
PORTAGE_BINHOST=&quot;ftp://login:pass@grp.mirror.site/pub/grp/i686/athlon-xp&quot;
</pre></td></tr>
</table>

<a name="book_id2770739_chap2_sect2"></a><p class="secthead">Mirrorselect</p>

<p>
If you want to use <span class="code">mirrorselect</span>, first install it (if you haven't done so
already).
</p>

<a name="doc_chap_pre11"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;11: Installing mirrorselect</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">emerge mirrorselect</span>
</pre></td></tr>
</table>

<p>
You can now opt to have <span class="code">mirrorselect</span> automatically select the best
mirrors for you, or select the mirrors manually from a list. For more
information on how to use <span class="code">mirrorselect</span>, just run <span class="code">mirrorselect</span> from
the command line - it will give you a quick overview on <span class="code">mirrorselect</span>.
</p>

<a name="doc_chap_pre12"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;12: Running mirrorselect</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">mirrorselect</span>
</pre></td></tr>
</table>

<a name="book_id2770739_chap2_sect3"></a><p class="secthead">Fetching</p>

<p>
The program which Portage uses to download archive files can be specified by
setting the <span class="code">FETCHCOMMAND</span> and <span class="code">RESUMECOMMAND</span> settings. Several 
examples are shown in <span class="path">/etc/make.conf</span> and 
<span class="path">/etc/make.globals</span>. Portage uses <span class="code">wget</span> by default:
</p>

<a name="doc_chap_pre13"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;13: Default FETCHCOMMAND &amp; RESUMECOMMAND</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
FETCHCOMMAND=&quot;/usr/bin/wget -t 5 --passive-ftp -P \${DISTDIR} \${URI}&quot;
RESUMECOMMAND=&quot;/usr/bin/wget -c -t 5 --passive-ftp -P \${DISTDIR} \${URI}&quot;
</pre></td></tr>
</table>

<p>
The <span class="code">${DISTDIR}</span> variable is substituted with the location where 
downloaded files are saved (<span class="path">/usr/portage/distfiles</span>), while the 
<span class="code">${URI}</span> variable is substituted with the file that Portage needs to 
download.
</p>

<p>
As Portage uses <span class="code">wget</span> by default, you can configure it to use proxies by
defining <span class="code">http_proxy</span> and <span class="code">ftp_proxy</span> (note the small caps). Although 
you can do this in <span class="path">/etc/make.conf</span> too, you are advised to use a
more general approach as the <span class="code">http_proxy</span> and <span class="code">ftp_proxy</span> variables
are used by other tools too (<span class="path">/etc/make.conf</span> is used by Portage 
only). Please read the chapter on <a href="#book_part2_chap6">Environment 
Variables</a> on how to declare system-wide environment variables.
</p>

<a name="book_id2770739_chap2_sect4"></a><p class="secthead">Configuring rsync</p>

<p>
<span class="code">rsync</span> is used by <span class="code">emerge sync</span> to update your Portage tree. Three
variables used by Portage to change <span class="code">rsync</span>'s behaviour are
<span class="code">RSYNC_EXCLUDEFROM</span>, <span class="code">RSYNC_RETRIES</span> and <span class="code">RSYNC_TIMEOUT</span>.
</p>

<p>
A way to &quot;protect&quot; ebuilds from being updated or removed by <span class="code">emerge
sync</span> is to use the <span class="code">RSYNC_EXCLUDEFROM</span> variable. It should be set to a
file that is used by <span class="code">rsync</span> to exclude certain files and defaults to
<span class="path">/etc/portage/rsync_excludes</span>. It is <span class="emphasis">not</span> adviseable to use 
this method as it can break dependencies if you are not careful. We will talk
about <span class="code">PORTDIR_OVERLAY</span> later on, which is the recommended method. For more
information, please read the <span class="code">rsync</span> manpage.
</p>

<a name="doc_chap_pre14"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;14: The RSYNC_EXCLUDEFROM variable</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
RSYNC_EXCLUDEFROM=&quot;/etc/portage/rsync_excludes&quot;
</pre></td></tr>
</table>

<p>
When <span class="code">rsync</span> fails, it will retry a number of times before switching to the
next available rsync server. The number of retries is defined in
<span class="code">RSYNC_RETRIES</span> and defaults to <span class="code">3</span>:
</p>

<a name="doc_chap_pre15"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;15: The RSYNC_RETRIES variable</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
RSYNC_RETRIES=&quot;3&quot;
</pre></td></tr>
</table>

<p>
If you are using a (very) slow rsync server, <span class="code">rsync</span> can time-out if no
traffic is received anymore. The amount of seconds to wait before time-out is
defined in the <span class="code">RSYNC_TIMEOUT</span> variable and defaults to <span class="code">180</span>:
</p>

<a name="doc_chap_pre16"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;16: The RSYNC_TIMEOUT variable</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
RSYNC_TIMEOUT=&quot;180&quot;
</pre></td></tr>
</table>

<a name="book_id2770739_chap3"></a><p class="chaphead">
<span class="chapnum">4.c. </span>Directory Locations</p>
<a name="book_id2770739_chap3_sect1"></a><p class="secthead">Introduction</p>

<p>
Everything about Portage is configurable, including the directories used for the
various tasks and files needed by Portage. To change the default locations (as
defined in <span class="path">/etc/make.globals</span>) you need to define the correct
variables in - where else :) - <span class="path">/etc/make.conf</span>.
</p>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#ffbbbb"><p class="note">
<b>Warning: </b>
If you alter a variable to point to a different location, <span class="emphasis">never</span> end the
path with a trailing <span class="path">/</span> !
</p></td></tr></table>

<a name="book_id2770739_chap3_sect2"></a><p class="secthead">Portage Tree</p>

<p>
The location of the Portage tree is defined in the <span class="code">PORTDIR</span> variable. It
defaults to <span class="path">/usr/portage</span>:
</p>

<a name="doc_chap_pre17"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;17: The PORTDIR variable</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
PORTDIR=&quot;/usr/portage&quot;
</pre></td></tr>
</table>

<p>
If you want to keep a local Portage tree next to the &quot;official&quot; one, you need to
define the <span class="code">PORTDIR_OVERLAY</span> variable. The directory location(s) listed in
this value are unaffected by <span class="code">emerge sync</span> actions: ebuilds in those
locations will not get updated or removed, but are part of your Portage tree.
</p>

<a name="doc_chap_pre18"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;18: The PORTDIR_OVERLAY variable</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
PORTDIR_OVERLAY=&quot;/usr/local/portage&quot;
</pre></td></tr>
</table>

<a name="book_id2770739_chap3_sect3"></a><p class="secthead">Distfiles</p>

<p>
The location of the downloaded source code (so called distfiles) is defined in
the <span class="code">DISTDIR</span> variable. It defaults to <span class="path">${PORTDIR}/distfiles</span>:
</p>

<a name="doc_chap_pre19"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;19: The DISTDIR variable</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
DISTDIR=&quot;${PORTDIR}/distfiles&quot;
</pre></td></tr>
</table>

<a name="book_id2770739_chap3_sect4"></a><p class="secthead">Packages and RPMs</p>

<p>
The location of the prebuilt packages is defined in the <span class="code">PKGDIR</span> variable.
It defaults to <span class="path">${PORTDIR}/packages</span>:
</p>

<a name="doc_chap_pre20"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;20: The PKGDIR variable</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
PKGDIR=&quot;${PORTDIR}/packages&quot;
</pre></td></tr>
</table>

<p>
The location of the RPMs (yes, some packages are available as RPMs) is defined
in the <span class="code">RPMDIR</span> variable. It defaults to <span class="path">${PORTDIR}/rpm</span>:
</p>

<a name="doc_chap_pre21"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;21: The RPMDIR variable</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
RPMDIR=&quot;${PORTDIR}/rpm&quot;
</pre></td></tr>
</table>

<a name="book_id2770739_chap3_sect5"></a><p class="secthead">Temporary Portage Files</p>

<p>
Portage uses a temporary location to build its ebuilds in. This location is
defined in the <span class="code">PORTAGE_TMPDIR</span> variable. It defaults to
<span class="path">/var/tmp</span>:
</p>

<a name="doc_chap_pre22"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;22: The PORTAGE_TMPDIR variable</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
PORTAGE_TMPDIR=&quot;/var/tmp&quot;
</pre></td></tr>
</table>

<p>
Per default, Portage will create a <span class="path">portage</span> directory inside
<span class="code">PORTAGE_TMPDIR</span>. This is declared in the <span class="code">BUILD_PREFIX</span> variable:
</p>

<a name="doc_chap_pre23"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;23: The BUILD_PREFIX variable</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
BUILD_PREFIX=&quot;${PORTAGE_TMPDIR}/portage&quot;
</pre></td></tr>
</table>

<p>
If you intend to change the location, make sure this temporary directory is on a
partition with a sufficient amount of free space: when compiling big software
packages, the directory can grow to 2 Gb and beyond!
</p>

<a name="book_id2770739_chap3_sect6"></a><p class="secthead">Logging</p>

<p>
The <span class="code">PORT_LOGDIR</span> is a special variable and unset by default. When you 
define it, Portage will create per-ebuild logs in the given directory:
</p>

<a name="doc_chap_pre24"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;24: The PORT_LOGDIR variable</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
PORT_LOGDIR=&quot;/var/log/portage&quot;
</pre></td></tr>
</table>

<a name="book_id2770739_chap4"></a><p class="chaphead">
<span class="chapnum">4.d. </span>Other Portage Options</p>
<a name="book_id2770739_chap4_sect1"></a><p class="secthead">Nice Value</p>

<p>
Portage supports building with a different nice-value (a priority-like value).
If you want to have Portage build packages with a higher nice-value (resulting
in a more responsive system during the building process, but which also
increases the build time) you can define the <span class="code">PORTAGE_NICENESS</span> variable
with a positive number:
</p>

<a name="doc_chap_pre25"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;25: The PORTAGE_NICENESS variable</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
PORTAGE_NICENESS=&quot;3&quot;
</pre></td></tr>
</table>

<a name="book_id2770739_chap4_sect2"></a><p class="secthead">SLOT'ed Packages and Automatic Cleaning</p>

<p>
In several situations you want multiple different versions of a package
(including libraries) to be available on your system. Portage supports this by
defining the <span class="code">SLOT</span> variable in the ebuilds. As a user, you don't have to
know how <span class="code">SLOT</span>'ing works, but it is important you know it is supported.
</p>

<p>
If you are installing a newer version of a package, Portage will check if the
<span class="code">SLOT</span> variable is declared for that package. If that is the case, and the
<span class="code">SLOT</span> variable is different for both packages (new and old), Portage will
not touch the older package.
</p>

<p>
However, if the <span class="code">SLOT</span> variable is the same (as is usually the case), the
older package will be removed by default. In order for the user to interrupt
this removal, Portage will count down a certain amount of seconds. This amount
is defined in the <span class="code">CLEAN_DELAY</span> variable and defaults to <span class="code">5</span> seconds:
</p>

<a name="doc_chap_pre26"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;26: The CLEAN_DELAY variable</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
CLEAN_DELAY=&quot;5&quot;
</pre></td></tr>
</table>

<p>
If you don't want Portage to automatically remove the older versions (called
&quot;cleaning&quot;) you can set the <span class="code">AUTOCLEAN</span> variable to <span class="code">no</span>:
</p>

<a name="doc_chap_pre27"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;27: The AUTOCLEAN variable</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
AUTOCLEAN=&quot;no&quot;
</pre></td></tr>
</table>

<a name="book_id2770739_chap4_sect3"></a><p class="secthead">Build Related Variables</p>

<p>
We have already encountered quite a lot of variables, but we are not done yet.
People who have installed Gentoo will know about the <span class="code">CHOST</span>, <span class="code">CFLAGS</span>
and <span class="code">CXXFLAGS</span> variables, used by the compiler to compile and optimize the
packages.
</p>

<p>
More information about these variables can be found in the <span class="code">gcc</span> info
pages, or online in the <a href="http://www.gnu.org/software/gcc/onlinedocs/">GCC Online Manuals</a>.
</p>

<a name="doc_chap_pre28"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;28: Getting information on CHOST, CFLAGS and CXXFLAGS</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">info gcc</span>
<span class="comment">(Select &quot;Invoking gcc&quot;)</span>
<span class="comment">(Select &quot;Optimize options&quot;)</span>
</pre></td></tr>
</table>

<p>
If the <span class="code">DEBUGBUILD</span> is defined, Portage will not strip the binaries and
libraries to make debugging more easy. This slows down your system and increases
the filesizes.
</p>

<a name="doc_chap_pre29"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;29: The DEBUGBUILD variable</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
<span class="comment"># Do not set this to &quot;false&quot;; instead remove the line. Portage does not</span>
<span class="comment"># check the value, it just checks if the variable is defined.</span>
DEBUGBUILD=&quot;true&quot;
</pre></td></tr>
</table>

<p>
The <span class="code">MAKEOPTS</span> variable is used by <span class="code">make</span>, a tool used to ease the
compilation of a package. It is usually defined to tell <span class="code">make</span> to run
several compilations simultaneously (especially if you have a multi-CPU system, 
or are using <span class="code">distcc</span> as described previously).
</p>

<p>
To have <span class="code">make</span> run three compilations simultaneously, set the 
<span class="code">MAKEOPTS</span> variable to <span class="code">-j3</span>:
</p>

<a name="doc_chap_pre30"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;30: The MAKEOPTS variable</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
MAKEOPTS=&quot;-j3&quot;
</pre></td></tr>
</table>

<p>
The <span class="code">ROOT</span> variable shouldn't be set in <span class="path">/etc/make.conf</span>, but
rather as environment variable. Portage will check this variable to see where a
package needs to be installed. Of course, this defaults to <span class="path">/</span>. As
an example we show you how to install <span class="code">gnumeric</span> in 
<span class="path">/mnt/gentoo</span> instead of in your running system:
</p>

<a name="doc_chap_pre31"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;31: The ROOT variable</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">ROOT=&quot;/mnt/gentoo&quot; emerge gnumeric</span>
</pre></td></tr>
</table>

<a name="book_id2770739_chap4_sect4"></a><p class="secthead">Output Formatting</p>

<p>
By default, Portage colors its output to improve readability. If you do not want
this, set the <span class="code">NOCOLOR</span> variable to <span class="code">true</span>:
</p>

<a name="doc_chap_pre32"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;32: The NOCOLOR variable</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
NOCOLOR=&quot;true&quot;
</pre></td></tr>
</table>

<a name="book_id2770739_chap5"></a><p class="chaphead">
<span class="chapnum">4.e. </span>Resources</p>
<a name="book_id2770739_chap5_sect1"></a><p class="secthead">Man Pages</p>

<p>
If you need a quick reference on all listed variables, please consult the
<span class="path">make.conf</span> man page:
</p>

<a name="doc_chap_pre33"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;33: Consulting the make.conf man page</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">man make.conf</span>
</pre></td></tr>
</table>

<a name="book_id2770739_chap5_sect2"></a><p class="secthead">Commented Examples</p>

<p>
The <span class="path">/etc/make.conf</span> file contains lots of comments, including
examples you might find interesting. However, most people don't update their
<span class="path">/etc/make.conf</span> interactively and therefore miss updates to the
files. You can find the latest <span class="path">/etc/make.conf</span> file in our
<a href="http://www.gentoo.org/cgi-bin/viewcvs.cgi/*checkout*/portage/cnf/make.conf?rev=HEAD&amp;cvsroot=gentoo-src&amp;content-type=text/plain">Online
ViewCVS Repository</a>.
</p>

<a name="book_part2_chap5"></a><h3>5. Initscripts</h3>
<a name="book_id2770583_chap1"></a><p class="chaphead">
<span class="chapnum">5.a. </span>Runlevels</p>
<a name="book_id2770583_chap1_sect1"></a><p class="secthead">Booting your System</p>

<p>
When you boot your system, you will notice lots of text floating by. If you pay
close attention, you will notice this text is the same every time you reboot
your system. The sequence of all these actions is called the <span class="emphasis">boot
sequence</span> and is (more or less) statically defined.
</p>

<p>
First, your boot loader will load the kernel image you have defined in the
boot loader configuration into memory after which it tells the CPU to run the
kernel. When the kernel is loaded and run, it initializes all kernel-specific
structures and tasks and starts the <span class="code">init</span> process.
</p>

<p>
This process then makes sure that all filesystems (defined in
<span class="path">/etc/fstab</span>) are mounted and ready to be used. Then it executes
several scripts located in <span class="path">/etc/init.d</span>, which will start the
services you need in order to have a successfully booted system.
</p>

<p>
Finally, when all scripts are executed, <span class="code">init</span> activates the terminals
(in most cases just the virtual consoles which are hidden beneith <span class="code">Alt-F1</span>,
<span class="code">Alt-F2</span>, etc.) attaching a special process called <span class="code">agetty</span> to it. 
This process will then make sure you are able to log on through these terminals 
by running <span class="code">login</span>.
</p>

<a name="book_id2770583_chap1_sect2"></a><p class="secthead">Init Scripts</p>

<p>
Now <span class="code">init</span> doesn't just execute the scripts in <span class="path">/etc/init.d</span>
randomly. Even more, it doesn't run all scripts in <span class="path">/etc/init.d</span>,
only the scripts it is told to execute. It decides which scripts to execute by 
looking into <span class="path">/etc/runlevels</span>.
</p>

<p>
First, <span class="code">init</span> runs all scripts from <span class="path">/etc/init.d</span> that have
symbolic links inside <span class="path">/etc/runlevels/boot</span>. Usually, it will
start the scripts in alphabetical order, but some scripts have dependency
information in them, telling the system that another script must be run before
they can be started. 
</p>

<p>
When all <span class="path">/etc/runlevels/boot</span> referenced scripts are executed,
<span class="code">init</span> continues with running the scripts that have a symbolic link to them
in <span class="path">/etc/runlevels/default</span>. Again, it will use the alphabetical
order to decide what script to run first, unless a script has dependency
information in it, in which case the order is changed to provide a valid 
start-up sequence.
</p>

<a name="book_id2770583_chap1_sect3"></a><p class="secthead">How Init Works</p>

<p>
Of course <span class="code">init</span> doesn't decide all that by itself. It needs a
configuration file that specifies what actions need to be taken. This
configuration file is <span class="path">/etc/inittab</span>.
</p>

<p>
If you remember the boot sequence we have just explained to you, you will
remember that <span class="code">init</span>'s first action is to mount all filesystems. This is
defined in the following line from <span class="path">/etc/inittab</span>:
</p>

<a name="doc_chap_pre1"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;1: The system initialisation line in /etc/inittab</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
si::sysinit:/sbin/rc sysinit
</pre></td></tr>
</table>

<p>
This line tells <span class="code">init</span> that it must run <span class="code">/sbin/rc sysinit</span> to
initialize the system. The <span class="path">/sbin/rc</span> script takes care of the
initialisation, so you might say that <span class="code">init</span> doesn't do much -- it
delegates the task of initialising the system to another process.
</p>

<p>
Second, <span class="code">init</span> executed all scripts that had symbolic links in
<span class="path">/etc/runlevels/boot</span>. This is defined in the following line:
</p>

<a name="doc_chap_pre2"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;2: The system initialisation, continued</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
rc::bootwait:/sbin/rc boot
</pre></td></tr>
</table>

<p>
Again the <span class="code">rc</span> script performs the necessary tasks. Note that the option
given to <span class="code">rc</span> (<span class="emphasis">boot</span>) is the same as the subdirectory of
<span class="path">/etc/runlevels</span> that is used.
</p>

<p>
Now <span class="code">init</span> checks its configuration file to see what <span class="emphasis">runlevel</span> it
should run. To decide this, it reads the following line from
<span class="path">/etc/inittab</span>:
</p>

<a name="doc_chap_pre3"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;3: The initdefault line</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
id:3:initdefault:
</pre></td></tr>
</table>

<p>
In this case (which the majority of Gentoo users will use), the <span class="emphasis">runlevel</span>
id is 3. Using this information, <span class="code">init</span> checks what it must run to start
<span class="emphasis">runlevel 3</span>:
</p>

<a name="doc_chap_pre4"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;4: The runlevel definitions</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
l0:0:wait:/sbin/rc shutdown
l1:S1:wait:/sbin/rc single
l2:2:wait:/sbin/rc nonetwork
l3:3:wait:/sbin/rc default
l4:4:wait:/sbin/rc default
l5:5:wait:/sbin/rc default
l6:6:wait:/sbin/rc reboot
</pre></td></tr>
</table>

<p>
The line that defines level 3, again, uses the <span class="code">rc</span> script to start the
services (now with argument <span class="emphasis">default</span>). Again note that the argument of
<span class="code">rc</span> is the same as the subdirectory from <span class="path">/etc/runlevels</span>.
</p>

<p>
When <span class="code">rc</span> has finished, <span class="code">init</span> decides what virtual consoles it should
activate and what commands need to be run at each console:
</p>

<a name="doc_chap_pre5"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;5: The virtual consoles definition</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
c1:12345:respawn:/sbin/agetty 38400 tty1 linux
c2:12345:respawn:/sbin/agetty 38400 tty2 linux
c3:12345:respawn:/sbin/agetty 38400 tty3 linux
c4:12345:respawn:/sbin/agetty 38400 tty4 linux
c5:12345:respawn:/sbin/agetty 38400 tty5 linux
c6:12345:respawn:/sbin/agetty 38400 tty6 linux
</pre></td></tr>
</table>


<a name="book_id2770583_chap1_sect4"></a><p class="secthead">What is a runlevel?</p>

<p>
You have seen that <span class="code">init</span> uses a numbering scheme to decide what
<span class="emphasis">runlevel</span> it should activate. A <span class="emphasis">runlevel</span> is a state in which
your system is running and contains a collection of scripts (runlevel scripts or
<span class="emphasis">initscripts</span>) that must be executed when you enter or leave a runlevel.
</p>

<p>
In Gentoo, there are seven runlevels defined: three internal runlevels, and four
user-defined runlevels. The internal runlevels are called <span class="emphasis">sysinit</span>,
<span class="emphasis">shutdown</span> and <span class="emphasis">reboot</span> and do exactly what their names imply:
initialize the system, powering off the system and rebooting the system.
</p>

<p>
The user-defined runlevels are those with an accompanying
<span class="path">/etc/runlevels</span> subdirectory: <span class="path">boot</span>,
<span class="path">default</span>, <span class="path">nonetwork</span> and <span class="path">single</span>. The
<span class="path">boot</span> runlevel starts all system-necessary services which all other
runlevels use. The remaining three runlevels differ in what services they start:
<span class="path">default</span> is used for day-to-day operations, <span class="path">nonetwork</span>
is used in case no network connectivity is required, and <span class="path">single</span> is
used when you need to fix the system.
</p>

<a name="book_id2770583_chap1_sect5"></a><p class="secthead">Working with the Init Scripts</p>

<p>
The scripts that the <span class="code">rc</span> process starts are called <span class="emphasis">init scripts</span>.
Each script in <span class="path">/etc/init.d</span> can be executed with the arguments
<span class="emphasis">start</span>, <span class="emphasis">stop</span>, <span class="emphasis">restart</span>, <span class="emphasis">pause</span>, <span class="emphasis">zap</span>,
<span class="emphasis">status</span>, <span class="emphasis">ineed</span>, <span class="emphasis">iuse</span>, <span class="emphasis">needsme</span>, <span class="emphasis">usesme</span> or
<span class="emphasis">broken</span>.
</p>

<p>
To start, stop or restart a service (and all depending services), <span class="code">start</span>,
<span class="code">stop</span> and <span class="code">restart</span> should be used:
</p>

<a name="doc_chap_pre6"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;6: Starting Postfix</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">/etc/init.d/postfix start</span>
</pre></td></tr>
</table>

<table class="ncontent" width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td bgcolor="#bbffbb"><p class="note">
<b>Note: </b>
Only the services that <span class="emphasis">need</span> the given service are stopped or restarted.
The other depending services (those that <span class="emphasis">use</span> the service but don't need
it) are left untouched.
</p></td></tr></table>

<p>
If you want to stop a service, but not the services that depend on it, you can
use the <span class="code">pause</span> argument:
</p>

<a name="doc_chap_pre7"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;7: Stopping Postfix but keep the depending services running</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">/etc/init.d/postfix pause</span>
</pre></td></tr>
</table>

<p>
If you want to see what status a service has (started, stopped, paused, ...) you
can use the <span class="code">status</span> argument:
</p>

<a name="doc_chap_pre8"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;8: Status information for postfix</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">/etc/init.d/postfix status</span>
</pre></td></tr>
</table>

<p>
If the status information tells you that the service is running, but you know
that it is not, then you can reset the status information to &quot;stopped&quot; with the 
<span class="code">zap</span> argument:
</p>

<a name="doc_chap_pre9"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;9: Resetting status information for postfix</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">/etc/init.d/postfix zap</span>
</pre></td></tr>
</table>

<p>
To also ask what dependencies the service has, you can use <span class="code">iuse</span> or
<span class="code">ineed</span>. With <span class="code">ineed</span> you can see the services that are really
necessary for the correct functioning of the service. <span class="code">iuse</span> on the other
hand shows the services that can be used by the service, but are not necessary
for the correct functioning.
</p>

<a name="doc_chap_pre10"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;10: Requesting a list of all necessary services on which Postfix depends</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">/etc/init.d/postfix ineed</span>
</pre></td></tr>
</table>

<p>
Similarly, you can ask what services require the service (<span class="code">needsme</span>) or can
use it (<span class="code">usesme</span>):
</p>

<a name="doc_chap_pre11"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;11: Requesting a list of all services that require Postfix</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">/etc/init.d/postfix needsme</span>
</pre></td></tr>
</table>

<p>
Finally, you can ask what dependencies the service requires but that are
missing:
</p>

<a name="doc_chap_pre12"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;12: Requesting a list of missing dependencies for Postfix</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">/etc/init.d/postfix broken</span>
</pre></td></tr>
</table>

<a name="book_id2770583_chap2"></a><p class="chaphead">
<span class="chapnum">5.b. </span>Working with rc-update</p>
<a name="book_id2770583_chap2_sect1"></a><p class="secthead">What is rc-update?</p>

<p>
Gentoo's init system uses a dependency-tree to decide what service needs to be
started first. As this is a tedious task that we wouldn't want our users to do
manually, we have created tools that ease the administration of the runlevels
and init scripts.
</p>

<p>
With <span class="code">rc-update</span> you can add and remove init scripts to a runlevel. The
<span class="code">rc-update</span> tool will then automatically ask the <span class="code">depscan.sh</span> script
to rebuild the dependency tree.
</p>

<a name="book_id2770583_chap2_sect2"></a><p class="secthead">Adding and Removing Services</p>

<p>
You have already added init scripts to the &quot;default&quot; runlevel during the
installation of Gentoo. At that time you might not have had a clue what the
&quot;default&quot; is for, but now you should. The <span class="code">rc-update</span> script requires a
second argument that defines the action: <span class="emphasis">add</span>, <span class="emphasis">del</span> or <span class="emphasis">show</span>.
</p>

<p>
To add or remove an init script, just give <span class="code">rc-update</span> the <span class="code">add</span> or
<span class="code">del</span> argument, followed by the init script and the runlevel. For instance:
</p>

<a name="doc_chap_pre13"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;13: Removing Postfix from the default runlevel</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">rc-update del postfix default</span>
</pre></td></tr>
</table>

<p>
The <span class="code">rc-update show</span> command will show all the available init scripts and
list at which runlevels they will execute:
</p>

<a name="doc_chap_pre14"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;14: Receiving init script information</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">rc-update show</span>
</pre></td></tr>
</table>

<a name="book_id2770583_chap3"></a><p class="chaphead">
<span class="chapnum">5.c. </span>Configuring Services</p>
<a name="book_id2770583_chap3_sect1"></a><p class="secthead">Why the Need for Extra Configuration?</p>

<p>
Init scripts can be quite complex. It is therefore not really interesting to 
have the users directly edit the init script, as it would make it more 
error-prone. It is however important to be able to configure such a service. For
instance, you might want to give more options to the service itself.
</p>

<p>
A second reason to have this configuration outside the init script is to be able
to update the init scripts without being afraid that your configuration changes
are undone.
</p>

<a name="book_id2770583_chap3_sect2"></a><p class="secthead">The /etc/conf.d Directory</p>

<p>
Gentoo provides an easy way to configure such a service: every init script that
can be configured has a file in <span class="path">/etc/conf.d</span>. For instance, the
apache2 initscript (called <span class="path">/etc/init.d/apache2</span>) has a
configuration file called <span class="path">/etc/conf.d/apache2</span>, which can contain
the options you want to give to the Apache 2 server when it is started:
</p>

<a name="doc_chap_pre15"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;15: Variable defined in /etc/conf.d/apache2</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
APACHE2_OPTS=&quot;-D PHP4&quot;
</pre></td></tr>
</table>

<p>
Such a configuration file contains variables and variables alone (just like
<span class="path">/etc/make.conf</span>), making it very easy to configure services. It also
allows us to provide more information about the variables (as comments).
</p>

<a name="book_id2770583_chap4"></a><p class="chaphead">
<span class="chapnum">5.d. </span>Writing Init Scripts</p>
<a name="book_id2770583_chap4_sect1"></a><p class="secthead">Do I Have To?</p>

<p>
No. Writing an init script is usually not necessary as Gentoo provides
ready-to-use init scripts for all provided services. However, you might have
installed a service without using Portage, in which case you will most likely
have to create an init script.
</p>

<p>
Do not use the init script provided by the service if it isn't explicitly
written for Gentoo: Gentoo's init scripts are not compatible with the init
scripts used by other distributions!
</p>

<a name="book_id2770583_chap4_sect2"></a><p class="secthead">Layout</p>

<p>
The basic layout of an init script is shown below.
</p>

<a name="doc_chap_pre16"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;16: Basic layout of an init script</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
#!/sbin/runscript

depend() {
  <span class="comment">(Dependency information)</span>
}

start() {
  <span class="comment">(Commands necessary to start the service)</span>
}

stop() {
  <span class="comment">(Commands necessary to stop the service)</span>
}

restart() {
  <span class="comment">(Commands necessary to restart the service)</span>
}
</pre></td></tr>
</table>

<p>
Any init script <span class="emphasis">requires</span> the <span class="code">start()</span> function to be defined. All
other sections are optional.
</p>

<a name="book_id2770583_chap4_sect3"></a><p class="secthead">Dependencies</p>

<p>
There are two dependencies you can define: <span class="code">use</span> and <span class="code">need</span>. As we
have mentioned before, the <span class="code">need</span> dependency is more strict than the
<span class="code">use</span> dependency. Following this dependency type you enter the service
you depend on, or the <span class="emphasis">virtual</span> dependency.
</p>

<p>
A <span class="emphasis">virtual</span> dependency is a dependency that a service provides, but that is
not provided solely by that service. Your init script can depend on a system
logger, but there are many system loggers available (metalogd, syslog-ng,
sysklogd, ...). As you cannot <span class="code">need</span> every single one of them (no sensible
system has all these system loggers installed and running) we made sure that
all these services <span class="code">provide</span> a virtual dependency.
</p>

<p>
Let us take a look at the dependency information for the postfix service.
</p>

<a name="doc_chap_pre17"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;17: Dependency information for Postfix</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
depend() {
  need net
  use logger dns
  provide mta
}
</pre></td></tr>
</table>

<p>
As you can see, the postfix service:
</p>

<ul>
  <li>
    requires the (virtual) <span class="code">net</span> dependency (which is provided by, for
    instance, <span class="path">/etc/init.d/net.eth0</span>)
  </li>
  <li>
    uses the (virtual) <span class="code">logger</span> dependency (which is provided by, for 
    instance, <span class="path">/etc/init.d/syslog-ng</span>)
  </li>
  <li>
    uses the (virtual) <span class="code">dns</span> dependency (which is provided by, for
    instance, <span class="path">/etc/init.d/named</span>)
  </li>
  <li>
    provides the (virtual) <span class="code">mta</span> dependency (which is common for all mail 
    servers)
  </li>
</ul>

<a name="book_id2770583_chap4_sect4"></a><p class="secthead">Controlling the Order</p>

<p>
In some cases you might not require a service, but want your service to be
started <span class="code">before</span> (or <span class="code">after</span>) another service <span class="emphasis">if</span> it is
available on the system (note the conditional - this is no dependency anymore)
<span class="emphasis">and</span> ran in the same runlevel (note the conditional - only services in the
same runlevel are involved). You can provide this information using the 
<span class="code">before</span> or <span class="code">after</span> settings.
</p>

<p>
As an example we view the settings of the Portmap service:
</p>

<a name="doc_chap_pre18"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;18: The depend() function in the Portmap service</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
depend() {
  need net
  before inetd
  before xinetd
}
</pre></td></tr>
</table>

<p>
You can also use the &quot;*&quot; glob to catch all services in the same runlevel,
although this isn't adviseable.
</p>

<a name="doc_chap_pre19"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;19: Running an init script as first script in the runlevel</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
depend() {
  before *
}
</pre></td></tr>
</table>

<a name="book_id2770583_chap4_sect5"></a><p class="secthead">Standard Functions</p>

<p>
Next to the <span class="code">depend()</span> functionality, you also need to define the
<span class="code">start()</span> function. This one contains all the commands necessary to
initialize your service. It is adviseable to use the <span class="code">ebegin</span> and
<span class="code">eend</span> functions to inform the user about what is happening:
</p>

<a name="doc_chap_pre20"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;20: Example start() function</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
start() {
  ebegin &quot;Starting my_service&quot;
  start-stop-daemon --start --quiet --exec /path/to/my_service
  eend $?
}
</pre></td></tr>
</table>

<p>
If you need more examples of the <span class="code">start()</span> function, please read the source
code of the available init scripts in your <span class="path">/etc/init.d</span> directory.
As for <span class="code">start-stop-daemon</span>, there is an excellent man page available if you
need more information:
</p>

<a name="doc_chap_pre21"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;21: Getting the man page for start-stop-daemon</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">man start-stop-daemon</span>
</pre></td></tr>
</table>

<p>
Other functions you can define are: <span class="code">stop()</span> and <span class="code">restart()</span>. You are
not obliged to define these functions! Our init system is intelligent enough to
fill these functions by itself if you use <span class="code">start-stop-daemon</span>.
</p>

<a name="book_id2770583_chap4_sect6"></a><p class="secthead">Adding Custom Options</p>

<p>
If you want your init script to support more options than the ones we have
already encountered, you should add the option to the <span class="code">opts</span> variable, and
create a function with the same name as the option. For instance, to support an
option called <span class="code">restartdelay</span>:
</p>

<a name="doc_chap_pre22"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;22: Supporting the restartdelay option</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
opts=&quot;${opts} restartdelay&quot;

restartdelay() {
  stop()
  sleep 3    <span class="comment"># Wait 3 seconds before starting again</span>
  start()
}
</pre></td></tr>
</table>

<a name="book_id2770583_chap4_sect7"></a><p class="secthead">Service Configuration Variables</p>

<p>
You don't have to do anything to support a configuration file in
<span class="path">/etc/conf.d</span>: if your init script is executed, the following files
are automatically sourced (i.e. the variables are available to use):
</p>

<ul>
  <li><span class="path">/etc/conf.d/&lt;your init script&gt;</span></li>
  <li><span class="path">/etc/conf.d/basic</span></li>
  <li><span class="path">/etc/rc.conf</span></li>
</ul>

<p>
Also, if your init script provides a virtual dependency (such as <span class="code">net</span>),
the file associated with that dependency (such as <span class="path">/etc/conf.d/net</span>)
will be sourced too.
</p>

<a name="book_id2770583_chap5"></a><p class="chaphead">
<span class="chapnum">5.e. </span>Changing the Runlevel Behaviour</p>
<a name="book_id2770583_chap5_sect1"></a><p class="secthead">Who might benefit from this?</p>

<p>
Many laptop users know the situation: at home you need to start <span class="code">net.eth0</span>
while you don't want to start <span class="code">net.eth0</span> while you're on the road (as 
there is no network available). With Gentoo you can alter the runlevel behaviour
to your own will.
</p>

<p>
For instance you can create a second &quot;default&quot; runlevel which you can boot that
has other init scripts assigned to it. You can then select at boottime what
defalt runlevel you want to use.
</p>

<a name="book_id2770583_chap5_sect2"></a><p class="secthead">Using SOFTLEVEL</p>

<p>
First of all, create the runlevel directory for your second &quot;default&quot; runlevel.
As an example we create the <span class="path">offline</span> runlevel:
</p>

<a name="doc_chap_pre23"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;23: Creating a runlevel directory</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">mkdir /etc/runlevels/offline</span>
</pre></td></tr>
</table>

<p>
Add the necessary init scripts to the newly created runlevels. For instance, if
you want to have an exact copy of your current <span class="code">default</span> runlevel but
without <span class="code">net.eth0</span>:
</p>

<a name="doc_chap_pre24"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;24: Adding the necessary init scripts</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">ls /etc/runlevels/default</span>
acpid  domainname  local  net.eth0  netmount  postfix  syslog-ng  vcron
# <span class="input">rc-update add acpid offline</span>
# <span class="input">rc-update add domainname offline</span>
# <span class="input">rc-update add local offline</span>
# <span class="input">rc-update add syslog-ng offline</span>
# <span class="input">rc-update add vixie-cron offline</span>
</pre></td></tr>
</table>

<p>
Now edit your bootloader configuration and add a new entry for the
<span class="code">offline</span> runlevel. For instance, in <span class="path">/boot/grub/grub.conf</span>:
</p>

<a name="doc_chap_pre25"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;25: Adding an entry for the offline runlevel</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
title Gentoo Linux Offline Usage
  root (hd0,0)
  kernel (hd0,0)/kernel-2.4.25 root=/dev/hda3 <span class="input">softlevel=offline</span>
</pre></td></tr>
</table>

<p>
Voila, you're all set now. If you boot your system and select the newly added
entry at boot, the <span class="code">offline</span> runlevel will be used instead of the
<span class="code">default</span> one.
</p>

<a name="book_id2770583_chap5_sect3"></a><p class="secthead">Using BOOTLEVEL</p>

<p>
Using <span class="code">bootlevel</span> is completely analogous to <span class="code">softlevel</span>. The only
difference here is that you define a second &quot;boot&quot; runlevel instead of a second
&quot;default&quot; runlevel.
</p>

<a name="book_part2_chap6"></a><h3>6. Environment Variables</h3>
<a name="book_id2788112_chap1"></a><p class="chaphead">
<span class="chapnum">6.a. </span>Environment Variables?</p>
<a name="book_id2788112_chap1_sect1"></a><p class="secthead">What they are</p>

<p>
An environment variable is a named object that contains information used by one
or more applications. Many users (and especially those new to Linux) find this a
bit weird or unmanageable. This is however wrong: by using environment variables
one can easily change a configuration setting for one or more applications.
</p>

<a name="book_id2788112_chap1_sect2"></a><p class="secthead">Important Examples</p>

<p>
The following table lists a number of variables used by a Linux system and
describes their use. Example values are presented after the table.
</p>

<table class="ntable">
<tr>
  <td bgcolor="#7a5ada" class="infohead"><b>Variable</b></td>
  <td bgcolor="#7a5ada" class="infohead"><b>Description</b></td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">PATH</td>
  <td bgcolor="#ddddff" class="tableinfo">
    This variable contains a colon-separated list of directories in which your 
    system looks for executable files. If you enter a name of an executable 
    (such as <span class="code">ls</span>, <span class="code">rc-update</span> or <span class="code">emerge</span>) but this executable 
    is not located in a listed directory, your system will not execute it 
    (unless you enter the full path as command, such as <span class="code">/bin/ls</span>).
  </td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">ROOTPATH</td>
  <td bgcolor="#ddddff" class="tableinfo">
    This variable has the same function as <span class="code">PATH</span>, but this one only lists
    the directories that should be checked when the root-user enters a command.
  </td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">LDPATH</td>
  <td bgcolor="#ddddff" class="tableinfo">
    This variable contains a colon-separated list of directories in which the
    dynamical linker searches through to find a library.
  </td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">MANPATH</td>
  <td bgcolor="#ddddff" class="tableinfo">
    This variable contains a colon-separated list of directories in which the
    <span class="code">man</span> command searches for the man pages.
  </td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">INFODIR</td>
  <td bgcolor="#ddddff" class="tableinfo">
    This variable contains a colon-separated list of directories in which the
    <span class="code">info</span> command searches for the info pages.
  </td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">PAGER</td>
  <td bgcolor="#ddddff" class="tableinfo">
    This variable contains the path to the program used to list the contents of
    files through (such as <span class="code">less</span> or <span class="code">more</span>).
  </td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">EDITOR</td>
  <td bgcolor="#ddddff" class="tableinfo">
    This variable contains the path to the program used to change the contents
    of files with (such as <span class="code">nano</span> or <span class="code">vi</span>).
  </td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">KDEDIRS</td>
  <td bgcolor="#ddddff" class="tableinfo">
    This variable contains a colon-separated list of directories which contain
    KDE-specific material.
  </td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">CLASSPATH</td>
  <td bgcolor="#ddddff" class="tableinfo">
    This variable contains a colon-separated list of directories which contain
    Java classes.
  </td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">CONFIG_PROTECT</td>
  <td bgcolor="#ddddff" class="tableinfo">
    This variable contains a <span class="emphasis">space</span>-delimited list of directories which
    should be protected by Portage during updates.
  </td>
</tr>
<tr>
  <td bgcolor="#ddddff" class="tableinfo">CONFIG_PROTECT_MASK</td>
  <td bgcolor="#ddddff" class="tableinfo">
    This variable contains a <span class="emphasis">space</span>-delimited list of directories which
    should not be protected by Portage during updates. 
  </td>
</tr>
</table>

<p>
Below you will find an example definition of all these variables:
</p>

<a name="doc_chap_pre1"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;1: Example definitions</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
PATH=&quot;/bin:/usr/bin:/usr/local/bin:/opt/bin:/usr/games/bin&quot;
ROOTPATH=&quot;/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin&quot;
LDPATH=&quot;/lib:/usr/lib:/usr/local/lib:/usr/lib/gcc-lib/i686-pc-linux-gnu/3.2.3&quot;
MANPATH=&quot;/usr/share/man:/usr/local/share/man&quot;
INFODIR=&quot;/usr/share/info:/usr/local/share/info&quot;
PAGER=&quot;/usr/bin/less&quot;
EDITOR=&quot;/usr/bin/vim&quot;
KDEDIRS=&quot;/usr&quot;
CLASSPATH=&quot;/opt/blackdown-jre-1.4.1/lib/rt.jar:.&quot;
CONFIG_PROTECT=&quot;/usr/X11R6/lib/X11/xkb /opt/tomcat/conf \
                /usr/kde/3.1/share/config /usr/share/texmf/tex/generic/config/ \
                /usr/share/texmf/tex/platex/config/ /usr/share/config&quot;
CONFIG_PROTECT_MASK=&quot;/etc/gconf
</pre></td></tr>
</table>

<a name="book_id2788112_chap2"></a><p class="chaphead">
<span class="chapnum">6.b. </span>Defining Variables Globally</p>
<a name="book_id2788112_chap2_sect1"></a><p class="secthead">The /etc/env.d Directory</p>

<p>
To centralise the definitions of these variables, Gentoo introduced the
<span class="path">/etc/env.d</span> directory. Inside this directory you will find a number
of files, such as <span class="path">00basic</span>, <span class="path">05gcc</span>, etc. which contain
the variables needed by the application mentioned in their name.
</p>

<p>
For instance, when you installed <span class="code">gcc</span>, a file called <span class="path">05gcc</span>
was created by the ebuild which contains the definitions of the following
variables:
</p>

<a name="doc_chap_pre2"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;2: /etc/conf.d/05gcc</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
PATH=&quot;/usr/i686-pc-linux-gnu/gcc-bin/3.2&quot;
ROOTPATH=&quot;/usr/i686-pc-linux-gnu/gcc-bin/3.2&quot;
MANPATH=&quot;/usr/share/gcc-data/i686-pc-linux-gnu/3.2/man&quot;
INFOPATH=&quot;/usr/share/gcc-data/i686-pc-linux-gnu/3.2/info&quot;
CC=&quot;gcc&quot;
CXX=&quot;g++&quot;
LDPATH=&quot;/usr/lib/gcc-lib/i686-pc-linux-gnu/3.2.3&quot;
</pre></td></tr>
</table>

<p>
Other distributions tell you to change or add such environment variable
definitions in <span class="path">/etc/profile</span> or other locations. Gentoo on the other
hand makes it easy for you (and for Portage) to maintain and manage the
environment variables without having to pay attention to the numerous files that
can contain environment variables.
</p>

<p>
For instance, when <span class="code">gcc</span> is updated, the <span class="path">/etc/env.d/05gcc</span> file
is updated too without requesting any user-interaction. 
</p>

<p>
This doesn't only benefit Portage, but also you, as user. Occasionally you might
be asked to set a certain environment variable system-wide. As an example we
take the <span class="code">http_proxy</span> variable. Instead of messing with
<span class="path">/etc/profile</span>, you can now just create a file
(<span class="path">/etc/env.d/99local</span>) and enter your definition(s) in it:
</p>

<a name="doc_chap_pre3"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;3: /etc/env.d/99local</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
http_proxy=&quot;proxy.server.com:8080&quot;
</pre></td></tr>
</table>

<p>
By using the same file for all your variables, you have a quick overview on the
variables you have defined yourself. 
</p>

<a name="book_id2788112_chap2_sect2"></a><p class="secthead">The env-update Script</p>

<p>
Several files in <span class="path">/etc/env.d</span> define the <span class="code">PATH</span> variable. This
is not wrong: when you run <span class="code">env-update</span>, it will append the several
definitions before it updates the environment variables, thereby making it easy
for packages (or users) to add their own environment variable settings without
interfering with the already existing values.
</p>

<p>
The <span class="code">env-update</span> script will append the values in the alphabetical order of
the <span class="path">/etc/env.d</span> files. This is why many of the files in
<span class="path">/etc/env.d</span> begin with a number.
</p>

<a name="doc_chap_pre4"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;4: Update order used by env-update</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
         00basic        99kde-env       99local
     +-------------+----------------+-------------+
PATH=&quot;/bin:/usr/bin:/usr/kde/3.2/bin:/usr/local/bin&quot;
</pre></td></tr>
</table>

<p>
When you run <span class="code">env-update</span>, the script will create all environment variables
and place them in <span class="path">/etc/profile.env</span> (which is used by
<span class="path">/etc/profile</span>). It will also extract the information from the
<span class="code">LDPATH</span> variable and use that to create <span class="path">/etc/ld.so.conf</span>.
After this, it will run <span class="code">ldconfig</span> to recreate the
<span class="path">/etc/ld.so.cache</span> file used by the dynamical linker.
</p>

<p>
If you want to notice the effect of <span class="code">env-update</span> immediately after you run
it, execute the following command to update your environment. Users who have
installed Gentoo themselves will probably remember this from the installation
instructions:
</p>

<a name="doc_chap_pre5"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;5: Updating the environment</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">env-update &amp;&amp; source /etc/profile</span>
</pre></td></tr>
</table>

<a name="book_id2788112_chap3"></a><p class="chaphead">
<span class="chapnum">6.c. </span>Defining Variables Locally</p>
<a name="book_id2788112_chap3_sect1"></a><p class="secthead">User Specific</p>

<p>
You do not always want to define an environment variable globally. For instance,
you might want to add <span class="path">/home/my_user/bin</span> to the <span class="code">PATH</span> variable
but don't want all other users on your system to have that in their <span class="code">PATH</span>
too. If you want to define an environment variable locally, you should use
<span class="path">~/.bashrc</span> or <span class="path">~/.bash_profile</span>:
</p>

<a name="doc_chap_pre6"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;6: Extending PATH for local usage in ~/.bashrc</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
PATH=&quot;${PATH}:/home/my_user/bin&quot;
</pre></td></tr>
</table>

<p>
When you relogin, your <span class="code">PATH</span> variable will be updated.
</p>

<a name="book_id2788112_chap3_sect2"></a><p class="secthead">Session Specific</p>

<p>
Sometimes even stricter definitions are requested. You might want to be able to
use binaries from a temporary directory you created without using the path to
the binaries themselves or editing <span class="path">~/.bashrc</span> for those few moments
you need it.
</p>

<p>
In this case, you can just define the <span class="code">PATH</span> variable in your current
session by using the <span class="code">export</span> command. As long as you don't log out, the
<span class="code">PATH</span> variable will be using the temporary settings.
</p>

<a name="doc_chap_pre7"></a><table class="ntable" width="100%" cellspacing="0" cellpadding="0" border="0">
<tr><td class="infohead" bgcolor="#7a5ada"><p class="caption">Code Listing&nbsp;7: Defining a session-specific environment variable</p></td></tr>
<tr><td bgcolor="#ddddff"><pre>
# <span class="input">export PATH=&quot;${PATH}:/home/my_user/tmp/usr/bin&quot;</span>
</pre></td></tr>
</table>

<pre>
  The contents of this document are licensed under the <a href="http://creativecommons.org/licenses/by-sa/1.0">Creative Commons - Attribution / Share Alike</a> license.
</pre>
</body>
</html>
}}}
