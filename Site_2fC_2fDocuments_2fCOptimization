#title Writing Efficient C and C Code Optimization

 * 원문 : http://www.codeproject.com/cpp/C___Code_Optimization.asp
 * 출처 : [http://kr.dcinside1.imagesearch.yahoo.com/zb40/zboard.php?id=programming&page=1&page_num=20&select_arrange=headnum&desc=&sn=off&ss=on&sc=off&keyword=&no=19749&category= DC인사이트 프로그래밍 갤러리]
[[TableOfContents]]
== 소개 ==
얼마전에 모바일기기에서 일정수준의 품질을 유지하면서 실행되는 JPEG라이브러리를 만드는 프로젝트를 진행한적이 있었다. 이 프로젝트를 진행하면서, 여러가지 방법으로 프로그램을 더 빨리 만들 수 있다는 사실을 경험적으로 알게 되었다. 이 문서는 C(:12)로된 코드를 속도와 메모리 양측모두에서 최적화하기 위한 경험적인 정보들을 포함하고 있다. 

물론 여러분은 C 코드를 최적화 하는 방법에 대한 참고문서를 어렵지 않게 획득할 수 있을 것이다. 그러나 대부분의 문서가 팁수준에서 문제에 접근할 뿐으로, 컴파일러(:12)나 기계어(:12)수준에서 어떻게 프로그래밍을 해야 하는지에 대한 정보는 담고 있지 않다.

보통 프로그램의 속도를 높이게 되면 코드의 크기가 늘어나게 된다. 코드의 크기가 늘어나면 프로그램이 복잡해지고, 읽고 이해하기 어려워진다. 메모리 자원이 넉넉한 개인PC혹은 서버 컴퓨터라면 문제가 되지 않겠지만 PDA와 같은 제한된 메모리 자원을 가진 기기일 경우 심각한 문제가 될 수 있다. 1%의 속도향상을 위해서 코드의 크기가 10%만큼 늘어난다면 분명 문제가 될 것이다. 이런 이유로 속도와 코드크기 모두에 대한 최적화를 수행하기로 결정을 했다. 

== 선언 ==
내가 진행하는 프로젝트가 ARM(:12) 플랫폼에서 진행된 관계로, ARM 최적화와 관련된 팁들이 필요했었다. 나는 인터넷을 통해서 ARM 최적화와 관련된 많은 문서를 검색하고 이중 유용한 것들 중심으로 수집해서 테스트를 했었다. 그러나 대부분의 문서들이 나에게는 도움이 되지 않았음을 고백한다. 이러한 실수를 줄이기 위해서 유용하고 효과적인 몇개의 팁만을 모으기로 결정했다.

== 어디에 필요한가 == 
토론의 주제를 명확히 하고 넘어가자. 컴퓨터 프로그램을 최적화하기 위한 가장 중요한 것은 프로그램을 이루는 각각의 모듈중 어느 부분이 느리게 작동하거나, 큰 메모리를 소비하는지를 찾아내는 것이다. 이들 각각의 부분을 최적화하면 프로그램이 전체적으로 빨라질 것이기 때문이다. 이러한 모듈단위의 최적화는 최적화를 위한 부분을 비교적 쉽게 찾고, 쉽게 해결할 수 있다는 장점을 가진다.

The optimizations should be done on those parts of the program that are run the most, especially those methods which are called repeatedly by various inner loops that the program can have.

일반적으로 경험이 풍부한 프로그래머들은 아주 쉽게 프로그램이 요구하는 최적화될 필요가 있는 핵심을 쉽게 찾아낼 수 있을 것이다. 가장 좋은 최적화 방법은 경험많은 프로그래머를 고용하는 것이다. 그러나 경험많은 프로그래머는 매우 드물며, 경험이 많다고 해도 더 좋은 결과를 위해서는 최적화를 위한 좋은 툴을 사용할 필요가 있다. Visual C++ 과 같은 통합 개발환경은 함수단위로 프로그램의 소비시간을 측정할 수 있는 profiler를 제공한다. 리눅스의 경우에는 gprof(:12)와 같은 profiler를 사용할 수 있다. 혹은 Intel Vtune와 같은 프로그램을 사용할 수 있는데, 이들 프로그램을 사용하면 프로그램의 어느부분이 가장 많은 시간을 소비하는지를 확인할 수 있다. 개인적인 경험으로 루프 혹은 third party 라이브러리(:12) 메서드를 호출하는 영역이 프로그램을 느리게 하는 경우가 많았다.  

=== 정말 빨라지는 가 ? ===
아래의 최적화 기법을 적용한다고 해서, 항상 빨라진다는 걸 보장할 수는 없다. 컴파일러의 버전과 종류, 만들고자 하는 애플리케이션의 특징에 따라서 결과가 달라질 수 있기 때문이다. 만약 임베디드기기에 올라가는 애플리케이션이 아닌, 고수준의 애플리케이션의 개발이 목적이라면 아래의 최적화 기법은 그다지 소용이 없을 것이다. 고수준 애플리케이션이라면, 미세한 성능최적화를 위한 노력하는 것 보다는 주요 데이터처리 알고리즘과 가독성에 신경을 쓰는게 더 나은 결과를 보여줄 것이다.

== 데이터 연산 ==
=== 정수 ===
우리가 사용할 값이 음수가 아니라면 int 형대신에 '''unsigned int'''형을 사용해야 한다. 어떤 프로세스들은 '''unsigned integer'''의 연산이 '''signed''' 연산보다 매우 빠르다. 또한 나누기/나눗셈 작업의 경우에도 음수가 필요 없다면 unsigned 를 명시해주는게 좋다. 

루프에 사용될 변수라고 한다면, 다음과 같이 깔끔하고 효율적으로 선언할 수 있을 것이다.
{{{#!plain
register unsigned int variable_name;
}}}

기억해야할 또다른 점은 floating point 연산은 매우 느리다라는 점이다. floating point 데이터 타입은 [wiki:Site/Java/Documents/ComputerScienceUsingJava/Chapter07 자바와 함께 하는 컴퓨터과학]문서를 참고하기 바란다. 척 봐도 floating point 숫자는 다루기가 꽤나 복잡하다는 것을 알 수 있을 것이다. 만약 여러분이 소숫점 2자리까지의 정확도를 유지하는 회계프로그램을 만든다면, 모든 값에 x100을해서 int 형으로 바꾼다음 연산을 하도록 한다. 가능하면 외부의 수학라이브러리를 사용하지 않도록 한다. FPUs와 같은 라이브러리는 매우 느리다.

=== 나눗셈 그리고 나머지 ===
표준적인 프로세서에서의 분모와 분자의 32bit 나눗셈은 20~140의 실행 사이클을 가지고 있다. 나눗셈을 이용하면 다음과 같은 시간이 소비된다.    
{{{#!plain
Time (numerator / denominator) = C0 + C1* log2 (numerator / denominator)
= C0 + C1 * (log2 (numerator) - log2 (denominator)).
}}}
널리 쓰이는 버젼은 약 20+4.3N의 사이클을 보여준다. ARM 뿐만 아니라 프로세서를 막론하고 이런 연산은 피하는게 바람직하다. 나눗셈연산은 가능하다면 곱셈으로 대체해서 사용하기 바란다. 

예를들어 (a/b) > c 는 b * c가 integer 범위안이라는 것을 안다면 a > (c * b)로 다시 쓰일 수 있다. 

=== Combining division and remainder ===
나눗셈 (x/y) 그리고 나머지(x%y)둘다 종종 필요한 케이스이다
그러한 케이스에 비추어보아 나눗셈펑션을 컴파일러에 결합하는것이좋다 왜냐하면 나눗셈펑션은 항상 나눈값과 나머지를 리턴하기 필요하다 만약둘다 필요하다면 우리는 이와같은 예제를 같이 쓸수있어야한다
{{{#!plain
int func_div_and_mod (int a, int b) {
        return (a / b) + (a % b);
    }
}}}

=== 1 부터 n 까지 더하기 ===
{{{#!plain
for (i = 0; i < n; i++)
   sum += i;
}}}
보다는 아래가 낫다.
{{{#!plain
n(n+1) * 0.5
}}}
천재 수학자의 어린시절 이야기를 들은 기억이 있다. 자리를 비운 사이 얘들이 놀지 못하게 하려고 1부터 100까지 더하라는 문제를 냈는데, 5분만에 풀고 놀았더란 얘기다. (수학자 파스칼의 어린시절 얘기이던가 가물가물 하다.)

어떻게 풀었냐고 물어봤더니. "1+100, 2+99, 3+98"이게 50번 반복되더라는 것이어서 101*50 해서 답을 구했다고 대답했다고 한다. 이것을 대수로 나타내면 n(n+1) * 0.5 이 나온다.

약간만 수학적으로 머리를 굴리는 것으로 매우 큰 효과를 얻을 수 있다. 시간나면 대수학을 공부해보도록 하자.
=== 짝수 홀수 확인 ===
비트연산을 잘 이용하면 간단하게 검사할 수 있다.
{{{#!plain
1234 & 1 ? printf("짝수\n"):printf("홀수\n");
이런 방법도 가능하다.
1234 << 31 ?  printf("짝수\n"):printf("홀수\n");
}}}
당연히 % 연산보다 훨씬 효율적이다.

=== 2의 배수로 나누기 ===
나누기를 할 때 2의 배수를 분자로 함으로써, 코드를 더 효율적으로 만들 수 있다. 이경우에 컴파일러는 나누기 연산대신에 shift 연산을 할 수 있기 때문이다. shift 연산은 가장빠른 연산중의 하나다. 그러므로 가능하면 2의 배수로 나눌 수 있도록 스케일을 조절할 필요가 있다. (예를 들어 66으로 나누어야 한다면 64로 나눌 수 있도록 스케일을 조절하라).
{{{#!plain
typedef unsigned int uint;

 uint div32u (uint a) {
   return a / 32;
 }
 int div32s (int a){
   return a / 32;
 }
}}}
이경우에도 signed 값보다는 unsigned 로 나누어질 수 있도록 함수를 조절할 필요가 있다. signed의 경우에는 더많은 시간이 소비된다. 왜냐하면 오른쪽으로 쉬프트 시킬경우 가장왼쪽의 비트를 0으로 만들어주는 연산이 한번더 들어가기 때문이다. 

{{{#!plain
#include <stdio.h>

int main()
{
  unsigned int a = 1024;
  unsigned b, c;
  b = a/32;    // --- 1
  c = a >> 5;  // --- 2
}
}}}
1과 2는 동일한 결과를 보여주며, 컴파일러내에서도 동일하게 shift 처리된다. 다음은 intel 프로세서에서 gcc로 컴파일된 어셈블리어중 1과 2에 해당되는 부분의 코드다. 
{{{#!plain
movl    $1024, -12(%ebp)
movl    -12(%ebp), %eax
shrl    $5, %eax           # b = a / 32
movl    %eax, -8(%ebp)
movl    -12(%ebp), %eax
shrl    $5, %eax           # c = a >> 5
}}}

=== Binary Breakdown ===
여러개의 조건을 검사하다 보면, if와 else if를 여러개 사용하는 경우가 생긴다.
{{{#!plain
if(a==1) { 
} else if(a==2) { 
} else if(a==3) { 
} else if(a==4) { 
} else if(a==5) { 
} else if(a==6) { 
} else if(a==7) { 
} else if(a==8) 

{ 
}
}}}
이경우 2개로 나누어서 조건 검사를 하도록 한다.
{{{#!plain
if(a<=4) { 
    if(a==1)     { 
    }  else if(a==2)  { 
    }  else if(a==3)  { 
    }  else if(a==4)   { 
  
    } 
} 
else 
{ 
    if(a==5)  { 
    } else if(a==6)   { 
    } else if(a==7)  { 
    } else if(a==8)  { 
    } 
}
}}}
이렇게 하면 최악의 경우 비교횟수가 절반이 됨을 알 수 있다. 필요에 따라서는 아래와 같이 3중루프 코드로 만들 수도 있다. 좀더 빠르게 동작하긴 하겠지만 코드가 보기 어려워진다는 단점이 생긴다.
{{{#!plain
if(a<=4) 
{ 
    if(a<=2) 
    { 
        if(a==1) 
        { 
            /* a is 1 */ 
        } 
        else 
        { 
            /* a must be 2 */ 
        } 
    } 
    else 
    { 
        if(a==3) 
        { 
            /* a is 3 */ 
        } 
        else 
        { 
            /* a must be 4 */ 
        } 
    } 
} 
else 
{ 
    if(a<=6) 
    { 
        if(a==5) 
        { 
            /* a is 5 */ 
        } 
        else 
        { 
            /* a must be 6 */ 
        } 
    } 
    else 
    { 
        if(a==7) 
        { 
            /* a is 7 */ 
        } 
        else 
        { 
            /* a must be 8 */ 
        } 
    } 
}
}}}

=== 배열을 이용한 index 생성 ===
특정값에 대응되는 문자를 변수에 입력하는 코드를 만든다면 다음과 같이 switch 문을 사용할 것이다.
{{{#!plain
switch ( queue ) {
  case 0 :   letter = 'W';
     break;
  case 1 :   letter = 'S';
     break;
  case 2 :   letter = 'U';
     break;
}
}}}
혹은 if else 문을 사용할 수도 있을 것이다.
{{{#!plain
 if ( queue == 0 )
   letter = 'W';
 else if ( queue == 1 )
   letter = 'S';
 else
   letter = 'U';
}}}

다음과 같이 문자의 배열을 인덱스화 하면 더 빠른 접근이 가능하다. - 사용하기도 쉽다 -
{{{#!plain
static char *classes="WSU";
letter = classes[queue];
}}}

=== 나머지 연산자의 대체 ===
우리는 나눗셈의 나머지를 알기 위해서 나머지 연산자 '''%'''를 사용한다. 이경우 % 연산대신 판단문을 사용해서 시간을 줄일 수 있다. 아래의 두 코드를 비교해 보기 바란다.
{{{#!plain
uint modulo_func1 (uint count)
{
   return (++count % 60);
}

uint modulo_func2 (uint count)
{
   if (++count >= 60)
  count = 0;
  return (count);
}
}}}
if 문은 나머지 연산자보다 빠른코드를 생성한다. 주의 할점은 2번째 함수의 경우 0에서 60사이의 값에 대해서만 제대로 측정이 된다는 점이다. 


=== Using Aliases ===
아래의 코드를 보기 바란다.
{{{#!plain
  void func1( int *data )    {
      int i;

     for(i=0; i<10; i++) 
     {
            anyfunc( *data, i);
     }
  }
}}}

*data 가 결코 변하지 않는다고 하더라도, anyfunc 함수를 호출하는 컴파일러는 이걸 알 수가 없다. 그래서 변수가 사용될 때마다 메모리로 부터 다시 읽어들이게 된다. 이 문제는 지역변수를 하나더 둠으로써 해결할 수 있다. 
{{{#!plain
  void func1( int *data )
  {
      int i;
      int localdata;

      localdata = *data;
      for(i=0; i<10; i++)
      {
          anyfunc ( localdata, i);
      }
  }
}}}

== 데이터 타입 ==
C 컴파일러는 ''char, short, int, long, float, double'' 등의 다양한 원시 데이터 타입을 제공한다. 필요한 영역에 필요한 수준의 데이터 타입을 사용하도록 하자. 
=== 전역 변수  ===
전역 변수는 절대 레지스터에 할당할 수 없다. 포인터를 사용하여 간접적으로 할당하거나 함수호출을 이용해서 전역변수를 변환할 수 있다. 

따라서 컴파일러는 전역변수의 값을 레지스터에 올려서 캐쉬할 수 없게 되고 때문에 글로벌 변수를 이용할 때마다 다시 읽어들이는 오버로드가 생기게 된다. 그러므로 가능하면 글로벌 변수를 직접 호출하는 대신에, 로컬변수를 이용해서 필요한 연산을 하고 그 결과를 글로별 변수에 할당하는 방법을 사용해야 한다. 
{{{#!plain
int f(void);
int g(void);
int h(void);
int errs;
void test1(void)
{
  errs += f();
  errs += g();
  errs += h();
}
void test2(void)
{
  int localerrs = errs;
  localerrs += f();
  localerrs += g();
  localerrs += h();
  errs = localerrs;
}
}}}
'''test1'''은 매번 전역변수를 로드해야 한다. 반면 test2의 경우 레지스터에 등록된 localerrs에 값을 저장하고 마지막에 한번만 전역변수에 접근함을 알 수 있다. 

=== 지역변수 ===
가능하면 지역변수로 '''char''' 이나 '''short'''를 사용하지 않도록 한다. char와 short가 사용될 경우 컴파일러는 값을 저장하기 위해서 8bit 혹은 16bit를 할당한 후, 남는 크기를 줄이는 작업을 하게 된다. 이는 24bit, 16bit 만큼을 shift 시키는 연산을 하게 됨을 의미한다. 그러므로 입력되는 데이터가 8 혹은 16 비트라고 하더라도, 32bit로 연산을 하도록 함수를 만들 필요가 있다. 
{{{#!plain
int wordinc (int a)
{ 
   return a + 1;
}
short shortinc (short a)
{ 
    return a + 1;
}
char charinc (char a)
{ 
    return a + 1;
}
}}}
3번째 코드가 가장 빠른결과를 보여줄 것이라고 생각할지도 모르지만, 1번째 코드가 가장 빠르게 작동한다.

=== 포인터 ===
구조체를 그대로 넘길경우 구조체의 모든 값이 스택에 올라가기 때문에 느리게 작동한다. 그래서 구조체의 포인터를 넘기는 경우가 많다. 나는 수 kbyte의 구조체를 넘기는 프로그램을 본적이 있다. 이런 경우 포인터를 쓰도록 하자.

포인터를 통해서 구조체를 넘길때, 구조체의 멤버를 수정할일이 없다면 '''상수'''로 선언해서 넘기도록 하자. 
{{{#!plain
void print_data_of_a_structure ( const Thestruct  *data_pointer)
{
   ...printf contents of the structure...
}
}}}
이렇게 하면 컴파일러는 인자로 넘어온 포인터가 수정할 수 없는 외부 구조체라는 것을 알게 된다. 이렇게 되면, 값이 사용될 때마다 다시 읽혀질 필요가 없어지게 된다. 또한 이러한 코드는 실수로 구조체 멤버의 변수를 바꾸는 것과 같은 실수를 하지 않도록 해준다.

=== Pointer chains ===
구조체내의 정보에 접근하려다 보면 포인터(:12)의 chain을 사용해야 할 때가 있다. 다음과 같은 경우다.
{{{#!plain
typedef struct { int x, y, z; } Point3;
typedef struct { Point3 *pos, *direction; } Object;

void InitPos1(Object *p)
{
   p->pos->x = 0;
   p->pos->y = 0;
   p->pos->z = 0;
}
}}}
이럴 경우 p->pos 를 다른 포인터에 할당해서 접근하도록 하자. 이렇게 하면 p->pos 가 캐쉬되므로 좀더 효율적으로 작동하게 된다.
{{{#!plain
void InitPos2(Object *p)
{ 
   Point3 *pos = p->pos;
   pos->x = 0; 
   pos->y = 0;
   pos->z = 0;
}
}}}
코드가 좀더 보기 좋아진다는 효과도 노릴 수 있다. 

=== Switch 대신 lookup table 를 사용하라 ===
switch는 다음과 같은 경우 사용한다.
  * 여러개의 함수중 하나를 호출해야할 필요가 있을 때
  * 다양한 리턴값을 넘겨받고 이를 처리해야 할때
  * 여러개의 코드중 하나를 실행시켜야 할때

예를 들어서 조건값을 입력받아서 거기에 맞는 문자열을 리턴하는 아래와 같은 코드가 있다고 가정해보자.
{{{#!plain
char * Condition_String1(int condition) {
  switch(condition) {
     case 0: return "EQ";
     case 1: return "NE";
     case 2: return "CS";
     case 3: return "CC";
     case 4: return "MI";
     case 5: return "PL";
     case 6: return "VS";
     case 7: return "VC";
     case 8: return "HI";
     case 9: return "LS";
     case 10: return "GE";
     case 11: return "LT";
     case 12: return "GT";
     case 13: return "LE";
     case 14: return "";
     default: return 0;
  }
}
}}}
위의 코드는 아래와 같이 좀 더 효율적인 코드로 만들 수 있다. 덤으로 보기에도 편하다.
{{{#!plain
char * Condition_String2(int condition) {
   if ((unsigned) condition >= 15) return 0;
      return
      "EQ\0NE\0CS\0CC\0MI\0PL\0VS\0VC\0HI\0LS\0GE\0LT\0GT\0LE\0\0" +
       3 * condition;
}
}}}
첫번째 루틴은 240byte가 필요하지만 두번째 루틴은 72바이트만 소모되고 있다.

== 루프 ==
루프는 모든 프로그램에서 사용되는데, 많은 경우 루프에서 과다한 시간을 소비하게 된다. 여러번 실행되는 루프틔 특성상 조그마한 시간의 낭비가 게속 누적되기 때문이다. 

=== Loop termination ===
루프를 종료시키기 위한 검사는 항상 count-down-to-zero 방식을 사용하도록 한다. 이것은 좀더 적은 시간을 소비한다. 아래의 두개의 예제는 동일한 일을한다. 다른점이 있다면 첫번째 코드는 루프를 증가시킨다는 점이고 두번째는 루프를 감소시킨다는 점이다. 
{{{#!plain
int fact1_func (int n)
{
    int i, fact = 1;
    for (i = 1; i <= n; i++)
      fact *= i;
    return (fact);
}

int fact2_func(int n)
{
    int i, fact = 1;
    for (i = n; i != 0; i--)
       fact *= i;
    return (fact);
}
}}}
=== 더욱 빠른 for 문 ===
다음은 0부터 10까지의 숫자를 연산하기 위해서 for 문을 사용한 일반적인 예다.
{{{#!plain
for (i = 0; i < 10; i++) {...}
}}}
i는 0,1,2,3,4,5,6,7,8,9 로 1씩 증가할 것이다.

가능하면 아래와 같이 숫자를 감소시키는 방향으로 for 문을 사용하라.
{{{#!plain
for (i = 10; i--;) {...}
}}}
첫번재 코드보다 두번째 코드가 더 빠른 수행능력을 보여준다. 

두번째 코드는 '''i가 0이 아니면 i를 감소시키고 다음 코드를 진행하라'''의 의미인데, 조건 검사의 경우 0인지 아닌지를 비교하는데 더 작은 시간이 소비되기 때문이다. 그러므로 두번째 코드는 아래와 같이 재작성할 수 있다. 두번째 예제코드 보다는 아래의 코드가 더 보기 쉬우므로, 아래의 코드를 사용하는게 가독성 측면에서 유리할 것이다.
{{{#!plain
for (i = 10; i ; i--) { }
혹은 
for (i = 10; i!=0; i--) { }
}}}
이들은 모두 동일한 수행능력을 보여준다. 

=== Loop jamming ===

=== 함수 루프 ===
함수는 호출되기 위한 분명한 오버헤드가 존재한다. 실행해야될 함수가 있는 포인터만 변경하는게 아닌, 값들을 stack에 push하는 것과 새로운 변수의 할당과 같은 작업이 수행되기 때문이다. 때문에 루프에서 함수를 호출하는 등의 코드는 작성하지 않는게 좋다. 이런류의 코드는 반대로 함수에서 루프를 수행하도록 변경하는걸 추천한다. 

{{{#!plain
for(i=0 ; i<100 ; i++) 
{ 
    func(t,i); 
} 
- 
- 
- 
void func(int w,d) 
{ 
    lots of stuff. 
}
}}}

위의 코드는 아래처럼 바꿀 수 있다. 동일한 일을 좀더 빠르게 수행할 수 있다.
{{{#!plain
func(t); 
- 
- 
- 
void func(w) 
{ 
    for(i=0 ; i<100 ; i++) 
    { 
        //lots of stuff. 
    } 
}
}}}

=== Population count - 비트 계수하기 ===
아래의 코드는는 주어진 값에 1bit가 몇개인지를 검사하는 코드다. '''0000 1010''' 이라면 2를 리턴하는 식이다. 이러한 비트필드는 일정한 범위의 값이 참인지 거짓인지를 빠르게 체크하기 위해서 널리 사용될 수 있다.  

다음과 같이 1씩 오른쪽으로 쉬프트 하면서, & 연산을 한다. 
{{{#!plain
int countbit1(uint n)
{
  int bits = 0;
  while (n != 0)
  {
    if (n & 1) bits++;
    n >>= 1;
   }
  return bits;
}
}}}

이 코드는 다음과 같이 4만큼 쉬프트 하는 식으로 바꿔서, 성능을 높일 수 있다.
{{{#!plain
int countbit2(uint n)
{
   int bits = 0;
   while (n != 0)
   {
      if (n & 1) bits++;
      if (n & 2) bits++;
      if (n & 4) bits++;
      if (n & 8) bits++;
      n >>= 4;
   }
   return bits;
}
}}}
=== Earyl loop breaking ===
루프를 사용하다보면, 일정 조건이 만족되면 뒤의 프로세스가 더이상 필요 없어지는 경우가 있다. 이 경우에는 break를 이용해서 루프를 벗어나도록 한다.
{{{#!plain
found = FALSE; 
for(i=0;i<10000;i++) 
{ 
    if( list[i] == -99 ) 
    { 
        found = TRUE; 
    } 
} 

if( found ) printf("Yes, there is a -99. Hooray!\n");
}}}

위의 코드는 -99가 포함되어 있는지 아닌지를 확인하는 프로그램이므로, 일단 발생이 되었다면, 루프를 돌 필요가 없다. 아래와 같이 break 문으로 빠져나가면 쓸데없는 루프의 낭비를 줄일 수 있다.
{{{#!plain
    found = FALSE; 
    for(i=0; i<10000; i++) 
    { 
        if( list[i] == -99 ) 
        { 
            found = TRUE; 
            break; 
        } 
    } 
    if( found ) printf("Yes, there is a -99. Hooray!\n");
}}}
=== Loop 사용하지 않기 ===
몇번만 순환하는 루프의 경우 풀어쓰면 성능을 향상시킬 수 있다 - 코드가 좀더 커지긴 한다 -. 루프를 사용하지 않게 되면, 카운터를 유지하고 업데이트하고 비교하는 작업이 그만큼 줄어들게 된다.
{{{#!plain
for(i=0; i<3; i++){ 
    something(i);
}
}}}
보다는 아래의 코드가 더 효율적이다.
{{{#!plain
something(0);
something(1);
something(2);
}}}

여하간에 가능하면 루프를 줄이는게 더 효율적이다. 아래의 코드는 한번의 루프에서 블럭단위로 함수를 호출함으로써, 루프의 수를 줄이고 있다.
{{{#!plain
//Example 1

#include<STDIO.H> 

#define BLOCKSIZE (8) 

void main(void)
{ 
int i = 0; 
int limit = 33;  /* 33 번 함수를 호출한다 */ 
int blocklimit; 

/* The limit may not be divisible by BLOCKSIZE, 
 * go as near as we can first, then tidy up.
 */ 
blocklimit = (limit / BLOCKSIZE) * BLOCKSIZE; 

/* 한번의 루프에서 8번의 함수를 호출해서 루프의 순환횟수를 줄이고 있다. */ 
while( i < blocklimit ) 
{ 
    printf("process(%d)\n", i); 
    printf("process(%d)\n", i+1); 
    printf("process(%d)\n", i+2); 
    printf("process(%d)\n", i+3); 
    printf("process(%d)\n", i+4); 
    printf("process(%d)\n", i+5); 
    printf("process(%d)\n", i+6); 
    printf("process(%d)\n", i+7); 

    /* counter 업데이트 */ 
    i += 8; 

} 

/* 
 * 8의 배수만큼 함수를 호출하고 있으므로, 처리하지 못한 함수가 생긴다.
 * 아래에서 처리하지 못한 함수를 호출한다.
 */ 

if( i < limit ) 
{ 
    /* Jump into the case at the place that will allow
     * us to finish off the appropriate number of items. 
     */ 

    switch( limit - i ) 
    { 
        case 7 : printf("process(%d)\n", i); i++; 
        case 6 : printf("process(%d)\n", i); i++; 
        case 5 : printf("process(%d)\n", i); i++; 
        case 4 : printf("process(%d)\n", i); i++; 
        case 3 : printf("process(%d)\n", i); i++; 
        case 2 : printf("process(%d)\n", i); i++; 
        case 1 : printf("process(%d)\n", i); 
    }
} 

}
}}}

== 함수 디자인 ==
함수를 작고 가볍게 많드는건 좋은 생각이다. 이렇게 함으로써 컴파일러는 register 할당과 같은 영역에서 좀더 쉽게 최적화 할수 있게 된다.

=== 함수 호출 Overhead ===
프로세서에서 함수의 호출은 예상과 달리 그리 큰 비용이 들지는 않는다. 함수가 호출되면 register에 함수의 인자를 넘기게 된다. 이 인자들은 '''char, short, int, float, structure'''등이 올 수 있다. 이들 인자는 실제 4개만을 전달할 수 있다는 한계를 가진다. 이 이상으로 인자가 넘어가게 되면, stack를 이용해서 함수의 인자를 넘기게 된다. 당연히 함수를 호출함에 있어서 OverHead가 발생하게 된다. 함수호출시 발생하는 인자의 제한에 대해서는 [wiki:Site/Assembly/Documents/article_Linux_Assembler_%C7%CF%BF%EC%C5%F5 Linux에서의 Assembly]문서를 참고하기 바란다.

예제코드
{{{#!plain
    int f1(int a, int b, int c, int d) { 
       return a + b + c + d;
    }

    int g1(void) {
       return f1(1, 2, 3, 4);
    }


    int f2(int a, int b, int c, int d, int e, int f) {
      return a + b + c + d + e + f;
    }

    ing g2(void) {
     return f2(1, 2, 3, 4, 5, 6);
    }
}}}
6개의 인자를 사용하는 '''f2'''와 '''g2'''함수는 스택에 저장되어 있는 인자를 꺼내기 위해서 2번의 메모리 접근이 더 발생하게 된다.

=== 가능한 인자의 수를 줄여라 ===
그러므로 가능한 적은 수의 인자를 넘겨받도록 함수를 설계할 필요가 있다.
  * 4개 이하의 인자를 가지도록 함수를 설계하라. 4개가 넘어가면 스택을 통해서 인자를 넘기게 된다.
  * 만약 함수가 4개 이상의 인자가 사용되면, 스택을 통해서 인자를 넘기게 되고 스택의 크기만큼 메모리 접근이 발생하게 된다.
  * 이럴 경우 구조체를 선언하고, 구조체에 대한 포인터를 넘기는 방식을 사용하도록 한다.
  * 구조체를 사용하면 인자의 양을 줄일 수 있으며, 코드 활용성도 높아지게 된다. 
  * 인자에 사용되는 자료형은 '''long'''크기 이상으로 하도록 하자.
  * 가변인수를 사용하지 말라. 가변인수를 사용하게 되면, 인자가 stack으로 넘어가게 된다.

=== 인라인 함수 ===
''__inline''키워드를 이용하면 함수를 인라인화 할 수 있게 된다. 이것은 일종의 매크로 처럼 작용을 하며, 함수가 호출되는 대신 함수의 본체가 직접 치환이 되어 버린다. 이렇게 함으로써, 함수를 호출하는데 드는 비용을 줄일 수 있게 된다. 반면 코드가 모두 치환되어 버리므로, 코드의 크기가 커지게 된다.
{{{#!plain
    __inline int square(int x) {
       return x * x;
    }

    #include <MATH.H>

    double length(int x, int y){
        return sqrt(square(x) + square(y));
    }
}}}
인라인 함수를 이용함으로써 얻을 수 있는 이득은 다음과 같다.
  * 함수호출을 위한 비용이 발생하지 않는다. 코드를 직접 읽어들이기 때문이다.
  * 일반적으로 인자를 넘기는 방식은 변수를 복사하는 것보다 적은 비용이 든다. 만약 인자가 상수라면 컴파일러는 더욱 높은 수준의 최적화를 할 수 있을 것이다.

== 참고문헌 ==
  * http://www.azillionmonkeys.com/qed/optimize.html
  * 원문 : http://www.codeproject.com/cpp/C___Code_Optimization.asp
