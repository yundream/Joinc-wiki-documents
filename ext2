#title ext2 파일시스템 살펴보기

 || 출처		|| 나우누리											||
 || 원문 		|| 리눅스 학당-리눅스 강좌 / 연재 (go LINUX) 754번	||
 || 올린이		|| hetta (이기천  )  								||
 || 올린날		|| 02/08/02 21:23									||
 || wiki변경	|| [yundream]										||

 * 이 문서는 [w3m]에서 가장 잘 보입니다. 다른 부라우저에서는 텍스트 상자가 깨질수도 있습니다.  

'''목차'''
[[TableOfContents]]

=== 소개 ===
리눅스에서 대표적인 파일시스템(file system)이라 할수있는 
ext2파일시스템에 대해서 알아보고자 합니다.  (물론 ext3, reiserfs등도있지만..)
파일시스템에 대해서 상당히 어려울것 이라고 생각하실지 모르나, 사실 이것도 
결국 데이터를 효율적으로 관리하기 위한 수단일 뿐입니다. 파일 시스템이 없어도
데이터를 다룰수 없는건 아닙니다. 하지만, 파일시스템을 이용해 하나의 레이어를
씌움으로 효율적으로 관리가 가능합니다. 파일시스템은 복잡한것만 있는건 아닙니다.
예를들어 Micromonitor라는 펌웨어의 파일시스템은 다음과 같이 생겼습니다.
플래쉬 메모리에서 동작하도록 설계된 것인데 상당히 간단합니다. 파일의 헤더, 데이터가 
연속된 메모리 공간에 있고, 파일들의 헤더는 링크드 리스트로 연결되어있습니다.
이렇게 간단한것이 무슨 파일시스템이냐고 하실지 모르지만 실제로 사용되어지고
있는것입니다. (물론 여기에는 플래쉬 메모리의 특성을 고려한것이지요.)

{{{#!plain
+--------------------------------------------------------+-------+
| file1 header | file1 data | file2 header | file2 data  | ..... |
+--------------------------------------------------------+-------+
}}}

물론, ext2파일시스템은 이것보다는 훨씬 복잡합니다. 하지만 그것은 데이터를
효율적으로 관리하기 위한 영역이 좀더 세분화 되어있다고 보면 될 것 같습니다.
이번 이야기에서의 준비물은 1.44플로피 디스켓이 되겠습니다. 하드디스크라 할지라
도 기본원리는 똑같습니다. 어차피 ext2파일시스템이 어디 가겠습니까?
이 짧은글이 ext2파일 시스템의 세세한 부분까지 모두 다루는 것은 불가능합니다.
그대신 하나의 파일이 어떻게 ext2파일시스템에서 표현되는가에 초점을 맞추겠습니다.
대략적 일정은 디스켓을 포멧하고, ext2파일시스템을 만들고, 하나의 파일을 만들고 
분석할것입니다. 그럼 시작하도록 하죠 :)


=== EXT2 파일 시스템 분석 ===
==== 포멧 ====
fdformat 명령어로 디스켓을 포맷 합니다. 여기서 MS-윈도우와 달리 리눅스에서
포멧의 의미는 다릅니다. 윈도우에서는 파일시스템을 만드는것까지 의미하나
리눅스에서는 파일시스템을 만드는명령어는 별도로 존재합니다.
리눅스에서는 단순한 디스크 초기화입니다. 포멧을 하고 ext2를만들든, msdos,등을
만들든 그것은 자유입니다.

{{{#!plain
[root@localhost hetta]# fdformat /dev/fd0
Double-sided, 80 tracks, 18 sec/track. Total capacity 1440 kB.
Formatting ... done
Verifying ... done
}}}

포멧이 완료되었으면 다음과 같이 
dd로 파일에 이미지를 저장한후 디스켓에 뭐가 써져있나를 od유틸리티로 
알아봅니다.

{{{#!plain
[root@localhost /root]# dd if=/dev/fd0 of=fdimg1.ext2.dump
2880+0개의 레코드를 입력하였습니다
2880+0개의 레코드를 출력하였습니다

[root@localhost /root]# od -t x -A x1 fdimg1.ext2.dump 
000000 f6f6f6f6 f6f6f6f6 f6f6f6f6 f6f6f6f6
*
168000
}}}

od유틸리티의 출력물중 맨 윈쪽은 메모리 주소(16진수)를 의미합니다. *는 
바로위의 라인이 계속 반복된다는 의미입니다. 보는 바와같이 0xf6를 단순히 
쓰고있죠?

=== ext2파일시스템 만들기 ===
mkfs로 파일시스템을 만듭니다.
여기서 주목하실것은 <==한부분입니다.
즉, 한개의 블록 사이즈는 1024( 0x400) 이며 그룹은 한개있고, 한개의 그룹당
184개의 아이노드가 있다는것이지요. 이런 정보들은 앞으로의 분석에 
요긴하게 사용될것입니다.

{{{#!plain
[root@localhost /root]# mkfs -t ext2 /dev/fd0
mke2fs 1.22, 22-Jun-2001 for EXT2 FS 0.5b, 95/08/09
Filesystem label=
OS type: Linux
Block size=1024 (log=0)            <==
Fragment size=1024 (log=0)
184 inodes, 1440 blocks           
72 blocks (5.00%) reserved for the super user
First data block=1
1 block group                          <==
8192 blocks per group, 8192 fragments per group
184 inodes per group               <==

Writing inode tables: done                            
Writing superblocks and filesystem accounting information: done

This filesystem will be automatically checked every 32 mounts or
180 days, whichever comes first.  Use tune2fs -c or -i to override.
}}}

포멧이 끝낫으면 또한번 살펴보죠.
출력물이 길긴하지만 짜르기도 뭐하고하니 그대로 보여드립니다.

{{{#!plain
[hetta@localhost hetta]$ od -t x -A x1 /dev/fd0 
000000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
000200 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6
*
000400 b8 00 00 00 a0 05 00 00 48 00 00 00 77 05 00 00
000410 ad 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00
000420 00 20 00 00 00 20 00 00 b8 00 00 00 00 00 00 00
000430 4b ee 48 3d 00 00 1b 00 53 ef 01 00 01 00 00 00
000440 45 ee 48 3d 00 4e ed 00 00 00 00 00 01 00 00 00
000450 00 00 00 00 0b 00 00 00 80 00 00 00 00 00 00 00
000460 02 00 00 00 01 00 00 00 27 37 82 29 a5 cf 4e c5
000470 82 11 76 a1 4b fd bb ea 00 00 00 00 00 00 00 00
000480 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
000800 03 00 00 00 04 00 00 00 05 00 00 00 77 05 ad 00
000810 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
000820 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
000c00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00
000c10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
000cb0 00 00 00 80 ff ff ff ff ff ff ff ff ff ff ff ff
000cc0 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
*
001000 ff 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00
001010 00 00 00 00 00 00 00 ff ff ff ff ff ff ff ff ff
001020 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
*
001400 00 00 00 00 00 00 00 00 47 ee 48 3d 47 ee 48 3d
001410 47 ee 48 3d 00 00 00 00 00 00 00 00 00 00 00 00
001420 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
001480 ed 41 00 00 00 04 00 00 47 ee 48 3d 47 ee 48 3d
001490 47 ee 48 3d 00 00 00 00 00 00 03 00 02 00 00 00
0014a0 00 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00
0014b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
001900 ed 41 00 00 00 30 00 00 47 ee 48 3d 47 ee 48 3d
001910 47 ee 48 3d 00 00 00 00 00 00 02 00 18 00 00 00
001920 00 00 00 00 00 00 00 00 1d 00 00 00 1e 00 00 00
001930 1f 00 00 00 20 00 00 00 21 00 00 00 22 00 00 00
001940 23 00 00 00 24 00 00 00 25 00 00 00 26 00 00 00
001950 27 00 00 00 28 00 00 00 00 00 00 00 00 00 00 00
001960 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
007000 02 00 00 00 0c 00 01 02 2e 00 00 00 02 00 00 00
007010 0c 00 02 02 2e 2e 00 00 0b 00 00 00 e8 03 0a 02
007020 6c 6f 73 74 2b 66 6f 75 6e 64 00 00 00 00 00 00
007030 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
007400 0b 00 00 00 0c 00 01 02 2e 00 00 00 02 00 00 00
007410 f4 03 02 02 2e 2e 00 00 00 00 00 00 00 00 00 00
007420 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
007800 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00
007810 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
007c00 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00
007c10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
008000 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00
008010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
008400 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00
008410 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
008800 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00
008810 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
008c00 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00
008c10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
009000 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00
009010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
009400 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00
009410 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
009800 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00
009810 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
009c00 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00
009c10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
00a000 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00
00a010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
00a400 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6
*
150000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
168000
}}}

==== ext2파일시스템의 대략적 구조 ====

 *그림의 출처 : Understanding the Linux Kernel / Oreilly 

{{{#!plain
+--------------------------------------------------------------+
| boot block|  block group 0   |    ...        | block group n |
+--------------------------------------------------------------+
                  |
                 \|/  (한개의 block group만 확대)
+-------------------------------------------------------------------+
| super |  group      |  data block |  inode   |  inode    |   data |
| block | descriptor  |   bitmap    |  bitmap  |  table    |   block|
+-------------------------------------------------------------------+
}}}

좀 복잡한가요? 하지만 이번이야기를 위해서 다루는건 몇개 안됩니다.
나머지 부분은 다른 문서를 참고하시기 바랍니다.
먼저, 위의 그림에서 부트블록이 보이죠? 그리고 block group이 여러개 이어져 
있습니다. 위에서 mkfs로 파일시스템을 만들었을때 분명 block group이 한개였죠?
1.4메가 밖에 안되는데 한개면 충분하죠 ^^ 물론 하드디스크에 만든다면 여러개의
block group이 존재하겠죠? 
플로피 디스켓에는 다음과 같이 만들어집니다.
위에서 한개의 블록은 1k라고했죠? 그 1k만 배고 block group이 됩니다.

{{{#!plain
+-------------------------------
| boot block|  block group 0   |
+-------------------------------
}}}

윗 그림(처음것) 에서 한개의  block group을 확대한것이 밑에 있습니다. 뭐
이것저것 많죠? super block, group descriptor....
구체적으로 이것들에 뭐가 들어가는가는 다루는것은 이글의 범위를 벗어나므로
다루지 않겠습니다. (솔직히 제 능력이 딸리기도 하고요 ㅋㅋㅋ)
/usr/src/linux/include/ext2_fs.h 에 보면 여러개의 자료구조가 나옵니다.

{{{#!plain
struct ext2_super_block  : super block
struct ext2_group_desc   : group descriptor 
struct ext2_inode        : inode table에서 한개의 엔트리
struct ext2_dir_entry    : 디렉토리를 표현하는 자료구죠
}}}


==== 마운트 ====
이제 디스켓을 mount명령어로 마운트합니다.

{{{
[hetta@localhost hetta]$ su
Password: 
[root@localhost hetta]# mkdir /adrive
[root@localhost hetta]# mount -t ext2 /dev/fd0 /adrive
[root@localhost hetta]# cd /adrive
[root@localhost /adrive]# ls
lost+found
}}}

==== 새로운 파일을 만듬 ====
file1.text라는 파일에 hello_world라는 문자열을 씁니다.
그리고 언마운트합니다.

{{{
[root@localhost /adrive]# echo hello_world > abc.def
[root@localhost /adrive]# ls
abc.def  lost+found
[root@localhost /adrive]# cd /
[root@localhost /]# umount /adrive
[root@localhost /]# exit
exit
}}}


==== 한개의 파일을 만든후 디스켓이미지 ====
이부분이 오늘 이야기의 클라이막스입니다. 훗...
이제 조금씩 조금씩 필요한 부분만 분석해보죠.
{{{
[root@localhost /]# od -t x1 -A x /dev/fd0
}}}

첫번째 블록인 block 0는 부트불록이라고 했죠? 
이 디스켓은 부팅을 가능하게 만든것이 아니니 의미가 없습니다.
{{{#!plain
------------------- boot block (block 0 ) ------------
000000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
000200 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6
*
------------------------------------------------------
}}}

블록1부터 이제 block group  이 시작됩니다. block1은 super block이 들어갑니다.
{{{#!plain
-------------------super block (block 1 )-------------
000400 b8 00 00 00 a0 05 00 00 48 00 00 00 76 05 00 00
000410 ac 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00
000420 00 20 00 00 00 20 00 00 b8 00 00 00 c5 ee 48 3d
000430 ed ee 48 3d 01 00 1b 00 53 ef 01 00 01 00 00 00
000440 45 ee 48 3d 00 4e ed 00 00 00 00 00 01 00 00 00
000450 00 00 00 00 0b 00 00 00 80 00 00 00 00 00 00 00
000460 02 00 00 00 01 00 00 00 27 37 82 29 a5 cf 4e c5
000470 82 11 76 a1 4b fd bb ea 00 00 00 00 00 00 00 00
000480 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
------------------------------------------------------
}}}
위에서 주의깊에 살펴볼것은 전체 아이노드 수는 184개라는것입니다.
super_block 구조체의 앞부분만 보도록 하죠. 

{{{#!vim c
struct ext2_super_block {
       __u32   s_inodes_count;         /* Inodes count */
       __u32   s_blocks_count;         /* Blocks count */
       __u32   s_r_blocks_count;       /* Reserved blocks count */
       __u32   s_free_blocks_count;    /* Free blocks count */
       __u32   s_free_inodes_count;    /* Free inodes count */
       __u32   s_first_data_block;     /* First Data Block */
       __u32   s_log_block_size;       /* Block size */
       __s32   s_log_frag_size;        /* Fragment size */
       __u32   s_blocks_per_group;     /* # Blocks per group */
       __u32   s_frags_per_group;      /* # Fragments per group */
       __u32   s_inodes_per_group;     /* # Inodes per group */
}}}

__u32는 unsigned long 입니다.
즉 32비트죠. 위의 od로 덤프한것에서 4바이트씩 끊어서 생각해보십시요.
그러면 b8 00 00 00 부분이 s_inodes_count 가 되겠죠? 그런데 여기서 주의하실것은
x86은 little endian이란것이지요. 그러므로 0x000000b8이 됩니다.
이것은 십진수로 184개입니다.
이것이 의미하는 바는 inode table에 184개의 엔트리가 있어야 한다는것입니다.
한개의 inode당 inode table entry 크기는 128byte
128 * 184 = 23552 byte
23552 / 1024 = 23 
즉, inode table을 위해 23개의 블록이 필요하다는 결론에 이르게 되죠.

다른 것들도 하나하나 매칭시켜보세요.

그다음에 나오는것이 group descriptor입니다. 
{{{#!plain
--------------- group descriptor (block 2 )-----------
000800 03 00 00 00 04 00 00 00 05 00 00 00 76 05 ac 00
000810 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
000820 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
------------------------------------------------------
}}}
ext2_group_desc는 다음과 같이 구성되어져있죠.
{{{#!vim c
struct ext2_group_desc
{
       __u32   bg_block_bitmap;                /* Blocks bitmap block */
       __u32   bg_inode_bitmap;                /* Inodes bitmap block */
       __u32   bg_inode_table;         /* Inodes table block */
       __u16   bg_free_blocks_count;   /* Free blocks count */
       __u16   bg_free_inodes_count;   /* Free inodes count */
       __u16   bg_used_dirs_count;     /* Directories count */
       __u16   bg_pad;
       __u32   bg_reserved[3];
};
}}}

여기서 주의깊에 볼것은 bg_block_bitmap , bg_inode_bitmap ,bg_inode_table
입니다. super block에서와 같이 분석해보면 다음과 같은결과를 얻죠.

{{{#!plain
block bitmap block number      == 3
inode bitmap block number      == 4 
first inode table block number == 5
}}}

즉, block bitmap, inode bitmap,first inode table 은 각각 3,4,5의 블록에 
위치한다는것입니다.

그다음에 나오는것은 block 3 이죠. 위에서 말한듯이 이것은 block bitmap입니다.
{{{#!plain
-------------- data block bitmap   block 3 -----------
000c00 ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
000c10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
000cb0 00 00 00 80 ff ff ff ff ff ff ff ff ff ff ff ff
000cc0 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
*
-------------------------------------------------------
}}}


그다음은 block4  inode bitmap입니다.
{{{#!plain
------------ inode bitmap   block 4 ------------------
001000 ff 0f 00 00 00 00 00 00 00 00 00 00 00 00 00 00
001010 00 00 00 00 00 00 00 ff ff ff ff ff ff ff ff ff
001020 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
*
------------------------------------------------------
}}}

그다음에 나오는것은 inode table (block 5) 입니다.
inode table과 data block을 함께 보여드립니다. 이제부터의
설명은 이 두부분을 넘나들면서 진행하게 될것입니다.
{{{#!plain
----------- inode table   block 5 ---------------------
001400 00 00 00 00 00 00 00 00 47 ee 48 3d 47 ee 48 3d
001410 47 ee 48 3d 00 00 00 00 00 00 00 00 00 00 00 00
001420 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
001480 ed 41 00 00 00 04 00 00 dd ee 48 3d db ee 48 3d
001490 db ee 48 3d 00 00 00 00 00 00 03 00 02 00 00 00
0014a0 00 00 00 00 00 00 00 00<1c>00 00 00 00 00 00 00
0014b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
001900 ed 41 00 00 00 30 00 00 47 ee 48 3d 47 ee 48 3d
001910 47 ee 48 3d 00 00 00 00 00 00 02 00 18 00 00 00
001920 00 00 00 00 00 00 00 00 1d 00 00 00 1e 00 00 00
001930 1f 00 00 00 20 00 00 00 21 00 00 00 22 00 00 00
001940 23 00 00 00 24 00 00 00 25 00 00 00 26 00 00 00
001950 27 00 00 00 28 00 00 00 00 00 00 00 00 00 00 00
001960 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
/////////////////////// abc.def의 inode ///////////////
001980 b4 81 00 00 0c 00 00 00 db ee 48 3d db ee 48 3d
001990 db ee 48 3d 00 00 00 00 00 00 01 00 02 00 00 00
0019a0 00 00 00 00 00 00 00 00[29]00 00 00 00 00 00 00
0019b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
0019e0 00 00 00 00 d7 54 2a 00 00 00 00 00 00 00 00 00
0019f0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
//////////////////////////////////////////////////////
---> data 블록번호 0x29 !!! 
*

----- data block (block number = 0x1c, root inode) ---
007000 02 00 00 00 0c 00 01 02 2e 00 00 00 02 00 00 00
007010 0c 00 02 02 2e 2e 00 00 0b 00 00 00 14 00 0a 02
007020 6c 6f 73 74 2b 66 6f 75 6e 64 00 00<0c>00 00 00
007030 d4 03 07 01:61 62 63 2e 64:65 66 00 00 00 00 00
007040 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*

007400 0b 00 00 00 0c 00 01 02 2e 00 00 00 02 00 00 00
007410 f4 03 02 02 2e 2e 00 00 00 00 00 00 00 00 00 00
007420 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
007800 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00
007810 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
007c00 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00
007c10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
008000 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00
008010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
008400 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00
008410 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
008800 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00
008810 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
008c00 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00
008c10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
009000 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00
009010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
009400 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00
009410 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
009800 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00
009810 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
009c00 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00
009c10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
00a000 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00
00a010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
#################### block 0x29 ######################
00a400 68 65 6c 6c 6f 5f 77 6f 72 6c 64 0a 00 00 00 00
00a410 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
######################################################
00a800 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6
*
150000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
168000
}}}

위에서 inode table 크기는 23개 블록이 필요하다고 했죠?
그러면 데이터블록의 첫번째 주소를 계산해봅시다.

inode table이 0x1400부터 시작하니깐 데이터 블록의 첫번째 주소는...
0x1400 + 1024 * 23 =     0x1400 + 23552 = 0x1400 + 5c00 = 0x7000 !!!
즉, 0x7000번지부터 데이터블록이 시작합니다.!!
inode table의 한개의 엔트리는 128바이트이며,
ext2_inode구조체로 표현됩니다.(구조체의 자세한것은 ext2_fs.h를 참고하세요)

이제 살펴볼것은  과연 abc.def라는 파일명이 어디있느냐 입니다.
이제 하나하나 따져봅시다.
먼저 inode table에서 한개의 엔트리는 128바이트라고 했습니다.
128은 16진수로 0x80입니다. 그리고 inode는 1번부터 시작하며
몇개의 inode는 예약되어져있습니다.
ext2_fs.h에 보면 ...

{{{#!vim c
/*
* Special inode numbers
*/
#define EXT2_BAD_INO             1      /* Bad blocks inode */
#define EXT2_ROOT_INO            2      /* Root inode */
#define EXT2_ACL_IDX_INO         3      /* ACL inode */
#define EXT2_ACL_DATA_INO        4      /* ACL inode */
#define EXT2_BOOT_LOADER_INO     5      /* Boot loader inode */
#define EXT2_UNDEL_DIR_INO       6      /* Undelete directory inode */
}}}
로 나옵니다.

여기서 주의깊에 볼것은 EXT2_ROOT_INO입니다. 우리가 만든파일은 
/(루트)에 만들어져있죠? 그렇다면 이 루트디렉토리를 분석하면 됩니다.
리눅스(유닉스)의 모든것은 파일입니다.
다시말해 디렉토리도 한개의 파일입니다.
루트 디렉토리는 inode 2번이죠 그렇다면 
0x1400 + 0x80에 inode 엔트리가 있다는것을 짐작하실수있을것입니다.
0x1480의 주소에 있는 정보를 살펴보죠

한개의 inode table엔트리는 다음과 같이 구성되어져 있습니다.
일부만을 보여드립니다.

{{{#!vim c
struct ext2_inode {
       __u16   i_mode;         /* File mode */
       __u16   i_uid;          /* Low 16 bits of Owner Uid */
       __u32   i_size;         /* Size in bytes */
       __u32   i_atime;        /* Access time */
       __u32   i_ctime;        /* Creation time */
       __u32   i_mtime;        /* Modification time */
       __u32   i_dtime;        /* Deletion Time */
       __u16   i_gid;          /* Low 16 bits of Group Id */
       __u16   i_links_count;  /* Links count */
       __u32   i_blocks;       /* Blocks count */
       __u32   i_flags;        /* File flags */
       union {
               struct {
                       __u32  l_i_reserved1;
               } linux1;
               struct {
                       __u32  h_i_translator;
               } hurd1;
               struct {
                       __u32  m_i_reserved1;
               } masix1;
       } osd1;                         /* OS dependent 1 */
       __u32   i_block[EXT2_N_BLOCKS];/* Pointers to blocks */
       __u32   i_generation;   /* File version (for NFS) */
}}}

여기서 관심있게 보실것은 i_block 입니다. 여기에는 이 inode 의 데이터가 
있는 block번호가 배열에 저장되어져있습니다.
( 물론 좀더 복잡한 구조로 되어져 있으나 일단은 이렇게 생각하시면 됩니다.
지금 만든 파일의 길이는 몇바이트밖에 안되므로 i_block에 대하여
깊이 다룰 필요는 없을것 같습니다.)
이제 0014a0 주소에서 <1c> 를 보십시요. 0x1c !! 이것이
루트 아이노드의 데이터가 저장된 블록번호입니다.
그럼이제 그 블록번호로 가보도록 합시다.
inode table 의 밑에 있는  data block을 보시면 block number 0x1c가
있습니다. 

디렉토리 엔트리는 다음과 같이 구성되어져 있습니다. 

{{{#!vim c
struct ext2_dir_entry {
       __u32   inode;                  /* Inode number */
       __u16   rec_len;                /* Directory entry length */
       __u16   name_len;               /* Name length */
       char    name[EXT2_NAME_LEN];    /* File name */
};
}}}

007030주소의 다음부분이 보이시죠?

{{{#!plain
007030 d4 03 07 01:61 62 63 2e 64:65 66 00 00 00 00 00
}}}

여기서 :  :로 묶은 부분을 보면 abc.def의 아시키 코드임이 나옵니다.
그렇다면 이제 이 파일의 inode번호만 찾으면 끝이군요 !!

위의 구조체에 맞추어보면  abc.def의 inode 번호는
{{{#!plain
007020 6c 6f 73 74 2b 66 6f 75 6e 64 00 00<0c>00 00 00
}}}
의 0c  입니다. !!

inode 번호가 0x0c이므로 이제 inode table에서 어디에 이 inode 엔트리가 
있는지를 계산해 봅시다.

inode가 1번부터 시작하므로...
그렇다면 오프셋은 128* 11 = 1408  = 0x580 
{{{#!plain
0x1400 +  0x580 =   0x1980 
}}}
즉 0x1980 에 abc.def파일을 위한 inode 엔트리가 위치합니다.
////////// 으로 표시한 부분이 보이시죠? 
자 이제 루트 아이 노드를 살펴본것과 똑같은 방법으로 
이 아이토드의 블록 번호를 살펴봅시다. 
그러면 블록번호가  0x29 번임을 알수있을것입니다.

그럼 블록번호 0x29부분에 가보면...
{{{#!plain
00a400 68 65 6c 6c 6f 5f 77 6f 72 6c 64 0a 00 00 00 00
}}}

드디어 찾았습니다. ^^
hello_world 의 아스키 코드 값이 그대로 나옵니다. :)

=== 마치며 ===
휴~ 드디어 끝났다.. ^^
재미있으셨는지 모르겠습니다...
어쩌면 너무 지루한 이야기 였는지도 모르겠네요.
잘 이해가 안가신다면 차근차근 따져보시기 바랍니다.
혹시 제 계산에 틀린거 있으면 말씀해주세요 ^^;
설명이 너무 부족한것이 아닌가 라는 생각도 듭니다. 
이 글의 목적은  ext2파일 시스템을 모두 분석하는것이 아닌것을 이해해주시고,
부족한 부분은 다른 참고서적을 찾아보시기 바랍니다.

그럼 무더운 여름 건강하세요!  :)
