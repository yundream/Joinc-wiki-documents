{{{#!html
<HTML
><HEAD
><TITLE
>빠른수정</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.76b+
"><LINK
REL="HOME"
TITLE="C 프로그래머를 위한 Vim 사용"
HREF="index.html"><LINK
REL="PREVIOUS"
TITLE="여러개의 파일을 편집하기"
HREF="multifileeidt.html"><META
http-equiv="Content-Type"
content="text/html; charset=euc-kr"></HEAD
><BODY
CLASS="SECTION"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="NAVHEADER"
><TABLE
SUMMARY="Header navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>C 프로그래머를 위한 Vim 사용</TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A
HREF="multifileeidt.html"
ACCESSKEY="P"
>&#51060;&#51204;</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
></TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
>&nbsp;</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><DIV
CLASS="SECTION"
><H1
CLASS="SECTION"
><A
NAME="QUICKFIX"
></A
>7. 빠른수정</H1
><P
>		Vim을 이용해서 프로그래밍을 할 때의 문제점은 편집-컴파일-편집의 무한순환을
		반복해야 하는 경우가 발생한다는 점이다. 일반적으로는 편집을 마치고, 
		편집창을 빠져나온 다음 컴파일을 하고, 컴파일 결과를 보고 다시 Vim 화면으로
		가서 필요한 코드를 수정하거나 하는 식이다. IDE와 같이 편집/컴파일 과정이
		통합되지 않은 까닭에, 오류메시지를 별도의 창에 가져다 붙인다음에, 코딩을 
		해야 하는 등의 문제도 발생한다. 
	</P
><P
>	
		전용 에디터인 Vim으로는 IDE와 같은 완전한 통합환경을 구축하기는 힘들지만
		그럭저럭 좀더 편하게 사용가능 하도록 할 수는 있다.
	</P
><P
>	
		가장 단순한 방법은 컴파일 과정에서 발생한 에러를 파일로 저장한다음 
		그 정보를 토대로 해당 에러 위치로 편리한 이동을 하는 방법이다.
		<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>1 #include &#60;sys/utsname.h&#62;
2 #include &#60;stdio.h&#62;
3
4 int main()
5 {
6	struct utsname buf;
7	uname(&#38;buf);
8
9	printf("%s %s %s  %s\n", buf.sysname, buf.nodename, buf.release, buf.machine, buf.test);
10	for(int i = 0; i &#38;lt; j; i++)
11	{
12	}
13	return 0;
14 }
		</PRE
></TD
></TR
></TABLE
>
		위의 코드를 컴파일 하면 3군데에서 에러가 발생할건데, 컴파일 과정을 따로
		파일로 저장하도록 한다.
<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
># gcc uname.c 2&#62; uname.err</PRE
></TD
></TR
></TABLE
>
		이제 아래와 같이 호출하면 커서의 위치가 자동적으로 처음 에러가 
		발생한 위치인 9번째 줄로 이동한다. 다음 <B
CLASS="EMPHASIS"
>:cn</B
>을 이용하면 
		다음 에러(혹은 경고)로 이동한다. 10번째 줄로 이동하는 걸 확인할 수 
		있을 것이다.  <B
CLASS="EMPHASIS"
>:cN</B
>를 입력하면 이전 에러(혹은 경고)로 
		이동할 수 있다.
<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
># vim -q uname.err</PRE
></TD
></TR
></TABLE
>
	</P
><P
>	
		만약 Makefile(:12)을 통해서, 코드가 관리되고 있다면, vim 화면에서 바로 
		컴파일 하고, 에러를 확인할 수 있다. 에러의 이동은 :cn, :cN으로 하면 된다. 
<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>:make</PRE
></TD
></TR
></TABLE
>
		Makefile을 통해서 관리하지 않은 경우도 있을 것이다. 그럴경우 아래와 같이
		컴파일 방식을 직접 입력시켜 주면 된다. 
<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>:set makeprg=gcc\ uname.c</PRE
></TD
></TR
></TABLE
>
		이제 :make를 입력하면 make대신 gcc uname.c가 실행되는걸 확인할 수 
		있을 것이다. 더이상 에러가 없으면 <B
CLASS="EMPHASIS"
>에러없음</B
>를 
		출력한다. 
	</P
><P
>	
		여기에서 제시한 방법을 이용하면, 훨씬 퀘적한 개발환경을 만들 수 있을 
		것이다.
	</P
></DIV
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
SUMMARY="Footer navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A
HREF="multifileeidt.html"
ACCESSKEY="P"
>&#51060;&#51204;</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="index.html"
ACCESSKEY="H"
>&#52376;&#51020;&#51004;&#47196;</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>&nbsp;</TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>여러개의 파일을 편집하기</TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
>&nbsp;</TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>&nbsp;</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>
}}}
