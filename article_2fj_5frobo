#title JOINC J-Robo 프로젝트
http://www-903.ibm.com/developerworks/kr/i/robocode_logo_tanks.gif

=== 소개 ===
J-Robo는 자바로 만들어진 (소프트웨어)로봇 탱크간의 대결을 하는 자바 프로젝트로 ibm에서 JAVA를 재밌게 배울 수 있도록 하기 위한 목적으로 진행되어 지고 있다.   

로봇들은 준비된 대결장에서 살아남기 위한 경쟁을 하게 된다. 당연히 가장 똑똑한 로봇들이 살아남게 될것이다. 주변 상황을 파악해서 효율적인 회피 기동과 효율적인 타겟을 설정하는 탱크를 만들어야 하며 이것은 프로그래머의 몫으로 남겨진다. 

ibm에서는 매년 대회를 열어서 끝까지 살아남은 로봇에 대하여 시상을 하고 있다. 상품은 ibm 노트북이다.  

해서 순전히 상품에 눈이 멀어서 Robo프로젝트에 참가해 보기로 했다. 여기에는 irc joinc 채널에서 활동중인 몇명의 멤버가 함께 참가할 것이며, 프로젝트 진행 결과는 계속 이 위키를 통해서 업데이트 될것이다.  

이 게임을 통해서 참가자는 java와 객체지향에 대한 기본적인 이해를 할 수 있다. 

=== 설치 및 실행 하기 ===
설치 와 테스트 코딩 모든 것은 Linux를 기준으로 이루어질 것이다. 필자의 시스템은 다음과 같다.   
 || OS		|| RedHat Linux		|| Kernel 2.6.0		||
 || JDK		|| 1.4.2			||					||
 || CPU		|| INTEL 800 MHz	||					||

[http://www-903.ibm.com/developerworks/kr/robocode IBM Robocode 메인 페이지]에 가서 '''robocode-setup.jar'''를 다운받도록 한다. 그다음 robocode-setup.jar를 실행시키면 설치가 이루어진다. 
{{{#!plain
# java -jar robocode-setup.jar 
}}}
성공적으로 실행하고 나면 '''robocode'''디렉토리가 만들어 지는데, 디렉토리로 이동한 후  '''robocode.sh'''를 실행하면 robocoe가 실행된다.  
{{{#!plain
# ./robocode.sh
}}}
{{{#!html
<img src=http://www.joinc.co.kr/albums/album01/agk.gif>
}}}

robocode를 설치하면 기본적인 셈플 탱크들이 들어 있으므로, 당장 테스트가 가능하다. '''New'''메뉴를 이용해서 아레나에 참가시킬 탱크를 선택해서 '''start'''버튼을 클릭하기만 하면 된다.

=== 나만의 탱크를 만들어 보자 1 ===
그럼 간단하게 탱크를 만들어 보도록 하자. 탱크를 만드는 작업이 매우 복잡할 것이라고 생각될 수도 있겠지만, 프로그래밍을 위한 기본적인 인터페이스는 모두 제공하고 있으므로 java와 객체지향에 대한 기본적인 이해를 가지고 있다면 어렵지 않게 자신만의 탱크를 만들어서 아레나에 참가시킬 수 있다.

탱크 코드는 robots/robots에 위치한다. 여기에 자신만의 디렉토리를 만들고 디렉토리에서 코딩을 하면 된다. 필자는 joinc라는 디렉토리를 만들고 YundreamRobo라는 이름을 가진 탱크를 만들기로 했다.       

다음은 가장 단순한 형태의 탱크를 만들어 내기 위한 코드다. 기본이 되는 코드이며 여기에 자신만의 코드를 추가시켜 효율적인 탱크를 만들어 내면 된다.   
{{{#!plain
package joinc;
import robocode.*;

public class YundreamRobo extends Robot
{
    /*
     * 탱크의 이동과 관련된 코드다.
     * 앞으로 100 이동한후
     * 포탑을 80도 회전
     * 뒤로 100 이동한후 
     * 포탑을 80도 회전한다.
     */
    public void run() {
        while(true) {
            ahead(100);
            turnGunRight(80);
            back(100);
            fire(1);
            turnGunRight(80);
        }
    }

    /*
     * 적을 발견했을 경우 어떻게 행동할 건지를 정의한다. 
     */
    public void onScannedRobot(ScannedRobotEvent e) {
        fire(1);
    }

   /*
    * 적의 공격에 명중되었을 경우 행동
    * 그 위치에 있으면 연속된 공격을 받을 확률이 높으므로 
    * 이동 패턴을 변경할 필요가 있다.
    */
    public void onHitByBullet(HitByBulletEvent e) {
        turnLeft(90 - e.getBearing());
    }

}
}}}
컴파일을 쉽게 하기 위해서 간단한 Makefile을 만들어서 활용하도록 했다.
{{{#!plain
all:
	javac -deprecation -g -classpath /usr/share/jre/j2sdk1.4.2/jre/lib/rt.jar:/root/robocode/robocode.jar:robots /root/robocode/robots/joinc/YundreamRobo.java
}}}
성공적으로 컴파일을 마쳤다면 YundreamRobo.class가 생성될 것이다. 생성된 탱크는 '''robocode.sh'''를 실행시켜서 불러와서 테스트 할 수 있다. 이런 식으로 조금씩 조금씩 좀더 강력한 탱크로 진화시켜 나가면 된다.   

탱크라는 객체는 3개의 메서드로 표현될 수 있을 것이다. 탱크의 이동, 포탑의 회전, 적을 발견했을 때의 행동, 적에게 공격받았을 때의 행동인데, 기본적으로 이들에 대한 메서드를 제대로 정의 한다면 탱크라는 객체를 제어할 수 있을 것이다.    

robocode는 이들 각각의 행동을 위해서 run(), onScannedRobot(), onHitByBullet()의 메서드를 제공한다. 이들만을 이용해서 최소한의 행동을 하는 탱크를 만들 수 있다. 물론 이 탱크는 매우 바보처럼 움직이기 때문에 실제 전투에서의 생존확률은 매우 낮을 것이다.  

=== 참고사이트 ===
 1. [http://www-903.ibm.com/developerworks/kr/robocode IBM Robocode 메인 페이지]
