#title Python 소켓 프로그래밍

== 왜 ? ==
익숙한 C/C++ 대신 Python 언어를 선택한 이유가 궁금할 수 있겠습니다. 사실 그렇기도 합니다. C/C++로 간단하게? 구현할 수 있는데, 굳이 Python이라는 새로운 언어를 이용해서 구현하려는지 말입니다.

지금까지 제가 맡았던 업무들의 상당수가 시스템/네트워크 기타 로그를 수집해서 분석하는 프로그램의 개발이었습니다. 보안관제시스템, IDC 시스템/네트워크 관리 프로그램, QA(:12), QOS(:12)활동 등등. 이러한 프로그램들은 다양한 운영체제로 이루어진 분산환경에서 작동해야 하는 특징을 가지고 있습니다. 이를테면 분산 모니터링 시스템 같은 것의 구축인데요. C와 C++로 만들 경우 목표 운영체제에대해서 컴파일 되야 한다는 특성이 문제였습니다. 배포가 어렵다는 거죠. 

그래서 Python 언어를 사용하기로 했습니다. 운영체제에 관계없이 실행된다는 특징이 마음에 든거죠. 

== Python & BSD Socket ==
다른 고급 언어들이 그렇듯이 Python도 아마 고수준의 네트워크 모듈을 가지고 있을거라고 생각이 됩니다만... Low Level의 네트워크 인터페이스에 대해서 알아보기로 했습니다. BSD:::Socket(:12) 인터페이스를 지원하는지 알아보겠다는 거죠. 당연히 BSD Socket 인터페이스를 지원하고 있더군요. 

Python BSD Socket 인터페이스를 정리하지 않겠습니다. BSD Socket을 알고 있다면, 그대로 사용하면 되니까요. 

== echo server ==
그냥 간단하게 Thread(:12)기반의 echo server를 하나 만들어 보기로 했습니다. 이 문서는 python을 공부하면서 작성한 겁니다. 그러니 고급스런 Python 코드를 기대하지는 마시기 바랍니다.

소켓 클래스와 쓰레드 클래스를 정의했습니다. 파일이름은 ydsocket.py입니다. 
{{{#!plain
# -*- coding: utf-8 -*-
import socket
import sys
import os
import time
from threading import Thread

BACKLOG = 5

# Socket 클래스
class YDSocket:
  def __init__(self):
    listensock = 0;
  # Bind 함수
  def Bind(self,port):
    # socket이 이름으로 붙는다는 것을 제외하고는
    # BSD Socket 함수와 동일하게 사용할 수 있습니다. 
    self.listensock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    self.listensock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1);
    self.listensock.bind(('127.0.0.1', port))
    self.listensock.listen(BACKLOG)
  # Accept 함수
  def Accept(self):
    conn, addr = self.listensock.accept();
    print "Accept OK : ", addr
    return conn

# 스레드 클래스
class JobThread(Thread):
  def __init__ (self, conn):
    Thread.__init__(self)
    self.conn = conn
    self.method = {"quit": self.func_quit}
  def run(self):
    while 1:
      read = self.conn.recv(1024)
      if read == '':
        print "Client Close"
        self.conn.close();
        return
      else :
        stripstr = read.rstrip('\r\n')
        if stripstr in self.method:
          rtv = self.method.get(stripstr)()
          if rtv == 0:
            return
        else :
          self.conn.send(read)
  # 유저가 quit를 입력했을 경우 종료한다.
  def func_quit(self):
    print "Client Close"
    self.conn.close();
    return 0;
}}}

다음은 echo server 입니다. 이름은 echoserver.py로 했습니다.
{{{#!plain
#!/usr/bin/python
from ydsocket import YDSocket, JobThread

acceptor = YDSocket()
acceptor.Bind(8080)
while 1:
  conn = acceptor.Accept()
  myJob = JobThread(conn)
  myJob.run()
}}}
