head	1.2;
access;
symbols;
locks
	root:1.2; strict;
comment	@# @;


1.2
date	2014.05.11.02.52.08;	author root;	state Exp;
branches;
next	1.1;

1.1
date	2014.05.11.02.48.36;	author root;	state Exp;
branches;
next	;


desc
@./data/text/Site_2fcloud_2fBigData_2fCouchDB_2fTutorial
@


1.2
log
@119.64.102.68;;yundream;;
@
text
@#title CouchDB Tutorial

[[TableOfContents]]
== CouchDB 간단 사용기 ==
=== CouchDB 테스트 환경 ===
  * Ubuntu 12.10 server 운영체제 
  * [wiki:Site/cloud/virtualbox VirtualBox] : VM을 만든다음에 Couchdb를 설치했다. couchdb 서버의 IP 주소는 192.168.57.3이다.

=== CouchDB 설치 ===
한번에 설치 가능하다. 이래서 리눅스를 좋아한다.
{{{#!plain
# apt-get install couchdb
}}}

=== Futon ===
CouchDB는 '''futon'''이라는 웹 기반의 관리 UI를 제공한다. 처음 설치하면 로컬주소(127.0.0.1)로 바인드 돼 있는데, 테스트를 위해서 바인드 주소를 '''0.0.0.0'''으로 변경했다. futon의 기본 서비스 포트 번호는 5984다.
{{{#!plain
# cat /etc/couchdb/default.ini
......
[httpd]
port = 5984
bind_address = 0.0.0.0 
......
}}}
서비스를 재 시작하고
{{{#!plain
# service couchdb restart
}}}

curl로 테스트
{{{#!plain
# curl 192.168.57.3:5984
{"couchdb":"Welcome","version":"1.2.0"}
}}}

http://192.168.57.3:5984/_utils로 접근하면 '''futon'''을 사용할 수 있다.

https://lh4.googleusercontent.com/-7zw-Q8BLQNw/UQ55s15ahII/AAAAAAAACxI/-3VyTLp-XW8/s640/%25EC%258A%25A4%25EB%2583%2585%25EC%2583%25B76.png

jquery plugin도 제공한다. http://192.168.57.3:5984/_utils/script/jquery.couch.js 이 플러그인을 이용해서 couchdb와 상호작용하는 애플리케이션을 개발할 수 있다.

=== 유저관리 ===
기본적으로 CouchDB는 완전히 오픈돼 있다. 누구든지 접근할 수 있으며, 모든 데이터베이스에 대해서 관리자(admin)권한을 행사할 수 있다. 개발측면에서는 매우 편리하기는 하지만 제품 개발 측면에서는 문제가 될 수 있다.  

https://lh6.googleusercontent.com/-YPWTyzT1YT8/UQ58Jnsx-GI/AAAAAAAACxc/xcJGRQ1x9hA/s800/%25EC%258A%25A4%25EB%2583%2585%25EC%2583%25B76.png

데이터베이스 관리에 대한 접근제어가 필요하다면 '''Fix this'''를 클릭해서, 아이디와 패스워드를 입력할 수 있다. 이렇게 하면 anonymous에 대한 접근을 막을 수는 있다. 하지만 유저단위의 권한 관리는 설정할 수 없다. 

=== 문서 만들기 ===
이제 문서를 만들어봐야 겠다. 우선 웹 UI로 만들어보기로 했다. http://192.168.57.3:5984/_utils/ 로 접근해서 "Create Database"로 만들었다. 데이터베이스의 이름은 mywiki로 했다.   

https://lh3.googleusercontent.com/-MFUQTqJAmbU/UQ-1uFObxwI/AAAAAAAACzo/iwz8pi7kTko/s640/%25EC%258A%25A4%25EB%2583%2585%25EC%2583%25B78.png

문서를 저장하면, 문서의 버전 정보인 '''_rev'''이 자동으로 추가된다. 이 기능 잘 이용하면, 문서 버전관리에 신경쓰지 않아도 될 것 같다.

=== 문서 업데이트 ===
CouchDB는 append only 데이터베이스다. 업데이트를 할 경우 예전 문서를 덮었는게 아니고, 새로운 문서가 추가된다. 새로 업데이트되는 문서는 동일한 '''id'''에 다른 '''_rev'''를 가진다. 다른 버전의 문서는 '''Previous Version'''과 '''Next version'''으로 볼 수 있다.

문서를 업데이트 하기 위해서는 업데이트 문서의 "id"와 업데이트할 문서의 버전번호 "_rev"를 명시해야 한다.

=== curl로 테스트 ===
curl로 couchdb를 제어해보자. 테스트를 위해서 새로운 문서를 만들었다.
{{{#!plain
# cat curl.json
{
    "author":"shawn.yun",
    "contents":"Creating a Document Using cURL"
}
}}}
curl을 이용해서 문서를 추가했다.
{{{#!plain
# curl -X POST http://192.168.57.3:5984/mywiki/ -d @@curl.json -H "Content-Type: application/json"
{"ok":true,"id":"43ea7359ed3f61cdc75208c86100118d","rev":"1-0ce7539a6376b440ecdc049e5d08e944"}
}}}

couchdb는 REST API를 지원한다. 그러므로 HTTP Method만을 이용해서 CRUD가 가능하다. 
  * POST : 새로운 레코드 추가
  * GET : 레코드 가져오기
  * PUT : 레코드 업데이트
  * DELETE : 레코드 삭제

데이터베이스 정보
{{{#!plain
$ curl -X GET http://192.168.57.3:5984/mywiki/ | json_pp
{
   "compact_running" : false,
   "doc_count" : 2,
   "db_name" : "mywiki",
   "purge_seq" : 0,
   "committed_update_seq" : 3,
   "doc_del_count" : 0,
   "data_size" : 601,
   "disk_format_version" : 6,
   "instance_start_time" : "1359983669397056",
   "update_seq" : 3,
   "disk_size" : 12383
}
}}}

데이터베이스의 모든 레코드 목록
{{{#!plain
$ curl -X GET http://192.168.57.3:5984/mywiki/_all_docs | json_pp
{
   "total_rows" : 2,
   "rows" : [
      {
         "value" : {
            "rev" : "2-a77e18b0a571d24c58df6891230c6cca"
         },
         "id" : "43ea7359ed3f61cdc75208c86100047b",
         "key" : "43ea7359ed3f61cdc75208c86100047b"
      },
      {
         "value" : {
            "rev" : "1-0ce7539a6376b440ecdc049e5d08e944"
         },
         "id" : "43ea7359ed3f61cdc75208c86100118d",
         "key" : "43ea7359ed3f61cdc75208c86100118d"
      }
   ],
   "offset" : 0
}
}}}

레코드 내용 가져오기. 레코드의 id로 내용을 가져올 수 있다. 
{{{#!plain
$ curl -X GET http://192.168.57.3:5984/mywiki/43ea7359ed3f61cdc75208c86100118d | json_pp 
{
   "_id" : "43ea7359ed3f61cdc75208c86100118d",
   "contents" : "Creating a Document Using cURL",
   "author" : "shawn.yun",
   "_rev" : "1-0ce7539a6376b440ecdc049e5d08e944"
}
}}}

revison 정보 확인
{{{#!plain
$ curl -X GET http://192.168.57.3:5984/mywiki/43ea7359ed3f61cdc75208c86100047b?revs_info=true | json_pp                                                                                
{                                                                                                    
   "_id" : "43ea7359ed3f61cdc75208c86100047b",                                                       
   "_revs_info" : [                                                                                  
      {                                                                                              
         "status" : "available",                                                                     
         "rev" : "2-a77e18b0a571d24c58df6891230c6cca"                                                
      },                                                                                             
      {                                                                                              
         "status" : "available",                                                                     
         "rev" : "1-f6c3d6388e16b2c0021a601676c915f2"                                                
      }                                                                                              
   ],                                                                                                
   "contents" : "Hello world. My name is yundream. What's your name",                                
   "author" : "yundream",
   "_rev" : "2-a77e18b0a571d24c58df6891230c6cca"
}
}}}
나중에 API를 정리해봐야 겠다.

=== MAP Funcion ===
CouchDB는 javascript 기반의 MapReduce 서비스를 제공한다.

'''Futon'''에서 데이터베이스를 선택한 다음 '''View'''에서 Temporary view를 선택하면 Map function과 reduce Function을 입력할 수 있는 textarea가 만들어진다. 

https://lh3.googleusercontent.com/-8MC1iWMW9js/UQ_IZWH6HII/AAAAAAAAC10/CH3QEIGxGdg/s640/%25EC%258A%25A4%25EB%2583%2585%25EC%2583%25B79.png

=== Reduce Function ===
Reduce function 테스트를 위해서 새로운 데이터 베이스를 만들었다. 데이터 베이스 이름은 bookstore로 name 필드와 cost 필드를 가지고 있다. 테스트를 위해서 4개의 레코드를 추가했다. 

나는 모든 book의 cost의 총합을 계산하기를 원한다. 이를 위해서 다음과 같이 map,reduce function을 개발해서 실행했다.

https://lh4.googleusercontent.com/-sBwG3qXM1XY/UQ_N7YZXl4I/AAAAAAAAC20/xtykOsCpHyw/s800/%25EC%258A%25A4%25EB%2583%2585%25EC%2583%25B710.png

=== distributed map reduce ===
분산환경에서 MapReduce를 돌려보고 싶지만 다음으로 미룬다.

=== wiki 프로젝트와 함께 === 
Wiki 시스템의 근간인 문서 데이터의 저장을 NoSQL의 한 갈래인 CouchDB에 맡길 것인지, 전통적인 RDBMS에 맡길 것인지에 대한 고민은 필요할 것 같다. 만약 문서버전관리 기능이 필요하지 않았다면, 당연히 RDBMS를 이용했을 것이고 아마도 mysql 혹은 sqlite 중 하나를 선택했을 것이다. 

CouchDB를 선택한 이유는 순전히 문서 버전관리의 간편함 때문이다. 내장된 MapReduce를 사용할 수 있다거나 분산 저장을 할 수 있다거나 하는 건 중요한 이유가 아니다. 뭐, 일단 couchdb를 선택한거 mapreduce와 분산저장등의 기능을 어떻게 활용할 수 있을지 고민을 해봐야 겠다.    

Mapreduce는 저자, 카테고리, 태그, 작성일 별로 문서를 필터링 하거나 관련문서를 추천하는 등의 서비스를 만들 수 있을테다. 특히 관련문서추천 쪽에 관심이 간다. 분산저장은 대량의 문서를 관리해야 한다 하면 고려대상이 될 수 있겠는데, 우선은 고려만 해야 겠다. 

== Ruby 예제 ==
=== 간단한 CRUD 예제 ===
{{{#!plain
#!/usr/bin/ruby
require 'net/http'
require 'json'
require 'pp'

module Couch
    class Server
        def initialize(host, port, dbname = nil)
            @@host = host
            @@port = port
            @@dbname = dbname
        end

        def opendb(dbname)
            @@dbname = dbname
        end

        def delete(id)
            request(Net::HTTP::Delete.new("/#{@@dbname}/#{id}"))
        end

        def get(id)
            request(Net::HTTP::Get.new("/#{@@dbname}/#{id}"))
        end

        def put(id, json)
            req = Net::HTTP::Put.new("/#{@@dbname}/#{id}")
            req["content-type"] = "application/json"
            req.body = json
            request(req)
        end

        def post(id, json)
            req = Net::HTTP::Post.new("/#{@@dbname}/#{id}")
            req["content-type"] = "application/json"
            req.body = json
            request(req)
        end

        def request(req)
            res = Net::HTTP.start(@@host, @@port) { |http|http.request(req) }
            unless res.kind_of?(Net::HTTPSuccess)
                handle_error(req, res)
            end
            res
        end

        private

        def handle_error(req, res)
            e = RuntimeError.new("#{res.code}:#{res.message}\nMETHOD:#{req.method}\nURI:#{req.path}\n#{res.body}")
            raise e
        end
    end
end

server = Couch::Server.new('192.168.57.3', '5984', 'mywiki')
res = server.get('43ea7359ed3f61cdc75208c86100118d')
jsonval = JSON res.body
pp jsonval
}}}

=== Map function 호출 ===
Ruby sinatra를 이용해서 wiki 시스템을 개발 중이다. 위키문서는 파일 시스템의 디렉토리/파일 구조로 저장하려고 한다. 이 구조에서 위키 문서 이름은 디렉토리/파일에 대응한다. 따라서 위키 문서의 이름이 유일하다고 하더라도 couchdb의 '''id'''로 할 수는 없다. 디렉토리/파일이름이 변경될 수 있기 때문이다. 

이런 이유로 couchdb id는 32자리로 랜덤하게 생성하고, 따로 '''name''' 필드를 둬서 문서 이름을 관리하기로 했다. 이제 '''name''' 필드로 원하는 문서를 찾는 별도의 함수를 만들어야 한다.

나는 couchdb에서 제공하는 map view를 이용해서 만들기로 했다. name으로 문서를 검색하는 map function은 다음과 같다.  
{{{#!plain
function(doc) { 
	if (doc.name == 'linux/sysadmin') { 
		emit(null, doc); 
	}
}
}}}
Couch db는 javascript를 수행 기능을 내장하고 있다. 개발자는 필요한 map 기능을 javascript 함수로 만든 다음 POST 방식으로 요청하기만 하면 된다. 나는 다음과 같은 sinatra(ruby) 코드를 만들었다.  
{{{#!plain
get "/wiki/:name" do | name |
    view = <<END
{"language":"javascript","map":"function(doc) { if (doc.name == '#{name}') { emit(null, doc); }}"}
END
    @@data = nil
}}}
이 문서를 POST 방식으로 넘기면 된다. POST URL은 다음과 같다.
{{{#!plain
POST http://couchdbserver:5984/mywiki/_temp_view
}}}

@


1.1
log
@119.64.102.68;;yundream;;
@
text
@d7 1
a7 1
  * VirtualBox : VM을 만든다음에 Couchdb를 설치했다. couchdb 서버의 IP 주소는 192.168.57.3이다.
@
