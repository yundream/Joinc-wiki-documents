#title ToDo 리스트 정리용 위키페이지

반드시 해야할일이나 하고 싶은일들 정도는 ToDo 리스트 형태로 적어야 할 것 같다. 일단은 그냥 위키페이지만 생성하는 정도로 하고, 시간이 된다면 어느정도의 스케쥴관리가 가능한 수준으로 만들어볼까 한다.

== 2009 7 ==
 * 스페셜리스트와 제너럴리스트에 대해서
 * http://www.generic-programming.org/
 * bit 연산
 * [http://www.linux-mag.com/cache/7407/1.html bashreduce]
 * scrum 관리툴 http://www.pivotaltracker.com/dashboard

== 2009 6 ==
 * http://googleblog.blogspot.com/2009/07/introducing-google-chrome-os.html
 * 댓글 기능 추가하기 
   1. --기본설계--
   1. 스팸이 무섭다. 한글이 포함되어 있지 않으면, 등록시키지 않는 방법등을 사용해보자. 
 * 다른 사이트로의 트랙백(:12) 기능 추가하기
    1. --기본기능 완성--
    1. 버그 수정 : 이미 트랙백정보가 있을때에는 Insert 대신 Update로 하기
 * 오픈소스를 이용한 Scrum 환경 구축 
   1. 오픈소스 SCM, CMS, BM, KMS 를 이용해서 Scrum 환경을 구축하는 것에 대해서 머리좀 굴려보자. 
 * PHP XML(:12) 파서기 제작 
   1. RSS 분석용 으로 인기검색어를 추출하기 위한 용도
   1. 범용 XML 파서기를 하나 만들고
   1. XML 파서를 베이스 클래스로 하는 RSS(:12) 리더 클래스 생성

== 2009 4/21 ==
=== 시스템 관리 툴 ===
음 .. zenoss(:12)와 같은 통합 시스템 관리툴을 만들어보고 싶긴한데 진득허니 붙잡고 있는 성격이 못되어 나서.
  1. snmp(:12) & agent 기반 
  1. event life cycle 관리
  1. 하부구조는 perl(:12)로
  1. 객체지향적인 구조 
     * Event, Device, User, Template
  1. DashBoard 제공 
     * zenoss의 DashBoard는 너무 좀.. 
     * module 기반으로 DashBoard 확장가능하도록
  1. google map을 잘이용하면 재미있을 듯
     * custom map을 이용해서 네트워크 구성도 구성 
== 2009 4/15 ==
=== 기획자와 개발자의 마인드의 차이 ===
 * 기획자와 개발자의 시각의 차이는 어디에서 생기는 것일까.
   1. 객체를 보는 인식의 차이가 아닐까 ? 구술문화와 문자문화의 관점에서 생각해 보자.

=== 게시판 view 모듈 만들기 ===
 * joinc bbs 게시판 목록을 가져오기 위한 모듈 만들기 (완성)
=== google Map 사이트 개발 ===
 * 현재 만드는 중. 언제쯤 모습이 만들어질까 ?
   * http://map.joinc.co.kr/controll.php
   * 할일 
     1. 기본/Advanced 예제 추가 
     1. main 페이지 작성 
     1. bbs.joinc.co.kr에 게시판 하나 추가

=== Linux Android 개발환경에 대해서 ===
음 재미있을 것 같은데, 한번 해볼까.
 * http://www.howtoforge.com/installing-google-android-sdk1.0-on-ubuntu8.04-desktop-p3

== 예전꺼 ==
=== epoll 문서 Update 2008/11/19 ===
 * rsa 공개키 기반의 배포시스템 관련해서 정리해보자. [wiki:Site/JPerl/SubroutineReferences 관련문서]

=== epoll 문서 Update 2008/11/11 ===
 * java의 nio가 epoll(:12)기반이였군. 
 * 지금 만들어진 epoll 문서가 2.4.x 시절것이니, 2.6.x 시대에 맞게 업데잇 시켜야 하겠다.

=== grizzly 를 이용한 웹서비스 제작 2008/11/7 ===
 * 네트워크 애플리케이션제작에 있어서 HTTP(:12)프로토콜의 사용이 대세인것 같다.
 * java의 grizzly를 이용한 웹서비스 제작에 대해서 알아봐야 할 것 같다.
 * 활용 수준에서 알아보자.
 * http://jlorenzen.blogspot.com/2007/06/using-grizzly-to-create-simple-http.html : 이문서가 이해하기에 좋은것 같다. 
 * Java NIO 까지 함께 보게 생겼다.
 * grizzly 의 acceptor, adaptor 개념 괜찮은것 같다. ACE의 그것과 비슷하다는 느낌. C++로 구현해 보자.
 * JDK1.5 이상에서만 되네.. 쩝.
 * C(:12)에서라면 realtime signal이나 epoll(:12)을 이용할 수 있겠군. epoll, realtime signal 이거 오래된 문서인데, 이참에 갱신해볼까.

