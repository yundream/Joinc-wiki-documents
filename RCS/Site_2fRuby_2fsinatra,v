head	1.25;
access;
symbols;
locks
	root:1.25; strict;
comment	@# @;


1.25
date	2013.09.15.04.24.12;	author root;	state Exp;
branches;
next	1.24;

1.24
date	2013.09.15.04.23.27;	author root;	state Exp;
branches;
next	1.23;

1.23
date	2013.09.15.04.09.48;	author root;	state Exp;
branches;
next	1.22;

1.22
date	2013.09.15.02.45.03;	author root;	state Exp;
branches;
next	1.21;

1.21
date	2013.09.15.02.33.45;	author root;	state Exp;
branches;
next	1.20;

1.20
date	2012.10.29.13.43.28;	author root;	state Exp;
branches;
next	1.19;

1.19
date	2012.10.29.13.43.07;	author root;	state Exp;
branches;
next	1.18;

1.18
date	2012.10.29.13.38.00;	author root;	state Exp;
branches;
next	1.17;

1.17
date	2012.10.29.13.30.24;	author root;	state Exp;
branches;
next	1.16;

1.16
date	2012.10.29.08.56.26;	author root;	state Exp;
branches;
next	1.15;

1.15
date	2012.10.26.01.31.15;	author root;	state Exp;
branches;
next	1.14;

1.14
date	2012.10.25.14.11.48;	author root;	state Exp;
branches;
next	1.13;

1.13
date	2012.10.25.10.07.27;	author root;	state Exp;
branches;
next	1.12;

1.12
date	2012.10.24.14.45.01;	author root;	state Exp;
branches;
next	1.11;

1.11
date	2012.10.22.03.48.52;	author root;	state Exp;
branches;
next	1.10;

1.10
date	2012.10.20.05.46.37;	author root;	state Exp;
branches;
next	1.9;

1.9
date	2012.10.20.05.45.51;	author root;	state Exp;
branches;
next	1.8;

1.8
date	2012.10.19.11.39.42;	author root;	state Exp;
branches;
next	1.7;

1.7
date	2012.10.18.13.50.09;	author root;	state Exp;
branches;
next	1.6;

1.6
date	2012.10.18.12.12.57;	author root;	state Exp;
branches;
next	1.5;

1.5
date	2012.10.18.08.40.42;	author root;	state Exp;
branches;
next	1.4;

1.4
date	2012.10.18.05.00.37;	author root;	state Exp;
branches;
next	1.3;

1.3
date	2012.10.18.04.30.34;	author root;	state Exp;
branches;
next	1.2;

1.2
date	2012.10.08.14.12.57;	author root;	state Exp;
branches;
next	1.1;

1.1
date	2012.10.05.13.22.08;	author root;	state Exp;
branches;
next	;


desc
@./data/text/Site_2fRuby_2fsinatra
@


1.25
log
@128.134.217.152;;yundream;;
@
text
@#title Ruby sinatra web freamework

[[TableOfContents]]
== sinatra ==
[wiki:man/12/rest RESTful]을 지원하는 웹 애플리케이션 서버 개발을 위해서 웹 프레임워크를 선택해야 했다. Ruby, Python, Perl, Java 모두 훌륭한 웹 프레임워크를 가지고 있으며 아마도 거의 비슷한 모습에 비슷한 쓰임새를 가지고 있을 것이다. 해서 웹 프레임워크를 선택하기 전에 언어를 선택하고 해당 언어에서 제공하는 프레임워크를 찾기로 했다. 언어는 루비로.

페이스북에 [wiki:man/12/rest REST]를 지원하는 루비기반의 가벼운 프레임워크를 추천해 달라고 했더니, sinatra를 추천. 그래서 이것 저것 생각하지 않고 sinatra를 사용하기로 했다. 몇개 더 비교해보는 것도 괜찮겠지만 귀찮기도 하고, 대게 이런 종류의 툴들은 최고가 아닌 최악이 아닌 것을 선택하면 된다는 그간의 경험에 따라서 그냥 선택했다.

선택하고 봤더니, 루비 경량프레임워크 중에서는 가장 널리 사용하는 것이라고 해서, 기분 좋아하는 중이다.

Sinatra는 MVC 모델을따르는 프레임워크는 아니다. 최소한의 노력으로 빠르게 웹 애플리케이션을 개발하는데 촛점을 맞춘 경량 프레임워크다. 애플[[FootNote(사용하고 있는 수백개의 오픈소스 소프트웨어 중 한 자리를 차지하고 있는 정도로 볼 수도 있겠다. http://www.apple.com/opensource/ 참고)]], 영국정부, 링크드인, Heroku, Engine Yard, Songbird, 징가(Zynga)등에서 사용하고 있다. 

=== Hello World ===
Hello World
{{{#!plain
require 'sinatra'
get '/hi' do
    "Hello World!"
end
}}}

생각난김에 Python 진영의 경량웹 프레임워크인 [wiki:Site/Python/Flask Flask]의 Hello World버전을 보자.
{{{#!plain
from flask import Flask
app = Flask(__name__)
app.debug = True

@@app.route("/")
def hello():
        return "Hello, World!"
}}}
Sinatra와 아주 유사한 구조를 가지고 있다. DSL(Domain Specific Language)을 이용해서 정의한 '''sinatra'''쪽이 더 직관적이다. 

=== 적당한 사용 용도 ===
복잡한 뷰와 모델을 포함하는 서비스에는 적당하지 않다. 백앤드에서 기능을 제공하는 서비스에 적당하다. 예컨데, REST API를 제공하는 서버 제작에 활용할만 하다. 거추장스러운 기능들에 신경쓰지 않고 빠르게 API를 찍어낼 수 있다. --정말 찍어내는 기분으로 개발할 수 있다.--

=== 문서들 ===
  * [wiki:Site/Ruby/sinatra/MakeAPIServer 30분정도의 시간으로 만들어보는 REST API 서버]
  * [wiki:Site/Ruby/sinatra/UbuntuInstall sinatra, monk를 이용한 웹 애플리케이션 개발환경 만들기]
  * [wiki:Site/Ruby/sinatra/ReadMe Sinatra ReadMe]
== Sinatra Tutorial ==
== 하위 문서 ==
정리하지 않은 문서들 포함.
[[subindex]]
@


1.24
log
@128.134.217.152;;yundream;;
@
text
@d5 1
a5 1
RESTful을 지원하는 웹 애플리케이션 서버 개발을 위해서 웹 프레임워크를 선택해야 했다. Ruby, Python, Perl, Java 모두 훌륭한 웹 프레임워크를 가지고 있으며 아마도 거의 비슷한 모습에 비슷한 쓰임새를 가지고 있을 것이다. 해서 웹 프레임워크를 선택하기 전에 언어를 선택하고 해당 언어에서 제공하는 프레임워크를 찾기로 했다. 언어는 루비로.
d7 1
a7 1
페이스북에 REST를 지원하는 루비기반의 가벼운 프레임워크를 추천해 달라고 했더니, sinatra를 추천. 그래서 이것 저것 생각하지 않고 sinatra를 사용하기로 했다. 몇개 더 비교해보는 것도 괜찮겠지만 귀찮기도 하고, 대게 이런 종류의 툴들은 최고가 아닌 최악이 아닌 것을 선택하면 된다는 그간의 경험에 따라서 그냥 선택했다.
@


1.23
log
@128.134.217.152;;yundream;;
@
text
@a3 1

d32 1
a32 1
Sinatra와 아주 유사한 구조를 가지고 있다. 다만 DSL을 이용해서 정의한 sinatra 쪽이 더 직관적이다. 
@


1.22
log
@128.134.217.152;;yundream;;
@
text
@d6 1
a6 3
RESTful을 지원하는 웹 애플리케이션 서버 개발을 위해서 웹 프레임워크를 선택해야 했다. Ruby, Python, Perl, Java 모두 훌륭한 웹 프레임워크를 가지고 있으며 아마도 거의 비슷한 모습에 비슷한 쓰임새를 가지고 있을 것이다. 해서 웹 프레임워크를 선택하기 전에 언어를 선택하고 해당 언어에서 제공하는 프레임워크를 찾기로 했다.

해서 Ruby를 선택했다. 
d12 2
d35 3
@


1.21
log
@128.134.217.152;;yundream;;
@
text
@d36 1
@


1.20
log
@14.52.44.49;;yundream;;
@
text
@d10 1
a10 1
다음 페이스북에 REST를 지원하는 루비기반의 가벼운 프레임워크를 추천해 달라고 했더니, sinatra를 추천. 그래서 이것 저것 생각하지 않고 sinatra를 사용하기로 했다. 몇개 더 비교해보는 것도 괜찮겠지만 귀찮기도 하고, 대게 이런 종류의 툴들은 최고가 아닌 최악이 아닌 것을 선택하면 된다는 그간의 경험에 따라서 그냥 선택했다.
d12 26
a37 3
== Ubuntu Linux 에서 Install ==
  * [wiki:Site/Ruby/sinatra/UbuntuInstall 우분투 리눅스에 sinatra 설치하기]
== CentOS Linux 에서 Install ==
a38 1
 * [wiki:Site/Ruby/sinatra/ReadMe Sinatra ReadMe]
d40 1
@


1.19
log
@14.52.44.49;;yundream;;
@
text
@d13 1
a13 1
  * [/UbuntuInstall 우분투 리눅스에 sinatra 설치하기]
@


1.18
log
@14.52.44.49;;yundream;;
@
text
@d13 1
@


1.17
log
@14.52.44.49;;yundream;;
@
text
@d5 1
a5 1
== 왜 ? ==
d12 2
a13 148
== 인스톨 ==
=== 인스톨 환경 ===
 * Ubuntu Linux 12.04.1
 * Ruby 1.8.7 
 * gem 1.8.24
 * rake 0.9.2.2
 * sequel 3.40.0
 * monk 

=== sinatra 인스톨 ===
gem으로 인스톨하려고 했더니, 에러가 떨어진다. 
{{{#!plain
# gem install sinatra
Invalid gemspec in [/var/lib/gems/1.8/specifications/tilt-1.3.3.gemspec]: 
invalid date format in specification: "2011-08-25 00:00:00.000000000Z"
}}}

아래의 방법으로 해결
{{{#!plain
# gem install rubygems-update
# update_rubygems
}}}

다시 한번 시도
{{{#!plain
# gem install sinatra
Successfully installed sinatra-1.3.3
1 gem installed
Installing ri documentation for sinatra-1.3.3...

unrecognized option `--encoding=UTF-8'

For help on options, try 'rdoc --help'

ERROR:  While generating documentation for sinatra-1.3.3
... MESSAGE:   exit
... RDOC args: --ri --op /usr/lib/ruby/gems/1.8/doc/sinatra-1.3.3/ri --line-numbers --inline-source --title Sinatra --main README.rdoc --encoding=UTF-8 lib README.de.rdoc README.es.rdoc README.fr.rdoc README.hu.rdoc README.jp.rdoc README.ko.rdoc README.pt-br.rdoc README.pt-pt.rdoc README.rdoc README.ru.rdoc README.zh.rdoc LICENSE --title sinatra-1.3.3 Documentation --quiet
}}}

젠장. 구글신탁 결과 무슨 rdoc 인코딩 문제라고 한다. 그래서 옵션 변경해서 다시 인스톨 했다.
{{{#!plain
# gem install sinatra --no-rdoc --no-ri
Successfully installed sinatra-1.3.3
1 gem installed
}}}
성공이다. 비영어권 개발자의 슬픔이라고나 할까. 

== 개발환경 구축 ==
=== thin 웹서버 ===
==== thin 설치 ====
Thin은 루비 기반의 웹서버다. 루비기반 웹서버 하면 '''Mongrel'''이 대세였는데, 새로 도전장을 내민 웹서버라 할 수 있겠다. 가장 큰 강점은 성능이라고 한다.

{{{#!html
<img src=http://chart.apis.google.com/chart?cht=bvg&chd=t:14.98,54.8723076923077,48.9184615384615,79.9276923076923%7C14.8692307692308,65.0615384615385,70.4446153846154,89.5553846153846%7C14.9476923076923,35.1123076923077,70.18,88.6769230769231&chbh=16&chs=350x150&chl=WEBrick%7CMongrel%7CEvented%20M.%7CThin&chco=000000,666666,cccccc&chdl=1%20c%20req.%7C10%20c%20req.%7C100%20c%20req.>
}}}

gem으로 설치하면 된다.
{{{#!plain
# gem install extensions   ## 먼저 설치해야 한다.
# gem install thin
}}}

Apache와 sinatra의 조합도 생각해 볼 수 있겠는데, 프레임워크가 루비이니 웹 서버도 루비기반의 thin으로 하기로 했다. 아래와 같은 방식으로 실행할 수 있다. 기본 포트번호는 3000이다.
{{{#!plain
# thin -R config.ru start
}}}

==== thin 사용 이유 ====
sinatra는 웹 서버 기능을 내장하고 있다. 그럼에도 불구 하고 thin을 사용하는 이유는 다음과 같다.
  1. 요청처리 : thin을 포함한 모든 종류의 웹서버는 HTTP 요청을 처리하기 위한 잘 정의된 전문화된 루틴을 가지고 있다. 멀티 스레드 혹은 event 기반의 입출력 모델을 이용해서 효과적으로 처리한다. 이런 요청처리는 전문적인 웹서버에 맡기는게 훨씬 효율적이다.    
  1. 웹 서버는 요청의 효율적인 처리를 위해서 다음과 같은 다양한 기능들을 가지고 있다. 아래의 기능을 직접 구현하는건 (재미는 있을 수 있겠지만)낭비다.   
    1. Keep-alive
    1. URL Rewrite 
    1. Proxy
    1. Virtua server
    1. Load balancing
    1. Logging 
    1. HTTP 인증
    1. SSL 처리 
    1. Session 관리 
    1. Cache 관리
    1. 기타 수많은 기능들을 활용할 수 있다.
Thin을 비롯한 다른 웹 프레임워크가 요청을 웹 서버에서 처리하게 하는 이유다.

=== monk ===
별개 다나온다. Thin과 마찬가지로 처음 보는 툴이다. Sinatra 애플리케이션 개발을 위한 skeleton 구조를 만들어주는 소프트웨어라고 한다. 이 툴을 이용하면 간단하게 컴포넌트별 개발이 가능한 파일 구조를 만들어 준다. 웹 애플리케이션 프로젝트 생성 프로그램이라고 보면 되겠다. 

설치 사용법은 아래의 애플리케이션 개발 테스트를 참고한다.

=== erb와 halm ===
view를 위한 template 라이브러리를 선택해야 한다. chef에서 템플릿을 만들기 위해서 [wiki:Site/Ruby/ERB ERB]를 이용해서 더 익숙한데, 보다보니 HAML이라는 템플릿 엔진이 튀어나온다.

[wiki:Site/Ruby/ERB ERB]는 루비의 표준 라이브러리의 일부라서, 루비버전과 관계없이 안정적으로 사용할 수 있다는 장점이 있다. HAML은 뭔가 더 좋다고 해서 설치해서 테스트를 했는데, 에러를 잔뜩 뱉으면서 돌아가지 않는다. 그래서 그냥 ERB 사용하기로 했다. 

Monk로 애플리케이션을 만들면 템플릿으로 HAML을 사용하기 때문에 haml이 설치돼 있지 않으면 에러가 떨어진다. haml 부분을 주석처리 해도 되는데, 그냥 gem으로 설치해도 된다.  
{{{#!plain
# gem install haml
}}}
=== 애플리케이션 개발 테스트 ===
monk를 설치한 다음 애플리케이션을 초기화 했다. 애플리케이션 이름은 TestApp로 했다.
{{{#!plain
# sudo gem install monk
# monk add riblits git://github.com/Phrogz/riblits.git
# mkdir TestApp 
# cd TestApp
# monk init -s riblits
}}}

하면 대략 아래와 같은 구조의 (예제를 포함한)스켈레톤 프로젝트가 만들어진다.
{{{#!plain
# tree
├── app.rb
├── config.ru
├── helpers
│   ├── init.rb
│   ├── nicebytes.rb
│   └── partials.rb
├── minify_resources.rb
├── models
│   ├── init.rb
│   └── user.rb
├── public
│   ├── css
│   │   └── common.css
│   └── js
│       └── manifest.txt
├── routes
│   ├── init.rb
│   └── main.rb
└── views
    ├── layout.haml
    └── main.haml
}}}
route와 view에 컴포넌트 별로 파일을 만들어서 개발하면, 개발자 별로 독립된 환경에서 개발할 수 있다.

애플리케이션은 다음과 같이 실행한다.
{{{#!plain
# thin -R config.ru start
}}}

== 예제로 sinatra 둘러보기 ==
예제를 포함한 sinatra 애플리케이션을 만들려고 한다. 이 애플리케이션은 git-hub에 올려서 다운로드 가능하게 한다.
  * https : https://github.com/yundream/SinatraExampleCode.git
  * ssh : git@@github.com:yundream/SinatraExampleCode.git
routes에서 부터, model, view 까지 직접 테스트 가능하도록 만들어서 배포한다. 테스트를 위해서 최소한 아래의 것들이 준비돼야 합니다. 
  * ruby 1.8.7 
  * thin : 루비로 app.rb를 직접 실행해도 되긴 합니다.

@


1.16
log
@183.98.30.10;;yundream;;
@
text
@d19 2
a20 1
 * monk   
d60 1
a60 18
다수의 웹 애플리케이션 개발자가 다른 개발자의 영향을 받지 않고, 개발/테스트/배포 할 수 있는 환경을 구축하는게 최종목적이다. 일단은 개발환경을 분리하는 것만 다룰 생각이다.

웹 애플리케이션 개발환경은 익숙치가 않아서, 어떤 식의 개발방식을 사용하고 있는지 찾아보기로 했다. 그 결과를 소개하려 한다. 

테스트 루비버전은 1.9.3이다. 1.8.x 버전이라면 '''require_relative'''부분에서 에러가 발생할 거다. 1.9.3으로 업데이트 한 다음 extensions를 추가해줘야 한다.
{{{#!plain
require 'sinatra'
require 'extensions/all'
require 'haml'

...
...

require_relative 'helpers/init'
require_relative 'models/init'
}}}

=== thine 웹서버 ===
d68 1
a68 1
Apache와 sinatra의 조합도 생각해 볼 수 있겠는데, 프레임워크가 루비이니 웹 서버도 루비기반의 thin으로 하기로 했다. 아래와 같은 방식으로 실행할 수 있다. 기본 포트번호는 3000이다.
d70 2
a71 1
# thin -R config.ru start
d74 1
a74 1
gem으로 설치하면 된다.
d76 1
a76 2
# gem install extensions   ## 먼저 설치해야 한다.
# gem install thin
d97 1
a97 1
별개 다나온다. Thin과 마찬가지로 처음 보는 툴이다. Sinatra 애플리케이션 개발을 위한 skeleton 구조를 만들어주는 소프트웨어라고 한다. 이 툴을 이용하면 간단하게 컴포넌트별 개발이 가능한 파일 구조를 만들어 준다.  
d100 1
d106 4
a109 1
Monk로 애플리케이션을 만들면 템플릿으로 HAML을 사용하기 때문에 약간의 코드 수정이 필요하긴 하다.
d157 1
a157 1
  * ruby 1.9.3 : 루비 경험이 있어서 오류를 잡을 수 있다면, 1.8.x로 테스트해도 상관은 없습니다. 
@


1.15
log
@183.98.30.10;;yundream;;
@
text
@d91 1
@


1.14
log
@175.252.180.238;;yundream;;
@
text
@d165 5
a169 35

{{{#!plain
# encoding: utf-8

class MyApp < Sinatra::Application
    # 간단 라우트 예제
    get "/" do
        @@title = "Hello world"
        erb :example
    end 
    # 간단 라우트 예제 -1 
    get "/example" do
        @@title = "Example Test"
        erb :example
    end 

    # 라우트 값 가져오기 - 1 
    # GET /example/1/news
    get "/example/1/:path" do
        "Hello #{params[:path]}"
    end 

    # 라우트 값 가져오기 - 2
    # GET /example/2/news/it
    get "/example/2/*/*" do
        "Hello #{params[:splat][0]} : #{params[:splat][1]}"
    end 

    # 라우트 값 가져오기 - 3 
    # GET /example/3/news/it
    get "/example/3/*/*" do | path, category |
        "Hello #{path} : #{category}"
    end 
end
}}}
@


1.13
log
@183.98.30.10;;yundream;;
@
text
@d164 1
a164 1
=== routes 패턴 === 
d166 2
a167 1
=== 매개변수 처리 ===
d169 11
a179 1
=== helper 개발 ===
d181 5
a185 1
=== view 개발 ===
d187 13
a199 1
=== 에러처리 ===
@


1.12
log
@175.252.145.86;;yundream;;
@
text
@d17 3
d63 12
a74 1
테스트 루비버전은 1.9.3이다. 1.8.x 버전이라면 '''require_relative'''부분에서 에러가 발생할 거다. 
d78 1
a78 1
Thin은 루비 기반의 웹서버다. 루비기반 웹서버 하면 '''Mongrel'''이 대세였는데, 새로 도전장을 내민 웹서버라 할 수 있겠다. 가장 큰 강점은 성능이라고ㅗ 한다.
@


1.11
log
@183.98.30.10;;yundream;;
@
text
@d61 3
a63 1
=== thin 설치 ===
d80 17
d102 1
a102 1
view를 위한 template 라이브러리를 선택해야 한다. chef에서 템플릿을 만들기 위해서 ERB를 이용해서 더 익숙한데, 보다보니 HAML이라는 템플릿 엔진이 튀어나온다.
d119 1
d149 11
@


1.10
log
@14.39.4.189;;yundream;;
@
text
@a54 3
== Sinatra Tutorial ==
 * [wiki:Site/Ruby/sinatra/ReadMe Sinatra ReadMe]

d129 2
@


1.9
log
@14.39.4.189;;yundream;;
@
text
@d68 1
a68 1
http://chart.apis.google.com/chart?cht=bvg&chd=t:14.98,54.8723076923077,48.9184615384615,79.9276923076923%7C14.8692307692308,65.0615384615385,70.4446153846154,89.5553846153846%7C14.9476923076923,35.1123076923077,70.18,88.6769230769231&chbh=16&chs=350x150&chl=WEBrick%7CMongrel%7CEvented%20M.%7CThin&chco=000000,666666,cccccc&chdl=1%20c%20req.%7C10%20c%20req.%7C100%20c%20req.
@


1.8
log
@14.39.4.189;;yundream;;
@
text
@d88 1
a88 3
ERB는 루비의 표준 라이브러리의 일부라서, 루비버전과 관계없이 안정적으로 사용할 수 있다는 장점이 있다. HAML은 뭔가 더 좋다고 해서 설치해서 테스트를 했는데,, 에러를 잔뜩 뱉으면서 돌아가지 않는다. 그래서 그냥 ERB 사용하기로 했다. 

monk로 애플리케이션을 만들면 템플릿으로 HAML을 사용하기 때문에 약간의 코드 수정이 필요하긴 하다.
d90 1
@


1.7
log
@110.70.48.215;;yundream;;
@
text
@d132 3
@


1.6
log
@110.70.48.215;;yundream;;
@
text
@d56 1
@


1.5
log
@168.248.255.1;;yundream;;
@
text
@d4 1
d55 1
a55 91
== 테스트 ==
=== Hello world ===
헬로우 월드 테스트를 했다. 
{{{#!plain
# cat helloworld.rb
require 'sinatra'

get '/' do
  "Hello world! #{params[:name]}".strip
end
}}}

애플리케이션을 올렸다.
{{{#!plain
# ruby -rubygems helloworld.rb 
[2012-10-08 21:56:00] INFO  WEBrick 1.3.1
[2012-10-08 21:56:00] INFO  ruby 1.8.7 (2011-06-30) [x86_64-linux]
== Sinatra/1.3.3 has taken the stage on 4567 for development with backup from WEBrick
[2012-10-08 21:56:05] INFO  WEBrick::HTTPServer#start: pid=4559 port=4567
}}}

웹브라우저를 이용 4567 포트로 테스트하면 된다.

=== Routes === 
코드블럭과 연결되는 HTTP 메서드를 '''Routes'''라고 한다. 코드가 실행되는 경로(routes)를 결정하기 위한 메서드다라고 하면 더 이해가 쉬울것 같다.
{{{#!plain
# 1번 코드
get '/' do
	# Read와 관련된 코드 	
end

# 2번 코드
post '/' do
	# create 하기 위한 코드
end

# 3번 코드
put '/' do
	# update 하기 위한 코드
end

# 4번 코드
delete '/' do
	# delete 하기 위한 코드
end

# 5번 코드
options '/' do
	# appease 하기 위한 코드
end
}}}
라우터는 정의된 순서에 따라 HTTP와 메서드와 매칭된 코드를 실행한다. 예를들어 HTTP 헤더가 다음과 같다면
{{{#!plain
GET / HTTP/1.1
Connection: Keep-Alive
}}}
1번 코드가 실행될 것이다.

라우터는 변수를 포함할 수 있으며, 해쉬로 변수 값에 접근할 수 있다.
{{{#!plain
get '/name/:name' do
	"Hello #{params[name]}"
end
# 혹은
get '/name/:name' do |n|
	"Hello #{n}"
end
}}}

와일드카드 패턴을 사용할 수 있다.
{{{#!plain
require 'sinatra'

get '/say/*/to/*' do
    "Say : #{params[:splat][0]} --> #{params[:splat][1]}"
end

get '/download/*.*' do
  # /download/path/to/file.xml과 매치
  params[:splat] # => ["path/to/file", "xml"]
end
}}}

블럭 매개변수를 사용할 수도 있다.
{{{#!plain
require 'sinatra'

get '/download/*.*' do |path, ext|
    "Download : #{path}.#{ext}"
end
}}}
@


1.4
log
@168.248.255.1;;yundream;;
@
text
@d3 1
d151 1
d169 1
a169 1
=== monk 설치 ===
d172 10
a181 1
설치
d184 29
d214 1
d216 1
a216 1
애플리케이션 생성
d218 1
a218 1
# monk init myapp
a219 1

@


1.3
log
@168.248.255.1;;yundream;;
@
text
@d150 1
a150 1
=== thin ===
d153 1
d155 1
d162 18
@


1.2
log
@211.246.69.53;;yundream;;
@
text
@d15 1
a15 1
=== sinatra 인스톨 ==
d144 16
@


1.1
log
@211.246.71.158;;yundream;;
@
text
@d8 1
a8 1
...
d11 5
d29 115
a143 1
... 계속
@
