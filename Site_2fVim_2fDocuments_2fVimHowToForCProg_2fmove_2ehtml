{{{#!html
<HTML
><HEAD
><TITLE
>이동</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.76b+
"><LINK
REL="HOME"
TITLE="C 프로그래머를 위한 Vim 사용"
HREF="index.html"><LINK
REL="PREVIOUS"
TITLE="소개"
HREF="intro.html"><LINK
REL="NEXT"
TITLE="C파일에서 임의의 위치로 이동하기"
HREF="tagandmark.html"><META
http-equiv="Content-Type"
content="text/html; charset=euc-kr"></HEAD
><BODY
CLASS="SECTION"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="NAVHEADER"
><TABLE
SUMMARY="Header navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>C 프로그래머를 위한 Vim 사용</TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A
HREF="intro.html"
ACCESSKEY="P"
>&#51060;&#51204;</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
></TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A
HREF="tagandmark.html"
ACCESSKEY="N"
>&#45796;&#51020;</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><DIV
CLASS="SECTION"
><H1
CLASS="SECTION"
><A
NAME="MOVE"
></A
>2. 이동</H1
><DIV
CLASS="SECTION"
><H2
CLASS="SECTION"
><A
NAME="AEN19"
></A
>2.1. 문자단위 이동</H2
><P
>			C 소스파일을 열어서, <B
CLASS="EMPHASIS"
>W</B
>, <B
CLASS="EMPHASIS"
>e</B
>, <B
CLASS="EMPHASIS"
>b</B
>를 입력해 보기
			바란다. vim은 각 토큰을 구분해서 빠르게 다음 토큰으로 이동 가능하도록 도와준다. 이 키들을 이용하면 
			좀더 빠르게 토큰사이의 이동이 가능하다.
<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>	...
	if((NULL == x) &#38;&#38; y &#62; z)
	...</PRE
></TD
></TR
></TABLE
>
			위의 if문 코드에서 w를 눌러보면 각 토큰의 처음으로 이동하는 걸 확인할 수 있을 것이다. 처음에는 
			<B
CLASS="EMPHASIS"
>(</B
> 다음에는 <B
CLASS="EMPHASIS"
>==</B
> 토큰으로 이동한다. 
		</P
><P
>			<B
CLASS="EMPHASIS"
>e</B
>는 각 토큰의 마지막으로 이동한다는 걸 제외하고는 <B
CLASS="EMPHASIS"
>w</B
>와 동일하다.  
		</P
><P
>			<B
CLASS="EMPHASIS"
>b</B
>는 뒤로 이동한다는 걸 제외하고 <B
CLASS="EMPHASIS"
>w</B
>와 동일하다. 
		</P
></DIV
><DIV
CLASS="SECTION"
><H2
CLASS="SECTION"
><A
NAME="AEN34"
></A
>2.2. {,},[[,]] 키</H2
><P
>			{와 }는 문단단위의 이동을 위해서 사용한다. 문단은 비슷한 하나의 사물을 
			기술하는 여러 문장의 모음으로, 일반적으로 문서의 최소단위로 사용되며,
			문서를 좀더 쉽게 읽을 수 있도록 도와준다.
<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>/* first C-statment */
...
...


/* Next Set of C-statment */
...
...</PRE
></TD
></TR
></TABLE
>
			위의 예에서 {를 이용하면 문단의 처음이나 끝으로 한번에 이동할 수 있음을
			확인할 수 있다.
		</P
><P
>			C 코드 역시, 가독성을 높이기 위해서 아래의 예처럼 문단단위로 작성되는
			경우가 많다. 논리적으로 비슷한 코드라인들을 하나의 문단으로 작성한다.(Vim은 한줄의 공백을 만나면 그다음 문단으로 생각한다) 
<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>void functin1()
{
	/* Declarations */
	int x;
	char y;
	double z;

	/* some code */
	x = 1;
	y = 'a';
	z = 1.2;

	/* some more code */
	x++;
	y++;
	z++;
}</PRE
></TD
></TR
></TABLE
>
		</P
><P
>			<B
CLASS="EMPHASIS"
>[[</B
>와 <B
CLASS="EMPHASIS"
>]]</B
>는 {사이를
			이동할 때 사용한다. 
<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>void foo()
{
 // ....
}

void bar()
{
 // ....
}</PRE
></TD
></TR
></TABLE
>
			<B
CLASS="EMPHASIS"
>[[</B
>는 이전의 {을 찾기위해서, <B
CLASS="EMPHASIS"
>]]</B
>는
			다음의 {를 찾기 위해서 사용한다. 이 키를 이용하면, 
			함수나 루프문의 처음을 빠르게 탐색 할수 있다. 위의 예제 코드에서 
			[[와 ]]를 이용해서 foo와 bar함수의 처음으로 이동하는걸 확인할 수 있을 
			것이다. 
		</P
><P
>			이외에도 <B
CLASS="EMPHASIS"
>[]</B
>, <B
CLASS="EMPHASIS"
>][</B
>와 같은 조합도
			사용할 수 있다. 이들 키는 }를 탐색하는데 사용한다. []는 이전의 } ][는 
			다음 {로 바로 이동할 수 있다. 
		</P
><P
>			이들 키는 사용하기에 직관적이지 않다라는 단점을 가진다. 그래서 
			요즘 배포되는 vim은 좀더 직관적으로 사용가능하도록 다음과 같은 
			맵핑을 제공한다.  
<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>:map [[ ?{&#60;CTRL-VCTRL-M&#62;w99[{  
:map ][ /}&#60;CTRL-VCTRL-M&#62;b99]}  
:map ]] j0[[%/{&#60;CTRL-VCTRL-M&#62;  
:map [] k$][%?}&#60;CTRL-VCTRL-M&#62;</PRE
></TD
></TR
></TABLE
>
			[{와 ]}이 훨씬 직관적인 사용환경을 제공해줌을 알 수 있다.  
		</P
></DIV
><DIV
CLASS="SECTION"
><H2
CLASS="SECTION"
><A
NAME="AEN51"
></A
>2.3. % 키</H2
><P
><TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>if ((x==y) &#38;&#38; ((z-=a) || (y&#62;x)))</PRE
></TD
></TR
></TABLE
>
			위의 코드는 여러개의 괄호가 중첩되어 있어서 괄호의 범위를 찾기가 
			쉽지 않다. <B
CLASS="EMPHASIS"
>%</B
>키를 이용하면 괄호의 시작과 끝위치를
			쉽게 찾을 수 있다. %키는 이외에도 중첩된 
			#if, #ifdef, #else, #elif, #endif 문을 검사하기 위한 용도로도 사용할 
			수 있다.  
		</P
></DIV
></DIV
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
SUMMARY="Footer navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A
HREF="intro.html"
ACCESSKEY="P"
>&#51060;&#51204;</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="index.html"
ACCESSKEY="H"
>&#52376;&#51020;&#51004;&#47196;</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A
HREF="tagandmark.html"
ACCESSKEY="N"
>&#45796;&#51020;</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>소개</TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
>&nbsp;</TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>C파일에서 임의의 위치로 이동하기</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>
}}}
