#title RMI
원문 : [http://kr.dcinside1.imagesearch.yahoo.com/zb40/zboard.php?id=programming&page=1&sn1=&divpage=4&banner=&sn=off&ss=on&sc=off&select_arrange=headnum&desc=asc&no=22783 DCInside 프로그래밍 갤러리]
[[UploadFile]]
attachment:RMI.jpg
  1. 서버는 보안 관리자를 해당 플랫폼의 시스템에 설정하게 됩니다. 이러한 내용은 java.lang 패키지에 구현되어 있답니다.
  1. 서버 객체를 명명서비스에 등록합니다. 명명 서비스란 클라이언트에서 서비스를 요청할 때에 어떠한 서비스가 현재 사용가능하며 해당 서비스는 어디에 위치해 있는지를 알려주는 것입니다. 앞서 설명한 114와 같은 기능이라고 할 수 있죠.
  1. 서버가 정상적으로 등록되면 클라이언트도 마찬가지로 해당 플랫폼에 보안 관리자를 설정합니다.
  1. lookup 메소드는 명명 서비스에 접속해서 자신이 원하는 서비스가 존재하는지 그리고 존재한다면 해당 서비스에 대한 레퍼런스를 가져옵니다.
  1. lookup이 성공적으로 이루어지면 이제부터는 마치 로컬 머신에 있는 객체를 사용하는 것처럼 메소드를 호출하면 됩니다. 이처럼 원격 객체를 로컬 객체처럼 사용하기 위해서 lookup이 수행된 후에 프록시 서버와 같은 기능이 생기게 됩니다.
  1. 클라이언트에서 메소드를 호출하였지만 실질적으로 이것은 서버에 있는 객체의 메소드를 호출하는 것과 같은 효과를 얻게 됩니다.

RMI가 중요하게 사용되는 부분은 J2EE에서 EJB와 연동시킬 때입니다. EJB와의 연동은 바로 RMI를 이용하기 때문이죠.

 * 생각해보기 : rpc(:12) 와의 비교 
