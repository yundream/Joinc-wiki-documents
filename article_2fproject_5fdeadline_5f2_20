'''프로젝트 데드라인'''

[[TableOfContents]]

== 2부. 프로젝트의 정의와 계획 ==

    === 8장. 요구 사항 ===
    소프트웨어 요구 사항 프로세스 접근 방법
        1. 명확하고 자세한 요구 사항 리스트를 필요로 한다.
        2. 간단하고 일반적인 요구 사항 리스트를 말한다.
            위험성과 불확실성이 존재하는 단점이 있다.

    무엇보다 중요한 것은 코딩하기 전에 우선적으로 기본적인 요구사항을 정의해야 한다.


    '''공동의 비전 정의'''

        릴리즈의 초기에는 간단하고 명확안 비전 선언문을 정의해야 한다.
        비전 선언문의 내용이 실현되었을 경우 확실한 상업적인 이익이 돌아와야 한다.

        예) 누메가의 비전 선언문
            * C/C++ 개발자를 위한 가장 훌륭한 에러 탐지 제품을 출시하고 새로운 경쟁자들이 시장에 진입하는 것을 차단하라.
            * 소프트웨어 업계에서 가장 사용하기 쉬운 성능 분석 제품을 출시하고, 제품의 용이성을 외부로부터 인정받아라.
            * 윈도우 NT를 위한 세계에서 가장 강력하고, 정교한 커널 디버거를 출시하라.
        
        * 사용 문제 발견 및 해결
            사용자가 해결하고 싶은 문제에 더 관심을 가져야 한다.


    '''요구 사항 정의'''
        * 일반적이고 명확한 정의
            프로젝트에 대한 요구 사항 집합을 가장 적절하게 분류할 수 있는 방법 중 하나는 개요를 구성하는 것이다.
            
            예) 
                기본 요구 사항1 <- 가장 상위의 개요
                    상세 요구 사항1
                        하위 요구 사항 1.1
                        하위 요구 사항 1.2
                    상세 요구 사항2
                        하위 요구 사항 2.1
                        하위 요구 사항 2.2
                    
            기능의 모든 중요 요소들을 만족 시킬 때까지 지속적으로 구체화시키고 추가시켜야 한다.
    
        * 완전성
            소프트웨어 프로젝트에 영향을 미치는 일반적인 요구 사항의 분류 기준
                * 작업과 기능
                * 사용자 인터페이스
                * 환경: 소프트웨어와 하드웨어의 환경
                * 통합: 기존의 소프트웨어나 하드웨어 제품과의 통합과 상호 운용성
                * 성능
                * 설치
                * 품질보증
        
        * 세부 항목
            요구 사항 정의에 포함될 세부 항목의 분량도 해결해야 할 또 다른 문제이다.
            경험이 부족한 부분의 요구 사항을 정의하게 될 수도 있기 때문이다.
            완성하려는 것을 이해하기 전에 새로운 아이디어를 시도하고 경험을 쌓아야 한다.
            그림 8-1) 요구 사항과 사용성, 프로토타이핑의 관계
            무엇보다도 중요한 것은 가장 주의해야 할 부분을 미리 파악하고 프로젝트가 본격적으로 시작되기 전에 문제에 대한 효과적인 해결책을 미리 개발하는 것이다.

    '''요구 사항 평가'''

        요구 사항을 분석하고 릴리즈가 나아가야 할 방향을 파악할 수 있는 시간을 따로 마련하라.
        
        * 미완성의 요구 사항
            요구 사항을 보는 객관적인 시선을 가지고 요구 사항이 미치는 영향을 전반적으로 평가하는 일이 반드시 필요하다.

        * 요구 사항 분류
            * '추월' 대 '만회' 요구사항
                추월 요구 사항: 제품을 시장에 있는 경쟁자보다 먼저 만드는 역할을 한다.
                만회 요구 사항: 제품 기능을 경쟁 제품의 것과 나란히 만든다.
            * '과거 지향적' 대 '미래 지향적' 요구 사항
                과거 지향적 요구 사항: 이전이 소프트웨어 릴리즈가 가지고 있는 문제나 이슈를 처리한다.
                미래 지향적 요구 사항: 소비자의 요구를 미리 예측한다.
                    정의하기 가장 어려운 내용이기도 하다.

            제품, 시장, 그리고 릴리즈 목표에 대한 요구를 충족하기 위해서는 과거 지향적 요구 사항과 미래 지향적 요구 사항을 적절히 혼합해야 한다.

            * 시각적 표현
                요구 사항 평가 영역 차트
                그림 8-2) 네 개의 영역으로 구분된 요구 사항
                1영역: 미래의 요구를 예측하여 그에 대한 솔류션을 제시하는 최초의 기업이 됨을 의미한다.
                2영역: 경쟁자가 소비자의 요구를 충족시킬 수 있고, 여러분은 그것을 만회해야 한다.
                3영역: 시장의 흐름을 잘못 예측하는 위험없이 훌륭한 제품을 출시할 수 있는 최선의 방법일지도 모른다.
                4영역: 경쟁자가 이미 출시한 제품에 기능을 추가하는 전략을 구사한다.

                요구 사항이 상업적인 가치가 있게 만드는 것이 영역 구분의 목표이다.

    '''요구 사항의 우선 순위화'''

        * 우선 순위가 왜 중요한가
            우선 순위는 작업의 스케줄링과 배정에 많은 영향을 미친다.
        * 어떻게 우선 순위를 정하는가
            * 필수: 릴리즈에 반드시 필요하며, 구현하지 못하면 제품을 릴리즈 할 수 없다.
            * 필요: 릴리즈에 매우 바람직한 요구 사항이다.
            * 부가: 스케줄에 문제가 없다는 조건 하에서 프로젝트 막바지에 구현한다.
            
    '''요구 사항 최종 결정'''

        다음 두가지 단계를 반드시 거치고 최종 결정을 내려야한다.
        핵심 기술의 위험 요소를 기술적으로 평가
        소프트웨어의 사용자 인터페이스 프로토타입을 생성        


    '''변화관리'''

        * 기본 법칙
            * 모든 변경 사항을 검토하기 위해 프로젝트 관리자와 모든 주임들로 구성된 팀을 구성하라
            * 기능 팀은 담당한 기능을 스스로 개선시킬 권한이 있다.
            * 모든 변경 사항을 팀 전체에 전달하라
            * 모든 변경 사항을 문서화하라

    === 9장. 연구, 평가 그리고 프로토타이핑 === 

    '''이 점'''

        연구, 평가, 프로토타이핑으로부터 이점을 얻기 위한 실행 내용
        * 위험을 관리하고 좋은 스케줄을 생성하라    
            미해결된 기술적 문제는 스케줄에 막대한 악영향을 끼친다.
        * 확신을 가져라
            팀이 프로젝트의 성공을 확신할 수 없다면 사기와 생산성이 많이 떨어질 수 있다.
        * 성능 문제를 미리 대처하라.
            소프트웨어 아키텍처 모델을 미리 완성하고, 테스트한다.
        * 기술적 혁신을 이뤄내라
        

    '''연 구'''

         * 연구란 무엇인가
            순수 연구: 유용한 무언가를 창조하기 위해 발명하고 발견하는 과정
            응용 연구: 특정 업계에서 어떤 일이 일어나고 있는지 관찰하여 어떤 솔류션을 출시하는 것이 유리한지 논리적인 예측을 한 후 그 가설을 구체적인 제품 아이디어로 변형시키는 것이다.

         * 어떻게 연구를 하는가
            연구와 개발 사이에 균형을 유지하는 방법
                1. 최소 자본 집약적 방법
                2. 최대 자본 집약적 방법
        
            * 마이너 릴리즈 동안 프로젝트를 연구하라
            * 개발 주임을 교대하라
            * 연구 전담 주임
                지속적인 연구의 필요성이 높아지면 일류급 인재를 배정하거나 채용하는 것을 고려해야 한다. 

            연구 작업의 촛점
                * 시장 동향과 발전
                * 새로운 아이디어
                * 경쟁자를 통한 혁신과 목표
 
            연구 프로젝트가 끝났을 때나 우선적으로 해야할 일이 변경되었을 때는 그 내용을 문서로 남기고 결과를 팀과 공유하는 것이 중요하다.
            연구 프로젝트의 결과가 실제적인 가능성을 가지고 있다면 그 내용과 원리를 팀에게 보일 수 있도록 프로토타입으로 만드는것도 바람직한 방법이다.


    '''기술 평가'''

        새로운 소프트웨어 도구와 컴포넌트, 플랫폼, 솔류션을 도입하는 프로젝트인 경우 기술을 정확히 이해해야 한다.

        * 기술 평가란 무엇인가
            어떤 새로운 기능 특성이 프로젝트 요구에 부합하는지 평가해야 하며, 현재의 기술적 이슈를 신속하게 테스트하고 해결해야 한다.
            프로젝트를 시작하기 전에 그 기술을 어느 정도 사용해 봐야 한다.

        * 기술을 평가하는 방법
            * 특성
            * 품질
            * 우수성
            * 지원
            * 사용성
            * 팀의 역량

            모든 평가 프로젝트에서의 고려사항
                * 기준을 정하라
                * 기준에 맞는지 측정하라
                * 고객 구축 사례를 얻어라                       

    '''프로토타입'''

        * 프로토타입이란 무엇인가
            핵심 기능을 효과적으로 구현하는 방법을 파악하고, 핵심 기술의 복잡성과 지속 여부를 추정하며, 결함이 있거나 긴 시간을 소요하는 구현 작업의 전반적인 위험성을 최소하는데 도움을 준다.
            프로토타이핑은 모든 구성 요소들이 어떻게 서로 통합되는지 확인하기 위해 시스템 전체를 미리 구성하는 역할과 엔지니어링 게획을 진행하기 위해 필요한 정보를 제공하는 두가지 역할을 수행한다.

        * 어떻게 프로토타입을 만드는가
            * 중요 작업을 파악하라
                많은 이슈를 가지고 있다면 우선 순우를 정하고 가장 중요한 것부터 우선적으로 해결하라.
            * 실험을 정의하라
                정의된 실험을 통해서 중요한 기술이나 구성 요소들 간의 통합을 프로토타이핑한다.
            * 결과를 가상으로 구현하라
            * 기존의 기술을 이용하라
            * 수행한 작업을 평가하라
            * 결과를 설계 노트와 같은 문서로 남겨라

    === 10장. 사용자 인터페이스 ===
    
    UI 프로토타입은 개발 과정의 초기에 완성되어야 한다.
    
    '''UI 프로토타입이란 무엇인가'''

        UI 프로토타입: UI를 시각적으로 표현하는 방법
            여러분이 만들고 싶어하는 기능뿐만 아니라 사용자가 원하는 기능도 고려하는 작업 초안이기도 한다.

        * 왜 UI 프로토타입이 필요한가
            제품 팀과 인지 공학 엔지니어가 작업을 수행한다.

            * 중요 작업의 전념
                가장 도움이 되는 기능과 같은 중요 작업들이 제품의 가장 핵심적인 부분이다.
            * 정확성
                UI를 계속해서 다시 설계하고 구현하는 비효율적인 상황이 발생하지 않게 해야 한다.
            * 스케줄링
                UI를 정의하지 못하면 스케줄링을 정확하게 할 수 없다.
            * 문서 작업
                소프트웨어 사용 방법에 대한 문서를 반드시 만들어야 한다.
            * 테스트
                테스트 과정 또한 UI를 바탕으로 진행된다.
                제품에 대한 정보는 프로토타입을 통해 가장 훌륭하게 설명될 수 있다.
                
        * UI 프로토타입은 어떻게 개발하는가
            예) 누메가의 기본 원칙
                1. 사용자가 제품에서 사용해야하는 가장 중요한 작업을 파악한다.
                2. 1번 작업을 정확하게 평가하기 위해 프로젝트 초기에 신속하게 정의한다. 
                3. 프로토타이핑을 매우 신속하게 반복하고, 사용자의 평가도 참조하기 위해 내-외부적으로 그 내용을 공개한다.

            * 중요 작업을 파악하기
                * 새로운 사용자가 제일 사용하고 싶어하는 작업
                * 기존 사용자가 제일 자주 사용하고 싶어하는 작업

            * 프로토타이핑
                * 종이 프로토타입
                    단순히 종이에 UI를 그리는 것이다.
                    각 UI를 통합하고 변경하기가 용이하다.
                    새로운 아이디어를 즉시 시험해 볼 수 있다.
                * RAD 도구
                    프로토타입을 만드는 데 가장 자주 사용되는 방법
                    UI를 빠르게 구현할 수 있다.
                    실제 소프트웨어를 사용하여 테스트할 수 있기 때문에 완성도가 높아진다.
                * 스펙
                    가장 효과적이지 못하다.
                    문제점
                        1. 해석상의 오해가 생길 가능성이 높다.
                        2. 테스트하고 평가하기 어렵다.
                        3. 스펙을 내부적으로 일관성과 정확성을 유지하기가 매우 어렵다.

            * 평가, 반복 그리고 순환
                

    '''인지 공학 엔지니어의 역할'''

            소프트웨어 제품을 개발하는 데 매우 중요한 역학을 담당한다.

        * 담당 업무
            * UI 프로토타입 정의
                UI 프로토타입의 정의와 설계를 주도적으로 수행
            * 설치 프로토타입 정의
            * Out of the Box(OOTB: 바로 적용할 수 있는 제품) 경험 정의
                OOTB를 경험을 담당하고 정의하며, 평가하는 핵심적인 역할을 수행한다.
            * 그래픽과 이미지, 아이콘, 색상 조합 생성
                소프트웨어에 대한 설명을 효과적으로 도와주는 그래픽적인 소재를 만드는데 숙련되어야 한다.

        * 조 언
            * 라이센싱
            * 패키지
            * 문서와 온라인 도움말, 부록
                회사 로고, 제품 로고, 법적 고지 사항, 기타 그래픽적인 요소들의 일관성 유지
                소프트웨어와 문서, 온라인 도움말, 퀵 레퍼런스 카드, 마케팅 자료 사이에 일관성 유지

        * 실 행
                        
    === 11장. 스케줄링 ===

    '''필수 조건'''

        * 요구 사항
        * 사용자 모델/설계
        * 타당성/프로토타이핑

        그림 11-1) 스케줄링 과정에 필요한 중요 정보
        

    '''스케줄링 개념과 문제'''

        * 기본적인 개념
             * 균형
                해야 할 일의 양과 사용할 수 있는 자원의 양 그리고 프로젝트를 완수하는 시간의 양 사이에 적절한 균형을 유지하는 것이다.
            * 작업과 추정들
                작업은 스케줄을 구성하는 기본 구성 요소이며, 완성해야 하는 특정 업무이다.
                특정 작업이 다른 작업과 어떤 관계를 가지고 있는지 알아야 한다.
                핵심 기능은 언제나 첫 번째로 끝마쳐야 하며, 각 작업을 수행하는 데 필요한 시간을 알아내야 한다.
                추정: 경험에 의한 추측
            * 스케줄 완성: 프로젝트에 필요한 모든 분야가 스케줄링되어야 한다.
                * 개발
                * 품질 보증
                * 사용자 교육
                * 인지 공학
                * 릴리즈 엔지니어링
                * 외부 요인들
            * 동시 개발
                프로젝트의 모든 부분들을 동시에 진행할 때 개발 사이클의 효율이 향상된다.
                장점
                    * 최대한 신속하게 기능들을 완성하기 위해 팀 전체의 노력을 중요시 여긴다.
                    * 팀 전체가 같은 기능에 집중하므로 그 기능이 완성되었는지 혹은 단지 코드만 생성되었는지 그리고 품질, 통합, 유용성 등에서 문제가 발생하고 있는지 휠씬 빨리 알아낼 수 있다.
            * 개발의 넒이 대 깊이
            * 기능 중심
                작업들이 제품의 기능이나 요구 사항을 적절하게 표현하고 있어야 하며, 개발자의 작업은 기능 중심이어야 한다.

        * 구성원 문제
            * 업무 지정
                구성원들이 가지고 있는 기술, 생산성, 프로젝트 경험 그리고 성격을 고려해서 업무를 지정해준다.
            * 개인의 수준
                개인의 능력에 맞춰 팀 전체에서 프로젝트의 업무량을 공평하게 배정해야 한다.
            * 오버헤드
                다양한 요인에 의해 지연된 시간이 있을수 있으므로 스케줄에 이런 시간에 대한 설명을 포함시킨다.
            * 한가한 작업과 중요한 작업
                중요한 작업에 숙련된 구성원을 배치하여 시스템 전반에 존재하는 위험 요소를 최소하시킨다.
                
        * 모든 팀이 피해야 할 함정      
            * 목표일과 약속일
                목표일: 프로젝트 완료일로 제시한 날짜
                약속일: 팀 전체가 참여하여 결정한 날짜
                목표일을 스케줄 공식에 대입한 후, 구현해야 할 기능과 보유하고 있는 자원을 어떻게 조절해야 서로 균형을 맞출 수 있는지 고민해야 한다.
            * 스케줄 소유권
            * 엔지니어링 신뢰성


    '''훌륭한 스케줄 생성하기'''

        개발 과정에서 만들어지는 잘 정의된 산출물들을 일목요연하게 정리해주는 스케줄이 필요하다.
        이런 식으로 스케줄이 정의된다면, 각 산출물을 목표로 팀을 관리할 수 있으며, 작업의 진척도를 확실하게 확인하고 추정할 수 있다.

        * 작업
            특정 기능을 구현하는 데 필요한 작업들을 정의
            그 후에 QA와 사용자 교육, UI 그리고 릴리즈 엔지니어링 팀의 작업도 스케줄링해야 한다.
        * 기본 단계
            팀의 역량에 초점을 맞춘 중요한 단기간의 목표
        * 중간 중요 시점
            제품의 중요한 부분의 완성을 뜻하는 기본 단계들의 그룹이며, 프로젝트 기간을 기준으로 고르게 나눠져야 한다.
        * 외부 중요 시점: 프로젝트 외부에 있는 팀 또는 사람에 관련된 프로젝트의 매우 중요한 부분          
            * 알파 릴리즈
            * 베타 릴리즈
            * 릴리즈 켄디데이트
            * 릴지즈 생산일

            타인에게 릴리즈를 배포하는 일은 굉장히 중요한 작업이므로 각 중요 시점 때마다 반드시 안정화 기간을 거쳐야 한다.
        * 사 례
            생략
        * 베타 테스트 추가
            첫 번째 베타 기간에는 부득이하게 기능을 추가시키는 경우가 생길 수 있지만, 마지막 베타 기간에는 어떤 기능도 추가되어서는 안되며 오적 품질과 성능이나 문제 해결에만 집중해야 한다.
        * 예기치 못한 문제  
