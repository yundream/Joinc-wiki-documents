{{{#!html
<HTML
><HEAD
><TITLE
>포인터가 문제이다</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.76b+
"><LINK
REL="HOME"
TITLE="C++ Programming HOW-TO"
HREF="index.html"><LINK
REL="PREVIOUS"
TITLE=" C++ 에서의 메모리 할당"
HREF="memoryallocation.html"><LINK
REL="NEXT"
TITLE="디버깅"
HREF="debuging.html"><META
http-equiv="Content-Type"
content="text/html; charset=euc-kr"></HEAD
><BODY
CLASS="SECT1"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="NAVHEADER"
><TABLE
SUMMARY="Header navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>C++ Programming HOW-TO</TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A
HREF="memoryallocation.html"
ACCESSKEY="P"
>&#51060;&#51204;</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
></TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A
HREF="debuging.html"
ACCESSKEY="N"
>&#45796;&#51020;</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><DIV
CLASS="SECT1"
><H1
CLASS="SECT1"
><A
NAME="POINTERS"
></A
>10. 포인터가 문제이다</H1
><P
>포인터는 일반적인 프로그램에서 꼭 필요한 것은 아니다.
Java와 같은 현대 언어에서는 포인터가 없다 (Java는 내부적으로만
포인터를 사용한다).
포인터는 프로그램을 어지럽고 읽기 힘들게 만든다.</P
><P
>최대한 포인터의 사용을 피하고, 대신 레퍼런스를 사용해라.
포인터는 정말 문제가 많고, 포인터 없이 프로그램을 쓰는 게 가능하다.
<B
CLASS="EMPHASIS"
> 포인터는 레퍼런스를 쓸 수 없는 곳에서만 써야한다.  </B
></P
><P
><B
CLASS="EMPHASIS"
>레퍼런스</B
>
는 별칭(alias)이다. 레퍼런스를 만들면, 이는 다른 객체(혹은 대상)에 다른 이름을
주는 것이다. 그 순간부터 레퍼런스는 대상의 다른 이름으로서 돌아가고,
레퍼런스에 행하는 모든 연산이 그 대상에 실제로 적용된다.</P
><P
><B
CLASS="EMPHASIS"
>레퍼런스의 문법 :</B
>
타입을 선언할 때, 뒤에 레퍼런스 연산자 (&#38;) 를 붙임으로써 레퍼런스를 선언할 수 있다.
레퍼런스는 <B
CLASS="EMPHASIS"
>반드시</B
> 만들어 질 때 초기화 되어야 한다.
다음의 예를 보자 -
<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="PROGRAMLISTING"
>	int	weight;
	int	&#38; rweight = weight;

	DOG	aa;
	DOG	&#38; rDogRef = aa;</PRE
></TD
></TR
></TABLE
>&#13;</P
><P
>레퍼런스를 사용할 때 <B
CLASS="EMPHASIS"
> 지킬 것</B
> -

<P
></P
><UL
><LI
><P
>객체에 대한 다른 이름을 주고자 할 때 레퍼런스를 사용해라.</P
></LI
><LI
><P
>모든 레퍼런스는 초기화되어야 한다.</P
></LI
><LI
><P
>프로그램의 높은 효율과 퍼포먼스를 위해 레퍼런스를 사용해라</P
></LI
><LI
><P
>레퍼런스와 포인터를 보호하기 위해 가능한경우면 언제나
<B
CLASS="EMPHASIS"
>const</B
>를 사용해라.</P
></LI
></UL
>&#13;</P
><P
>레퍼런스를 사용할 때 <B
CLASS="EMPHASIS"
>하지 말아야 할 것</B
> -

<P
></P
><UL
><LI
><P
><B
CLASS="EMPHASIS"
>중요 : </B
> NULL인 객체에 대해 레퍼런스를 쓰지 말아라.</P
></LI
><LI
><P
>포인터의 주소를 나타내는 &#38;와 레퍼런스 연산자를 헷갈리지 마라.
레퍼런스 연산자는 오직 선언부 (위에 나와있는 레퍼런스 사용법 참조) 에서만 쓰인다.</P
></LI
><LI
><P
>레퍼런스에 새로 값을 지정하려(즉, 변경하려) 하지 마라.</P
></LI
><LI
><P
>레퍼런스를 쓸 수 있다면 포인터를 쓰지 마라.</P
></LI
><LI
><P
>지역변수에 대한 레퍼런스를 리턴하지 마라.</P
></LI
><LI
><P
>레퍼런스가 스코프가 벗어난 변수를 가리키도록 하지 마라.</P
></LI
></UL
>&#13;</P
></DIV
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
SUMMARY="Footer navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A
HREF="memoryallocation.html"
ACCESSKEY="P"
>&#51060;&#51204;</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="index.html"
ACCESSKEY="H"
>&#52376;&#51020;&#51004;&#47196;</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A
HREF="debuging.html"
ACCESSKEY="N"
>&#45796;&#51020;</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>C++ 에서의 메모리 할당</TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
>&nbsp;</TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>디버깅</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>
}}}
