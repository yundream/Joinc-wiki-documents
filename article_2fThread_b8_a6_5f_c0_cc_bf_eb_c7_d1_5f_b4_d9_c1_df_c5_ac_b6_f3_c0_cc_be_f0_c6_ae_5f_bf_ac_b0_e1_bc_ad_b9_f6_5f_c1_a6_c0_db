#title Thread를 이용한 다중클라이언트 연결서버 제작
[wiki:docbook_Thread를_이용한_다중클라이언트_연결서버_제작 Docbook 원문]

{{{#!html
<HTML
><HEAD
><TITLE
>thread 를 이용한 다중클라이언트 연결서버 제작</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.64
"><META
http-equiv="Content-Type"
content="text/html; charset=euc-kr"></HEAD
><BODY
CLASS="ARTICLE"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="ARTICLE"
><DIV
CLASS="TITLEPAGE"
><H1
CLASS="TITLE"
><A
NAME="AEN2"
>thread 를 이용한 다중클라이언트 연결서버 제작</A
></H1
><H3
CLASS="AUTHOR"
><A
NAME="AEN4"
>윤 상배</A
></H3
><DIV
CLASS="AFFILIATION"
><DIV
CLASS="ADDRESS"
><P
CLASS="ADDRESS"
>				dreamyun@yahoo.co.kr<br>
			</P
></DIV
></DIV
><HR></DIV
><DIV
CLASS="TOC"
><DL
><DT
><B
>&#52264;&#47168;</B
></DT
><DT
>1&#51208;. <A
HREF="#AEN9"
>소개</A
></DT
><DT
>2&#51208;. <A
HREF="#AEN15"
>Thread 네트웍 프로그래밍</A
></DT
><DD
><DL
><DT
>2.1&#51208;. <A
HREF="#AEN21"
>Thread 를 이용함으로써 얻는 이익과 손해</A
></DT
><DT
>2.2&#51208;. <A
HREF="#AEN29"
>쓰레드를 이용한 네트웍 서버 프로그래밍</A
></DT
><DD
><DL
><DT
>2.2.1&#51208;. <A
HREF="#AEN33"
>기능정의</A
></DT
><DT
>2.2.2&#51208;. <A
HREF="#AEN43"
>zipcode_thread.c</A
></DT
><DT
>2.2.3&#51208;. <A
HREF="#AEN50"
>thread_mon.c</A
></DT
></DL
></DD
><DT
>2.3&#51208;. <A
HREF="#AEN56"
>테스트</A
></DT
></DL
></DD
><DT
>3&#51208;. <A
HREF="#AEN63"
>결론</A
></DT
></DL
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN9"
>1&#51208;. 소개</A
></H1
><P
>		지금까지 fork(),select(),poll() 을 이용한 다중클라이언트를 받아들이는 
		서버제작에 다루었었다. 이번은 그중 마지막으로 thread 를 이용한 
		서버제작을 아룰것이다. thread 의 구현을 위해서는 pthread 를 이용
		하도록 하겠다. 
	</P
><P
>		물론 이들 fork, select, poll, thread 외에도 몇가지 (좀더 진보된 형태의) 
		다중 클라이언트 서버를 위한 방법들이 있으나 
		나중에 다루도록 일단은 논외로 하겠다. 
	</P
><P
>		여기에서는 쓰레드의 개념과 각종 API 에 대한 설명은 하지 않을것이다. 
		이미 이 사이트에서 몇번에 걸쳐서 다루고 있음으로 쓰레드에 대한 개념이 
		충분히 잡혀있지 않다면 먼저 이들 문서에 대해서 읽어보기 바란다.  
	</P
><P
>		또한 이문서는 자료구조의 간단한 구현을 위해서 STL 을 사용하고 있으며, 
		IPC 를 위한 Unix Domain Socket 도 사용하고 있다. STL 과 도메인 소켓을 
		잘 모른다면 역시 먼저 이들 관련 문서를 읽어 보기 바란다.  
	</P
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN15"
>2&#51208;. Thread 네트웍 프로그래밍</A
></H1
><P
>		Thread 를 이용한다고 해서, fork, select, poll 과 구별되는 어떤 기술을 
		필요로 하는건 아니다. 구현 기본원리는 동일하며 여기에 단지 몇가지 Thread API 
		가 들어갈 뿐이다.  
	</P
><P
>		다른 것들과 마찬가지로 Thread 역시 최초 socket() 함수를 호출해서 
		endpoint(접점) 소켓을 생성하고 accept()로 endpoint 소켓으로 연결이 있는지 
		확인후 연결이 있다면 새로운 쓰레드를 생성하는 방식으로 프로그래밍이 
		이루어진다. 전체적으로 봤을때 fork 와 특히 유사하다. 다른점이라면 
		accept 한후에 frok 대신 thread 를 이용해서 해당 연결에 대한 처리를 
		한다는 점 정도가 될것이다. 
		<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>            +--------+   
            | Start  |  ㅣ
            +--------+  ㅣ
            +--------+  ㅣ
            | Socket |  ㅣ
            +--------+  ↓
            +--------+
            | Bind   |
            +--------+
            +--------+
            | Listen |
            +--------+
            +--------+
            | Accept | &#60;------+
            +--------+        | polling
                |             |
        +---------------+     |
        | Thread Create | ----+
        +---------------+
                |
            +--------+
            |        |
         +------+  +------+
         | TH 1 |  | TH 2 | .....
         +------+  +------+
            |         |
           END       END
		</PRE
></TD
></TR
></TABLE
>
	</P
><P
>		소켓의 생성과 연결 기다림은 전형적인 
		Socket -&#62; Bind -&#62; Listen -&#62; Accept 의 순서를 따른다. 
		Accept 에 만약 새로운 연결이 리턴되면, pthread_create 를 이용해서 
		새로운 쓰레드를 생성시키고, 해당클라이언트와 통신하게 된다.   
	</P
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN21"
>2.1&#51208;. Thread 를 이용함으로써 얻는 이익과 손해</A
></H2
><P
>			리눅스에서 사용하는 pthread 는 clone() 함수를 이용해서 구현된다. 
			clone() 함수는 fork(2) 와 마찬가지로 새로운 프로세스를 생성한다. 
			하지만 fork 와는 달리 파일기술자, 시그널 핸들러 외에도 
			실행문맥과 전역메모리 등을 공유하게 된다. 많은 부분들을 서로 
			공유하게 됨으로써, 완전히 새로운 프로세스가 생성되는 fork 에 비해서 
			좀더 적은 비용을 들이며서 프로세서의 생성이 가능하다. 
			이러한 생성속도의 차이는 대부분의 경우 무시할만 한 수준이지만, 
			요즘처럼 인터넷이 보편화된 시점에서는 무시할수 없는 상황이 발생하기도 
			한다.       
		</P
><P
>			그러나 역시 쓰레드를 이용함으로써 
			현실적으로 느낄수 있는 가장큰 잇점은 IPC 의 사용을 줄일수 
			있다라는 점이다. fork 를 사용할경우 부모프로세스와 자식프로세스의 
			통신을 위해서, pipe, fifo, 공유메모리, 메시지큐등 상황에 따라서 
			다양한 종류의 IPC 를 선택해서 사용해야 하는데, 이들을 제대로 사용하기
			위해선 상당히 까다로운 프로그래밍 기법을 요구한다. 
			그러나 Thread 는 많은 부분을 서로 공유하게 됨으로 공유되는 영역에 
			값을 변경하는 정도만으로 충분히 각 쓰레드간 통신이 가능해진다.  
		</P
><P
>			반면 단점이 있는데, 우선 문맥을 공유하게 됨으로써 하나의 쓰레드가 
			잘못 작동하게 될경우 모든 프로세스가 죽어버리는 문제가 발생할수 있다. 
			fork 를 이용한 프로세스의 모델의 경우 하나의 프로세스가 죽는다 하더라도 
			다른 프로세스에 영향을 미치지 않는것과는 대조적이다.  
		</P
><P
>			사실 프로세스가 죽는 문제는 유저의 잘못된 입력등을 처리하지 못하거나 
			또는 예외상황에 대한 처리를 하지 않아서 일어나는 경우도 있을수 있다. 
			이는 꽤 심각할수 있는데,   
			(차라리 코딩을 잘못해서 발생되는 오류는  
			대부분의 경우 빨리 발견됨으로 그리 심각하지 않을수 있다.)
			현재 약 100 명의 유저가 들어와서 작업을 하는중 단 한명의 유저가 
			잘못된 입력을 하고 때문에 쓰레드가 죽었고, 해당 쓰레드만 죽는게 아니고 
			다른 정상작동 하고 있는 쓰레드까지 몽땅 죽어버리는 심각한 사태가 
			벌어질수 있기 때문이다. 이른바 내부 테스트를 할때는 잘 돌아가던 프로그램이 
			서비스만 하면 죽어나가는 경우의 프로그램을 만들어 낼수 있다. 
			내부 테스트 할때야 테스트 환경에 맞추어서 정형화된 입/출력을 수행하니 
			문제가 발생할 일이 없지만 실제 서비스를 하게 되면 온갖 다양한 입력을 
			받아야 하기 때문이다.
		</P
><P
>			그러므로 쓰레드 프로그래밍을 할때는 이것 저것 꼼꼼히 따져서 
			작업을 해야한다. 또한 쓰레드가 조금만 복잡하게 얽혀 있어도 
			문맥을 교환한다는 특징때문에 어느 쓰레드에서 어떤 문제가 
			발생했는지 알아내기 어렵다는 단점을 가진다. 이는 디버깅의 어려움으로   
			이어진다. 
		</P
><P
>			하지만 쓰레드 프로그래밍에 대한 충분한 경험과 이해가 있다면, 
			고성능의 프로그램을 좀더 쉽게 개발할수 있다. 
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN29"
>2.2&#51208;. 쓰레드를 이용한 네트웍 서버 프로그래밍</A
></H2
><P
>			만들고자 하는 프로그램은 여러번 다루었던 "우편번호 검색" 프로그램이다.
			<A
HREF="/modules.php?name=News&file=article&sid=20"
TARGET="_top"
>다중연결서버 만들기 (1)</A
> 에 있는 서버프로그램을 쓰레드버전으로 
			제작성하게 될것이다. 	 
		</P
><DIV
CLASS="SECTION"
><HR><H3
CLASS="SECTION"
><A
NAME="AEN33"
>2.2.1&#51208;. 기능정의</A
></H3
><P
>				비록 그전에 사용되었던 우편번호 검색 프로그램을 수정하기는 하겠지만  
				단지 수정만 해서는 너무 심심할것 같아서 몇가지 부가적인 기능을 
				추가했다.  
			</P
><P
>				여기에는 3개의 프로그램이 들어간다. 클라이언트 프로그램과 하나의 
				서버프로그램 그리고 서버프로그램 상태를 모니터링 할수 있는 
				모니터링 프로그램이다. 
				클라이언트 프로그램은 그전에 사용했던 프로그램을 수정없이 
				그대로 사용할것이다.   
			</P
><P
>				위에서 보면 새로 추가되는 모니터링 프로그램이라는게 있다. 
				이 프로그램은 실행시킬 경우 현제 서버에 붙어 있는 클라이언트의 
				주소, 포트, 접속시간 정보등을 가져와서 출력시켜주게 된다. 
			</P
><P
>				그러기 위해서는 서버프로그램은 클라이언트의 접근과 연결해제가 
				있을때마다 이 정보를 체크해서 메모리상에 저장하고 있다가 
				모니터링 프로그램이 요청할경우 모니터링 프로그램에게 전송시켜 
				줘야 할것이다. 
			</P
><P
>				<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>S  : Inet socket
|| : Domain socket
                 +-------------------+
                 | Client Info Table |
                 +-------------------+
                          | | 
                          | | 
+--------+            +--------+                 +---------+
| Client | ----S----&#62; | SERVER | ------||------&#62; | Moniter | ---&#62; STDOUT 
+--------+            +--------+                 +---------+
				</PRE
></TD
></TR
></TABLE
>
				위의 그림은 대략의 구성도이다. 
				서버는 client info table 을 유지하고 있다가 moniter 로부터 
				요청이 오면 이 정보를 전달한다. 전달을 위해서는 
				IPC 가 사용되어야 하는데, 그중 Domain socket 를 사용할것이다.     
			</P
><P
>				Client info table 을 유지하기 위한 자료구조로 STL의 multimap 
				을 사용할것이다. key 로는 Client 의 주소(32bit long), 값으로는 
				Client 의 port 번호, 접속시간, 주소값 등을 가지고 있는 
				구조체가 된다.  
				<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>multimap&#60;unsigned long int, struct user_info&#62;
				</PRE
></TD
></TR
></TABLE
>
				map 대신 multimap 을 사용한 이유는 하나의 주소에서 
				여러개의 연결이 이루어질수 있기 때문이다. 
				그런데 map 의 경우 중복되는 key 값을 가지고 있을수 없으므로 
				이 자료구조를 유지하기 위해서는 적합하지않다.  
				실제 Client 의 정보를 삭제하거나 할경우에는 주소값과 포트값을 
				동시에 이용해서 일치되는 값을 삭제 하게 될것이다. - 주소값과 
				포트값을 이용할경우 모든 연결에 대해서 유일한 값을 가지도록 
				할수 있다 - 
			</P
></DIV
><DIV
CLASS="SECTION"
><HR><H3
CLASS="SECTION"
><A
NAME="AEN43"
>2.2.2&#51208;. zipcode_thread.c</A
></H3
><P
>				서버프로그램이다. STL 을 사용하고 있음으로 g++ 컴파일러를 
				사용해서 컴파일해야 한다. 그러나 c코딩 형식을 따르고 있다. 
				코드는 전혀 아름다움, 효율성등은 추구하지 않았으며, 
				단지 실행가능한 수준이 되도록만 코딩되어있다. 이해하기 
				까다로운 코드는 아님으로 주석으로 설명을 대신하도록 하겠다.  
			</P
><P
>				<B
CLASS="EMPHASIS"
>예제 : zipcode_thread.c</B
>
				<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>
<font COLOR=#00b800>#include</font> &lt;sys/stat.h&gt; 
<font COLOR=#00b800>#include</font> &lt;time.h&gt; 
<font COLOR=#00b800>#include</font> &lt;sys/socket.h&gt; 
<font COLOR=#00b800>#include</font> &lt;signal.h&gt; 
<font COLOR=#00b800>#include</font> &lt;unistd.h&gt; 
<font COLOR=#00b800>#include</font> &lt;netinet/in.h&gt; 
<font COLOR=#00b800>#include</font> &lt;arpa/inet.h&gt; 
<font COLOR=#00b800>#include</font> &lt;sys/un.h&gt; 
<font COLOR=#00b800>#include</font> &lt;stdio.h&gt; 
<font COLOR=#00b800>#include</font> &lt;stdlib.h&gt; 
<font COLOR=#00b800>#include</font> &lt;string.h&gt; 
<font COLOR=#00b800>#include</font> &lt;pthread.h&gt; 
<font COLOR=#00b800>#include</font> &lt;vector&gt; 
<font COLOR=#00b800>#include</font> &lt;string&gt; 
<font COLOR=#00b800>#include</font> &lt;map&gt; 

<font COLOR=#00b800>#define</font> SOCKFILE <font COLOR=#ff0000>"/tmp/zipsock"</font> 

// ------------------------------
// 전역 자료들 
// ------------------------------
<b><font COLOR=#0000ff>typedef</font></b> <b><font COLOR=#0000ff>struct</font></b> clientdata
{
    <b><font COLOR=#0000ff>unsigned</font></b> <b><font COLOR=#0000ff>long</font></b> <b><font COLOR=#0000ff>int</font></b> addr; 
    <b><font COLOR=#0000ff>int</font></b> port;
    <b><font COLOR=#0000ff>int</font></b> start_time;
} clndata;
vector&lt;string&gt; vaddress;
multimap&lt;<b><font COLOR=#0000ff>unsigned</font></b> <b><font COLOR=#0000ff>long</font></b> <b><font COLOR=#0000ff>int</font></b>, clndata&gt; clnmondata; 

// 쓰레드 전역 함수들 
<b><font COLOR=#0000ff>void</font></b> *thread_comm(<b><font COLOR=#0000ff>void</font></b> *);
<b><font COLOR=#0000ff>void</font></b> *server_mon(<b><font COLOR=#0000ff>void</font></b> *);

// 일반 전역 함수들
<b><font COLOR=#0000ff>void</font></b> clientinfo_erase(<b><font COLOR=#0000ff>unsigned</font></b> <b><font COLOR=#0000ff>long</font></b> <b><font COLOR=#0000ff>int</font></b> addr, <b><font COLOR=#0000ff>int</font></b> sockfd);
<b><font COLOR=#0000ff>int</font></b> load_address();

<b><font COLOR=#0000ff>int</font></b> main(<b><font COLOR=#0000ff>int</font></b> argc, <b><font COLOR=#0000ff>char</font></b> **argv)
{
    pthread_t p_thread;
    <b><font COLOR=#0000ff>struct</font></b> sockaddr_in clientaddr, serveraddr;
    <b><font COLOR=#0000ff>char</font></b> th_data[<font COLOR=#a900a9>256</font>];

    <b><font COLOR=#0000ff>int</font></b> server_sockfd, client_sockfd, client_len; 

    memset(th_data, <font COLOR=#a900a9>0</font>x0<font COLOR=#a900a9>0</font>, <font COLOR=#a900a9>256</font>);

    <b><font COLOR=#0000ff>if</font></b> (argc != <font COLOR=#a900a9>2</font>)
    {
        printf(<font COLOR=#ff0000>"Usage : ./zipcode [port]&#92;n"</font>);
        printf(<font COLOR=#ff0000>"예    : ./zipcode 4444&#92;n"</font>);    
        exit(<font COLOR=#a900a9>0</font>);
    }

    // 우편주소가 입력되어 있는 파일로부터 
    // 데이타를 읽어와서 메모리에 적재한다.  
    load_address();

    <b><font COLOR=#0000ff>if</font></b> ((server_sockfd = socket(AF_INET, SOCK_STREAM, <font COLOR=#a900a9>0</font>)) &lt; <font COLOR=#a900a9>0</font>)
    {
        perror(<font COLOR=#ff0000>"socket error : "</font>);
        exit(<font COLOR=#a900a9>0</font>);
    }

    bzero(&serveraddr, <b><font COLOR=#0000ff>sizeof</font></b>(serveraddr));
    serveraddr.sin_family = AF_INET;
    serveraddr.sin_addr.s_addr = htonl(INADDR_ANY);
    serveraddr.sin_port = htons(atoi(argv[<font COLOR=#a900a9>1</font>]));

    <b><font COLOR=#0000ff>if</font></b> (bind(server_sockfd, (<b><font COLOR=#0000ff>struct</font></b> sockaddr *)&serveraddr, 
             <b><font COLOR=#0000ff>sizeof</font></b>(serveraddr)) == -<font COLOR=#a900a9>1</font>)
    {
        perror(<font COLOR=#ff0000>"bind error : "</font>);
        exit(<font COLOR=#a900a9>0</font>);        
    }
    <b><font COLOR=#0000ff>if</font></b> (listen(server_sockfd, <font COLOR=#a900a9>5</font>) == -<font COLOR=#a900a9>1</font>)
    {
        perror(<font COLOR=#ff0000>"bind error : "</font>);
        exit(<font COLOR=#a900a9>0</font>);    
    }

    // 서버모니터를 위한 쓰레드 생성
    <b><font COLOR=#0000ff>if</font></b> (pthread_create(&p_thread, NULL, server_mon, (<b><font COLOR=#0000ff>void</font></b> *)NULL) == -<font COLOR=#a900a9>1</font>)  
    {
        perror(<font COLOR=#ff0000>"UDP CREATE ERROR : "</font>);
        exit(<font COLOR=#a900a9>0</font>);
    }

    // Client 의 연결을 받아들인다. 
    // 새로운 Client 가 들어오면 쓰레드를 생성시킨다.  
    // 이때 쓰레드 함수아규먼트로 Client 소켓지시자와 <b><font COLOR=#0000ff>struct</font></b> sockaddr_in 
    // 정보를 넘긴다.    
    <b><font COLOR=#0000ff>while</font></b>(<font COLOR=#a900a9>1</font>)
    {
        client_len = <b><font COLOR=#0000ff>sizeof</font></b>(clientaddr);
        client_sockfd = accept(server_sockfd, (<b><font COLOR=#0000ff>struct</font></b> sockaddr *)&clientaddr, 
                                (socklen_t *)&client_len);

        // 쓰레드로 넘길 정보를 만든다. 
        //  <font COLOR=#a900a9>0</font>                    .... <font COLOR=#a900a9>255</font>
        //  th_data 의 구조 
        // +------+------------------+-----+
        // |sockfd|<b><font COLOR=#0000ff>struct</font></b> sockaddr_in|     |
        // +------+------------------+-----+
        memcpy(th_data, (<b><font COLOR=#0000ff>void</font></b> *)&client_sockfd, <b><font COLOR=#0000ff>sizeof</font></b>(client_sockfd));
        memcpy(th_data+<b><font COLOR=#0000ff>sizeof</font></b>(client_sockfd), (<b><font COLOR=#0000ff>void</font></b> *)&clientaddr, client_len); 

        // 쓰레드 생성
        <b><font COLOR=#0000ff>if</font></b> (pthread_create(&p_thread, NULL, thread_comm, (<b><font COLOR=#0000ff>void</font></b> *)th_data) == -<font COLOR=#a900a9>1</font>)
        {
            perror(<font COLOR=#ff0000>"thread Create error&#92;n"</font>);
            exit(<font COLOR=#a900a9>0</font>);
        }

        else
        {
            cout &lt;&lt; <font COLOR=#ff0000>"Thread Create Success"</font> &lt;&lt; endl;    
        }
    }    
}

<b><font COLOR=#0000ff>void</font></b> *thread_comm(<b><font COLOR=#0000ff>void</font></b> *data)
{
    <b><font COLOR=#0000ff>int</font></b> sockfd;
    clndata clientinfo; 

    <b><font COLOR=#0000ff>struct</font></b> sockaddr_in clientaddr; 
    <b><font COLOR=#0000ff>int</font></b> client_len = <b><font COLOR=#0000ff>sizeof</font></b>(clientaddr);
    <b><font COLOR=#0000ff>char</font></b> buf[<font COLOR=#a900a9>255</font>];
    vector&lt;string&gt;::iterator mi;
    pthread_t th; 

    // pthread_join 을 하지 않을것임으로 
    // detach 를 해줘서 쓰레드 종료시 
    // 쓰레드 자원을 정리할수 있도록 해줘야 한다.  
    pthread_detach(pthread_self());

    memcpy((<b><font COLOR=#0000ff>void</font></b> *)&sockfd, (<b><font COLOR=#0000ff>char</font></b> *)data, <b><font COLOR=#0000ff>sizeof</font></b>(<b><font COLOR=#0000ff>int</font></b>)); 
    memcpy((<b><font COLOR=#0000ff>void</font></b> *)&clientaddr, (<b><font COLOR=#0000ff>char</font></b> *)data+<b><font COLOR=#0000ff>sizeof</font></b>(<b><font COLOR=#0000ff>int</font></b>), client_len); 

    // 클라이언트 정보를 전역 자료에 입력한다. 
    // 입력되는 값은 주소(<font COLOR=#a900a9>32</font>bit), 포트, 연결시간이다.  
    clientinfo.addr = clientaddr.sin_addr.s_addr;
    clientinfo.port = ntohs(clientaddr.sin_port);
    time((time_t *)&clientinfo.start_time); 

    // multimap 컨터이너에 클라이언트 정보를 포함시킨다. 
    // key 는 <font COLOR=#a900a9>32</font>bit <b><font COLOR=#0000ff>long</font></b> <b><font COLOR=#0000ff>int</font></b> 타입의 주소 정보이다.  
    clnmondata.insert(pair&lt;<b><font COLOR=#0000ff>unsigned</font></b> <b><font COLOR=#0000ff>long</font></b> <b><font COLOR=#0000ff>int</font></b>, clndata&gt;(clientinfo.addr, clientinfo));
    <b><font COLOR=#0000ff>while</font></b>(<font COLOR=#a900a9>1</font>)
    {
        // 읽기문제가 생기거나 
        // 혹은 Client 로 부터 Quit 가 전송되었을경우
        // multimap 자료구조에서 문제의 Client 를 삭제시킨다.   
        <b><font COLOR=#0000ff>if</font></b> (read(sockfd, buf, <font COLOR=#a900a9>255</font>) &lt;= <font COLOR=#a900a9>0</font>)  
        {
            // 문제의 클라이언트를 삭제
            clientinfo_erase(clientinfo.addr, clientinfo.port);
            close(sockfd);
            pthread_exit((<b><font COLOR=#0000ff>void</font></b> *)NULL);
        }
        <b><font COLOR=#0000ff>if</font></b> (strncmp(buf, <font COLOR=#ff0000>"quit"</font>, <font COLOR=#a900a9>4</font>) == <font COLOR=#a900a9>0</font>)
        {

            clientinfo_erase(clientinfo.addr, clientinfo.port);
            write(sockfd, <font COLOR=#ff0000>"bye bye"</font>, <font COLOR=#a900a9>8</font>);
            close(sockfd);
            pthread_exit((<b><font COLOR=#0000ff>void</font></b> *)NULL);
        }

        // 그렇지 않을경우 
        // 우편주소 정보에서 일치하는 문자열이 있는지 
        // 찾은 다음 클라이언트에게 전송한다. 
        mi = vaddress.begin(); 
        <b><font COLOR=#0000ff>while</font></b>(mi != vaddress.end())
        {
            <b><font COLOR=#0000ff>if</font></b>(strstr(mi-&gt;c_str(), buf) != NULL)
            {
                write(sockfd, mi-&gt;c_str(), <font COLOR=#a900a9>255</font>);
            }
            *mi++;
        }
        write(sockfd, <font COLOR=#ff0000>"end"</font>, <font COLOR=#a900a9>255</font>); 
        memset(buf, <font COLOR=#a900a9>0</font>x0<font COLOR=#a900a9>0</font>, <font COLOR=#a900a9>255</font>); 
    }
}

// zipcode.txt 파일로 부터 
// 주소 데이타를 읽어들인다. 
<b><font COLOR=#0000ff>int</font></b> load_address()
{
    <b><font COLOR=#0000ff>char</font></b> line[<font COLOR=#a900a9>255</font>];
    FILE *fp;

    <b><font COLOR=#0000ff>if</font></b> ((fp = fopen(<font COLOR=#ff0000>"zipcode.txt"</font>, <font COLOR=#ff0000>"r"</font>)) == NULL)
    {
        perror(<font COLOR=#ff0000>"file open error : "</font>);
        exit(<font COLOR=#a900a9>0</font>);
    }

    <b><font COLOR=#0000ff>while</font></b>(fgets(line, <font COLOR=#a900a9>255</font>, fp) != NULL)
    {
        vaddress.push_back(line);
    }
    fclose(fp);    
    <b><font COLOR=#0000ff>return</font></b> <font COLOR=#a900a9>1</font>;
}

// 서버모니터 프로그램이다. 
// Domain 연결을 기다리고 있다가 
// 연결이 들어오면 해당 클라이언트에게 
// 현재 활성화된 클라이언트의 정보를 전송한다. 
<b><font COLOR=#0000ff>void</font></b> *server_mon(<b><font COLOR=#0000ff>void</font></b> *data)
{
    <b><font COLOR=#0000ff>int</font></b> sockfd, cl_sockfd;
    socklen_t clilen;
    <b><font COLOR=#0000ff>int</font></b> buff;

    <b><font COLOR=#0000ff>int</font></b> end=<font COLOR=#a900a9>0</font>; 
    <b><font COLOR=#0000ff>struct</font></b> sockaddr_un clientaddr, serveraddr;
    multimap&lt;<b><font COLOR=#0000ff>unsigned</font></b> <b><font COLOR=#0000ff>long</font></b> <b><font COLOR=#0000ff>int</font></b>, clndata&gt;::iterator mi;

    unlink(SOCKFILE);
    sockfd = socket(AF_UNIX, SOCK_STREAM, <font COLOR=#a900a9>0</font>);
    <b><font COLOR=#0000ff>if</font></b> (sockfd &lt; <font COLOR=#a900a9>0</font>)
    {
        perror(<font COLOR=#ff0000>"socket error : "</font>);
        exit(<font COLOR=#a900a9>0</font>);
    }

    bzero(&serveraddr, <b><font COLOR=#0000ff>sizeof</font></b>(serveraddr));
    serveraddr.sun_family = AF_UNIX;
    strcpy(serveraddr.sun_path, SOCKFILE); 

    <b><font COLOR=#0000ff>if</font></b> (bind(sockfd, (<b><font COLOR=#0000ff>struct</font></b> sockaddr *)&serveraddr, <b><font COLOR=#0000ff>sizeof</font></b>(serveraddr)) &lt; <font COLOR=#a900a9>0</font>)
    {
        perror(<font COLOR=#ff0000>"bind error : "</font>);
        exit(<font COLOR=#a900a9>0</font>);
    }

    <b><font COLOR=#0000ff>if</font></b> (listen(sockfd, <font COLOR=#a900a9>5</font>) &lt; <font COLOR=#a900a9>0</font>)
    {
        perror(<font COLOR=#ff0000>"listen error : "</font>);
        exit(<font COLOR=#a900a9>0</font>);
    }

    // 만약에 클라이언트 연결이 있다면 
    // clnmondata(multimap) 자료구조의 내용을 
    // 클라이언트측에 전송한다. 
    <b><font COLOR=#0000ff>while</font></b>(<font COLOR=#a900a9>1</font>)
    {
        <b><font COLOR=#0000ff>int</font></b> pid;
        <b><font COLOR=#0000ff>int</font></b> data_size;
        clilen = <b><font COLOR=#0000ff>sizeof</font></b>(clientaddr);
        cl_sockfd = accept(sockfd, (<b><font COLOR=#0000ff>struct</font></b> sockaddr *)&clientaddr, &clilen);

        mi = clnmondata.begin();
        data_size = clnmondata.size();
        write(cl_sockfd, (<b><font COLOR=#0000ff>void</font></b> *)&data_size, <b><font COLOR=#0000ff>sizeof</font></b>(<b><font COLOR=#0000ff>int</font></b>));
        <b><font COLOR=#0000ff>while</font></b>(mi != clnmondata.end())
        {
            write(cl_sockfd, (<b><font COLOR=#0000ff>void</font></b> *)&mi-&gt;second, <b><font COLOR=#0000ff>sizeof</font></b>(clnmondata)); 
            *mi++;
        }
        close(cl_sockfd);
    }
}

// 유저 정보 구조체 (multimap) 으로부터 
// addr, port 로 일치하는 정보를 
// 삭제한다.  
<b><font COLOR=#0000ff>void</font></b> clientinfo_erase(<b><font COLOR=#0000ff>unsigned</font></b> <b><font COLOR=#0000ff>long</font></b> <b><font COLOR=#0000ff>int</font></b> addr, <b><font COLOR=#0000ff>int</font></b> port)
{
    <b><font COLOR=#0000ff>int</font></b> count ;
    <b><font COLOR=#0000ff>int</font></b> i;
    multimap&lt;<b><font COLOR=#0000ff>unsigned</font></b> <b><font COLOR=#0000ff>long</font></b> <b><font COLOR=#0000ff>int</font></b>, clndata&gt;::iterator mi;     
    mi = clnmondata.lower_bound(addr);
    count = clnmondata.count(addr);

    <b><font COLOR=#0000ff>if</font></b> (mi == clnmondata.end())
    {
        cout &lt;&lt; <font COLOR=#ff0000>"not found "</font> &lt;&lt; endl;
    }    
    <b><font COLOR=#0000ff>else</font></b>
    {
        <b><font COLOR=#0000ff>for</font></b>(i = <font COLOR=#a900a9>0</font>; i &lt; count;i++)
        {

            <b><font COLOR=#0000ff>if</font></b> (mi-&gt;second.port == port)
            {
                count ++;
                clnmondata.erase(mi);
            }
            *mi++;
        }
    }
}
</PRE
></TD
></TR
></TABLE
>
			</P
><P
>				컴파일 방법은 g++ zipcode_thread zipcode_thread.c -lpthread 이다.  
			</P
></DIV
><DIV
CLASS="SECTION"
><HR><H3
CLASS="SECTION"
><A
NAME="AEN50"
>2.2.3&#51208;. thread_mon.c</A
></H3
><P
>				이 프로그램은 전형적인 UDP 도메인 소켓 프로그램임으로 
				코드 설명은 생략하도록 하겠다. 
			</P
><P
>				<B
CLASS="EMPHASIS"
>예제 : thread_mon.c</B
>
				<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>
<font COLOR=#00b800>#include</font> &lt;sys/types.h&gt; 
<font COLOR=#00b800>#include</font> &lt;sys/stat.h&gt; 
<font COLOR=#00b800>#include</font> &lt;sys/socket.h&gt; 
<font COLOR=#00b800>#include</font> &lt;sys/un.h&gt; 
<font COLOR=#00b800>#include</font> &lt;unistd.h&gt; 
<font COLOR=#00b800>#include</font> &lt;stdio.h&gt; 
<font COLOR=#00b800>#include</font> &lt;stdlib.h&gt; 
<font COLOR=#00b800>#include</font> &lt;string.h&gt; 
<font COLOR=#00b800>#include</font> &lt;fcntl.h&gt; 
<font COLOR=#00b800>#include</font> &lt;time.h&gt; 
<font COLOR=#00b800>#include</font> &lt;netinet/in.h&gt; 
<font COLOR=#00b800>#include</font> &lt;arpa/inet.h&gt; 

<font COLOR=#00b800>#define</font> SOCKFILE <font COLOR=#ff0000>"/tmp/zipsock"</font> 

<b><font COLOR=#0000ff>typedef</font></b> <b><font COLOR=#0000ff>struct</font></b> clientdata
{
    <b><font COLOR=#0000ff>unsigned</font></b> <b><font COLOR=#0000ff>long</font></b> <b><font COLOR=#0000ff>int</font></b> addr;
    <b><font COLOR=#0000ff>int</font></b> port;
    <b><font COLOR=#0000ff>int</font></b> start_time;
} clndata;

<b><font COLOR=#0000ff>int</font></b> main(<b><font COLOR=#0000ff>int</font></b> argc, <b><font COLOR=#0000ff>char</font></b> **argv)
{
    <b><font COLOR=#0000ff>int</font></b> sockfd;
    <b><font COLOR=#0000ff>struct</font></b> sockaddr_un serveraddr;
    <b><font COLOR=#0000ff>int</font></b>  clilen;
    <b><font COLOR=#0000ff>char</font></b> buff[<font COLOR=#a900a9>255</font>];
    <b><font COLOR=#0000ff>int</font></b> idata = <font COLOR=#a900a9>100</font>;
    <b><font COLOR=#0000ff>int</font></b> data_size;
    <b><font COLOR=#0000ff>int</font></b> i;
    <b><font COLOR=#0000ff>struct</font></b> in_addr st_addr;
    <b><font COLOR=#0000ff>struct</font></b> tm *tmp;
    <b><font COLOR=#0000ff>char</font></b> *address;
    clndata data;

    sockfd = socket(AF_UNIX, SOCK_STREAM, <font COLOR=#a900a9>0</font>); 
    <b><font COLOR=#0000ff>if</font></b> (sockfd &lt; <font COLOR=#a900a9>0</font>)
    {
        perror(<font COLOR=#ff0000>"exit : "</font>);
        exit(<font COLOR=#a900a9>0</font>);
    }

    bzero(&serveraddr, <b><font COLOR=#0000ff>sizeof</font></b>(serveraddr));
    serveraddr.sun_family = AF_UNIX;
    strcpy(serveraddr.sun_path, SOCKFILE);
    clilen = <b><font COLOR=#0000ff>sizeof</font></b>(serveraddr);

    <b><font COLOR=#0000ff>if</font></b> (connect(sockfd, (<b><font COLOR=#0000ff>struct</font></b> sockaddr *)&serveraddr, clilen) &lt; <font COLOR=#a900a9>0</font>)
    {
        perror(<font COLOR=#ff0000>"conenct erro : "</font>);
        exit(<font COLOR=#a900a9>0</font>);
    }

    read(sockfd, (<b><font COLOR=#0000ff>void</font></b> *)&data_size, <b><font COLOR=#0000ff>sizeof</font></b>(<b><font COLOR=#0000ff>int</font></b>));
    printf(<font COLOR=#ff0000>"%20s%8s&#92;t%-20s&#92;n"</font>,<font COLOR=#ff0000>"주소"</font>, <font COLOR=#ff0000>"포트"</font>, <font COLOR=#ff0000>"시간"</font>);
    printf(<font COLOR=#ff0000>"====================================================&#92;n"</font>);
    <b><font COLOR=#0000ff>for</font></b>(i = <font COLOR=#a900a9>0</font>; i &lt; data_size; i++)    
    {
        read(sockfd, (<b><font COLOR=#0000ff>void</font></b> *)&data, <b><font COLOR=#0000ff>sizeof</font></b>(data));
        st_addr.s_addr = data.addr;
        address = inet_ntoa(st_addr);
        tmp = gmtime((time_t *)&data.start_time);  
        printf(<font COLOR=#ff0000>"%20s%8d&#92;t%d/%d %d:%d:%d&#92;n"</font>, address, data.port, 
                        tmp-&gt;tm_mon+<font COLOR=#a900a9>1</font>, tmp-&gt;tm_mday,
                        tmp-&gt;tm_hour, tmp-&gt;tm_min, 
                        tmp-&gt;tm_sec);
    }
    printf(<font COLOR=#ff0000>"====================================================&#92;n"</font>);
    close(sockfd);
    exit(<font COLOR=#a900a9>0</font>);
}
</PRE
></TD
></TR
></TABLE
>
			</P
></DIV
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN56"
>2.3&#51208;. 테스트</A
></H2
><P
>			먼저 zipcode_thread 를 띄우고 나서 
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
> 
[root@localhost thread]# ./zipcode_thread 4444
			</PRE
></TD
></TR
></TABLE
> 
			zipcode_cl 을 띄우면 된다. 이 프로그램은 <A
HREF="/modules.php?name=News&file=article&sid=11"
TARGET="_top"
>셈플로알아보는 소켓프로그래밍</A
> 에 있는 zipcode_cl.c 를 그대로 컴파일 해서 
			사용하면 된다. 
		</P
><P
>			그리고 thread_mon 을 실행시키면 현제 쓰레드에 접근한 클라이언트의 
			상황을 화면에 출력해 준다. 
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>[root@localhost thread]# ./thread_mon
                주소    포트    시간                
====================================================
     210.205.210.195   33017    10/15 14:14:41
     210.205.210.195   33019    10/15 14:15:14
====================================================
			</PRE
></TD
></TR
></TABLE
>
		</P
></DIV
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN63"
>3&#51208;. 결론</A
></H1
><P
>		이상 쓰레드를 이용한 다중 클라이언트 연결서버의 작성에 대해서 
		알아보았다. 거기에 더불어 이런 저런 간단하지만 재미있는 몇가지의 
		기능들도 구현해 보았다.   
	</P
><P
>		위의 쓰레드 프로그램은 몇가지 수정해야될 것들이 있다. 
		전역적으로 사용하는 몇가지 쓰레드 공유되는 변수에 대한(multimap) 
		잠금이 그것이다. 
		잠금을 하지 않았을경우 다른쓰레드에서 mutimap 원소를 읽고 도중 
		다른 쓰레드에서 mutimap 의 원소를 삭제하거나 추가한다면, 
		원하지 않는 결과가 나올수 있기 때문이다. 이것은 mutex 잠금을 
		통하여 해결할수 있는데 간단히 해결할수 있으니 각자 해결해 보기 바란다.      
	</P
><P
>		그리고 시간이 충분하다면 유닉스 도메인 소켓으로 구현된 IPC 부분을 
		다른 IPC를 사용하도록 변경시켜 보기바란다.   
	</P
></DIV
></DIV
></BODY
></HTML
>
}}}
