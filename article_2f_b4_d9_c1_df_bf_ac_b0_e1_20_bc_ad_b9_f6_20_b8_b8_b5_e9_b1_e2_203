#title 다중연결 서버 만들기 3
 <!> 최신 문서는 [wiki:Site/Network_Programing/Documents/Poll 네트워크 프로그래밍 위키]에서 관리됩니다. 여기에 있는 문서는 검색페이지를 위한 복사본입니다.

{{{#!html
poll은 select 와 마찬가지로 다중입출력 을 구현하기 위한 방법으로 사용되며, 
동시에 여러개의 클라이언트를 다루는 서버를 제작하기 위한방법으로 
흔히 사용된다. <br><br> 
select 의 경우 입출력 이벤트가 발생했을 때 넘겨주는 정보가 너무 적음으로써, 
프로그래밍시 여기에 신경을 써줘야 하는데 poll 을 이용하면 이러한 
제한을 극복할수 있다.<br>
select 에 대한 자세한 내용은 <a href=http://www.joinc.co.kr/article.php?sid=22>select 를 통한 입출력 다중화</a> 와 <a href=http://www.joinc.co.kr/article.php?sid=25>다중연결서버 만들기 (2)</a> 를 참조하기 바란다. <br><br> 

<b>poll</b><br>
다음은 poll의 함수원형이다. 
<table width=100%>
<tr><td bgcolor=E0E0E0>
<pre>
int poll(struct poolfd *ufds, unsigned int nfds, int timeout);
</pre>
</td></tr>
</table>
poll이 여러개의 파일을 다루는 방법은 select 와 마찬가지로 파일지시자의 
이벤트를 기다리다가 이벤트가 발생하면, poll 에서의 block 이 해제되고, 
다음 루틴에서 어떤 파일지시자에 이벤트가 발생했는지 검사하는 방식을 
사용하게 된다.<br> 
우선 poll 함수의 첫번째 인자인 pollfd 구조체에 대해서 알아보도록 하겠다. 
poolfd 구조체만 알만 poll 의 대부분을 다 이해한것이나 마찬가지이니, 
주의 깊게 읽어 바란다.<br> 
<table width=100%>
<tr><td bgcolor=E0E0E0>
<pre>
struct pollfd
{
	int fd;         // 관심있어하는 파일지시자
	short events;   // 발생된 이벤트
	short revents;  // 돌려받은 이벤트
};
</pre>
</td></tr>
</table>
pollfd 구조체는 3개의 멤버변수가 있는데, 이 구조체에 
우리가 관심있어하는 파일지시자를 세팅하고(fd), 관심있어 하는 파일지시자가
어떤 이벤트가 발생하는걸 기다릴것인지(events)를 지정하게 된다. 
그럼 poll 은 해당 fd 에 해당 events 가 발생하는지를 검사하게 되고, 
해당 events 가 발생하면 revents 를 채워서 돌려주게 된다. <br> 
revents 는 events 가 발생했을때 커널에서 이 events 에 어떻게 반응 했는지에 
대한 반응 값이다.<br>
후에 revent 값을 조사함으로써, 해당 파일지시자에 어떠한 
event 가 최해지고 커널에서 그 event를 어떻게 처리했는지
(입력/출력이 제대로 이루어졌는지, 아니면 에러가 발생했는지)를 알아내서 
적절한 조취(읽을 데이타가 있으면 읽거나 하는등의 일)를 
취할수 있게 된다.<br><br> 
그럼 events 에 세팅할수 있는 events 에 대해서 알아보도록 하겠다. 
이 값들은 &lt;sys/poll.h&gt; 에 디파인 되어 있다. 
<table width=100%>
<tr><td bgcolor=E0E0E0>
<pre>
    #define POLLIN      0x0001  // 읽을 데이타가 있다.
    #define POLLPRI     0x0002  // 긴급한 읽을 데이타가 있다.
    #define POLLOUT     0x0004  // 쓰기가 봉쇄(block)가 아니다. 
    #define POLLERR     0x0008  // 에러발생
    #define POLLHUP     0x0010  // 연결이 끊겼음
    #define POLLNVAL    0x0020  // 파일지시자가 열리지 않은것같은
                                // Invalid request (잘못된 요청)
</pre>
</td></tr>
</table>
2번째 인자인 nfds 는 pollfd 의 배열의 크기 즉 우리가 조사할 파일지시자의 
크기(네트웍프로그래밍측면에서 보자면 받아들일수 있는 클라이언트의 크기) 
로, 보통 프로그래밍 할때 그크기를 지정해준다. <br>
마지막 아규먼트인 timeout 는 select 의 time 와 같은 역할을 한다. 
<ul>
	<li>
		값을 지정하지 않을경우 이벤트가 발생하기 전까지 영원히 기다린다.  
	</li>	
	<li>
		0일경우는 기다리지 않고 곧바로 다음 루틴을 진행하고자 
	</li>
	<li>
		0보다 큰 양의 정수일 경우에는 해당 시간만큼을 기다리게 된다. 
		해당 시간내에 어떤 이벤트가 발생하면 즉시 되돌려 주며, 
		시간을 초과하게 될경우 0을 return 한다.
	</li>
</ul>
<br>
위의 3가지 아규먼트를 채워넣음으로써 poll을 사용할수 있다. poll 함수의 
return 값은 int 형인데, 에러일경우 -1 이 리턴되고, 그렇지 않을경우 
revent 가 발생한 pollfd 구조체의 숫자를 돌려주게 된다. 
<br><br>
이제 poll 버젼의 우편주소 프로그램의 서버를 작성해 보도록 하자.
<br><br>
<b>예제 : zipcode_poll.c</b>
<table width=100%> 
<tr><td bgcolor=E0E0E0>
<pre>
<font COLOR=#00b800>#include</font> &lt;sys/time.h&gt; 
<font COLOR=#00b800>#include</font> &lt;sys/socket.h&gt; 
<font COLOR=#00b800>#include</font> &lt;sys/types.h&gt; 
<font COLOR=#00b800>#include</font> &lt;sys/stat.h&gt; 
<font COLOR=#00b800>#include</font> &lt;unistd.h&gt; 
<font COLOR=#00b800>#include</font> &lt;stdlib.h&gt; 
<font COLOR=#00b800>#include</font> &lt;stdio.h&gt; 
<font COLOR=#00b800>#include</font> &lt;string.h&gt; 
<font COLOR=#00b800>#include</font> &lt;netinet/in.h&gt; 
<font COLOR=#00b800>#include</font> &lt;arpa/inet.h&gt; 
<font COLOR=#00b800>#include</font> &lt;sys/poll.h&gt; 

// 받아들일수 있는 클라이언트의 크기
<font COLOR=#00b800>#define</font> OPEN_MAX    600 

<b><font COLOR=#0000ff>int</font></b> main(<b><font COLOR=#0000ff>int</font></b> argc, <b><font COLOR=#0000ff>char</font></b> **argv)
{

    <b><font COLOR=#0000ff>int</font></b> server_sockfd, client_sockfd, sockfd;

    <b><font COLOR=#0000ff>int</font></b> i, maxi;
    <b><font COLOR=#0000ff>int</font></b> nread;
    <b><font COLOR=#0000ff>int</font></b> state = <font COLOR=#a900a9>0</font>;

    socklen_t clilen;

    <b><font COLOR=#0000ff>struct</font></b> sockaddr_in clientaddr, serveraddr;

    <b><font COLOR=#0000ff>char</font></b> buf[<font COLOR=#a900a9>255</font>];
    <b><font COLOR=#0000ff>char</font></b> line[<font COLOR=#a900a9>255</font>];

    FILE *fp;

    <b><font COLOR=#0000ff>struct</font></b> pollfd client[OPEN_MAX];

    <b><font COLOR=#0000ff>if</font></b> (argc != <font COLOR=#a900a9>2</font>)
    {
        printf(<font COLOR=#ff0000>"Usage : ./zipcode_poll [port]&#92;n"</font>);
        printf(<font COLOR=#ff0000>"예    : ./zipcode_poll 4444&#92;n"</font>);
        exit(<font COLOR=#a900a9>0</font>);
    }


    <b><font COLOR=#0000ff>if</font></b> ((fp = fopen(<font COLOR=#ff0000>"zipcode.txt"</font>, <font COLOR=#ff0000>"r"</font>)) == NULL)
    {
        perror(<font COLOR=#ff0000>"file open error : "</font>);
        exit(<font COLOR=#a900a9>0</font>);
    }

    <b><font COLOR=#0000ff>if</font></b> ((server_sockfd = socket(AF_INET, SOCK_STREAM, <font COLOR=#a900a9>0</font>)) &lt; <font COLOR=#a900a9>0</font>)
    {
        perror(<font COLOR=#ff0000>"socket error : "</font>);
        exit(<font COLOR=#a900a9>0</font>);
    }
    bzero(&amp;serveraddr, <b><font COLOR=#0000ff>sizeof</font></b>(serveraddr));
    serveraddr.sin_family = AF_INET;
    serveraddr.sin_addr.s_addr = htonl(INADDR_ANY);
    serveraddr.sin_port = htons(atoi(argv[<font COLOR=#a900a9>1</font>]));

    state = bind(server_sockfd, (<b><font COLOR=#0000ff>struct</font></b> sockaddr *)&amp;serveraddr, 
                <b><font COLOR=#0000ff>sizeof</font></b>(serveraddr));

    <b><font COLOR=#0000ff>if</font></b> (state == -<font COLOR=#a900a9>1</font>)
    {
        perror(<font COLOR=#ff0000>"bind error : "</font>);
        exit(<font COLOR=#a900a9>0</font>);
    }
    state = listen(server_sockfd, <font COLOR=#a900a9>5</font>);
    <b><font COLOR=#0000ff>if</font></b> (state == -<font COLOR=#a900a9>1</font>)
    {
        perror(<font COLOR=#ff0000>"listen error : "</font>);
        exit(<font COLOR=#a900a9>0</font>);
    }

    // pollfd  구조체에 
    // 소켓지시자를 할당한다.  
    // 소켓에 쓰기 events (POLLIN)에 대해서 
    // 반응하도록 세팅한다. 
    client[<font COLOR=#a900a9>0</font>].fd = server_sockfd;
    client[<font COLOR=#a900a9>0</font>].events = POLLIN;

    // pollfd 구조체의 모든 fd 를 -1 로 초기화 한다.  
    // fd 가 -1 이면 파일지시자가 세팅되어있지 않다는 뜻이다. 
    <b><font COLOR=#0000ff>for</font></b> (i = <font COLOR=#a900a9>1</font>; i &lt; OPEN_MAX; i++)
    {
        client[i].fd = -<font COLOR=#a900a9>1</font>;
    }
    maxi = <font COLOR=#a900a9>0</font>;

    // POLLING 시작
    <b><font COLOR=#0000ff>for</font></b> (;;)
    {
        nread = poll(client, maxi + i, <font COLOR=#a900a9>1000</font>);

        // 만약 POLLIN 이벤트에 대해서 
        // 되돌려준 이벤트가(revents) POLLIN
        // 이라면 accept 한다. 
        <b><font COLOR=#0000ff>if</font></b> (client[<font COLOR=#a900a9>0</font>].revents &amp; POLLIN)
        {
            clilen=<b><font COLOR=#0000ff>sizeof</font></b>(clientaddr);
            client_sockfd = accept(server_sockfd, 
                            (<b><font COLOR=#0000ff>struct</font></b> sockaddr *)&amp;clientaddr, 
                            &amp;clilen);
            <b><font COLOR=#0000ff>for</font></b> (i = <font COLOR=#a900a9>1</font>; i &lt; OPEN_MAX; i++)
            {
                <b><font COLOR=#0000ff>if</font></b> (client[i].fd &lt; <font COLOR=#a900a9>0</font>)
                {
                    client[i].fd = client_sockfd;
                    <b><font COLOR=#0000ff>break</font></b>;
                }
            }

            <b><font COLOR=#0000ff>if</font></b> (i == OPEN_MAX)
            {
                perror(<font COLOR=#ff0000>"too many clients : "</font>);
                exit(<font COLOR=#a900a9>0</font>);
            }

            client[i].events = POLLIN;

            <b><font COLOR=#0000ff>if</font></b> (i &gt; maxi)
            {
                maxi = i;
            }

            <b><font COLOR=#0000ff>if</font></b> (--nread &lt;= <font COLOR=#a900a9>0</font>)
                <b><font COLOR=#0000ff>continue</font></b>;
        }

        // 현재 파일지시자의 총갯수 만큼 루프를 돌면서 
        // 각 파일지시자에 POLLIN revent 가 발생했는지를 조사하고 
        // POLLIN이 발생했다면, 해당 파일지시자에서 데이타를 읽어들이고, 
        // 주소정보를 돌려준다. 
        // 만약 "quit" 를 읽었다면, 소켓연결을 끊는다. 
        <b><font COLOR=#0000ff>for</font></b> (i = <font COLOR=#a900a9>1</font>; i &lt;= maxi; i++)
        {
            <b><font COLOR=#0000ff>if</font></b> ((sockfd = client[i].fd) &lt; <font COLOR=#a900a9>0</font>)
                <b><font COLOR=#0000ff>continue</font></b>;
            <b><font COLOR=#0000ff>if</font></b> (client[i].revents &amp; (POLLIN | POLLERR))
            {
                rewind(fp);
                memset(buf, <font COLOR=#a900a9>0</font>x0<font COLOR=#a900a9>0</font>, <font COLOR=#a900a9>255</font>);
                <b><font COLOR=#0000ff>if</font></b> (read(sockfd, buf, <font COLOR=#a900a9>255</font>) &lt;= <font COLOR=#a900a9>0</font>)
                {
                    close(client[i].fd);
                    client[i].fd = -<font COLOR=#a900a9>1</font>;
                }
                else
                {
                    <b><font COLOR=#0000ff>if</font></b> (strncmp(buf, <font COLOR=#ff0000>"quit"</font>, <font COLOR=#a900a9>4</font>) == <font COLOR=#a900a9>0</font>)
                    {
                        write(sockfd, <font COLOR=#ff0000>"byebye&#92;n"</font>, <font COLOR=#a900a9>7</font>);
                        close(client[i].fd);
                        client[i].fd = -<font COLOR=#a900a9>1</font>;
                        <b><font COLOR=#0000ff>break</font></b>;
                    }
                    <b><font COLOR=#0000ff>while</font></b>(fgets(line, <font COLOR=#a900a9>255</font>, fp) != NULL)
                    {
                        <b><font COLOR=#0000ff>if</font></b> (strstr(line, buf) != NULL)
                            write(sockfd, line, <font COLOR=#a900a9>255</font>);
                        memset(line, <font COLOR=#a900a9>0</font>x0<font COLOR=#a900a9>0</font>, <font COLOR=#a900a9>255</font>);
                    }
                }
            }
        }
    }
}
</pre>
</td></tr>
</table> 
select 버젼인 <a href=http://www.joinc.co.kr/article.php?sid=25>
다중연결서버 만들기(2)</a>와 비교해서 보기 바란다. <br>
코딩 분위기가 select 와 매우 비슷하다는걸 알수 있을것이다. <br><br>
pollfd 에 입력된 파일지시자의 event 에 입력event 가 발생하면, 
커널은 입력event 에 대한 결과를 되돌려줄것이다. <br>
이결과는 입력 event 가 제대로 처리되었다면 POLLIN 을 되돌려줄것이고, 
어딘가에서 에러가 발생했다면 POLLERR 을 되돌려주게 될것이다. <br>
그러므로 우리는 revent 를 검사함으로써, 해당 파일지시자에 읽을 데이타가 있다는걸 
알게 되고, 데이타를 읽어서 적당한 행동(여기에서는 주소를 돌려주는)을 할수 있다. <br>
위의 프로그램은 이러한 일련의 과정을 보여준다.<br> 
select 버젼과 별차이가 없으므로 select 버젼의 쏘쓰를 이해했다면 위의 쏘쓰를 
이해하는데 별 어려움이 없을것이다. 
<br><br>
poll 은 보통 select 에 비해서 해당파일지시자에 대해서 보다 많은 정보를 
되돌려줌으로, 보통 select 보다 선호되는 추세이다.<br> 
select 버젼과 마찬가지로 polling 중간에 파일 I/O 가 들어갈경우, 
파일 I/O 작업에서의 block 때문에 짧은시간에 다수의 메시지를 처리할경우 
문제가 될 소지가 있다. <br>
그러므로 되도록이면 polling 중간에 파일 I/O 가 일어나지 않도록 해주어야 
한다.<br>
위의 쏘쓰의 경우도 주소정보를 미리 메모리 상에 올려놓고 쓰는게 더욱 좋은 
방법이 될것이다. 

}}}
