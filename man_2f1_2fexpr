#title expr - 간단한 수식평가

== 사용법 ==
  '''expr'''  수식
  '''expr'''  옵션

== 설명 ==

다음은 expr 에서 지원하는 수식평가 포맷이다. 결과는 표준출력(:12) 된다.
  * ARG1 | ARG2
     양쪽 모두 0이면 0이 리턴된다.
  * ARG1 & ARG2
     어느 한쪽이 0이면 0이 리턴된다. 그렇지 않다면 ARG1이 리턴
  * ARG1 < ARG2
     ARG1이 ARG2 보다 작으면 1, 그렇지 않다면 0
  * ARG1 <= ARG2
     ARG1이 ARG2 보다 작거나 같으면 1, 그렇지 않다면 0
  * ARG1 = ARG2
     ARG1과 ARG2 가 같으면 1, 그렇지 않다면 0
  * ARG1 != ARG2
     ARG1와 ARG2가 같으면 0, 다르면 1
  * ARG1 > ARG2
     ARG1이 ARG2 보다 크면 1, 그렇지 않다면 0
  * ARG1 >= ARG2
     ARG1이 ARG2 보다 크거나 같다면 1, 그렇지 않다면 0
  * ARG1 + ARG2
     ARG1과 ARG2를 더한다.
  * ARG1 - ARG2
     ARG1에서 ARG2를 뺀다.
  * ARG1 * ARG2
     ARG1와 ARG2를 고ㅤㅂㅛㅎ한다.
  * ARG1 / ARG2
     ARG1을 ARG2로 나눈다.
  * ARG1 % ARG2
     ARG1을 ARG2로 나눈 나머지
  * index STRING CHARS
     CHARS가 STRING의 몇번째 위치에 있는지를 확인
  * length STRING
     STRING의 길이
  * match STRING REGEXP
     STRING이 정규표현(:12) REGEXP를 만족하면 1
 
== 사용법 ==
{{{#!plain
# expr 2 \= 2
# expr match "hello World 1234" "[a-zA-Z0-9]"
# expr index "hello World 1234" W
# expr length "hello world 1234"
}}}
다음은 쉘스크립트(:12)에서 사용한 예이다.
{{{#!plain
#!/bin/sh

INDEX=1
while [ $INDEX -lt 100 ]
do
        echo $INDEX;
        INDEX=`expr $INDEX \+ 1`
done
}}}
