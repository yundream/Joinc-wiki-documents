{{{#!html
<HTML
><HEAD
><TITLE
>크로스?</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.69
"><LINK
REL="HOME"
TITLE="임베디드 시스템 엔지니어를 위한 리눅스 커널 분석"
HREF="index.html"><LINK
REL="UP"
TITLE="크로스 컴파일러 만들기"
HREF="chap03.html"><LINK
REL="PREVIOUS"
TITLE="크로스 컴파일러 만들기"
HREF="chap03.html"><LINK
REL="NEXT"
TITLE="툴체인"
HREF="ch03.toolchain.html"><META
http-equiv="Content-Type"
content="text/html; charset=euc-kr"></HEAD
><BODY
CLASS="SECTION"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="NAVHEADER"
><TABLE
SUMMARY="Header navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>임베디드 시스템 엔지니어를 위한 리눅스 커널 분석</TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A
HREF="chap03.html"
>이전</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
>3장. 크로스 컴파일러 만들기</TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A
HREF="ch03.toolchain.html"
>다음</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><DIV
CLASS="SECTION"
><H1
CLASS="SECTION"
><A
NAME="CH03.CROSSCOMPILER"
>3.1. 크로스?</A
></H1
><P
>			임베디드 시스템을 개발할 때 일반적으로 호스트와 타겟이란 말을 사용하는데 이 말에 대해 알아보자.
			<P
></P
><UL
><LI
><P
>호스트</P
><P
>						임베디드 시스템을 개발하는 과정에서 프로그램을 개발하는 컴퓨터를 가리킨다. 예를 들어 ARM 프로
						세서로 하드웨어를 꾸미고 여기에 리눅스를 OS로 사용하는 프로젝트를 생각해보자. 처음 하드웨어를
						만들어 커널을 올리는 작업을 할 때 만들어진 하드웨어엔 아무 프로그램도 올라가 있지 않기 때문에
						다른 곳에서 커널을 만들어 하드웨어에 심어줘야한다. 리눅스 커널을 만들어주는 시스템을 호스트라
						고 한다. 보통은 PC에서 개발해 이식할 것이므로 PC가 호스트가 되겠다.
					</P
></LI
><LI
><P
>타겟</P
><P
>						임베디드 시스템의 개발에서 만들어지는 하드웨어를 타겟이라한다. 타겟 시스템 이라면 만들어진 임
						베디드 시스템을, 타겟 프로세서라면 만들어진 임베디스 시스템의 프로세서를 말한다고 여기면 될 
						것이다.
					</P
></LI
></UL
>
		</P
><P
>			그렇다면 크로스 컴파일러는 무엇일까? 위에서 말한 대로 호스트에서 타겟에서 돌아가는 프로그램을 만들어
			이식해 주는데 호스트와 타겟에 사용되는 프로세서가 다르다면?	
		</P
><P
>			필자는 호스트로 Athlon CPU를 사용하는 PC를 사용하고 있다. 여기에서 실행되는 gcc는 386, 486, 586, K6,
			686을 지원한다. 그러나 임베디스 시스템에 사용되는 프로세서는 지원하지 않고 있다. 그러므로 프로그램을
			컴파일해도 실제 임베디드 시스템에 사용된 프로세서에서는 실행할 수 없게된다.
		</P
><P
>			그러므로 실행은 호스트에서되지만 만들어지는 코드는 타겟 시스템에서 돌아갈 수 있는 컴파일러가 필요해
			진다. 이 것이 바로 크로스 컴파일러다<A
NAME="FOOTNOTE.CROSSCIMPILER"
HREF="#FTN.FOOTNOTE.CROSSCIMPILER"
>[1]</A
>.
		</P
></DIV
><H3
CLASS="FOOTNOTES"
>주석</H3
><TABLE
BORDER="0"
CLASS="FOOTNOTES"
WIDTH="100%"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="5%"
><A
NAME="FTN.FOOTNOTE.CROSSCIMPILER"
HREF="ch03.crosscompiler.html#FOOTNOTE.CROSSCIMPILER"
>[1]</A
></TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="95%"
><P
>크로스(cross)란 말이
			호스트와 타겟이 다른단 것을 나타낸다.</P
></TD
></TR
></TABLE
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
SUMMARY="Footer navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A
HREF="chap03.html"
>이전</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="index.html"
>처음으로</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A
HREF="ch03.toolchain.html"
>다음</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>크로스 컴파일러 만들기</TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="chap03.html"
>위로</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>툴체인</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>
}}}
