 * 개요 
  
 strsep이나 strtok 같은, 혹은 자바의 tokenizer같은 토큰 추출 함수를 만들어본다. 기존의 표준함수들은 메모리를 할당하며 포인터를 반환하는데 이것이 언제 해제되는지 알 수 없다. (물론, glibc소스를 보면된다.) 소스는 보지 않았지만 대략, 사용자가 직접 해제해야 할 것 같아 보인다. 또한, 둘다 man을 보면 주의가 보인다. 그래서, 용도에 맞고 더 좋은(내가 보기에) 함수를 만들어 사용한다.


 strsep의 NOTES :

       The strsep() function was introduced as a replacement for strtok(), since the latter  cannot
       handle empty fields.  However, strtok() conforms to ANSI-C and hence is more portable.


 strtok의 BUGS :

       Never use these functions. If you do, note that:
 
              These functions modify their first argument.
 
              These functions cannot be used on constant strings.
                                                                                                               
              The identity of the delimiting character is lost.
                                                                                                               
              The  strtok()  function  uses a static buffer while parsing, so it's not thread safe.
              Use strtok_r() if this matters to you.


 * 함수 및 예제

{{{#!vim c
#include <stdio.h>
                                                                                                               
char* tokenizer(char* str, char* src, const char* sep) {
   int i = 0;
   if (*src == '\0') return(NULL);
   while (1) {
      if (sep[i] == '\0') {
         str -= strlen(sep);
         break;
      } else if (*src == sep[i]) {
         i++;
      } else i = 0;
      if (*src == '\0') break;
      *str++ = *src++;
   }
   *str = '\0';
   return(src);
}
                                                                                                               
int main() {
   char src[20];
   char str[20];
   char* next = &src[0];
   strcpy(src, "ab1de12eoqd12dq");
   while(next = tokenizer(str, next, "12")) {
      printf("%s\n", str);
   }
   return(0);
}
}}}


 * 주의

 이러한 함수를 만들때 꼭 다각적으로 테스트 해보아야 할것은 분리문자열이 소스문자열의 끝에 올때의 경우, 오지 않을때의 경우, 분리문자열이 1byte인 경우, 여러byte인 경우등이 되겠다. 또한 메모리 릭이나 잘못된 포인터 사용, 세그먼트 폴트 등에도 주의를 기울여야 할것이다. 소스는 짧지만, 깔끔하고 효율적으로 만들어 낼려면 꽤나 대가리를 많이 굴려야 한다. 여러분들도 각자 만들어보시길...
