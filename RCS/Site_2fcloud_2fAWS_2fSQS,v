head	1.3;
access;
symbols;
locks
	root:1.3; strict;
comment	@# @;


1.3
date	2013.07.30.13.16.57;	author root;	state Exp;
branches;
next	1.2;

1.2
date	2013.07.30.05.29.56;	author root;	state Exp;
branches;
next	1.1;

1.1
date	2013.07.29.15.56.37;	author root;	state Exp;
branches;
next	;


desc
@./data/text/Site_2fcloud_2fAWS_2fSQS
@


1.3
log
@128.134.217.152;;yundream;;
@
text
@#title AWS Simple Queue Service

[[TableOfContents]]
== SQS ==
SQS(Simple Queue Service)는 컴포넌트간 메시지를 주고받기 위한 메시지대기열을 제공하는 서비스다.

=== SQS의 특징 ===
==== HTTP 기반 ====
AMQP기반이 아닌 HTTP 기반이다. 따라서 성능을 기대하기는 힘들 것 같다. EC2에서의 메시지 요청시 약 20ms이내에서의 응답속도를 보여준다고 한다. 즉 1초에 대략 50번의 API를 호출할 수 있다는 것. 그다지 좋은 성능은 아닌 것 같은데, 대신 스레드를 늘리는 것으로 처리량을 늘릴 수 있다고 한다. AWS 왈 초당 수천건의 메시지를 처리하는 고객도 있다고 한다. 

==== Long Polling 지원 ====
다행히도 언제부턴가 Long polling 기능이 추가됐다고 한다. 이 글을 쓸때만해도 long polling이 없는 걸로 알고 있었는데. 

아뭏든 Long polling 기능이 생겨서, 무한폴링을 할 필요가 없어졌다.

==== Batch 처리 ====
64KB 혹은 10개의 메시지를 일괄처리가 가능하다고 한다. 

=== SQS와 RabbitMQ ===
==== 어떤 서비스를 이용해야 할까 ? ====
SQS의 경우 꽤나 심각해보이는 단점이 있는데도 불구하고, 만지작거릴 수 밖에 없는 이유가 있다. 바로 '''AWS에서 제공하는 인프라 자원'''이라는 거다. 개발 할 필요도 없고, 관리 할 필요도 없다. 메시지가 유실되거나 손상되지 않도록 중복저장하는 방식으로 가용성도 보장해 준다. 

RabbitMQ(다른 MQ도 마찬가지)로 구축한다고 생각해보면 머리가 아프다.
   1. AWS의 zone의 가용성은 100%가 아니다. 실제 심심찮게 문제가 보고된다. 따라서 Multi-AZ 환경으로 메시지 큐 환경을 만들고 관리해야 한다. 모니터링도 해줘야 겠지. 전문엔지니어가 있는가 ? 그렇다면 RabbitMQ로 삽질해도 된다.  

== 참고 ==
 1. [http://aws.typepad.com/aws/2012/07/scaling-with-amazon-sqs.html Amazon web services Blog]
 1. [http://www.nsono.net/blog/?p=3 SQS vs RabbitMQ)
@


1.2
log
@203.247.149.239;;yundream;;
@
text
@a2 1
<!>미완성
d11 4
a14 2
==== Long Polling ====
다행히도 언제부턴가 Long polling 기능이 추가됐다고 한다. 이 글을 쓸때만해도 long polling이 없어서 참 쓰기가 애매하겠다고 생각했었는데.. 
d17 1
a17 1
다행히 요청당 64KB 혹은 10개의 메시지를 일괄처리가 가능하다고 한다. 
@


1.1
log
@128.134.217.152;;yundream;;
@
text
@d12 2
a13 2
==== Polling 기반 ====
이것은 꽤 심각한 문제일 수 있다. 메시지가 도착하면 메시지를 읽는 '''RabbitMQ'''와 달리, 메시지가 있는지를 매번 "Polling"해야 한다. 까짓거 밀리세컨드 단위로 폴링하면 되지라고 생각할 수도 있겠는데, SQS는 "요청건"당 요금이 청구된다. SQS 요청 백만건당 0.50 USD 란다. 
d16 1
a16 5
다행히 요청당 64KB 혹은 10개의 메시지를 일괄처리가 가능하다고 한다. 말하자면 Polling이란 특성을 고려해서 메시지 처리 주기와 consumer의 갯수를 잘 조절해야 한다는 이야기다. 

예를들어 10개의 consumer가 0.1(100ms)초 간격으로 SQS 요청을 하고, 최대 10개의 메시지를 일괄처리하도록 구성했다면 초당 최대 1000개의 메시지를 처리 할수 있을 것이다. 그런데, 재수없게 큐에 단지 10개의 메시지만 있었다면 ?  99개의 요청은 그냥 공돈으로 나가는 거다.  

다행인 것은 consumer를 늘리고 줄이는 것으로(혹은 폴링 주기를 변경하는 등) scale 조절을 자유롭게 할 수 있다는 거다. Cloudwatch 등으로 메시지 갯수를 잘 모니터링 하면서, 적절한 수의 폴링타임, consumer 갯수를 유지하는 것으로 큐 사용의 효율성을 높일 수는 있다.  
d27 1
@
