#title 파일잠그기와 관련된 이야기들 
|| 만든날 	|| 2003/12/16 						||<|4> http://www.joinc.co.kr/images/myavata/2.gif	||
|| 관리자 	|| yundream							||
|| 홈페이지	|| http://www.joinc.co.kr			||
|| 이메일	|| [mailto:yundream@joinc.co.kr]	||

'''목차'''
[[TableOfContents]]

== 교정 과정 ==
 1. 2003/12/16 위키 생성 - [yundream] 

== 파일잠그기 ==
=== 파일잠금의 필요성 ===
하나의 프로세스가 하나의 파일을 열어서 작업하는 경우라면 관계없겠지만 여러개의 프로세스나 쓰레드가 하나의 파일을 열어서 작업할 경우 다음과 같은 문제가 발생할 것을 예상할 수 있을 것이다.  
 1. 하나의 프로세스가 파일을 쓰고 있는데 쓰기가 완전히 끝나지 않은 상태에서 다른 프로세스도 파일에 써버린다. 데이터가 뒤죽박죽 되어 버릴 것이다. 
 1. 둘다 동시에 파일의 내용을 읽고 그 내용을 수정함으로써 발생하는 동시성 문제, 가장 간단한 예로 카운트를 늘리는 프로그램을 생각할 수 있다. 파일의 카운트가 1000이고 두개의 프로세스가 카운트를 증가 시키려고 하는데 거의 동시에 읽어서 둘다 1000을 읽었다면 카운트는 1001이 될것이다. 그러나 원하는 값은 1002가 되어야 한다.   

이런 문제는 특히 다중 프로세스기반으로 작동하는 웹서버상에서의 프로그래밍시 자주 발생하는 문제다. 유저로그를 파일로 남긴다고 했을 때 파일에 동시에 여러명이 접근해서 쓰게 되면 분명 데이터가 꼬이는 문제가 발생할 것이다. 

이런 문제를 해결하기 위한 가장 간단한 방법은 동시에 오직 하나의 프로세스만이 파일에 접근하도록 하는 것이다. 프로세스는 파일에 접근하기에 잠그고 모든 일이 끝났을 때 잠금을 풀도록 한다.  

또한 덤으로 잠금을 위한 접근제어에서 발생할 수 있는 경쟁상태(race condition)문제에 대해서도 간단히 알아보도록 하겠다. 

=== 유닉스에서 제공하는 파일 잠금 도구 ===
==== flock(2) ====
flock함수는 다음과 같이 선언되어 있다. 
{{{#!vim c
#include <sys/file.h>
int flock(int fd, int operation)
}}}

이 함수는 열려진 파일에 대해서 '''권고잠금'''을 적용하거나 제거하는 일을 수행할 수 있다. 권고잠금이란 말에 유의해야 한다. 이것은 파일에 접근하려는 프로세스들이 flock를 사용해서 '''잠금을 검사'''하도록 서로 약속되어 있어야 잠금을 보장할 수 있음을 뜻한다. 어떤 파일은 flock를 사용해서 잠금을 검사하고 어떤 파일은 검사하지 않는다면 잠금을 하나 마나가 된다. 

첫번째 인자인 '''fd'''는 잠금을 적용혹은 해제하길 원하는 열려진 파일 지정자 이다.  

두번째 인자는 fd에 대해서 행해 지는 연산으로 다음과 같은 종류가 있다.
 1. '''LOCK_SH''' 공유 잠금. 으로 한개 이상의 프로세스들이 파일에 대한 공유잠금이 가능하게 한다. 
 1. '''LOCK_EX''' 배타(exclusive)잠금으로 한번에 하나의 파일만이 잠금을 얻을 수 있다.  
 1. '''LOCK_UN''' 잠금을 푼다.
 1. '''LOCK_NB''' 잠금일 때 블럭하지 않고 리턴한다. 잠겨있음을 확인하고 다른 일을 할 때 유용하다. 이 연산은 다른 연산들과 '''|'''연산이 가능하다. 만약 파일이 잠겨있게 되면 '''errno'''에 '''EWOULBLOCK'''가 설정된다. 

flock를 이용해서 한 파일에 대해서 공유 잠금과 배타 잠금을 동시에 할 수는 없다. 파일잠금은 inode에 대해서 이루어 지게 되므로 dup와 fork는 중복된 잠금을 만들지 않는다. 즉 dup와 fork를 통해서 새로운 프로세스가 만들어지고 거기에 파일 지정자를 공유하게 되면 하나의 잠금을 공유하게 된다.     
다음은 간단한 flock을 이용한 파일잠금 테스트 코드다.
{{{#!vim c
#include <unistd.h>
#include <stdlib.h>
#include <sys/file.h>
#include <sys/types.h>
#include <sys/stat.h>

int main(int argc, char **argv )
{
    int fd;
	int id;
    int i;
    char *file_name = "lock.file";

	id = atoi(argv[1]);
    fd = open(file_name, O_RDONLY);
    if (flock(fd, LOCK_EX) != 0)
    {
        printf("flock error\n");
        exit(0);
    }

    for (i = 0; i < 5; i++)
    {
        printf("file lock %d : %d\n", id, i);
        sleep(1);
    }
	if (flock(fd, LOCK_UN) != 0)
	{
		printf("filue un lock error\n");
	}
    close(fd);
}
}}}

위의 코드를 컴파일 한 후 2개 이상 띄워서 테스트 해보면 한번에 하나의 프로세스만 잠금을 얻을 수 있고 나머지 프로세스들은 잠금을 얻을 때까지 기다리는걸 확인할 수 있을 것이다.  

자 그럼 재미있는? 테스트를 한번 해보도록 하자. 위의 컴파일된 코드를 각각 다른 id를 줘서 한번에 실행시키면 과연 어떤 순서로 잠금을 얻게 될까? 실행된 순서대로 잠금을 얻게 될지 아닐지 알아보도록 하자.
{{{#!plain
# ./flock 1& ./flock 2& ./flock 3& ./flock 4& ./flock 5& ./flock 6
...
OK File FD 1 : 0
OK File FD 1 : 1
OK File FD 1 : 2
OK File FD 1 : 3
OK File FD 1 : 4
OK File FD 4 : 0
OK File FD 4 : 1
OK File FD 4 : 2
OK File FD 4 : 3
OK File FD 4 : 4
OK File FD 2 : 0
OK File FD 2 : 1
OK File FD 2 : 2
}}}
가능하다면 터미널 2개에서 한꺼번에 테스트 해보도록 한다. 

테스트 해보면 어느 프로세스가 먼저 잠금을 얻게 되는지는 순전히 '''운'''에 좌우됨을 알수 있다. 이것은 프로세스들이 경쟁적으로 잠금을 얻을려고하는 '''경쟁상태(race condition)''' 에 놓이게 되고 '''운'''이 나쁘면 상당히 오랜시간 혹은 영원히 잠금을 얻지 못하고 블럭될 수도 있음을 의미한다. 경우에 따라서는 상당히 심각하게 생각해야될 문제다.  

이 문제에 대한 해결 방안은 다른 장에서 다루도록 하겠다. 

이외에도 '''NFS'''에서의 경우 사용할 수 없다는 단점을 가지고 있다. 이문제를 해결하기 위해서는 다음에서 설명할 '''fcntl'''을 사용해야 한다.

==== fcntl(2) ====
'''fcntl'''은 파일(file)을 제어(control)하기 위해서 사용되는 시스템 함수로 파일 잠그기는 fcntl이 제공하는 여러가지 제어 기능중 일부분이다. fcntl을 이용할 경우 파일 단위뿐만 아니라 레코드 단위로도 잠금이 가능한데, 이에 내용은 이미 [http://www.joinc.co.kr/modules.php?name=News&file=article&sid=44 fcntl을 이용한 레코드 잠금]에서 다루고 있으므로 여기에서는 개략적으로만 설명 하도록 하겠다.   

기본적으로 fcntl은 파일단위가 아닌 레코드 단위로의 잠금을 제공하지만 어차피 명시적으로 이루어지는 잠금이므로 파일 잠금용으로도 확장 시켜서 사용할 수 있다. 다음은 fcntl을 이용한 파일 잠금 예제다. flock의 fcntl버젼이라고 보면 된다.  

{{{#!vim c 
#include <unistd.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>

// 파일이 잠겨 있는지 확인해서 잠금을 얻고 
// 잠겨 있을 경우 잠금이 풀릴 때까지 
// 기다린다.  
int fd_lock(int fd)
{
    struct flock lock;

    lock.l_type = F_WRLCK;
    lock.l_start = 0;
    lock.l_whence = SEEK_SET;
    lock.l_len = 0;

    return fcntl(fd, F_SETLKW, &lock);
}

// 파일 잠금을 얻은후 모든 작업이 끝났다면 
// 이 함수를 호출해서 잠금을 되돌려준다.
int fd_unlock(int fd)
{
    struct flock lock;

    lock.l_type = F_UNLCK;
    lock.l_start = 0;
    lock.l_whence = SEEK_SET;
    lock.l_len = 0;

    return fcntl(fd, F_SETLK, &lock);
}

int main(int argc, char **argv)
{
    int fd;
    int id;
    int i;

    char *file_name = "lock.file";

    id = atoi(argv[1]);
    if ((fd = open(file_name, O_RDWR)) < 0)
    {
        perror("open failure");
        exit(0);
    }
    if (fd_lock(fd) == -1)
    {
        perror("fd lock error");
        exit(0);
    }
    for (i = 0; i < 5; i++)
    {
        printf("file lock %d : %d\n", id, i);
        sleep(1);
    }
    if (fd_unlock(fd) == -1)
    {
        perror("fd unlock error");
        exit(0);
    }
    close(fd);
}
}}}

위 코드를 컴파일 한다음에 flock에서와 같은 동일한 테스트를 해보면 flock와 마찬가지로 경쟁상태에 놓임을 알 수 있다. 다음 장에서 경쟁상태해결에 대한 논의를 하도록 하겠다.   

=== 경쟁상태 문제에 대해서 ===
경쟁 상태는 비단 파일잠금에서 뿐만 아니라 다른 데이터를 공유하는 모든 부분에서 발생할 수 있는 문제점이다. 여러가지 IPC들 예를 들어 공유메모리로 여러개의 프로세스가 접근할 때 과연 접근을 시도한 프로세스의 순서대로 공유메모리 접근이 이루어 질것인가 ? 세마포어에서는 ? 

물론 경쟁상태가 문제가 되는 경우는 그리 흔하지 않겠지만 한번 이런 문제가 발생하면 문제점을 찾기가 매우 어려워 질것이다. 그렇다면 이번기회에 경쟁상태에 대해서 좀 알아보고 넘어가도록 하겠다.

===== 커널 업그레이드 =====
위의 코드들을 보면 flock와 fcntl에서 경쟁상태 문제가 발생한다고 했는데, 반드시 위의 문제가 발생하는 건 아니다. 위의 경쟁상태 문제는 최근의 커널에서는 해결된 상태에서 제공되어 진다. 확인해 본 결과 2.4.20을 기준으로 이전에 나와 있던 커널에서는 경쟁상태 문제가 발생하고 > 2.4.20 버젼과 2.6.x에서는 위의 문제가 해결 되어있음을 확인했다. 

여러분의 커널을 확인해서 의심된다 싶으면 파일잠금을 제공하기 전에 한번쯤 테스트 해보거나 배포판에서 제공된 커널을 사용하고 있다면 배포판 홈페이지 등에서 확인을 해보길 바란다. 위의 문제가 해결되어 있음을 확인할 수 있을 것이다.  
 
===== O_APPEND 모드로 열기 =====
'''open(2)'''를 보면 '''O_APPEND''' 모드가 존재한다. 다음은 O_APPEND모드에 대한 open 맨페이지의 내용이다.
{{{#!plain
O_APPEND
       The  file  is opened in append mode. Before each write, the file
       pointer is positioned at the end of the file, as if with  lseek.
       O_APPEND may lead to corrupted files on NFS file systems if more
       than one process appends data  to  a  file  at  once.   This  is
       because  NFS does not support appending to a file, so the client
       kernel has to simulate it, which can諄 be done  without  a  race
       condition.
}}}
메뉴얼에 기술된걸 보면 O_APPEND모드로 열경우 race condition을 피해갈 수 있다고 되어 있다. 

===== 세마포어 응용 =====
위의 방법들의 단점들은 뭐냐 하면 커널 업그레이드의 경우 솔직히 경쟁상태 문제 하나를 위해서 커널 업그레이드를 단행한다는 것도 그렇거니와 다른 (경쟁상태를 유발할 수 있는)유닉스로 포팅을 해야 한다면 난감하게 될 것이다. 그렇다면 좀더 표준적인 다른 도구를 사용해야될 필요가 있다. 안타깝게도 fcntl과 flock등에서의 경쟁상태 회피는 표준사항이 아니기 때문이다.  

대부분의 경우에는 경쟁상태를 고려할 필요가 없겠지만 그래도 고려해야 하고 다른 유닉스와의 호환성도 중요하다면 세마포어를 응용해 보도록 하자. system V IPC 설비중 하나인 세마포어는 기본 스펙에 '''경쟁상태의 회피'''가 포함되어 있으니 system V IPC 설비를 제공하는 유닉스라면 믿고 사용해도 된다.  

세마포어 응용 코드는 여기에서 제시하지 않겠다. 다음의 URL을 참고하기 바란다.
 1. http://www.joinc.co.kr/modules.php?name=News&file=article&sid=40    

=== 토론및 잡담 ===
 1. flock에서 LOCK_SH를 이용했을 때 정확히 어떻게 작동하는지.. 
 1. 다른 Unix운영체제에서 잠금에서 발생할 수 있는 문제는 ? 
 1. 쓰레드에서의 공유 파일에 대한 파일잠금

=== 참고문헌 ===
