#title 초보자를 위한 Vim 입문서

 * line sort
   {{{#!plain
:{range}sort u
}}}
 * 개행 문자 변환하기 : Unix는 \n이지만 윈도우는 \r\n이다. 간혹 윈도우에서 만든 문서를 읽다보면 각 줄의 마지막에 ^M이 표시돼서 읽기 불편할 때가 있다. 치환할 수도 있지만 아래와 같이 명령으로 처리할 수도 있다.
   :set ff=unix
 * 파일 삽입 
   :r 파일명
 * 명령 실행 결과 삽입
   :r! 명령어
 * 외부 text복사시 자동 들여쓰기에 의한 계단 현상 제거.
     set paste
 * 대소문자 변경
   1. 모든 문자를 대문자로  :%s/.*/U&
   1. 모든 문자를 소문자로  :%s/.*/L&
   1. 모든 단어의 첫번째 문자를 대문자로 :%s/\<./\u&/g
   1. 모든 단어의 첫번째 문자를 소문자로 :%s/\<./\l&/g
   1. 모든 줄의 첫번째 단어를 대문자로 :%s/.*/\u& 
   1. 모든 줄의 첫번째 단어를 소문자로 :%s/.*/\l& 

=== 소식 ===
 * [wiki:Site/Vim Vim 활용 미니사이트]가 만들어졌습니다.

=== 단축키 ===
{{{#!html
<table style="width:auto;"><tr><td><a href="http://picasaweb.google.com/lh/photo/PQ6_Ud_mJRpGBM38-7-Pig?feat=embedwebsite"><img src="http://lh4.ggpht.com/_Os5qf5urx_A/SzmJvC4uGJI/AAAAAAAAA6o/sgOhizg27n0/s800/vi-vim-cheat-sheet-ko.png" /></a></td></tr><tr><td style="font-family:arial,sans-serif; font-size:12px; text-align:right">보낸 사람 <a href="http://picasaweb.google.com/yundream/Linux?feat=embedwebsite">Linux</a></td></tr></table>
}}}
=== 해야될 작업 ===
 * vim7이 나왔음. 가능한 vim7의 변경된 점을 추가해 볼것
    * ex) split 단축키 지원 추가 : shift+p
=== 참고 ===
 * http://gene.kias.re.kr/~newton/wiki/moin.cgi/VimTip
=== 추가해야될 내용 ===
 1. 같은 문자를 여러번 삽입
   1을 100번 연속 입력해야 하는 경우를 생각해보자. 에디터로 100번 입력하는거 생각보다 짜증날 것이다. 그렇다고 프로그램을 만드는건 더 시간 낭비다. 다음과 같은 방법을 이용해 보자.
   {{{#!plain
esc키를 눌러서 명령행 모드로 넘어간다.
100을 입력한다.
'i'를 입력해서 입력모드로 들어간다.
반복할 문자인 1을 입력한다.
esc키를 눌러서 다시 명령행 모드로 넘어간다.
1초 정도 기달려보자.
}}}
{{{#!html
<HTML
><HEAD
><TITLE
>VIM을 사용하자</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.76b+
"><META
http-equiv="Content-Type"
content="text/html; charset=euc-kr"></HEAD
><BODY
CLASS="ARTICLE"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="ARTICLE"
><DIV
CLASS="TITLEPAGE"
><H1
CLASS="TITLE"
><A
NAME="AEN2"
></A
>VIM을 사용하자</H1
><H3
CLASS="AUTHOR"
><A
NAME="AEN4"
>윤 상배</A
></H3
><DIV
CLASS="AFFILIATION"
><DIV
CLASS="ADDRESS"
><P
CLASS="ADDRESS"
>				dreamyun@yahoo.co.kr<br>
			</P
></DIV
></DIV
><DIV
CLASS="REVHISTORY"
><TABLE
WIDTH="100%"
BORDER="0"
><TR
><TH
ALIGN="LEFT"
VALIGN="TOP"
COLSPAN="3"
><B
>&#44256;&#52828; &#44284;&#51221;</B
></TH
></TR
><TR
><TD
ALIGN="LEFT"
>&#44256;&#52840; 0.9</TD
><TD
ALIGN="LEFT"
>2004년 3월 10일 17시</TD
><TD
ALIGN="LEFT"
></TD
></TR
><TR
><TD
ALIGN="LEFT"
COLSPAN="3"
>vim 모드와 관련된 부가내용 추가</TD
></TR
><TR
><TD
ALIGN="LEFT"
>&#44256;&#52840; 0.8</TD
><TD
ALIGN="LEFT"
>2003년 3월 1일 23시</TD
><TD
ALIGN="LEFT"
></TD
></TR
><TR
><TD
ALIGN="LEFT"
COLSPAN="3"
>최초 문서작성</TD
></TR
></TABLE
></DIV
><HR></DIV
>
<DIV
CLASS="TOC"
><DL
><DT
><B
>&#52264;&#47168;</B
></DT
><DT
>1. <A
HREF="#AEN18"
>vim 이란</A
></DT
><DT
>2. <A
HREF="#AEN23"
>VIM의 기본사용법 익히기</A
></DT
><DD
><DL
><DT
>2.1. <A
HREF="#AEN26"
>vim 모드</A
></DT
><DT
>2.2. <A
HREF="#AEN46"
>명령어모드의 사용</A
></DT
><DD
><DL
><DT
>2.2.1. <A
HREF="#AEN49"
>커서 이동</A
></DT
><DT
>2.2.2. <A
HREF="#AEN101"
>화면 스크롤</A
></DT
><DT
>2.2.3. <A
HREF="#AEN135"
>마크 이동</A
></DT
><DT
>2.2.4. <A
HREF="#AEN138"
>입력 명령</A
></DT
><DT
>2.2.5. <A
HREF="#AEN169"
>편집명령</A
></DT
><DD
><DL
><DT
>2.2.5.1. <A
HREF="#AEN172"
>편집(none visual block 모드)</A
></DT
><DT
>2.2.5.2. <A
HREF="#AEN200"
>Undo (되돌리기)</A
></DT
><DT
>2.2.5.3. <A
HREF="#AEN203"
>블럭 지정</A
></DT
><DT
>2.2.5.4. <A
HREF="#AEN219"
>편집(visual block 모드)</A
></DT
></DL
></DD
></DL
></DD
><DT
>2.3. <A
HREF="#AEN238"
>ex 모드</A
></DT
><DD
><DL
><DT
>2.3.1. <A
HREF="#AEN240"
>찾기/치환</A
></DT
><DT
>2.3.2. <A
HREF="#AEN249"
>파일 저장, 열기, 종료</A
></DT
></DL
></DD
></DL
></DD
><DT
>3. <A
HREF="#AEN277"
>개발자를 위한 vim 사용팁</A
></DT
><DD
><DL
><DT
>3.1. <A
HREF="#AEN279"
>화면 나누기</A
></DT
><DD
><DL
><DT
>3.1.1. <A
HREF="#AEN283"
>화면 이동</A
></DT
><DT
>3.1.2. <A
HREF="#AEN286"
>파일 네비게이션</A
></DT
></DL
></DD
><DT
>3.2. <A
HREF="#AEN290"
>파일 네비게이션 바 만들기</A
></DT
><DT
>3.3. <A
HREF="#AEN297"
>여러개의 파일 편집하기</A
></DT
><DT
>3.4. <A
HREF="#AEN303"
>잠시 쉘로 나가기</A
></DT
><DT
>3.5. <A
HREF="#AEN306"
>선택된 block 를 다른 이름으로 저장하기</A
></DT
><DT
>3.6. <A
HREF="#AEN310"
>빠른 괄호 이동</A
></DT
><DT
>3.7. <A
HREF="#AEN313"
>위치 마크(mark)하기</A
></DT
><DT
>3.8. <A
HREF="#AEN321"
>폴더(접기) 기능이용하기</A
></DT
><DT
>3.9. <A
HREF="#AEN324"
>간단한 man 페이지 참조</A
></DT
><DT
>3.10. <A
HREF="#AEN327"
>함수/변수명 자동완성</A
></DT
><DT
>3.11. <A
HREF="#AEN331"
>ctags 를 이용한 쏘쓰 분석</A
></DT
><DT
>3.12. <A
HREF="#AEN335"
>자동들여쓰기</A
></DT
><DT
>3.13. <A
HREF="#AEN341"
>탭사이즈 조정하기</A
></DT
><DT
>3.14. <A
HREF="#AEN345"
>라인 넘버링</A
></DT
><DT
>3.15. <A
HREF="#AEN353"
>코드를 HTML로 저장하기</A
></DT
><DT
>3.16. <A
HREF="#AEN357"
>vim 설정파일 만들기</A
></DT
></DL
></DD
></DL
></DIV
><DIV
CLASS="SECTION"
><H1
CLASS="SECTION"
><A
NAME="AEN18"
></A
>1. vim 이란</H1
><P
>		vim 은 유닉스 계열에서 전통적으로 널리 사용도던 vi 의 improve 즉 
		undo, syntax coloring, split windows 등의 기능을 포함시킨 vi 의 
		보강된 프로그램이다. 
	</P
><P
>		이 문서는 vim 의 기본적인 사용법과, 프로그래밍을 위한 여러가지 
		팁을 담고 있다. vim 버젼은 6.0 을 기준으로 한다. 
		vim(vi)에 대한 자세한 사용방법은 여기에서는 제시하지 
		않을것이다. 가장 기본적인 사항만 언급할것이며, 자세한 사용법은 
		<A
HREF="http://vi.kldp.org"
TARGET="_top"
>vi 사용자그룹</A
> 사이트를 참고하기 
		바란다. 
	</P
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN23"
></A
>2. VIM의 기본사용법 익히기</H1
><P
>		이번장에서는 vim의 기본적인 사용법에 대해서 알아보도록 하겠다. 위에서 
		언급했듯이, 이문서는 VIM의 레퍼런스 가이드는 아니다. 기본적인 
		사용이 가능하도록 가장 기초적인 내용들만 다룰것이다. 
	</P
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN26"
></A
>2.1. vim 모드</H2
><P
>			다른 에디터를 사용하던 유저가 vim을 처음 접하면서 가장 난감해 
			하는 부분이 vim의 상태(mode)개념이다.vim은 다른 에디터들과 
			달리, 실행을 시켰다고 해서 즉시 입력이 이루어지지 않는다. 
			많은 vim을 처음 접하는 유저는 어떻게 글을 입력할지 몰라서 vim의 
			사용을 접게되는 경우가 발생하는데, 여기에 그 이유가 있다.   
			vi 는 크게 세가지 상태로 나뉘어진다. 첫번째가 명령어 모드로 
			키입력이 바로 실행되는 상태이며, 다음은 상태모드로 실제 문서를 
			편집하는 모드 마지막이 ex 상태로 ex 명령을 실행시키는 상태이다. 
		</P
><P
>			vi 를 처음실행시키면 입력모드가 아닌 명령모드 상태에 놓이게 된다. 
			이 상태에서는 문자의 입력이 이루어지지 않으며, 찾기등과 같은 
			간단한 문서관련 명령을 실행할 수 있다.	 
			이 명령모드 상태에서 ":" 키를 누르면 ex 상태로 a, i, o 키 등을 
			누르면 입력 상태로 넘어가게 된다. 일단 입력상태로 들어가게 
			되면 문서 편집을 할수 있게 되는데, 이때 ESC 키를 누르면 명령모드 
			상태로 넘어가게 된다. 
			<DIV
CLASS="TABLE"
><A
NAME="AEN30"
></A
><P
><B
>&#54364; 1. vim의 상태(mode)</B
></P
><TABLE
BORDER="1"
CLASS="CALSTABLE"
><TBODY
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>명령 상태</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>처음 vim을 실행했을때, 입력상태/명령상태에서 ESC입력시</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>간단한 찾기, 커서 이동, ex 상태로 넘어가기</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>ex 상태</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>명령 상태에서 (":")</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>각종 치환, 저장, 파일읽기, vim설정등과 같은 대부분의 작업들</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>입력 상태</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>명령 상태에서 (a,i,o 키 입력)</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>내용 입력</TD
></TR
></TBODY
></TABLE
></DIV
>
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN46"
></A
>2.2. 명령어모드의 사용</H2
><P
>		우리는 명령모드에서 여러가지 명령을 입력함으로써, 복사, 붙이기, 삭제 
		문서입력, 문서저장, 문서불러오기, 커서이동 등의 작업을 할수 있다. 
		이번 장에서는 
		이러한 명령모드에서 사용되는 각종 명령어에 대해서 알아보도록 하겠다. 
		</P
><DIV
CLASS="SECTION"
><HR><H3
CLASS="SECTION"
><A
NAME="AEN49"
></A
>2.2.1. 커서 이동</H3
><P
>				기본적으로 vi 는 입력모드에서 방향키를 이용해서 커서 이동을 
				하지 못하도록 되어있다. 비록 최근의 vim 이 입력모드에서 
				방향키를 이용한 커서 이동을 지원하고 있기는 하지만, 
				명령모드에서의 키이동이 훨씬 빠르고 편하므로, 처음에는 
				좀 어색하더라도 명령모드에서의 키 이동을 익히도록 하자.     
				<DIV
CLASS="TABLE"
><A
NAME="AEN52"
></A
><P
><B
>&#54364; 2. 커서 이동</B
></P
><TABLE
BORDER="1"
CLASS="CALSTABLE"
><TBODY
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>k</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>커서를 위로 움직임</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>j</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>커서를 아래로 움직임</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>								h		
							</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>								커서를 왼쪽으로 움직임 
							</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>								l		
							</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>								커서를 오른쪽으로 움직임
							</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>								- 
							</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>								커서를 줄의 처음으로 옮김	
							</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>								e, E 
							</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>								다음단어의 끝으로, 문자단위 이동
							</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>								w, W
							</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>								다음단어의 처음으로, 문자단위 이동 
							</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>								$	
							</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>								줄의 마지막으로
							</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>								0	
							</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>								줄의 처음으로 
							</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>								^	
							</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>								줄의 처음으로(공백이 아닌 처음시작되는 문자) 
							</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>								Shift+g	
							</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>								문서의 마지막으로 이동한다. 
							</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>								gg, 1g
							</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>								문서의 처음으로 이동한다. 1대신 다른 숫자를 
								입력하면 해당 숫자의 라인으로 이동한다.  
							</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>								), (	
							</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>								다음, 이전 문장의 처음으로
							</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>								}, {
							</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>								다음, 이전문단의 처음으로 
							</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>								]], [[
							</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>								다음, 이전 구절의 처음으로
							</TD
></TR
></TBODY
></TABLE
></DIV
>
			</P
></DIV
><DIV
CLASS="SECTION"
><HR><H3
CLASS="SECTION"
><A
NAME="AEN101"
></A
>2.2.2. 화면 스크롤</H3
><P
>				위의 커서명령 이동이 매우 편하기는 하지만, 만약 
				페이지가 한 2000라인 될경우, 위의 커서를 이용해서 한줄씩 
				이동하는데에는 너무 많은 시간이 걸릴것이다. 그래서 
				vi 에서는 화면 단위의 스크롤이 가능한 명령들을 제공한다. 
				아래의 화면 스크롤 명령어들을 익히면 빠른 위치이동을 위해 
				매우 유용하게 사용할수 있다. ^F 는 CTRL+F 를 의미한다.   
				<DIV
CLASS="TABLE"
><A
NAME="AEN104"
></A
><P
><B
>&#54364; 3. 화면 스크롤</B
></P
><TABLE
BORDER="1"
CLASS="CALSTABLE"
><TBODY
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>^F</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>한 화면 을 앞으로 스크롤</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>^B</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>한 화면 을 뒤로 스크롤</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>^D</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>반 화면 을 앞으로 스크롤</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>^U</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>반 화면 을 뒤로 스크롤</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>^E</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>한줄 앞으로 스크롤</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>^Y</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>한줄 뒤로 스크롤</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>Shift + h</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>화면의 맨 윗줄로</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>Shift + m</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>화면의 중간줄로</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>Shift + l</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>화면의 맨 아랫줄로</TD
></TR
></TBODY
></TABLE
></DIV
>
			</P
></DIV
><DIV
CLASS="SECTION"
><HR><H3
CLASS="SECTION"
><A
NAME="AEN135"
></A
>2.2.3. 마크 이동</H3
><P
>				일종의 책갈피 기능이라고 보면 된다. 자주 참조해야할 
				라인에 마크를 해놓고 필요할때 곧바로 마크된 영역으로 이동하기 
				위해서 사용한다. 마크는 mx 형식으로 사용할수 있다. x 는 (a~z)까지의 
				문자로 마크된 영역의 이름을 지정하기 위해서 사용한다. 
				마크된 영역으로 이동하기 위해서는 'x 와 `x 를 사용한다. 
				'x 는 마크된 라인의 가장 앞으로 이동하고, `x 는 마크된 
				라인의 정확한 위치로 이동한다. 
			</P
></DIV
><DIV
CLASS="SECTION"
><HR><H3
CLASS="SECTION"
><A
NAME="AEN138"
></A
>2.2.4. 입력 명령</H3
><P
>				지금 vi 를 실행시켜보자. 
				vi 는 기본적으로 명령모드로 실행되므로, 지금상태에서는 
				문서 작성을 할수 없을것이다. 우리는  
				다음과 같은 키입력을 통해서 입력모드 상태로 전환할수 있다. 
				<DIV
CLASS="TABLE"
><A
NAME="AEN141"
></A
><P
><B
>&#54364; 4. 입력 명령</B
></P
><TABLE
BORDER="1"
CLASS="CALSTABLE"
><TBODY
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>i</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>현재위치에서 삽입</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>I</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>현재줄의 처음위치에서 삽입</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>a</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>현재위치에서 한칸앞으로 이동해서 삽입</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>A</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>현재줄의 마지막위치에서 삽입</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>o</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>새로운 줄을 커서 아래에 연다</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>O</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>새로운 줄을 커서 위연다</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>s</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>현재 위치의 문자를 지우고 입력모드로 들어간다.</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>S</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>현재위치의 라인을 지우고 입력모드로 들어간다.</TD
></TR
></TBODY
></TABLE
></DIV
>  
			</P
></DIV
><DIV
CLASS="SECTION"
><HR><H3
CLASS="SECTION"
><A
NAME="AEN169"
></A
>2.2.5. 편집명령</H3
><P
>				여기에서는 vi의 편집기능인 복사, 붙이기, 삭제에 대해서 알아
				보도록 하겠다. 다른 에디터들은 보통 마우스를 이용해서 
				블럭을 지정해서 편집을 하는 반면, vi 는 명령어 모드에서 
				키보드 만을 이용해서 편집이 가능하므로, 매우 편리하고 빠르게 
				편집작업들이 가능하다. 또한 라인단위 블럭, 블럭단위 블럭등의 
				선택 모드를 지원함으로써, 문서에서 원하는 부분에 대한 
				작업을 좀더 쉽게 할수 있다. 
			</P
><DIV
CLASS="SECTION"
><HR><H4
CLASS="SECTION"
><A
NAME="AEN172"
></A
>2.2.5.1. 편집(none visual block 모드)</H4
><P
>					visual block 모드가 아닌 상태에서이 편집에 관한 내용이다. 
					<DIV
CLASS="TABLE"
><A
NAME="AEN175"
></A
><P
><B
>&#54364; 5. 복사,삭제,붙이기</B
></P
><TABLE
BORDER="1"
CLASS="CALSTABLE"
><TBODY
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>y</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>한줄 복사</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>yn</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>현재 라인에서부터 n라인만큼을 복사</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>p</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>복사된 내용 붙이기</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>dd</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>한줄삭제</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>dw</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>한단어 삭제</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>Shift+d, d$</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>현재커서 위치에서 마지막까지 삭제</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>Shift+j</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>현재 행의 개행문자를 제거한다. 즉 아래라인을 현재라인에 덧붙인다.</TD
></TR
></TBODY
></TABLE
></DIV
>  
				</P
></DIV
><DIV
CLASS="SECTION"
><HR><H4
CLASS="SECTION"
><A
NAME="AEN200"
></A
>2.2.5.2. Undo (되돌리기)</H4
><P
>					vim 은 다중의 undo 기능을 지원한다. 뒤로 되돌리고 싶다면 단지 'u'키만 입력하면 된다.  
				</P
></DIV
><DIV
CLASS="SECTION"
><HR><H4
CLASS="SECTION"
><A
NAME="AEN203"
></A
>2.2.5.3. 블럭 지정</H4
><P
>					이번엔 블럭지정, 그중에서도 vim 에서 지원하는 visual 블럭 지정에 
					대해서 알아보겠다. vim visual 블럭 지정 기능을 사용할경우 
					지정범위가 반전되면서 눈에 보이기 때문에, 효과적인 블럭지정이 
					가능하도록 도와준다. 범위지정을 위해서 'hjkl', 'Shift+g,GG' 과 같은 이동명령
					과 화면스크롤 명령을 사용해서 범위지정을 좀더 빠르게 할수 있다. 					
					<DIV
CLASS="TABLE"
><A
NAME="AEN206"
></A
><P
><B
>&#54364; 6. 블럭지정</B
></P
><TABLE
BORDER="1"
CLASS="CALSTABLE"
><TBODY
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>v</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>단어단위로 블럭지정이 가능하다. 블럭범위는 
								이동명령인 'hjkl' 로 원하는 범위 만큼 지정할수 
								있다.</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>Shift+v</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>라인단위 블럭지정이다. 라인전체가 선택되며, 
								위아래 이동명령 'hj' 으로 범위 지정이 가능하다. 
								</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>Ctrl+v</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>블럭단위 블럭지정이다. 4각형의 블럭지정이 
								가능하며 이동명령인 'hjkl' 로 원하는 
								범위를 지정할수 있다.</TD
></TR
></TBODY
></TABLE
></DIV
>  
					Shift+v 와 같이 블럭지정을 한후 Shift+G 를 입력하면 현재라인부터 마지막 라인까지가 
					블럭 지정이 될것이다. 
				</P
></DIV
><DIV
CLASS="SECTION"
><HR><H4
CLASS="SECTION"
><A
NAME="AEN219"
></A
>2.2.5.4. 편집(visual block 모드)</H4
><P
>					일단 vim 의 visual 블럭 지정 기능을 이용해서 편집하기 원하는 
					블럭을 지정했다면, 각종 편집명령을 이용해서 복사, 붙이기, 
					삭제 작업이 가능하다. 블럭을 지정한 상태에서 
					아래의 명령을 이용해서 편집을 하면 된다. 명령어는 기본적으로 
					none visual block 모드의 편집 명령어과 같다.  
					<DIV
CLASS="TABLE"
><A
NAME="AEN222"
></A
><P
><B
>&#54364; 7. 편집(복사, 삭제, 붙이기)</B
></P
><TABLE
BORDER="1"
CLASS="CALSTABLE"
><TBODY
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>y</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>지정된 블럭을 복사한다.</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>p</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>복사된 블럭을 현재라인(커서) 아래에 붙인다.</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>d</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>지정된 블럭을 삭제한다.</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>dd</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>현재라인을 삭제한다.</TD
></TR
></TBODY
></TABLE
></DIV
>
				</P
></DIV
></DIV
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN238"
></A
>2.3. ex 모드</H2
><DIV
CLASS="SECTION"
><H3
CLASS="SECTION"
><A
NAME="AEN240"
></A
>2.3.1. 찾기/치환</H3
><P
>				vim 의 기능중 가장편리한 기능으리면 뭐니뭐니 해도, 정규표현식을 이용한 
				강력한 찾기기능과 치환기능이라고 할수 있을것이다. 물론 다른 
				대부분의 에디터들도 찾기기능과 치환기능을 제공하긴 하지만, vim 의 
				기능은 다른 에디터들에 비해서 정말로 독보적인 편리함과 강력함을 제공한다. 
				vi 사용자가 다른 에디터로 넘어가기 힘든이유중 가장큰 이유가, 
				바로 "키를 이용한 방향입력" 과 "찾기 및 치환" 기능 때문이다. 
			</P
><P
>				사실 찾기 치환의 기능을 제대로 이해하고 사용하기 위해서는 정규표현식(regular expression) 
				에 대한 이해가 필요로 하는데, 이것은 다음의 사이트를 참조하기 바란다.
				<A
HREF="http://kldp.org/HOWTO/html/Adv-Bash-Scr-HOWTO/x10468.html"
TARGET="_top"
>정규 표현식의 간략한 소개</A
>
			</P
><P
>				먼저 찾기 기능에 대해서 알아보겠다. 찾기기능은 ':/패턴/' 를 이용 하면된다.  
				찾기 원하는 문자혹은 패턴을 입력하고 엔터키를 누르면 현재 커서위치에서 가장 가까운 곳에 
				위치한 문자열로 커서를 이동시킨다(문서 아래방향으로). 다음 문자열을 찾기를 원한다면 
				'n'키를 누르면 된다. 문서에서 가장 마지막에 이르르게 되면, 문서의 가장처음부터 
				다시 찾기 시작한다. 'Shift+n' 을 이력하면 반대 방향(문서의 위쪽으로)으로 찾기를 시작한다. 
			</P
><P
>				치환이야 말로 vim 의 꽃이라고 할수 있다. :[범위]s/[oldpattern]/[newpattern]/ 의 형식으로 
				사용하면 된다. 범위 지정은 visual block 을 이용할수도 있으며, 직접 범위를 
				입력할수도 있다. visual block 를 이용한 치환은 visual block 를 지정한다음 ':' 를 입력해서  
				ex 모드로 넘어가면 된다. 그리고나서 ':'&#60;,'&#62;s/[oldpattern]/[newpattern/' 
				과 같은 방법으로 치환하면 된다.  
			</P
><P
>				visual block 를 사용하지 않고 직접범위를 입력할수도 있다. :[시작],[마지막]s/[old]/[new]/ 
				식으로 범위를 지정하면 된다. 여기에는 몇가지 지정된 범위를 위한 특수 기호들이 있다. 
				'%' 는 전체문서(처음부터 끝까지), '.' 은 현재, '$' 은 마지막 을 나타낸다. 숫자를 
				입력할경우 숫자는 라인을 나타낸다. 다음은 간단한 사용예이다.
				<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
># 문서 처음부터 마지막까지의 char 를 _char_ 로 치환한다. 
:%s/char/_&#38;_/g

# 현재(커서위치)부터 마지막까지의 char 를 _char_ 로 치환한다.
:.,$s/char/_&#38;_/g

# buf_.*[255], buf_in[255], buf_get[255] 와 같은 문자열을 hello 로 변경한다.  
:1,10s/buf_.*\[255\]/hello/g
				</PRE
></TD
></TR
></TABLE
>
				마지막에 쓰인 'g' 는 global 이다. 즉 해당 라인 전체에 걸쳐서 검색후 치환한다. 
				'g' 를 사용하지 않을경우 라인에서 처음에 검색된 문자만 치환하고 다음 라인으로 넘어간다. 
			</P
></DIV
><DIV
CLASS="SECTION"
><HR><H3
CLASS="SECTION"
><A
NAME="AEN249"
></A
>2.3.2. 파일 저장, 열기, 종료</H3
><P
>				파일열기의 경우 vi 를 실행시킬대 명령행 옵션으로 열기가 
				가능하다. 또한 vi 를 이미 실행 시킨후에도 명령모드에서 
				명령을 입력함으로 파일을 열수 있다. 열고자 하는 파일이 
				이미 존재할경우에는 존재하는 파일이 열리고, 열고자 하는 파일이 
				존재하지 않을경우 새로운 파일이 만들어진다.  
				<DIV
CLASS="TABLE"
><A
NAME="AEN252"
></A
><P
><B
>&#54364; 8. 저장,열기,종료</B
></P
><TABLE
BORDER="1"
CLASS="CALSTABLE"
><TBODY
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>:e [filename]</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>filename 으로 파일열기</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>:q, :q!, :wq</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>종료, 강제종료, 저장후 종료</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>:w, :w [filename]</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>현재파일명으로 저장, filename 로 저장</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>:&#60;범위&#62;w [filename]</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>지정한 범위만 다른 파일로 저장</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>:e [filename]</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>filename 을 편집하기 위해서 연다</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>ZZ</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>지금파일을 저장하고 vim 을 종료한다.</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
>:f</TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
>현재 작업중인 파일의 이름과, 라인수를 출력한다</TD
></TR
></TBODY
></TABLE
></DIV
>
			</P
></DIV
></DIV
></DIV
><DIV
CLASS="SECTION"
>
<H1
CLASS="SECTION"
><A
NAME="AEN277"
></A
>3. 개발자를 위한 vim 사용팁</H1
><DIV
CLASS="SECTION"
><H2
CLASS="SECTION"
><A
NAME="AEN279"
></A
>3.1. 화면 나누기</H2
><P
>			vim 은 수평나누기와 수직나누기를 제공한다. 수평나누기는 ":split [파일이름]" 수직나누기는 
			"vs [파일이름]" 으로 나눌수 있다. 파일이름을 지정한 경우, 새로 만들어진 
			창에는 파일이름 을 가지는 파일이 열리고, 파일이름을 지정하지 않을경우 똑같은 파일이 열린다.  
			이 기능은 현재 파일의 다른 부분을 참조하고 싶을때 유용하게 사용할수 있다(참조하는 부분으로 
			이동하기 위해서 왔다갔다 하지 않아도 되므로). 또한 ":10split [파일이름]", "10vs [파일이름]" 
			등으로 창의 크기를 조절해 줄수도 있다. 창 나누기는 2개 이상 나누기도 가능하다.  
		</P
><P
>			이렇게 창을 분할시켜 놓으면 쏘쓰를 참조하기도 편하고, 무엇보다 편집(삭제,복사,붙이기)가 
			가능하므로 훨씬더 작업을 수월하게 할수 있다.
		</P
><DIV
CLASS="SECTION"
><HR><H3
CLASS="SECTION"
><A
NAME="AEN283"
></A
>3.1.1. 화면 이동</H3
><P
>				명령 모드에서 CTRL+ww 를 입력하면 된다. 그러면 아래창으로 이동한다. 임의로 이동하기 위해서는
				Ctrl+w 를 입력한 상태에서 이동명령[hjkl]를 이용하면 원하는 방향으로 창이동이 가능하다.   
			</P
></DIV
><DIV
CLASS="SECTION"
><HR><H3
CLASS="SECTION"
><A
NAME="AEN286"
></A
>3.1.2. 파일 네비게이션</H3
><P
>				vim 6.0 부터는 파일네비게이션 기능이 존재합니다. 예를들어 vi 로 파일을 열때 파일을 
				디렉토리로 지정하면 해당디렉토리의 내용이 네비게이션 되고, 디렉토리 이동및 파일 선택이 
				가능하다. 
				<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>	
vi ./   # 현재 디렉토리내용을 네비게이션 해준다. 
				</PRE
></TD
></TR
></TABLE
>	
			</P
></DIV
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN290"
></A
>3.2. 파일 네비게이션 바 만들기</H2
><P
>			윈도우의 울트라 에디트와 같은 프로그램을 보면 왼쪽에 파일네비게이션이 있어서 
			원하는 파일을 바로 선택해서 편집하는 기능이 있다. vim 으로도 이러한 기능을 구현할수 
			있다. 이것은 vim 의 file navigation 기능과 창나누기 기능을 이용해서 
			구현하면 된다. 
		</P
><P
>			vi 가 실행되 상태에서 수직창 나누기 기능을 이용해서 ":20vs ./" 명령을 내려보자 
			그럼 그림과 같이 오른쪽에 파일 네비게이션 바가 생김을 알수 있다. 
			<DIV
CLASS="FIGURE"
><A
NAME="AEN294"
></A
><P
><B
>&#44536;&#47548; 1. 파일네비게이션을 만든 화면</B
></P
><P
><IMG
SRC="http://www.joinc.co.kr/albums/album01/aan.gif"></P
></DIV
>
			이제 열기를 원하는 파일위치에 가서 shift+o 를 입력해보자, 그럼 옆의 편집창에 새로운 파일이 
			열리는것을 알수 잇을것이다. 여기에 더해서 편집장을 split 로 나누면, 여러개의 파일을 오가면서 
			편집이 가능해질 것이다. [vim 7에서는 shift+p로 단축키가 변경됐다]
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN297"
></A
>3.3. 여러개의 파일 편집하기</H2
><P
>			위에서는 창나누기를 이용한 여러개의 파일편집에 대해서 알아봤는데, 또다른 
			방법이 있다. 처음에 vim 을 통하여 여러개의 파일을 open 하고 여러개의 열린
			파일을 이동하면서 편집하는 방법이다. 먼저 vim을 다음과 같이 실행시킨다.   
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
> 
[yundream@localhost test]# vim file1.txt file2.txt ...
			</PRE
></TD
></TR
></TABLE
> 
			그러면 처음 화면은 file1.txt 편집화면일것이다. 2번째 파일인 file2.txt 편집화면으로 
			넘어가길 원한다면(앞에 있는 파일 편집) 
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>:n
			</PRE
></TD
></TR
></TABLE
>
			file2.txt 에서 file1.txt 를 편집하길 원한다면(뒤에 있는 파일편집)
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>:e#
			</PRE
></TD
></TR
></TABLE
>
			split 를 이용해서 여러개의 파일을 편집할때와 마찬가지로, 각종 편집기능(복사,삭제,붙이기)이 
			서로 공유되므로 편하게 작업이 가능하다.  		
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN303"
></A
>3.4. 잠시 쉘로 나가기</H2
><P
>			보통 vim상에서 쉘명령어를 실행시키기 위해서 :![명령어] 를 사용하는데, 
			이것 보다는 Ctrl+z 를 이용해서 쉘로 빠져나가서 작업하는게 더 편하다. 
			shell 이 job control 기능을 이용한것으로, 쉘에서 원하는 작업을 수행하후 
			fg 명령을 이용해서 다시 vi 편집 상태로 되돌아 올수 있다. vim 사용자를 보면 
			가끔 쉘작업을 하기 위해서 vim 을 아예 종료 시켜서 쉘로 빠져나간 다음에 
			작업을 하고 vim 을 다시 실행시키는 경우가 있는데, 이제는 그럴필요가 없이 
			좀더 편하게 작업을 할수 있을것이다. 
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN306"
></A
>3.5. 선택된 block 를 다른 이름으로 저장하기</H2
><P
>			split 기능을 이용해서 창을 나누고, 원하는 블럭을 선택해서 복사한다음에, 새로만든창에 
			가져다 붙이기를 하면 된다. 
		</P
><P
>			그러나 이방법은 조금 복잡한 감이 없잖아 있다. 	
			이럴때는 블럭을 선택해서 :'&#60;,'&#62;w [파일명] 하면 좀더 간단하게 원하는 작업을 
			수행할수 있다. 
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN310"
></A
>3.6. 빠른 괄호 이동</H2
><P
>			C나  C++ 을 사용하다보면 제어문이나 함수에서 많은 괄호('{','(')를 만나게 된다. 
			이때 괄호의 제일 마지막으로 이동하고 싶을때가 있을것이다. 이럴때는 
			']}' 를 사용하면 된다. '[{' 를 사용하면 괄호의 처음으로 이동한다. 
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN313"
></A
>3.7. 위치 마크(mark)하기</H2
><P
>			일종의 북마크기능으로 자주참조할만한 라인을 마킹해두고 
			필요할때 간단히 해당 마킹지역으로 이동하기 위해서 사용한다. 
			마킹을 위해서는 명령모드에서 <B
CLASS="EMPHASIS"
>m</B
>키를 눌러서 마킹모드로 
			들어가면 된다. 
			그리고 영문 [a-zA-Z]키중 아무거나 눌러주면 된다. 만약 <B
CLASS="EMPHASIS"
>a</B
>를 
			눌러주었다면, 
			현재라인은 a이름으로 마킹된다. 이후 작업을하다가 a마킹라인으로 가고 
			싶다면 <B
CLASS="EMPHASIS"
>'a</B
> 해주면된다. 
			이 상태에서 원래 라인으로 되돌아가고 싶다면 <B
CLASS="EMPHASIS"
>''</B
>를 
			눌려주면 된다.  
		</P
><P
>			물론 다중마킹도 허용한다. 마킹할수 있는 문자는 단일영문자이다. 
			마킹에 사용되는 영문자는 대소문자를 구분함으로 최대마킹가능한 수는 
			27*2가 될것이다. 
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN321"
></A
>3.8. 폴더(접기) 기능이용하기</H2
><P
>			vim 6.0 에 새로이 포함된 좋은 기능으로 코드의 특정영역을 접을수 있다.
			그럼으로 코드를 분석할때 쓸데 없는 부분을 감춰줘서 
			좀더 편하게 분석이 가능합니다. visual block 를 이용해서 
			원하는 영역을 선택한다음 :zf 를 이용하면 해당영역이 접힌다. :zo 를 사용하면 
			접힌영영을 원상태로 복구할수 있고 :zc 를 사용하면 해당영역을 다시 접을수 있다. 
			또한 다중 접기를 허용해서 접근구역을 다시 접을수도 있다. 
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN324"
></A
>3.9. 간단한 man 페이지 참조</H2
><P
>			vim 을 이용 코딩중에 함수의 프로토 타입이 생각나지 않을때 주로 man page 를 
			참조하게 된다. 보통은 창을 하나따로 띄워서 그곳에서 man page 를 보는데, 
			코딩중에 간단하게 해당 함수에 대한 man page 를 볼수 있다. man page 를 원하는 
			함수 위로 커서를 옮긴다음 Shift + k 를 입력하면 함수의 man page 가 뜰것이다. 
			'q' 를 입력해서 man page 를 종료시키면 원래의 vim 화면으로 되돌아온다. 
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN327"
></A
>3.10. 함수/변수명 자동완성</H2
><P
>			코딩중에 가장 범하기 쉬운 잘못중의 하나가 변수명및 함수명 오타일것이다. 
			또 변수명이 기억이 잘 나지 않아서 처음 선언한곳을 다시 확인하는 작업역시 
			코딩을 매우 번거롭게 한다. 이때 함수 자동완성 기능을 이용하면 이러한 
			염려들을 줄일수 있다. 
		</P
><P
>			int client_sockfd 라고 변수 선언을 했다고 하자. 
			코딩중에 client_sockfd 를 쓸일이 있다면 cli^p 를 입력해보자. 
			그러면 변수 이름이 자동으로 완성되는것을 볼수 있을것이다. 
			^p는  Ctrl+p 이다. 
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN331"
></A
>3.11. ctags 를 이용한 쏘쓰 분석</H2
><P
>			쏘쓰를 분석하는데 있어서 가장 중요한 것은 역시 함수를 분석해서, 
			함수가 어떤일을 하는지 알아내는 것이다. ctags 를 이용하면 
			이러한 쏘쓰 분석작업을 좀더 수월하게 할수 있다. 
			ctags 와 관련된문서는 
			<A
HREF="article.php?sid=5"
TARGET="_top"
>ctags 를 이용한 쏘쓰 분석</A
>
			을 참고하기 바란다. 
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN335"
></A
>3.12. 자동들여쓰기</H2
><P
>			프로그래밍 할때 indent 는 쏘쓰코드를 보기좋게 만들기 
			위한 필수 사항이다. 보통 tab 을 주로 쓰는데, 
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>:set ai
			</PRE
></TD
></TR
></TABLE
>
			명령을 이용하면 자동적으로 indent (auto indent) 
			를 적용시켜주므로, 좀더 
			코딩에만 집중할수 있도록 도와준다. 
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>:set noai 
			</PRE
></TD
></TR
></TABLE
>
			명령을 사용해서 auto indent 상태를 해제할수 있다. 
		</P
><P
>			요즘의 vim 은 기본적으로 auto indent 상태이므로, 별다른 설정없이 
			편하게 사용가능하다.  
			그러나 웹에서 가져다 붙이기를 할때 여기에 auto indent 가 적용되어서 
			걷잡을 수 없이 tab 이 들어가는 경우가 생길때도 있는데, 이럴때 set noai 를 
			이용해서 auto indent 를 해제하고 가져다 붙이기를 하면 된다. 
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN341"
></A
>3.13. 탭사이즈 조정하기</H2
><P
>			쏘쓰에서 indent 를 위해서 주로 탭을 사용하는데, 보통 이 탭 사이즈는 
			8로 되어 있다. 그런데 8이란 탭사이즈가 때로는 너무 커서, 쏘쓰가 
			화면밖으로 나가서 오히려 쏘쓰 보기를 어렵게 만들때도 있다. 이럴때 
			는 탭사이즈를 줄여야 하는데 다음과 같은 명령을 통해서 탭사이즈 변경이 가능하다.
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>:set ts=4
			</PRE
></TD
></TR
></TABLE
>   	
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN345"
></A
>3.14. 라인 넘버링</H2
><P
>			코딩하다보면 라인넘버가 있으면 할때가 있다. 그럴때는 
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>:set nu 
			</PRE
></TD
></TR
></TABLE
>
			하면 된다. 
			<DIV
CLASS="FIGURE"
><A
NAME="AEN349"
></A
><P
><B
>&#44536;&#47548; 2. 라인 넘버링</B
></P
><P
><IMG
SRC="http://www.joinc.co.kr/albums/album01/aao.gif"></P
></DIV
>
			라인넘버를 없애고 싶다면,  
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>:set nonu
			</PRE
></TD
></TR
></TABLE
>
			하면 된다. 
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN353"
></A
>3.15. 코드를 HTML로 저장하기</H2
><P
>			vim 은 또한 코드를 HTML 형태로 저장하는 기능을 가지고 있다. 
			이 기능을 이용하면 syntax highlight 된 상태 그대로 HTML로 
			변환이 가능하다. 쏘쓰코드의 예제를 만들어서 웹상에 올리고자 
			할때 유용하게 사용할수 있는 기능이다. 
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>:so $VIMRUNTIME/syntax/2html.vim 
			</PRE
></TD
></TR
></TABLE
>
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN357"
></A
>3.16. vim 설정파일 만들기</H2
><P
>			지금까지 우리는 다양한 설정을 통해서 vim 을 좀더 쉽게 사용하는 
			방법을 알아 보았다. 그런데, 탭사이즈를 적용하기 위해서 vim 을 
			실행시킬때 마다 ":set ts=4" 이런식으로 하면 작업이 매우 귀찮을것이다. 
			이럴때는 vim 을 위한 설정파일을 만들어서, vim 이 시작할때 설정파일을 
			읽어들여서 환경이 자동으로 설정되도록 하면된다. 
		</P
><P
>			자기의 계정(Home) 디렉토리에 보면, .vimrc 라는 파일이 존재 할것이다. 
			(존재하지 않는다면 만들도록한다) 이것이 설정파일로 아래와 같은 방법으로 
			자기가 원하는 내용을 설정하면 된다.  
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>set ts=4
set nu
			</PRE
></TD
></TR
></TABLE
>
		</P
></DIV
></DIV
></DIV
></BODY
></HTML
>
}}}
[[tag(vim,ctag)]]
[[Category(14)]]
