#title kill - 프로세스에 시그널을 보낸다.
'''관련문서'''
  1. [wiki:Site/system_programing 시스템 프로그래밍 미니사이트]

{{{#!html
<HTML
><HEAD
><TITLE
><a href="/modules/moniwiki/wiki.php/manSearch?google=none&name=kill">kill</a>(2)</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.64
"><META
http-equiv="Content-Type"
content="text/html; charset=euc-kr"></HEAD
><BODY
CLASS="CHAPTER"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="CHAPTER"
><H1
><A
NAME="AEN1"
>1&#51109;. <a href="/modules/moniwiki/wiki.php/manSearch?google=none&name=kill">kill</a>(2)</A
></H1
><DIV
CLASS="TOC"
><DL
><DT
><B
>&#52264;&#47168;</B
></DT
><DT
>1.1&#51208;. <A
HREF="#AEN4"
>사용법</A
></DT
><DT
>1.2&#51208;. <A
HREF="#AEN8"
>설명</A
></DT
><DT
>1.3&#51208;. <A
HREF="#AEN25"
>반환값</A
></DT
><DT
>1.4&#51208;. <A
HREF="#AEN28"
>에러</A
></DT
><DT
>1.5&#51208;. <A
HREF="#AEN48"
>예제</A
></DT
></DL
></DIV
><P
>프로세스(:12)에게 시그널(:12)을 보낸다. </P
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN4"
>1.1&#51208;. 사용법</A
></H1
><P
>		<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;sys/types.h&#62;

#include &#60;signal.h&#62;

int kill(pid_t pid, int sig);
		</PRE
></TD
></TR
></TABLE
>
	</P
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN8"
>1.2&#51208;. 설명</A
></H1
><P
>		kill(2) 시스템콜(:12)은 특정 프로세스나 프로세스 그룹에 시그널을 
		보내기 위해서 사용한다. 
	</P
><P
>		<P
></P
><UL
><LI
><P
>				pid 가 양수이면, sig 시그널을 pid 로 보낸다.  
			</P
></LI
><LI
><P
>				pid 가 0이면 현재 프로세스가 속한 프로세스 그룹의 모든 
				프로세스에게 sig 시그널을 보낸다. 
			</P
></LI
><LI
><P
>	
				pid 가 -1 이면, 1번 프로세스를 제외한 모든 프로세스에서 
				sig 시그널을 보낸다. 
			</P
></LI
><LI
><P
>				pid 가 -1 보다 작으면, -pid 프로세스(:12)가 포함된 모든 그룹(:12)의 
				프로세스(:12)에게 sig 시그널을 보낸다. 
			</P
></LI
><LI
><P
>				sig가 0이면 어떤 시그널(:12)도 보내지 않지만, 에러 검사는 할수 
				있다. 
			</P
></LI
></UL
>

	</P
><P
>		시그널의 종류는 Unix(:12) 시스템마다 조금씩 다를수 있다. 
		자신의 Unix 시스템에서 사용할수 있는 시그널 목록은 kill(1) 쉘 명령어를 이용해서 확인할수 있다. 		
		<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>[root@localhost test]# kill -l
 1) SIGHUP       2) SIGINT       3) SIGQUIT      4) SIGILL
 5) SIGTRAP      6) SIGABRT      7) SIGBUS       8) SIGFPE
 9) SIGKILL     10) SIGUSR1     11) SIGSEGV     12) SIGUSR2
13) SIGPIPE     14) SIGALRM     15) SIGTERM     17) SIGCHLD
18) SIGCONT     19) SIGSTOP     20) SIGTSTP     21) SIGTTIN
22) SIGTTOU     23) SIGURG      24) SIGXCPU     25) SIGXFSZ
...
		</PRE
></TD
></TR
></TABLE
>
	</P
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN25"
>1.3&#51208;. 반환값</A
></H1
><P
>		성공할경우 0을 실패했을경우에는 -1을 반환하며, 적당한 errno(:12) 값을 
		설정한다. 
	</P
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN28"
>1.4&#51208;. 에러</A
></H1
><P
>		다양한 원인에 의해서 에러가 발생할수 있으며 아래와 같은 에러 메시지들이 있다. 
		<P
></P
><DIV
CLASS="VARIABLELIST"
><DL
><DT
>EINVAL</DT
><DD
><P
>	
					잘못된 시그널번호(:12)를 지정했을경우
				</P
></DD
><DT
>ENOTSOCK</DT
><DD
><P
>					s 가 소켓(:12)이 아닌 파일일경우
				</P
></DD
><DT
>ENOTCONN</DT
><DD
><P
>					소켓(:12)이 연결되어 있지 않을경우
				</P
></DD
><DT
>ENOBUFS</DT
><DD
><P
>					시스템(:12)에 연산을 위해서 이용할수 있는 자원이 부족할때
				</P
></DD
></DL
></DIV
>	
	</P
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN48"
>1.5&#51208;. 예제</A
></H1
><P
>		<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;sys/types.h&#62;

#include &#60;signal.h&#62;
#include &#60;stdlib.h&#62;

int main(int argc, char **argv)
{
    int pid;
    int sig_num;

    // 아규먼트로 pid 번호와 
    // 전송할 signal 번호를 받아들여서 
    // 이를 해당 pid 로 보낸다. 
    pid = atoi(argv[1]);
    sig_num = atoi(argv[2]);

    kill(pid, sig_num);
}
		</PRE
></TD
></TR
></TABLE
>
	</P
></DIV
></DIV
></BODY
></HTML
>
}}}
