#title 덧셈 명령과 빼기 명령

[[TableOfContents]]

 '''번역 : 강웅빈'''
 '''감수 : 프갤ㅤ&#54973;들'''

== 13장 덧셈 명령과 뺄셈 명령(Addition and Subtraction Instructions) ==

http://chortle.ccsu.edu/AssemblyTutorial/Chapter-13/ass13_1.html

이 장에서는 32비트 정수 덧셈과 뺄셈을 위한 명령에 대해 다룬다. 비트패턴으로 정수를 표현하는 방법도 복습 할 것이다.

이 장에서는 다음과 같은 주제를 다룬다.

 * 부호없는 2진수와 2의 보수 표현법에서의 오버플로우(Overflow in unsigned binary and two's complement)-복습
 * add와 addu명령
 * 사인 연장하기(Sign extension)
 * addi 와 addu 명령
 * sub과 subu명령
 * addi를 사용해 레지스터에서 음수 로드하기

질문:
프로세서가 완벽한 비트단위 조작연산을 지원한다고 합시다. 이것으로 산술적 명령을 수행 할 수 있겠습니까?
 
=== 비트단위 조작 연산으로서의 산술연산 ===

http://chortle.ccsu.edu/AssemblyTutorial/Chapter-13/ass13_2.html

답: 예(부동소숫점 연산도 마찬가지 입니다)

정수들은 비트패턴으로 표현되어 있기 때문에, 정수연산이란 곧 비트들을조작하는 연산이다. 몇몇의 작고 빠른 프로세서들은 아예 비트조작연산만 지원하는 경우가 있다. 그러한 경우에는 정수를 2개 더하는 덧셈연산은 8장에서 본 것 같은 바이너리 덧셈 알고리듬(8장)을 비트 조작 명령을 사용하여 구현된다. 

운좋게도, MIPS는 정수 산술연산명령을 가지고 있다. 일반적인 정수의 크기는 32비트이다(레지스터의 크기와 같다). 좀더 크거나 작은 정수를 위한 산술연산은 32비트 산술연산과 비트단위 조작연산을 조합해서 할 수 있다.

질문: MIPS의 addu연산은 두 32비트 패턴에 대해 바이너리 덧셈 알고리듬을 사용합니다. 이 방법과 같이 사용될 수 있는 정수 표현법은 무엇입니까?
 *부호없는 이진수
 *2의 보수 표현법
 *둘다

=== 바이너리 덧셈 알고리듬(Binary Addition Algorithm) ===
http://chortle.ccsu.edu/AssemblyTutorial/Chapter-13/ass13_3.html

답:둘다

바이너리 덧셈 알고리듬은 위의 두가지 정수표현방식에도 모두 동작한다. MIPS에서도 한가지 명령(addu)이 두 표현방식에 다 쓰인다. 그러나 오버플로우조건은 각각 다르다.
|||| 바이너리 덧셈 알고리듬: 오버플로우조건 ||
|| 부호없는정수 || 2의 보수 ||
|| 가장 왼쪽에 있는 캐리아웃이 0이면 결과가 옳다 || 캐리인과 캐리 아웃값이 같을때 결과가 옳다. 옳은 경우 캐리 비트는 캐리인과 캐리아웃 모두 0일 수도 있고 또는 모두 1일 수도 있다.  ||

질문: 다음 8비트 패턴 덧셈에 바이너리 덧셈 알고리듬을 사용하세요.
|| 1010 1011 ||
|| 0101 0101 ||
||||
부호없는정수식일 때, 그리고 2의 보수식일 때 오버플로우가 일어납니까?
=== addu 명령 ===

http://chortle.ccsu.edu/AssemblyTutorial/Chapter-13/ass13_4.html

답: 
|| 1|| 1111 111 ||
||  || 1010 1011 ||
|| || 0101 0101 ||
||||||
|| || 0000 0000 ||

부호없는 정수의 경우 : 오버플로우. 캐리아웃이 1입니다.
2의 보수의 경우 : 오버플로우아님. 캐리인과 캐리아웃이 동일

addu 명령은 두개의 32비트 레지스터에 대해 바이너리 덧셈 알고리듬을 수행한 후 그 결과를 결과 레지스터(destination register)에 저장한다. 결과 레지스터와 소스 레지스터가 같아도 상관 없다. addu명령은 기계적으로 바이너리 덧셈 알고리듬을 적용해 결과를 얻은 후 32비트의 결과 레지스터에 저장한다. 오버플로우는 무시된다. (addu끝의 u가 그러한 뜻이다. unchecked :역주)

{{{#!plain
addu  결과레지스터,피연산자1,피연산자2        # $결과레지스터 <-- 피연산자1 + 피연산자2
                                   # 오버플로우 트랩 없음
}}}

add라는 명령도 있다. addu와 유일하게 다른 점은 2의 보수식의 정수를 연산할때에 오버플로우가 발생하면 트랩(trap)을 발생시킨다는 것 이다. 트랩은 정상적인 기계 주기(normal machine cycle)의 중단을 의미한다. 보통의 컴퓨터 시스템에서 트랩은 운영체제로 제어를 넘긴다.

{{{#!plain
add   결과레지스터,피연산자1,피연산자2        # $대상 <-- 피연산자1 + 피연산자2
                                  # 오버플로우 트랩 있음
}}}

대부분의 어셈블리 프로그래머들은 오버플로우 방지를 위해 미리 피연산자를 점검한다. 그래서 어셈블리 프로그래머들은 보통 addu명령을 사용한다. 트랩의 사용방법을 배우기 전까지 우리는 addu를 사용할 것이고 같은 방법으로 오버플로우를 방지 할 것이다.

질문:
2의 보수식으로 정수를 표현할 때 32비트로 표현 가능한 정수의 범위가 어떻게 됩니까(x,y)?

-2^x to +2^y-1
(^는 지수승)

=== 예제 프로그램 ===

http://chortle.ccsu.edu/AssemblyTutorial/Chapter-13/ass13_5.html

답: x, y모두 31. 반은 음의 정수, 나머지는 영과 양의 정수에 쓰입니다.

이전에 나왔던 덧셈문제를 32비트로 확장해 보았다.

|| || 이진수 || 16진수 ||
|| 캐리값 ||0000 0000 0000 0000 0000 0001 1111 111 || ||
|| || 0000 0000 0000 0000 0000 0000 1010 1011 || 000000AB ||
|| + ||0000 0000 0000 0000 0000 0000 0101 0101 || 00000055 ||
||||||||
|| || 0000 0000 0000 0000 0000 0001 0000 0000 || 00000100 ||

부호없는 8비트의 부호없는 연산(unsigned arithmetic)에서는 오버플로우가 났으나 32비트에서는 범위안에 있다.
{{{#!plain
## AddSome.asm
## 
## 덧셈 시연용 프로그램
        .text
        .globl  main

main:
        ori      $8, $0, 0xAB       # 0x000000AB를 $8에 집어넣는다
        ori      $9, $0, 0x55       # 0x00000055를 $9에 집어넣는다
        addu     $10,$9, $8         # 합은 $10에 넣는다

## 파일의 끝
}}}

질문: 이 프로그램에서 $8과 $9의 내용이 바뀝니까?

=== 프로그램 실행 ===
http://chortle.ccsu.edu/AssemblyTutorial/Chapter-13/ass13_6.html
답:
안바뀝니다. 피연산자의 레지스터가 저장되는 레지스터가 아니기 때문에 피연산자 레지스터의 내용은 변하지 않습니다.

다음 그림은 프로그램을 실행한 것이다. 결과는 예상했던대로 나타난다. 소스코드를 text 영역(그림에서 아래쪽 창) 오른쪽에서 볼 수 있다. text 영역 중간의 행에서 명령의 직접피연산자가 십진수로 표현된것을 볼 수 있다. 

attachment:addSome.gif

직접 연산자를 십진수로 표현하기 위해서는 앞에 붙이는 0x를 생략하자. 
{{{#!plain
        ori      $8, $0, 171       # 171을 8번 레지스터에 저장
        ori      $9, $0,  85       # 85를 9번 레지스터에 저장
        addu     $10,$9,  $8       # $9번 $8번을 더한 값을 10번에 저장
}}}

물론, 기계명령에서 직접피연산자는 16비트 크기의 패턴이다. 어셈블러는 여러분이 16진수 명명법이나 10진수 명명법을 사용하여 지정한 패턴을 16비트 크기의 패턴으로 전환시킨다.

질문: (복습)음수인 상수(negative const)를 다음 명령에 사용할 수 있을까요?

ori  $d,$0,const

=== 2의 보수식의 값을 음수로 바꾸기 ===

http://chortle.ccsu.edu/AssemblyTutorial/Chapter-13/ass13_7.html

답: 안됩니다. 상수(const)가 저장되는 레지스터 d로 복사될 때 16비트의 직접 피연산자는 0을 사용하여 32비트로 확장됩니다. 그러므로 음의 정수가 될 수 없습니다.

흥미로운 비트조작 문제를 준비했다. 레지스터에 이미 불러들인 정수를 음의 정수로 바꾸고 싶다고 하자. (나중에는 좀 더 쉬운 방법을 알려 줄 것이다) 여지껏 배운 연산으로 시도해보자.

2의 보수식의 정수를 음수로 만드려면 비트의 0과 1을 바꾼 후 1을 더하면 된다는 것을 기억하자.

문제: 레지스터 $8에 양의 정수 82를 
{{{#!plain
ori  $8,$0,82}}}
를 사용해 집어 넣었습니다.

다음동작을 할 때 어떤 명령을 사용할까요?

 *레지스터$8에 있는 비트를 뒤집기(0과 1을 바꾼다)
 *레지스터$8에 1을 더한다.
=== 예제 프로그램 ===

http://chortle.ccsu.edu/AssemblyTutorial/Chapter-13/ass13_8.html

답: 
 *레지스터$8에 있는 비트를 뒤집기(0과 1을 바꾼다)  
 nor $8, $8, $0
 *레지스터$8에 1을 더한다 
 ori $9, $0, 1
 addu $8, $8, 1

 2의 보수식의 정수를 음수로 바꾸는 프로그램이다. 음수를 레지스터에 올리는 좀더 나은 방법들이 있으나 이 프로그램은 비트 조작 기술의 아주 좋은 예이다.
{{{#!plain
## handMadeNeg.asm
## 
## 2의 보수식의 정수를 음수로 바꾸는 프로그램
##
## 이 프로그램은 -82와 146을 더한 후 결과를 10에 집어 넣는다.

        .text
        .globl  main

main:
        ori      $7, $0, 146        # +146 ->  $7
        ori      $8, $0,  82        # 82 -> $8
        nor      $8, $8,  $0        # 부호변경
        ori      $9, $0,   1        # 
        addu     $8, $8,  $9        # $8 에 1을 더한후 : $8 = -82
        addu    $10, $7,  $8        # (+146) + (-82)

## End of file}}}

질문: 빈칸을 채워보자.
{{{#!plain
 146-82 = ____       16진수로 = _____ }}}

=== 부호를 포함해 확장하기(Sign Extension) ===

http://chortle.ccsu.edu/AssemblyTutorial/Chapter-13/ass13_9.html

답 : {{{#!plain
 146-82 = 64        16진수로 = 0x40}}}
  
프로그램의 실행 결과는 예상 했던대로다.
attachment:handMadeNeg.gif
레지스터 $8로 바로 더할 1을 다른 레지스터에 로드 한 후 했다. 바로 "더하기 1" 같은 명령이 있으면 편할 것이다. 대부분의 프로세서가 이 명령을 가지고 있다.

MIPS는 "부호 없는 직접 피연산자 더하기-add immediate unsigned" 명령을 가지고 있다: addiu d,s,const. $8에 1을 더하려면 다음과 같이 하면 된다: addiu $8,$8,1.

다른 MIPS명령이 그렇듯이 이 명령의 직접 피연산자 또한 16비트이다. 그러나 ALU가 피연산자를 32비트로 확장 할 때에는 부호를 포함에 확장된다. 가장 왼쪽에 있는 비트(15번째 비트) 가 확장된 패턴의 맨 왼쪽에 온다. 그래서 만약 16비트인 직접 피연산자가 2의 보수식의 음의 정수일 때에는 32비트인 같은 음의 정수로 확장된다. 2의 보수식의 표현에서 가장 왼쪽의 비트는 부호 비트-sign bit- 라고 부르기도 한다.

질문: 16비트인 2의 보수식 정수인 -1이 있다.

FF FF = 1111 1111 1111 1111

32비트로 부호를 포함해 확장 했을 경우:

__ __ __ __ = ???? ???? ???? ???? ???? ???? ???? ????

=== 무조건적인(fond) addiu 명령 ===

http://chortle.ccsu.edu/AssemblyTutorial/Chapter-13/ass13_10.html

답 :16비트인 2의 보수식 정수인 -1이 있다.

FF FF = 1111 1111 1111 1111

32비트로 부호를 포함해 확장 했을 경우:

FF FF FF FF = 1111 1111 1111 1111 1111 1111 1111 1111

부호를 포함해 확장한 결과는 32비트의 -1입니다.

addiu명령은 16비트의 직접피연산자를 포함한다. ALU가 명령을 실행 시켰을 때, 직접 피연산자는 부호를 포함해서 32비트로 확장된다. 만약 연산 도중에 2의 보수식의 정수가 오버플로우 되더라도 무시된다.
{{{#!plain
addiu   d,s,const        # $d <-- s + const 
                         # Const 16비트의 2의 보수식의 정수이고
                         # 연산시에 부호를 포함해 32비트로 확장된다. 오버플로우 트랩은 발생하지 않는다.}}}
오버플로우시에 트랩을 발생하는 명령도 있다. 그러나 우리는 사용하지 않을 것 이다(당분간은).
{{{#!plain
addi    d,s,const        # addiu와 같으나 오버플로우 발생시 트랩 발생}}}

질문: 예전에 짠, +146과  -82를 더하는 프로그램이 있습니다. addiu명령을 사용해 다시 써보세요. 결과는 $10에 집어넣습니다

{{{#!plain
        ori      $7, $0, 146        # +146 ->  $7
        ori      $8, $0,  82        # 82 -> $8
        nor      $8, $8,  $0        # 부호변경
        ori      $9, $0,   1        
        addu     $8, $8,  $9        # $8 에 1을 더한후 : $8 = 82
        addu    $10, $7,  $8        # (+146) + (-82)}}}

=== subu 명령 ===
http://chortle.ccsu.edu/AssemblyTutorial/Chapter-13/ass13_11.html
답:
{{{#!plain
    ori      $7, $0, 146        # put +146 into $7
    addiu    $10,$7,-82         # add -82}}}
프로그램이 훨씬 짧다.

MIPS는 정수를 위한 빼기 명령 두가지를 가지고 있다.
{{{#!plain
subu   d,s,t        # $d <-- s - t . 오버플로우 트랩 없음
                    # $d <-- s + (-t)
                    # -t는 t를 뒤집고(0과 1을 바꾼다) 1을 더한 결과}}}
{{{#!plain
sub    d,s,t        # $d <-- s - t . 오버플로우 트랩 있는걸 제외하고는 subu와 같음}}}
  
질문: ori $d,$0,const 명령에서 상수(const)를 레지스터$d로 로드할 때에는 상수(const)는 16비트의 부호없는 상수여야만 했습니다. 
$8에 -86을 넣고 싶을때 다음 명령이 올바르게 작동합니까? 
{{{#!plain
addiu    $8,$0,-86  # $8 <-- -86 }}}

=== Subtract Immediate(직접 피연산자를 사용한 빼기 명령)는 존재하지 않는다 ===
http://chortle.ccsu.edu/AssemblyTutorial/Chapter-13/ass13_12.html

답: 올바르게 작동한다. 직접 피연산자 -86은 32비트로 부호연장 되어진 후 32비트 크기의 0에 더해진다. 그러므로 더한 합산값 -86이 레지스터 8에 올려진다.
 
여러분은 add,addu,addi,addiu 명령과 sub,subu 명령들이 있다는 것을 알기 때문에 subi(substract immediate) 명령도 있을 수 있다고 생각할 수 있다. 그러나 그러한 명령은 존재하지 않는다. 대신에 addi(add immediate)명령을 사용한다.
레지스터 10에서 201을 뺄셈하기 위해서는 직접피연산자를 이용하여 다음고 같이 뺄셈할 수 있다.

{{{#!plain
addiu    $8,$10,-201    #  $8 <-- $10 - 201 }}}

X가 레지스터 8에 있는 값이라고 가정할때  5 x X - 74 를 계산해보자. MIPS는 정수 곱셈 명령을 가지고 있다. 곱셉명령을 사용하지 않는다고 가정해보자. 여태까지 공부한 명령들을 사용하여 어떻게 5 x X를 계산할 수 있겠습니까?

질문:
다음을 어떻게 계산할 수 있습니까?

4 × $8 + $8 ?

=== 프로그램 예제 ===

http://chortle.ccsu.edu/AssemblyTutorial/Chapter-13/ass13_13.html

답: 좌측으로 두자리를 옴기는것은 $8에 4를 곱하는 것과 같다 그런후 원본 레지스터 $8을 더한다. 

다음 프로그램을 살펴보자. 빈칸들이 있는 프로그램이다. 공책과 연필로 연습을 해보자.

{{{#!plain
## slowMult.asm
## 
## 이 프로그램은 다음 결과를 산출한다. 5 × x - 74
##
## 사용하는 레지스터:
##  $8   x
##  $9   result (결과)

        .text
        .globl  main

main:
        ori      $8, $0, 12           # x 값을 $8에 집어 넣는다. 
        sll      $___, $___,  ___     # $___ <-- 4x
        addu     $___, $___, $___     # $___ = 5x
        addiu    $___, $___,-74       # $___ = 5x - 74

## 파일의 끝}}}

질문:

위의 빈칸을 채워넣어 프로그램을 완성해 보자. 마지막 결과물은 레지스터 $9에 저장 되어야한다.

=== 결과 프로그램 ===

http://chortle.ccsu.edu/AssemblyTutorial/Chapter-13/ass13_14.html

{{{#!plain
## slowMult.asm
## 
## 이 프로그램은 다음 결과를 산출한다. 5 × x - 74
##
## 사용하는 레지스터:
##  $8   x
##  $9   result (결과)

        .text
        .globl  main

main:
        ori      $8, $0, 12           # x 값을 $8에 집어 넣는다. 
        sll      $9, $8, 2     # $9 <-- 4x
        addu     $9, $9, $8     # $9 = 5x
        addiu    $9, $9,-74       # $9 = 5x - 74

## 파일의 끝}}}

질문: 레지스터를 하나만 사용하면서 같은 프로그램을 만들 수 있겠습니까?

=== 13장 끝 ===
http://chortle.ccsu.edu/AssemblyTutorial/Chapter-13/ass13_15.html

답: 
하나만 가지고는 안된다. 원본값 x가 여러번 사용되었기 때문에 값을 저장할 레지스터가 필요하다.
(만일 여러분이 주메모리에 x값을 저장하는 방법을 알고 있다면 레지스터를 하나만 사용할 수 있다. 하지만 여러분은 아직 레지스터를 메모리에 저장하는 방법을 배우지 않았다.)

논의된 주제

    * 언사인드 정수표현과 2의보수 표현시 오버플로우(Overflow)
    * addu와 add 명령
    * 어셈블리어에서 10진수 상수표현
    * 2의 보수 표현법 정수를 부호연장(Sign extension)하기.
    * addiu and addi 명령.
    * subu and sub 명령.

[http://chortle.ccsu.edu/AssemblyTutorial/Chapter-13/ass13_15.html 퀴즈]와 [http://chortle.ccsu.edu/AssemblyTutorial/Chapter-13/ass13programs.html 프로그램] 문제를 풀어봅시다.

=== 수다 ===
1. 자바하는놈 어익후 첫날부터 ... 수학을 숙제를 10분넘긴적이 없었는데 물량전 피네요.. 영어도 간단한 패러그래프 .. 뭐 이건 별 문제는 아니지만. 곧 돌아오겠슴니다  풍~ 
1. 자바하는넘 수고 수고
1. 자바하는놈 선생님이랑 애덜을 잘 만났어요 ^^  근데 클래스가 어려울수록 아시안 비율이 거의 반을 넘어가네요 ㅋㅋ
1. 자바하는넘 열공하3 ^^ 참좋을때
1. 자바하는놈 오늘 좀 무식한 일을 했지말입니다. 베스트 바이에서 44불 주고 프린터 하나 샀는데...케이블을 안사왔지 말입니다 :( 북미에서는 따로 판다는 것을 까먹고말입니다.
1. 자바하는놈 숙제 장난 아니네요. 거의 맨날 숙제만 3시간 넘어가게 생겼네요.. 에궁 당분간은 요거 번역 읽기만하고 있어야겠네용9/12
1. 자바하는놈 jni좀 가지고 놀아보고 또 궁금해서 windows system programming 샀는데 시간이 갈수록 없어서 지금 30페이지에서 스톱.. 변소에서 보는책으로 전락..ㅠㅠ9/12
1. 자바하는넘 시간이 많이 없을거야 이거저거 해볼려면... ㅋㅋ 열공... 
1. 자바하는놈 아놔 첫 화학수학퀴즈 모두 97-100점대ㅋㅋ 근데 낼 영어 테스트인데 열나 불안..-- peer tutor-calculus,physics,chem,computerscience지원..학교jazzband조인.토론토에노인의집봉사
1. 자바하는놈 하악하악 그래도 좋아하는거 하니까 좋3..근데 뭔 시험볼때마다 부담감이 커서 원..--장학금 받아내야되지말입니다 9/14
1. 자바하는넘 캐나다는 장학금도 있넘... 캐나다가 살기는 더좋은것 같에... 사람들도 여유있고..
1. 자바하는놈 대학교 입학장학금이 가장 크지 말입니다. 경시대회 참가/수상 평균점수 extracurricular활동 기타등등.. 사람들이 여유가 잇는건 맞는거같아요 미국에도 있어봤지만
1. 자바하는놈 워털루 co-op으로 한 일년에 만불은 벌수있는데 외국인투이션이 $27000이네요...ㅠㅠ 영어과목이..조낸 어렵네연
1. 자바하는놈 감기걸렸는데 열나 피곤해서 책도 안읽어지고 이놈의 ㅈㄹ맞은 12학년화학은 아파서빠지면 0점준다네요 퀴즈를 4일연속으로 내고 양심이 있는소린가.. 열나 피곤해서 죽겠는데
1. 자바하는넘 고생이네 몸조리잘하고 난켐공부했을때 오비탈로 헤멨는데 상상력이 딸려서 그랬나... 요샌 비주얼라이제이션 툴이 많아서... http://www.sciencegeek.net/Chemistry/chemware/chemware.shtml
1. 자바하는놈 넴 ㄳ.신기하네용.. 아직 hydrocarbon.. apchem이라 광속으로 나가네요 5일학기시작인데 지금 페이지80.. --  굿나잇.. 작문하는거도 미치겠네요 이정신에
