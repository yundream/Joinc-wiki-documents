#title QT Designer를 사용한 프로그래밍

[[TableOfContents]]
=== QT Designer 소개 ===
이 문서는 [wiki:Site_QT QT 미니사이트]프로젝트의 일환으로 진행되고 있다. QT는 특히 체계적이고 방대한 양의 잘 정리된 개발문서를 제공하는 것으로 유명하다. 다른 책살필요 없이 기본제공되는 문서만 봐도 충분할 거라고 생각된다. 

충실한 문서와 더불어 QT의 장점은 designer과 kdevelop라는 훌륭한 개발도구를 지원한다는 점이다. kdevelop는 지난 2-3년간 최고의 개발도구로 늘상 1,2위를 차지하던 도구이니 더 말할필요도 없을 것같다. 여기에 GUI 디자인을 위한 designer과 함께 사용한다면 최상의 QT관련 개발 환경을 만들 수 있을 것이다.    

여기에서는 designer의 사용법을 예제를 들어서 알아보도록 하겠다.

designer은 qt3.2에서 제공하는 것을 기준으로 한다.

==== QT Designer Overview ====
대부분의 배포판은 QT관련 라이브러리와 도구들을 기본적으로 제공하고 있으니 별도로 설치할 필요는 없을 것이다. 이런 이유로 설치관련은 넘어가도록 한다.    

{{{#!html
<a href=http://www.joinc.co.kr/modules.php?op=modload&name=gallery&file=index&set_albumName=album01&id=aiq&include=view_photo.php&full=1><img src=http://www.joinc.co.kr/albums/album01/aiq.sized.png border=0></a>
}}}

위 그림은 designer를 실행시킨 화면이다. 전체적으로 C++ builder를 연상시킨다. 왼쪽에는 '''Toolbox'''가 존재하는데 QT에서 사용할 수 있는 대부분의 위젯을 지원한다. 뿐만 아니라 KDE관련 위젯도 제공하므로 KDE응용 개발에도 유용하게 사용할 수 있다.  

designer은 비쥬얼한 GUI제작환경을 제공한다. 위 스크린샷의 가운데를 보면 작성중인 폼이 그대로 표시되는걸 확인할 수 있다. 만약 Text Lagel 위젯을 사용하길 원한다면 ToolBox에서 TextLabel을 클릭해서 적당한 위치에 놓기만 하면 된다. 그 옆에는 프로젝트의 파일, 위젯 객체를 관리하기 위한 창이 놓인다. 가장 오른쪽에는 property 편집창이 있는데, 선택된 위젯의 특성(이름, 크기, 폰트, 색.., 툴팁...)들을 조절할 수 있다. 


=== Designer를 이용한 GUI 프로그래밍 ===
==== 길이 단위 변환 프로그램 ==== 
우리가 designer를 이용해서 만들 프로그램은 길이를 각 단위에 맞게 변환시키는 프로그램으로 실행시 다음과 같은 모습을 보여준다.  

{{{#!html
<img src=http://www.joinc.co.kr/albums/album01/air.png>
}}}


==== Designer 실행 ====
윈도우에서는 '''Programs > QT X.x.x > Designer''', 유닉스에서는 터미널에서 '''designer'''를 입력하는 정도로 실행시킬 수 있다.   

==== 프로젝트의 생성 ====
가장 먼저 할일은 프로젝트를 생성하는 일이다. '''File > New'''를 클릭하게 되면은 여러가지 개발종류에 관련된 템플릿이 뜨게 된다. 우리가 만들고자 하는 단위 변환 프로그램은 표준 C++로 작성될 것이다. 그러므로 템플릿중에서 C++ Project를 선택해야 한다. C++ Project를 선택했다면, 다음과 같은 프로젝트 설정창이 뜨게 된다.   

{{{#!html
<img src=http://www.joinc.co.kr/albums/album01/ais.png>
}}}

프로젝트의 이름을 적당히 정해 주고 OK 버튼을 눌러주면 된다. 

==== 윈도우의 생성 ====
일단 프로젝트를 만들었는데, 만들고 나면 화면에 아무것도 보이는게 없을 것이다. 일단은 가장 상위 위젯(윈도우 다이얼로그)를 생성시켜야 한다. 생성은 다음과 같은 순서로 이루어진다.    
 1. '''File > New'''를 클릭해서 '''Dialog'''템플릿을 선택하고 클릭한다. 
 1. 그럼 designer 중앙에 다음과 같은 빈 창이 하나 생성된다. 
 1. 우리는 만들어진 창에 위젯을 배치해서 GUI폼을 작성한다. 

{{{#!html
<img src=http://www.joinc.co.kr/albums/album01/ait.png>
}}}

==== 위젯의 추가 ====

===== Text Label의 추가 =====
일단 메인 창을 만들었다면 Property 편집기를 통해서 이름을 '''Converter'''로 바꾸도록 하자. 이제 메인 창에 text label들을 위치시키도록 한다. 
 1. Toolbox의 Common Widgets를 클릭해 보면 '''TextLabel'''위젯이 보인다.    
 1. TextLabel을 클릭한다음 메인 창의 적당한 위치에서 그려주면 된다. 
 1. 여기에는 총 5개의 text label이필요하다. 2의 작업을 반복하도록 하자.

이제 만들어진 text label위젯들의 properity을 변경해 주어야 한다. 
 1. 가장위의 text label을 선택해서, ''text''에 ''Enter Number''를 입력한다.
 1. 다음 label은 ''Convert &From''를 
 1. 다음 label은 ''Convert &To''를
 1. 다음 label은 ''Result''를
 1. 다음 label은 ''&Decimals''를 입력한다.
'''&'''은 단축키의 지정을 위해서 사용한다. 이렇게 해놓으면 나중에 ''Alt''키와의 조합으로 원하는 항목으로 빠르게 이동할 수 있다. 지금은 글자옆에 '''&'''표시가 보일건데, 나중에 관련된 위젯을 지정해주면(buddy wiget), 밑줄로 바뀌게 된다. 

{{{#!html
<img src=http://www.joinc.co.kr/albums/album01/aiu.png>
}}}

===== Line Edit, Combo box, Spin Box의 추가 =====
 1. designer에서 Toolbox의 Common Widgets를 클릭한다.  
 1. LineEdit 위젯을 클릭한다음에 Enter Number 옆에 위젯을 배치한다. 그다음 ''name''을 ''numberLineEdit''로 바꾸고, ''hAlign''을 ''AlignRight''로, ''vAlign''을 ''AlignTop''로 바꾼다. 마지막으로 ''wordwrap''를 False로 둔다.  
 1. ComboBox 위젯을 클릭해서 Convert From 옆에 위치시킨다. ''name''을 ''fromCombobox''로 한다.  
 1. ComboBox 위젯을 클릭해서 Convert To 옆에 위치시킨다 ''name''을 ''toCombobox''로 한다.
 1. LineEdit 위젯을 클릭한 다음 Result 옆에 위치시킨다. ''name''을 ''resultLineEdit''로 한다. 그리고 ''paletteBackgroundColor''을 ''yellow''로 변경한다. 이 위젯에는 결과를 출력하게 되는데, 편집을 할 수 없다는 특성을 가지므로 ''readOnly''를 ''True''로 한다.    
 1. SpinBox 위젯을 클릭한 다음 Decimals옆에 위치시킨다. ''name''을 ''decimalsSpinBox''로 한다. 이것은 소숫점을 표현하기 위해서 사용하는데, 최대 소수점 자리수를 6자리로 고정시키도록 한다. ''max value''를 ''6''으로 고정시키고 ''value''는 ''3''으로 한다.       

지금까지 내용을 따라서 위젯을 배치 시켰다면 대략 다음과 같은 화면이 만들어 졌을 것이다.

{{{#!html
<img src=http://www.joinc.co.kr/albums/album01/aiv.png>
}}}

이제 각 위젯에 단축키를 지정할 차례다. 단축키는 '''buddies'''기능을 이용해서 지정할 수 있다.  

단축키는 지정이 가능한 위젯과 그렇지 않은 위젯이 있는데, 위의 예제에서 '''QLabel'''을 제외한 다른 위젯들은 직접 단축키를 지정할 수 없다. 대신 '''buddy'''위젯이라는걸 이용해서, 단축키가 지정된 위젯과 자신을 연결시킬 수 있다. 예를들면 '''Enter &Number''' QLabel위젯과 '''numberLineEdit''' LineEdit위젯을 연결시키는 식이다. 이렇게 하면 '''Alt+N'''단축키를 눌렀을 때, 자동적으로 numberLineEdit로 포커스가 이동하게 된다. buddy 위젯은 다음과 같이 지정할 수 있다.  
 1. ''F12''키를 누르면 buddy 설정모드로 바뀐다. 이제 위젯을 하나 선택한다음, 연결시키기 원하는 위젯으로 드래그해서 연결한다. 
 1. 각각의 위젯의 buddy위젯을 1.의  방법을 이용해서 지정하도록 한다.

{{{#!html
<img src=http://www.joinc.co.kr/albums/album01/aiw.png>
}}}

===== Push Button의 생성 =====
 1. Toolbox의 Common Widget을 클릭한다. 
 1. Pushbutton 버튼을 클릭해서 Decimals label밑에 위치시킨다. ''name''은 ''clearPushButton''으로, ''text''는 ''&Clear''로 한다.
 1. 새로운 push button을 만들어서 clearPushButton 옆에 위치시킨다. ''name''은 ''calculatePushButton''으로, ''text''는 ''Calculate''로 한다.
 1. 새로운 push button을 만들어서 ''clearPushButton''옆에 위치 시킨다. ''name''은 ''quitPushButton''으로, ''text''는 ''&Quit''로 한다.

{{{#!html
<img src=http://www.joinc.co.kr/albums/album01/aix.png>
}}}

===== Spacers의 추가 =====
GUI응용에는 보통 여러개의 위젯이 배치된다. 그러다보면 위젯배치와 관련된 레이아웃의 조절이 중요해진다. 레이아웃을 사용해서 관리하다 보면, 레이아웃에 포함된 위젯의 크기가 레이아웃의 크기에 맞게 자동으로 변하는 것을 확인할 수 있는데, 특정한 위젯의 경우 크기를 변하지 않도록 하기원할 때가 있다. 이럴경우 spacer을 사용하면 된다. spacer의 효과는 아래에서 다룰 위젯의 편집을 읽으면 확실히 이해할 수 있을 것이다.    
 1. ToolBox의 Common Widgets에서 '''Spacer'''를 선택한다. 
 1. Spacer을 클릭하고 드래그를 통해서 위젯과 위젯사이를 조절해 준다. 위아래로 드래그하면 세로방향의 spacer가 생기고 좌우로 드래그하면 가로방향의 spacer가 생성된다. 

{{{#!html
<img src=http://www.joinc.co.kr/albums/album01/aja.png>
}}}

'''File > Save'''를 이용해서 지금까지의 내용을 저장한다.

==== 위젯의 편집 ====
지금까지 위젯을 만들어서 배치를 했는데, 이제 실제 위젯의 내용을 채워넣어야 한다.

===== Combo Box에 아이템 추가 =====
콤보박스는 아이템의 목록을 나열하고 선택하기 위한 인터페이스를 제공한다. fromCombobox에는 우리에게 익숙한 미터법에서 사용되는 단위의 목록이 들어간다. 

 1. 위젯을 더블클릭하거나 마우스의 오른쪽 버튼클릭후 '''Edit'''를 선택한다. 그러면 콤보박스 설정창이 뜬다. 
 1. New Item을 이용해서 ''Kilometers'', ''Meters'', ''Centimeters'', ''Millimeters''를 입력한다.  
 1. '''OK'''버튼을 누르고 설정창을 종료한다.

toCombobox역시 동일한 방법으로 ''Miles'', ''Yard'', ''Feet'', ''Inches''를 입력한다.  

{{{#!html
<img src=http://www.joinc.co.kr/albums/album01/aiz.png>
}}}

===== 레이아웃 설정 =====
레이아웃은 윈도우즈의 크기변화등에 따라서 위젯이 창의 크기변화에 조화를 이루도록 만들기 위한 목적으로 사용한다. 윈도우즈의 크기가 커지면 거기에 맞추어서 위젯이 오른쪽으로 이동하거나 더 커지거나 할 수 있어야 하기 때문이다.  

 * 이 프로그램은 크게 2개의 레이아웃을 가진다. 하나는 값의 입력과 출력과 관련된 위젯이 위치하는 레이아웃이고, 다른 하나는 push button을 배열하기 위한 레이아웃이다.  
 * 레이아웃에 포함될 위젯의 결정은 간단하다. 그냥 마우스를 원하는 위젯을 포함하도록 드래그 하면된다. 포함되지 않아야 되는 위젯은 '''Shift+클릭'''을 이용해서 위젯을 제거 시키도록 한다. 

{{{#!html
<img src=http://www.joinc.co.kr/albums/album01/ajb.png>
}}}

 * 필요한 위젯을 모두 선택했다면 '''Ctrl+G'''를 이용해서 레이아웃으로 등록한다. 레이아웃에 등록되면 위 그림과 같이 빨간색 테두리가 그려진다. '''Ctrl+H'''를 이용하면 위젯을 수평방향으로 배치할 수 있다. 버튼을 위한 레이아웃은 수평으로 위젯을 배치 시키도록 한다.

{{{#!html
<img src=http://www.joinc.co.kr/albums/album01/ajc.png>
}}}

 * '''Ctrl+L'''을 클릭하면 레이아웃들을 수직방향으로 배치한다. 
 * 마지막으로 '''Ctrl+J'''를 이용해서 레이아웃을 창의 크기에 적응하도록 만들어준다. 이제 메인 윈도우의 크기가 변하면 거기에 맞게 레이아웃과 레이아웃에 포함된 위젯의 위치및 크기가 변경됨을 확인할 수 있을 것이다.

QT Designer은 코드를 컴파일 하지 않더라도 미리보기 기능을 통해서 어떻게 작동할런지를 미리 확인할 수 있는 '''Preview Form''' 기능을 제공한다. 지금까지 만든 GUI가 실제 어떻게 작동할런지를 미리 보고 싶다면 '''Preview > Preview Form'''을 선택하면 된다.

==== 위젯 연결하기 ====
QT Designer은 UI를 디자인하는 외에도 코드의 생성이 가능하다. 특히 UI디자인에 필수적인 Signal/Slot 코드를 쉽게 만들 수 있도록 도와준다.
 * '''Edit > Connectons'''를 선택하면 위젯과 연결될 함수를 등록할 수 있는 창이 뜬다.   
 * '''New'''버튼을 클릭해서 새로운 connect를 생성한다.
 * 등록은 간단하다. 이벤트를 발생시키는 위젯을 선택한후 이벤트의 종류(signal)를 선택한다. 그리고 이벤트를 받을 위젯과 실행될 함수(slot)를 선택하면 된다. 이들 signal과 slot에서 선택할 수 있는 함수는 위젯의 종류에 맞도록 선택할 수 있다. Slot의 경우 사용자 정의 함수를 사용해야될 경우가 있는데, 이럴때는 별도로 함수를 생성할 수도 있다.      
 * 아래는 ''clear''버튼을 클릭했을 경우의 Signal/Slot를 등록시킨 화면이다. clear 버튼을 누르면 numberLineEdit와 resultLineEdit의 값을 지우고 포커스(입력 프롬프트)를 numberLineEdit로 옮긴다. 

'''quit'''와 연결될 함수도 동일한 방법으로 등록시킬 수 있다. click()시그널이 발생했을 경우 메인 윈도우(Converter)이 close()하도록 만들면 된다.    

{{{#!html
<img src=http://www.joinc.co.kr/albums/album01/ajd.png>
}}}

'''quit'''나 '''clear'''버튼의 경우 QT에서 제공하는 signal, slot함수만으로도 모든 처리가 가능하지만 '''calculate'''의 경우에는 별도의 사용자 정의 함수를 만들어야만 한다. 
 * '''Edit > Connection'''를 이용해서 connect창을 띄운다. 
 * New를 이용해서 calculatePushButton의 clicked() 시그널에 대해서 Converter을 Receiver로 지정한다.  
 * Edit Slots를 이용해서 사용자 Slots에 사용될 함수를 등록하기 위한 창을 띄운다.
 * New Function을 클릭해서 새로운 함수를 등록한다. 함수의 이름은 convert()로 하겠다.

{{{#!html
<img src=http://www.joinc.co.kr/albums/album01/aje.png>
}}}

 * 함수를 등록했다면 '''OK'''버튼을 클릭해서 빠져나온다.
 * 이제 Converter을 위한 Slot 함수로 convert()를 선택할 수 있다. 
나머지 위젯들에 대한 connect함수들도 등록하도록 한다. 최종적으로 아래와 같은 설정모습을 보여줄 것이다.

{{{#!html
<img src=http://www.joinc.co.kr/albums/album01/ajf.png>
}}}

==== Slot 함수 코딩 ====
Slot함수로 convert()함수를 등록했으니, 실제 내용을 코딩해 주어야 할것이다. QT Dialog를 보면 오른쪽에 프로젝트 파일의 목록을 브라우징 할 수 있는 ''Project Overview''창이 있는데, 여기에서 원하는 파일을 더블클릭하면 코딩을 위한 에디터를 띄울 수 있다. '''converter.ui.h'''를 클릭해서 편집하도록 한다. 내용은 다음과 같다. 코드는 척보면 이해할 수 있는 것이니 굳이 설명하지 않겠다.

convert()함수 외에도 init()함수도 만들도록 하겠다. init()함수는 위젯의 값을 초기화 하고 numberLineEdit에 올바른 값이 들어가는지를 체크한다.   
{{{#!plain
#include <qvalidator.h>

void Converter::convert()
{
   enum MetricUnits {
       Kilometers,
       Meters,
       Centimeters,
       Millimeters
   };
   enum OldUnits {
       Miles,
       Yards,
       Feet,
       Inches
   };

   // Retrieve the input
   double input = numberLineEdit->text().toDouble();
   double scaledInput = input;

   // internally convert the input to millimeters
   switch ( fromCombobox->currentItem() ) {
   case Kilometers:
       scaledInput *= 1000000;
       break;
   case Meters:
       scaledInput *= 1000;
       break;
   case Centimeters:
       scaledInput *= 10;
       break;
   }

   //convert to inches
   double result = scaledInput * 0.0393701;

   switch ( toCombobox->currentItem() ) {
   case Miles:
       result /= 63360;
       break;
   case Yards:
       result /= 36;
       break;
   case Feet:
       result /= 12;
       break;
   }

   // set the result
   int decimals = decimalsSpinBox->value();
   resultLineEdit->setText( QString::number( result, 'f', decimals ) );
   numberLineEdit->setText( QString::number( input, 'f', decimals ) );
}

void Converter::init()
{
   numberLineEdit->setValidator( new QDoubleValidator( numberLineEdit ) );
   numberLineEdit->setText( "10" );
   convert();
   numberLineEdit->selectAll();
}
}}}

이것으로 기본적인 코드는 완성했다. 이제 실행파일을 생성하기 위한 main함수가 포함된 코드를 만들어야 한다. 이를 위해서 main함수가 포함된 main.cpp파일을 생성하도록 하겠다. 
 * '''File > New'''을 클릭한후 C++ Main File 템플릿을 선택한다(main.cpp). 
 * 그러면 main.cpp파일이 생성되고, 자동적으로 main()함수가 생성된다.  
 * 프로젝트를 저장한다. 

이제 컴파일 후 테스트를 하도록 한다. 
 * 한텀과 같은 터미널 프로그램을 이용해서 프로젝트가 저장된 디렉토리로 이동한다.  
 * '''qmake'''를 이용해서 Convert.pro로 부터 Makefile을 생성한다.  
{{{#!plain
# qmake -o Makefile Convert.pro
}}}
 * '''make'''를 이용해서 컴파일을 수행한다.
 * 만들어진 프로그램을 실행한다.

=== 마치며 ===
이상 간단하게 QT Designer를 이용해서 QT응용을 만드는 방법에 대해서 알아 보았다. QT Designer를 이용해서 만든 UI는 xml형식으로 저장된다. 이렇게 됨으로써 개발자는 UI와 코드를 분리 시킬 수 있는데, 이는 GUI응용을 만드는데 많은 장점을 가져다 준다. QT뿐만 아니라 GTK와 그밖의 몇몇 UI개발도구들도 이러한 방법을 채택하고 있다.   

다음엔 QT Designer과 Kdevelop와 함께 사용해서 효율적으로 프로젝트를 관리하는 방법에 대해서 알아보도록 하겠다. 

[wiki:Code_C++_ipconv 개인적으로 만들어본 IP변환 프로그램]

