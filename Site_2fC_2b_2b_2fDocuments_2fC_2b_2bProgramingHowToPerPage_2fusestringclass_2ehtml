{{{#!html
<HTML
><HEAD
><TITLE
>String class 사용하기</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.76b+
"><LINK
REL="HOME"
TITLE="C++ Programming HOW-TO"
HREF="index.html"><LINK
REL="PREVIOUS"
TITLE="String class 다운받기"
HREF="downloadstring.html"><LINK
REL="NEXT"
TITLE="String.h 파일"
HREF="stringhfile.html"><META
http-equiv="Content-Type"
content="text/html; charset=euc-kr"></HEAD
><BODY
CLASS="SECT1"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="NAVHEADER"
><TABLE
SUMMARY="Header navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>C++ Programming HOW-TO</TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A
HREF="downloadstring.html"
ACCESSKEY="P"
>&#51060;&#51204;</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
></TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A
HREF="stringhfile.html"
ACCESSKEY="N"
>&#45796;&#51020;</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><DIV
CLASS="SECT1"
><H1
CLASS="SECT1"
><A
NAME="USESTRINGCLASS"
></A
>5. String class 사용하기</H1
><P
>이 String class는 표준 C++ 라이브러리의 string class와 다르다는데 주의하라.
이 특별한 String class는 직접 만들어진 것이고, Java 프로그래머들이 C++을
쉽게 사용하도록 하기 위해 만들어졌다. 만약 당신이 C++과 더 익숙하다면
표준 C++ 라이브러리에 제공되는 진짜 string class 를 사용 하는 것이 좋다.</P
><P
>String class를 사용하기 위해, <A
HREF="appendixa.html"
>23&#51208;</A
>의 
"example_String.cpp" 예제 프로그램과 <A
HREF="appendixa.html"
>23&#51208;</A
>의 
String class를 보아라.</P
><P
><B
CLASS="EMPHASIS"
>'String class'</B
> 는 char와 char * 타입을 완벽하게 대신할 
수 있다.
<B
CLASS="EMPHASIS"
>'String class'</B
>를 char 처럼 사용할 수도 있고,
여러가지 다양한 기능도 사용할 수 있다. 
<A
HREF="appendixa.html"
>23&#51208;</A
> 에 주어진 makefile에서 만들어지는 'libString.a'를
링크해야하고, C++ 라이브러리가 위치한 모든 곳의 라이브러리를 /usr/lib 나 /lib 
디렉토리에 라이브러리를 복사해넣어야 한다.
'libString.a'를 사용하기 위해서는, 다음과 같이 컴파일하라.
<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="PROGRAMLISTING"
>	g++ example.cpp -lString</PRE
></TD
></TR
></TABLE
>
다음에 주어진 예제 코드를 보라.
<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="PROGRAMLISTING"
>	String aa;

	aa = "Creating an Universe is very easy, similar to creating a baby human.";

	// 프로그램에서 aa.val()을 'char *' 같이 사용할 수 있다.
	for (unsigned long tmpii = 0; tmpii &#60; aa.length(); tmpii++)
	{
		//fprintf(stdout, "aa.val()[%ld]=%c ", tmpii, aa.val()[tmpii]);
		fprintf(stdout, "aa[%ld]=%c ", tmpii, aa[tmpii]);
	}

	// 실제로 'char *'로 사용하면..
	for (char *tmpcc = aa.val(); *tmpcc != 0; tmpcc++)  
	{
		fprintf(stdout, "aa.val()=%c ", *tmpcc);
	}</PRE
></TD
></TR
></TABLE
>&#13;</P
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="AEN234"
></A
>5.1. 연산자</H2
><P
><B
CLASS="EMPHASIS"
>'String class'</B
> 
는 아래와 같은 연산자를 제공한다 :-

<P
></P
><UL
><LI
><P
> Equal to <B
CLASS="EMPHASIS"
>==</B
> </P
></LI
><LI
><P
> Not equal to <B
CLASS="EMPHASIS"
>!=</B
> </P
></LI
><LI
><P
> Assignment <B
CLASS="EMPHASIS"
>=</B
>  </P
></LI
><LI
><P
> Add to itself and Assignment <B
CLASS="EMPHASIS"
>+=</B
> </P
></LI
><LI
><P
> String concatenation or addition <B
CLASS="EMPHASIS"
>+</B
>  </P
></LI
></UL
>

연산자를 사용하는 예제를 보자.

<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="PROGRAMLISTING"
>	String aa;
	String bb("Bill Clinton");

	aa = "put some value string";  // assignment operator
	aa += "add some more"; // Add to itself and assign operator
	aa = "My name is" + " Alavoor Vasudevan "; // string cat operator

	if (bb == "Bill Clinton")  // boolean equal to operator
		cout &#60;&#60; "bb is equal to 'Bill Clinton' " &#60;&#60; endl;

	if (bb != "Al Gore")   // boolean 'not equal' to operator
		cout &#60;&#60; "bb is not equal to 'Al Gore'" &#60;&#60; endl;</PRE
></TD
></TR
></TABLE
>&#13;</P
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="AEN255"
></A
>5.2. 함수</H2
><P
>String class에서 제공되는 함수들은 Java 의 String class와 
<B
CLASS="EMPHASIS"
>같은 이름</B
>을 갖는다.
함수 이름과 동작은 Java의 String class와 <B
CLASS="EMPHASIS"
>완전히</B
>똑같다.
StringBuffer class역시 제공된다.
이들은 Java와 C++간의 포팅을 쉽게 할 것이다 (잘라내기 &#38; 붙여넣기와 최소한의 코드 조정
만을 필요로 할 것이다).
Java의 함수에 들어있는 코드를 C++의 멤버함수로 복사하기만 하면 될 것이고,
최소한의 변경만으로도 C++에서 잘 컴파일 될 것이다.
또다른 이점은 Java와 C++을 모두 사용하는 개발자들이 둘 간의 문법이나 함수 이름을
따로따로 기억할 필요가 없어진다는 것이다.</P
><P
>예를들어 integer를 문자열로 바꾸는 것을 보면, 

<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="PROGRAMLISTING"
>	String	aa;

	aa = 34;  // '=' 연산자가 int를 string으로 바꾼다.
	cout &#60;&#60; "The value of aa is : " &#60;&#60; aa.val() &#60;&#60; endl;

	aa = 234.878;  //  '=' 연산자가 float를 string으로 바꾼다.
	cout &#60;&#60; "The value of aa is : " &#60;&#60; aa.val() &#60;&#60; endl;

	aa = 34 + 234.878;
	cout &#60;&#60; "The value of aa is : " &#60;&#60; aa.val() &#60;&#60; endl;
	// 출력은 '268.878'일 것이다.

	// casting이 필요하다.
	aa = (String) 34 + " Can create infinite number of universes!! " + 234.878;
	cout &#60;&#60; "The value of aa is : " &#60;&#60; aa.val() &#60;&#60; endl;
	// 출력은 '34 Can create infinite number of universes!! 234.878'일 것이다.</PRE
></TD
></TR
></TABLE
>&#13;</P
><P
>String class의 함수이름에 대한 자세한 내용은 
<A
HREF="appendixa.html"
>23&#51208;</A
> 를 참고해라. 같은 String.h파일이 다음 섹션에도
나올 것이다.</P
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="AEN264"
></A
>5.3. String class의 이름 바꾸기</H2
><DIV
CLASS="SECT3"
><H3
CLASS="SECT3"
><A
NAME="AEN266"
></A
>5.3.1. Case 1: 단순한 이름 바꾸기</H3
><P
>만약 String class의 이름이 맘에 들지 않는다면, <B
CLASS="EMPHASIS"
>"typedef"</B
>
를 이름을 바꾸기 위해 사용할 수 있다.</P
><P
>String.h를 include하는 모든 파일에 다음의 내용을 넣어라 :

<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="PROGRAMLISTING"
>// String이라는 이름이 맘에 들지 않는다면, 다음과 같이 바꾸어라.
typedef String StringSomethingElseIwant;

// 이제 코드는 다음과 같이 될 것이다.
int main()
{
	StringSomethingElseIwant aa_renstr; 
	aa_renstr = "I renamed the String Class using typedef";

	// .....
}</PRE
></TD
></TR
></TABLE
>

<A
HREF="http://www.milkywaygalaxy.freeservers.com"
TARGET="_top"
>example_String.cpp</A
>
에 가서 'Source code for C++'을 선택해라.</P
></DIV
><DIV
CLASS="SECT3"
><H3
CLASS="SECT3"
><A
NAME="AEN273"
></A
>5.3.2. Case 2: 이름이 겹칠 때</H3
><P
>다른 같은 이름을 가진 class와 이름이 겹치는데, 두 class를 모두 사용하고
싶다면, 다음과 같은 방법을 써라.
String.h를 include하는 모든 파일에 다음의 내용을 넣어라.

<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="PROGRAMLISTING"
>#define  String  String_somethingelse_which_I_want
#include "String.h"
#undef String

#include "ConflictingString.h"  // 이것도 String이란 class이다.

// 코드 내용..
int main()
{
	String_somethingelse_which_I_want aa;
	String bb; // 이것은 겹치는 String class이다.

	aa = " some sample string";
	bb = " another string abraka-dabraka";
	.......
}</PRE
></TD
></TR
></TABLE
>

전처리기가 모든 String을 "String_somethingelse_which_I_want" 
으로 바꿀 것이고, String의 정의를 없앨 것이다.
undef 다음 부터는 "String" class를 정의하는 겹치는 string class header가 오게 된다.</P
></DIV
></DIV
></DIV
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
SUMMARY="Footer navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A
HREF="downloadstring.html"
ACCESSKEY="P"
>&#51060;&#51204;</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="index.html"
ACCESSKEY="H"
>&#52376;&#51020;&#51004;&#47196;</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A
HREF="stringhfile.html"
ACCESSKEY="N"
>&#45796;&#51020;</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>String class 다운받기</TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
>&nbsp;</TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>String.h 파일</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>
}}}
