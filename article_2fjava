#title java

자바 스터디 페이지 입니다.

스터디를 위한 문서로 Tutorials & Code Camps를 선택했습니다. 이 문서는 [http://developer.java.sun.com/developer/onlineTraining/Programming/BasicJava1/index.html BasicJava1]에서 찾을 수 있습니다.
[[TableOfContents]]

=== 자바를 위한 컴퓨터 설정 === 
간다한 자바 프로그램의 작성과 테스트를 위해서 먼저 컴퓨터에 자바 플렛폼을 설치해야 한다. 

자바 플랫폼은 java.sun.com 웹사이트에서 자유롭게 받아서 설치할 수 있다. 자바2플랫폼은 윈도우즈 95/98/NT, Solaris, Linux등 대부분의 운영체제에 서치가능하다. 다운로드 페이지에는 각 운영체제에 따른 설치방법이 나와있으니 이를 참고하기 바란다.  

여기에서는 리눅스 환경에서 스터디를 진행하도록 한다. kernel 2.6.x, Java2를 기본환경으로 한다.    

==== 프로그램 작성 ====
그럼 텍스트 에디터를 이용해서 간단한 프로그램을 작성해보도록 하겠다. 처음 만들고자 하는 프로그램은 "Hello World"를 출력하는 프로그램으로 소스코드의 파일이름은 HelloWorld.java로 하겠다. 다음과 같은 내용으로 코딩한다음 저장하도록 하자.
{{{#!plain
class HelloWorld
{
    public static void main(String[] argv)
    {
        System.out.println("Hello World");
    }
}
}}}

==== 컴파일 하기 ====
인간의 언어로 만들어진 코드는 자바 VM이 이해할 수 있는 중간결과물로 변환시켜줘야 한다. 이 결과물은 자바 VM이 설치되어 있다면 어떤 운영체제에서도 재 컴파일등의 과정 없이 동일하게 실행될 수 있다. 이렇게 자바 VM이 해석할 수 있는 컴파일된 결과물을 바이트코드(bytecode)라고 한다. 바이트코드는 플랫폼(운영체제)독립적으로 사용할 수 있다.   

컴파일은 javac라는 전용 컴파일러를 통해서 가능하며, 다음과 같이 간단하다.
{{{#!plain
# javac HelloWorld.java 
}}}
 * 자바플랫폼의 효율적인 활용을 위해서는 몇가지 환경을 설정해줘야 하는데, 그 중 가장중요한건 class 경로를 지정하는 것이다. class 경로는 java관련 명령어에서 '''-classpath'''를 이용해서 지정할 수있다. 이게 귀찮다면 환경변수를 변경하면된다. 환경변수 이름은 '''CLASSPATH'''이다.     

==== 프로그램의 intepreting 와 실행 ====
컴파일을 성공적으로 마쳤다면 자바 bytecode가 생성된다. 이 bytecode는 자바 VM에 의해서 실행되거나 해석될수 있으며, 필요하다면 자바 VM이 내장된 IE, Mozilla등의 웹브라우저에서 애플릿 형태로 수행될 수도 있다. 

리눅스에서 자바 bytecode를 해석하기 위해서 보통 '''java'''명령어를 이용한다. 다음과 같이 실행시킬 수 있다.
{{{#!plain
# java -classpath ./ HelloWorld 
}}}
여기에서는 클래스 경로를 위해서 classpath 옵션을 사용하고 있는데, 환경변수를 지정해 두었다면 생략해도 관계 없다. 성공적으로 실행되었다면 다음과 같은 결과를 확인할 수 있을 것이다. 
{{{#!plain
Hello World
}}}

==== 컴파일러와 Interpreter 문제의 해결 ====
만약 컴파일하고 실행시키는데 문제가 발생했다면 [http://java.sun.com/docs/books/tutorial/getStarted/problems/index.html Common Compiler and Interpreter Problems]를 참고하기 바란다.

==== 주석 ====
===== C/C++ 스타일 주석 =====
주석의 필요성에 대해선 굳이 설명하지 않도록 하겠다. 자바의 주석은 C와 매우 비슷하다. 더블 슬랫쉬 (//)와 (/* */)를 모두 사용할 수 있는데, 어느 것을 사용할런지는 순전히 개발자의 기호에 달린 문제라고 생각된다. 일반적으로 // 는 C++스타일 /* */는 C스타일로 사용되어진다. 
===== Doc 주석 =====
/* */주석의 확장된 형태로 사용할 수 있는 Doc 스타일 주석이 있다. 이것은 (/** */)형태로 사용할 수 있는데, 이러한 형식으로 작성될 경우 '''javadoc'''이라는 도구에 의해서 소스코드 자체를 (API)문서화 하는데 유용하게 사용할 수 있다.  
{{{#!plain
/** This Class display a text string at
*   the console
*/
class HelloWorld
{
    public static void main(String[] argv)
    {
        System.out.println("Hello World");
    }
}
}}}
우리가 작성한 코드는 워낙에나 간단하기 때문에 굳이 API 문서를 생성해야할 필요가 없지만, 좀 큰규모의 복잡한 코드를 만들경우 표준적인 문서화가 필요할 것이다. 많은 경우 소스코드와 API문서를 별도로 유지하는 경우가 많은데, 코드와 문서과 분리되어서 제대로 API문서를 유지하기가 힘들어진다. Doc 주석을 따르게 되면 이러한 문제를 어느정도 해결할 수 있다.    

javadoc에 대한 문서는 [http://java.sun.com/j2se/javadoc/index.jsp javadoc 홈페이지]를 참고하기 바란다. 

== 애플리케이션 만들기  ==
자바로 만들어지는 모든 프로그램은 클래스를 기본 구성요소로 한다. 모든 클래스들은 구조가 같고 일반적인 요소들을 공유하게 되므로, 만들어진 자바 프로그램들은 서로 비슷한 모습을 가지게 된다. 

=== 애플리케이션 구조체와 요소들 ===
애플리케이션은 클래스로 부터 생성된다. 이 클래스는 파스칼의 RECORD와 C의 구조체와 매우 비슷하며, 필드 안에 데이터를 다루게 된다. 필드는 서로 다룬 타입을 다룰 수 있게 된다. 예를 들어 하나의 필드에 string, 다른 필드는 interget 다른 필드에는 floating point등의 타입을 가질 수 있다. class와 record, 구조체와의 가장 큰 차이점이라면 데이터뿐만 아니라 데이터를 처리하기 위한 메서도드 함께 정의될 수 있다는 점일 것이다. 

예를 들어 문자열을 다루는 간단한 클래스가 있다고 한다면, 이 클래스는 문자열을 저장하기 위한 데이터와 이 데이터를 다루기 위한 메서드, 즉 문자열 설정, 화면으로의 출력, 다른 클래스로의 전송과 같은 메서드를 가지게 된다. 데이터를 다루는 메서드를 특별히 accessor 메서드라고 부른다.

모든 애플리케이션은 main 메서드를 가진 클래스를 필요로 한다. 이 클래스는 프로그램의 진입점(entry point)가 되며, 클래스 이름은 애플리케이션을 실행시키기 위해서 자바 인터프리터에 전달된다. 

{{{#!html
<img src=http://www.joinc.co.kr/albums/album01/ajq.png>

<img src=http://www.joinc.co.kr/albums/album01/ajr.png>

}}}

main 메서드에 있는 코드는 프로그램 시작시 가장 먼저 실행된다.

아래의 코드는 1장에서 다루었던 예제 프로그램이다. 여기에는 필드와 accessor 메서드를 가지고 있지 않으며, 하나의 main 메서드만을 가지고 있을 뿐이다. 
{{{#!plain
class ExampleProgram
{
	public static void main(String[] args)
	{
		System.out.println("Im a Simple Program");
	}	
}
}}}

''public static void'' 키워드는 자바 가상 머신(JVM)인터프리터에게 프로그램의 main 메서드를 어떤 인스턴스의 생성없이(static) 실행하며(public), 프로그램이 끝났을 때 JVM에게 어떠한 값도 리턴하지 않을(void)것임을 알려준다. 

여기에서 인스턴스란 클래스를 실행객체를 말한다. 어떤 데이터를 다루는 실질적인 일을 하기 위해서는 인스턴스를 생성시켜야 한다. 아래는 ExampleProgram 클래스로 부터 FirstInstance, SecondInstance, ThirdInstance를 생성시킨 그림이다.    

{{{#!html
<img src=http://www.joinc.co.kr/albums/album01/ajs.png>
}}}

main 메서드는 static임으로 JVM인터프리터가 인스턴스의 생성없이 바로 시작된다. 

main 메서드는 ExampleProgram 클래스로 부터 어떠한 인스턴스도 생성하지(생성할 필요가 없어서) 않고 있다. ExampleProgram은 단지 System.out.println을 호출하고 있다. java.lang.System클래스는 PrintStream타입을 가지는 out 필드를 가지고 있으며, 우리는 PrintStream클래스의 print (ln)메서드를 불러와서 사용하게 된다. 

=== 필드와 메서드 === 
LessonTwoA.java 프로그램은 문자열을 저장하기 위한 static text 필드를 가지고 있다. 이 텍스트 필드는 LessonTwoA 클래스의 어떠한 인스턴스의 생성없이 out.println에 의해서 곧바로 호출된다.  
{{{#!plain
class LessonTwoA
{
	static String text="Im a Simple program";
	public static void main(String[] args)
	{
		System.out.println(text);
	}
}
}}}
LessonTwoB.java 프로그램과 LessonTwoC.java 프로그램은 좀더 복잡하다. 이들은 문자를 출력하는 getText 메서드를 포함하고 있다.  

LessonTwoB.java 프로그램은 static text 필드와 non-static getText 메서드를 가지고 있다. None-static 메서드와 필드들은 메서드와 필드의 인스턴트로 부터 호출 된다. 다음 예제는 static text 필드와 non-static 인스턴스 메서드인 getStaticText를 포함하고 있다. 
{{{#!plain
class LessonTwoB {

   String text = "I'm a Simple Program";
   static String text2 = "I'm static text";

   String getText(){
        return text;
   }

   String getStaticText(){
        return text2; 
   }

   public static void main(String[] args){
        LessonTwoB progInstance = new LessonTwoB();
        String retrievedText = progInstance.getText();
        String retrievedStaticText = 
                 progInstance.getStaticText(); 
        System.out.println(retrievedText);
        System.out.println(retrievedStaticText);
   }
}
}}}

=== Applets의 생성 ===
클래스로 부터 생성된다는 점에서 애플리케이션과 애플릿은 서로 같다. 그러나 애플릿은 main 메서드를 가지지 않으며 대신 애플릿을 만들기 위해 정해진 메서드를 사용해서 제작한다.   

==== 애플릿 ==== 
다음은 간단한 애플릿이며, 애플릿이 어떤 방식으로 작성되며, 실행시 어떤 모습을 가지는지를 보여준다.   

{{{#!html
<img src=http://www.joinc.co.kr/albums/album01/ajx.png>
}}}

{{{#!plain
import java.applet.Applet;
import java.awt.Graphics;
import java.awt.Color;

public class SimpleApplet extends Applet{

  String text = "I'm a simple applet";

  public void init() {
        text = "I'm a simple applet";
        setBackground(Color.cyan);
  }
  public void start() {
        System.out.println("starting...");
  }
  public void stop() {
        System.out.println("stopping...");
  }
  public void destroy() {
        System.out.println("preparing to unload...");
  }
  public void paint(Graphics g){
        System.out.println("Paint");
        g.setColor(Color.blue);
        g.drawRect(0, 0,
                   getSize().width -1,
                   getSize().height -1);
        g.setColor(Color.red);
        g.drawString(text, 15, 25);
  }
}
}}}

===== Applet의 실행 =====
애플릿은 단독으로 실행될 수 없으며 HTML 코드에 임베디드 되어서 실행 될 수 있다. 
{{{#!plain
<HTML>
 <BODY>
 <APPLET CODE=SimpleApplet.class WIDTH=200 HEIGHT=100>
 </APPLET>
 </BODY>
 </HTML>
}}}
애플릿의 실행여부를 제대로 확인하기 위해서는 웹브라우저를 이용해서 읽어야 겠지만 appletviewr 프로그램을 이용하면 간단하게 확인할 수 있다. 
{{{#!plain
# appletviewer simpleapplet.html
}}}
Java2 API를 내장한 브라우저의 경우 애플릿을 제대로 실행시킬려면 반드시 Java 2 플랫폼을 지원할 수 있어야 한다. 만약 브라우저가 Java2 플랫폼을 지원하지 않는다면 appletviewer을 이용해서 실행시키거나 Java 플러그인을 설치해야 한다.   

==== 애플릿의 구조와 요소들 ==== 
Java API의 Applet클래스를 이용하면 애플릿의 작동과 디자인등에 관한 제어를 할 수 있다. 또한 Panel과 같은 GUI 컴포넌트도 (완전하진 않지만) 제공을 한다. 애플릿을 생성하기 위해서는 Applet 클래스에서 확장된 클래스를 만들고 필요한 코드를 입력하면 된다. 

애플릿은 보통 Panel 위에 입력버튼, 스크롤바, text area등의 GUI 컴포넌트의 조합으로 이루어진다.  
 
모든 클래스는 다른 클래스로 부터 확장된 형태로 존재한다. 다른 클래스로 부터 확장된다는 것은 새로운 클래스를 만들때 다른 클래스에 이미 정의되어 있는 필드와 메서드를 그대로 이용하거나 확장할 수 있음을 의미한다. 이렇게 확장된 상위 클래스를 부모 클래스라고 하며 확장받아서 생성된 클래서를 자식 클래스라고 한다. 

SimpleApplet 클래스는 Applet 클래스로 부터 확장된다. Applet는 Container 로부터 확장되고 Container 클래스는 Object 클래스로 부터 확장된다. Object 클래스는 모든 자바 API class의 부모 클래스가 된다. 

위의 애플릿 예제에서 Applet 클래스는 init, start, stop, destory, paint등을 사용하고 있다. 


=== 자바의 데이터 전달 방식 ===
C, C++을 하다가 자바를 하게되면 가장 헷갈리기도 하고 중요하기도 한 개념이 바로 call by value, call by reference 이다.
지금도 꽤나 자바 하신분들끼리도 여기에 대한 논란이 많으며 정확하게 개념을 못 잡고 계신분들도 많다. Call by reference는 또한 그 기능적 의미와 명시적 의미 때문에 논란의 불씨가 되기도 한다.
일단 자바에서는 primitive type 데이터는 모두 value로 저장된다. 즉, int, long, ... 이런것들이다.
int a; 라하면 int* a가 아니고 int a인것이다. C와 똑같다.
그리고 나머지 Object형은 모두 내부적으론 포인터다. 물론 외적인 포인터 개념은 자바에 없다. (뒤에 얘기하겠지만 이것때문에 call by reference가 자바엔 없다는 얘기가된다)
즉, Vector a; 는 Vector* a; 나 마찬가지이다. 그래서 자바는 C와 다르게 Vector a; if (a == null) 이게 성립되는것이다. 왜냐면 a는 인스턴스가 아니고 아직 메모리할당 받지않은 포인터이므로...
또한 당연히 a = new Vector(); 이렇게 new해줘야 사용할수있다. 그러나 겉으론 Vector a 이며 멤버에 엑세스도 a. 이렇게 엑세스한다. 그러나 사실 . 은 -> 이거라고 보면된다.
C++에선 new한것에 대해 매우 주도면밀하게 delete해줘야 한다. 허나 자바엔 delete가 없다. 그럼 언제 메모리가 해제되느냐. Garbage Collection에 의해서 그 메모리를 참조하는것이 전혀 없을때 알아서 해제된다. 자바의 메모리 특징을 번호를 붙여가면서 보자.

모든 인자는 Vector 클래스로 하겠으며 Vector a 는 Vector* a 이며 a.data 는 a->data 란걸 상기하라. Vector a = new Vector() 된걸로 가정한다.

1. new는 있되 delete는 없다.

인자로 new된 a를 넘겨주고 받은쪽에서 Vector b = a; 하면 이곳을 참조하는 객체가 2개가 된다. 이쪽에서 객체의 범위가 끝나면 참조자는 1개가 될것이고 저쪽에서도 범위가 끝나서 사용안하게 되면 0이 될것이다. 그럼 적정시점에서 garbage collection이 일어난다. 여하튼 그 객체메모리를 참조하고 있는곳이 하나도 없을때 자동으로 GC가 일어나며 그때까진 그 객체가 로컬범위던 어떻든 상관없이 남아있게된다(new이므로 당연한것이 아닌가. C에서도 new된것은 delete하기전까진 남아있다는것을 상기하라) 이것을 볼때 GC의 가장 중요한 기능이 Thread safe하게 모든 인스턴스를 참조하고 있는 카운터를 계속 추적하고 있다가 그것이 0이 될때 삭제하는것이다.

2. 포인터 개념이므로 저쪽에서 값을 바꾸면 이쪽에서도 바꿔진다.

인자로 new된 a를 넘겨주고 저쪽에서 a.data = 6; 이런식으로 값을 넣으면 이쪽에서도 그 바뀐게 적용된다 (포인터이므로,, 같은 주소의 객체의 멤버를 바&#45031;으므로 당연히 바뀌는것이다). 때문에 간혹 참조식으로 객체를 사용하고 싶지않고 복사시켜 사용하고 싶을땐 모든 객체가 가지고 있는 clone() 메소드를 이용하여 복사하여야 한다.

3. primitive type 은 call by value이다.

int형 인자같은것은 그냥 값으로 넘어간다 int* 가 아니다. 그러므로 때론 C에서의 int*와 같이 변수주소값을 넘겨서 어떤값을 받고싶어도 그냥은 안된다. 명시적인 포인터 사용은 없으므로. 대신 Integer같은 integer형 객체를 사용하여도되고(객체는 포인터 방식이므로) 아니면 객체속에 멤버변수를 넣어서 객체를 넘겨도 될것이다.

4. String 같은것에 착각하지마라

이쪽에서 String a = "abc"; 하고 a를 인자로 넘겼다치자. 저쪽에서 인자로 받은 b에서 b = "123"; 한다고 해서 이쪽의 a가 "123"이 되지 않는다. 어? 포인터식이라더니? 하면 안된다. "xxx"하는 자체가 새로운 메모리에 xxx를 생성하고 그 메모리주소를 새로 가리키고 있는것이다. 즉 인자로 받은 b가 첨엔 a를 가리키고 잇었지만 b = "123"할때 "123"이 새로운 주소공간에 자리잡고 그곳을 가리키고 잇는것이다.

5. ** 는 없다.

모든 객체는 *(포인터) 형이다. 그러나 명시적인 * 사용은 없다. 고로 ** 이게 나올수는 없다. 그러므로 이쪽에서 객체주소값을 저장하고 있는 변수를 넘겨서 저쪽에서 다른 객체를 가리키게 만들수 없다는것이다. 
 C에선 당연히 된다. **이렇게 2개써서.. 또한 C++처럼 Vector a; 자체가 Vector인스턴스가 된다면 * 이거 한개로도 원하는 결과를 낳을수 있다. 허나 자바에선 모든 객체는 * 이며 & 이것도 없다. 바로 여기에서 call by reference의 혼동이 오는것이다.

call by refercnce의 기능적인 측면으로 본다면 자바는 call by reference가 된다.
즉 객체는 다 포인터로 넘어가므로 저쪽에서 이쪽 객체의 멤버변수값을 바꿀수가 있으니까. 허나 사실 자바에선 이쪽 변수 저쪽 변수 개념이 없다고 보면되겟다. 전부 new되고 GC에서 알아서 처리되므로.. 여튼 이런 기능때문에 call by reference가 된다고들 생각한다. 요런 기능에서는 맞다고 할 수 있겠다.

call by reference의 사전적 의미로서 본다면 자바는 call by reference가 안된다.
이는 선 사이트의 문서에도 나와있다고 누군가 얘기는 했더라만서도. 여기서의 call by reference의 의미는 저쪽에 넘기고 나서 , 저쪽에서 이쪽 객체가 가리키는 곳 자체를 변화시킬 수 있는것을 의미한다(고 하더라) 즉 ** 의 사용이라고 볼 수 있겠다. 그건 앞에서도 얘기한것 처럼 안되므로 이런 사전적 의미에선 자바는 call by reference가 아니고 모두 call by value이다. 여기서 객체의 주소값을 value로 넘긴다는 의미는 객체를 value로 넘긴다는게 아니라 주소값 자체를 value로 넘긴다는 의미이다. 주소값을 담고있는 변수의 주소값을 넘기는것(call by reference)는 아니란것이다. 한국말이지만 어렵다...


6. 자바에서 객체멤버의 참조는 타입에 의존하지 않고 메모리를 참조한다.

C++에선 속도를 위해 다운캐스팅된 객체의 오버로딩된 메소드를 호출하더라도 ISOF 클래스의 타입을 따라서 super클래스의 메소드를 호출하게 된다. 이걸 실제 메모리의 객체형을 참조하게 할려면 virtual을 쓴다. 물론 virtual 된 메소드들은 따로 테이블을 관리하게 되며 약간의 오버헤드가 있다. 그러나 자바는 모든 메소드가 C++의 virtual처럼 동작한다. 자바에서 C로 포팅을 하게된다면 다운캐스팅된 객체의 오버로딩된 메소드가 있을시엔 virtual로 선언해야한다는것을 잊지말자. 간단한 예제를 아래 보인다.

<C++>

class A {
public:
void prn() { cout << "A" << endl; }
};

class B : public A {
public:
void prn() { cout << "B" << endl; }
};

int main() {
A* a = new A;
B* b = new B;
a = b;
a->prn();
}

출력 : A

<Java>

public class A {
public void prn() { System.out.println("A"); }
}

public class B extends A {
public void prn() { System.out.println("B"); }
}

public class Main {
public static void main() {
A a = new A();
B b = new B();
a = b;
a.prn();
}
}

출력 : B


