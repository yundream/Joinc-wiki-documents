[[TableOfContents]]

== 알고 싶은 프로그래밍 세계 ==

'''작성자:''' mwyun([멍])

=== 소스 파일 ===

==== 예 제 ====

{{{#!plain
#include <stdio.h>

int main(int argc, char *argv[])
{
  printf("Hello, World!\n");

	return 0;
}
}}}

==== 구 성 ====

'''원시코드'''

프로그래머에 의해 텍스트 편집기나 비주얼 개발도구로 작성된 프로그램 문장들로 구성되어 있다.

'''라인'''

작성한 코드들이 이루어진 한 문장(대부분 한 문장이 한 라인이 된다)

다음 소스 화일은 총 8라인으로 구성되어 있다.
{{{#!plain
라인              코드
-------------------------------------
001: #include <stdio.h>
002:
003: int main(int argc, char *argv[])
004: {
005:  printf("Hello, World!\n");
006:
007:	return 0;
008: }
-------------------------------------
}}}

다음과 같이 한 라인에 여러 문장을 기술할 수도 있다.
{{{#!plain
if (flag) printf("true\n"); else printf("false\n");
}}}

다음과 같이 여러 라인에 여러 문장을 기술할 수도 있다.
{{{#!plain
if (flag) 
	printf("true\n"); 
else 
	printf("false\n");
}}}


'''블록'''

일련된 코드들의 집합
보통 프로시저나 함수, if(비교문), for, while, do-while같은 반복문 등에서 블록을 사용한다.
또는 몸체(body)라는 표현도 사용한다.

'''main 함수 & for문 블럭 표시 예'''
{{{#!plain
#include <stdio.h>

int main(int argc, char *argv[])
{ // <- 메인 함수 블럭 시작
  int i;
	int sum;

	for (sum = 0, i = 1; i <= 10; i++)
	{ // <- for문 블럭 시작
		sum += i;
	} // <- for문 블럭 끝
	printf("sum=%d\n", sum);

	return 0;
} // <- 메인 함수 블럭 끝
}}}

'''함수와 while문 블럭 표시 예'''

{{{#!plain
#include <stdio.h>

int sum(int n)
{ // <- sum 함수 블럭 시작
  int sum;
  sum = 0;
	while (i <= n)
	{ // <- while 문 블럭 시작
    sum += s;
		i++;
	} // <- while 문 블럭 끝

	return sum;
} // <- sum 함수 블럭 끝

int main(int argc, char *argv[])
{ // <- main 함수 블럭 시작
	printf("sum=%d\n", sum(10));
	return 0;
} // <- main 함수 블럭 끝
}}}

'''소스 파일'''
원시코드들을 저장한 파일

=== 프로시저 & 함수 & 서브루틴 ===

==== 정의 ====

'''프로시저'''

일반적인 의미의 프로시저란, 어떤 행동을 수행하기 위한 일련의 작업 순서를 말한다.

프로시저(procedure)는 루틴(routine)이나, 서브루틴(subroutime) 및 함수(function)와 같은 뜻이다. 

하나의 프로시저는 특정 작업을 수행하기 위한 프로그램의 일부이다.

'''서브루틴'''

컴퓨터 프로그래밍에서 루틴과 서브 루틴은 어떤 프로그램이 실행될 때 불려지거나 반복해서 사용되도록 만들어진 일련의 코드들을 지칭하는 용어이다.

'''함수'''

가장 일반적인 의미의 function은 주어진 실체가 하는 일, 즉 "기능"을 뜻한다.

프로그래밍에서 함수는 명확한 서비스를 수행하도록 지명된 하나의 프로시저이다.

수학에서, 함수는 한 셋의 각 요소들이 다른 쪽 셋 내에 할당되는 요소를 하나씩 가지는 두 쌍의 값들 사이의 관계이다.

스스로 값을 선택할 수 있는 요소는 독립변수이고, 그와 관련이 있는 요소는 종속변수이다.

==== C/C++ ====
프로시저: 리턴값이 없는 void 타입의 함수

함수: 리턴값이 있는 함수

C/C++은 프로그램의 구성이 함수로 이루어졌는데 프로시저라고 한다면 리턴값이 없는 void형 타입의 함수를 말하기도 한다.

그러나 함수라는 용어를 더 많이 사용한다.

{{{#!plain
#include <stdio.h>

int Sum(int n) /* int형 값을 리턴한다. */
{ 
  int sum;
  sum = 0;
	while (i <= n)
	{ 
    sum += s;
		i++;
	} 

	return sum; 
} 

void PrintSum() /* void형으로 리턴타입을 쓰는 경우 리턴값이 없다는 의미 */
{
	printf("sum=%d\n", Sum(10));
	return; /* 단지 return 키워드만 쓴다. 또는 생략해도 된다. */
}

int main(int argc, char *argv[])
{ 
  /* Sum 함수 호출 후 결과 출력 */
	printf("sum=%d\n", Sum(10));

	/* PrintSum 함수 호출 */
  PrintSum();

	return 0;
} 
}}}

==== Pascal ====

프로시저: 리턴값이 없는 프로그램 스텝(문장들)의 모임

함수: 리턴값이 있는 프로그램 스텝의 모임(함수)

{{{#!plain
program ex; { 프로그램 이름 }

function Sum(n: Integer): Integer;
var
	i: Integer;
begin
	Result := 0; { Result는 특수하게 리턴값을 저장할 수 있다. }
	for i := 1 to n do
		Result := Result + i;
end;

procedure PrintSum;
begin
	WriteLn('Sum=', Sum(10));
end;

begin { main }
	WriteLn('Sum=', Sum(10));  { Sum 함수 호출 후 결과 출력 }
	PrintSum; { PrintSum 프로시저 호출 }
end.
}}}


==== Visual Basic ====

'''프로시저(MSDN 도움말 참조)'''

단위로 실행되는 명명된 문의 나열을 의미합니다.
예를 들면 Function, Property, Sub가 프로시저의 형식입니다.
프로시저의 이름은 모듈 수준에서 정의됩니다.
프로시저는 다른 프로시저 내에서 중첩될 수 없습니다.

'''프로시저 형식'''

Function: 리턴값이 있는 프로그램 스텝의 모임

Sub: 리턴값이 없는 프로그램 스텝의 모임

{{{#!plain
Function Sum(n As Integer) As Integer 'Function 프로시저 => Integer값을 리턴한다.
	Dim i As Integer
	Sum = 0
	For i = 1 To n
    	Sum = Sum + i 'Function 프로시저는 프로시저 이름에 리턴값을 저장한다.
	Next i
End Function

Private Sub PrintSum() 'Sub 프로시저 => 리턴값이 없다.
    Text2.Text = Str(Sum(10)) 'Sum 프로시저 호출 결과를 Text Box에 출력
End Sub

Private Sub Command1_Click()
    Text1.Text = Str(Sum(10)) 
End Sub

Private Sub Command2_Click()
    Call PrintSum 'PrintSum 프로시저 호출(리턴값이 없는 프로시저 호출, 보통 Call을 붙여서 쓰기도 한다)
End Sub
}}}
 
 * Visual Basic은 QBasic을 모태로 해서 발전시켰으며, 위의 프로시저 형식은 QBasic에서 이미 지원하였다.

=== 프로그래밍 영역 ===
==== 시스템 프로그래밍 ====
여러가지 의견이 있을 수 있다. 어셈블리 수준에서 실제 시스템의 장치, 메모리, 입출력을 제어할 수 있어야 하는 의견도 있으나, 대체로 시스템과 운영체제의 여러가지 특징들인 '''IPC''','''signal''','''process''','''thread''','''I/O''','''terminal''','''각종 파일시스템'''을 시스템콜을 이용해서 제어한다면으로 영역을 확대한다. 윈도우에서는 Win32 API를 활용하여 시스템 프로그래밍을 할 수 있다.

==== 네트워크 프로그래밍 ====
네트워크 프로그래밍의 경우 대부분 시스템 프로그래밍에 대한 상당한 지식을 필요로 하며, 두가지를 겸하는 경우가 많기 때문에 굳이 나눌필요가 없는 경우가 많다.  보통 시스템과 네트&#50916; 프로그래밍을 같이 접목하여 맞물려 돌아가는 프로그램을 개발하는 경우가 대부분이라 네트워크 프로그래밍을 (제대로)하려면 시스템 프로그래밍에 대한 상당한 이해가 필수적이다.

네트워크나 데이터 통신, TCP/IP에 대해서 충분히 이해를 하고 있어야 한다. 특히 '''socket'''에 대해서는 자유자재로 응용이 가능해야 한다. '''OSI7'''계층중 인터넷계층 이상을 다루게 된다. 

==== 모바일 프로그래밍 ====
모바일기기란건 '휴대성, 소형'이란 의미를 내포하고 있으며, 이동이 용이한 기기들을 말한다. 대표적으로 핸드폰, PDA등을 말한다고 봐도 되겠다. (핸드폰+PDA인 스마트폰도 마찬가지이겠다) PDA프로그래밍은 휴대폰 프로그래밍에 비해서 그 범위와 가능성이 보다 더 PC에 가깝다고도 볼 수 있겠다. 

MS의 pocket pc , 팜의 palm, 셀빅의 celvic(팜기반), 리눅스 등의 여러 PDA 운영체제가 있다고 볼 수 있겠다. 프로그래밍은 상기 운영체제에서 지원되는 언어와 라이버러리를 사용하면 된다. 주로 C, C++ 계열이라고 하겠다. 

휴대폰쪽을 보자. 휴대폰은 크게 펌웨어와 무선인터넷플랫폼으로 볼 수 있는데. 펌웨어는 휴대폰 기기 자체를 운용하는 필요한 운영체제라고 볼 수 있으며 무선인터넷플랫폼은 최근 그 시장이 폭발적으로 성장하고 있는 다운로드형 컨텐츠를 실행할 수 있는 환경이라고 보면 된다. 펌웨어는 대부분 C로 개발되어있으며 전자렌지의 그것과도 같이 휴대폰이라는 기계를 구동하는 low level 한 소프트웨어라고 보면 되겠다. 

펌웨어단의 프로그래밍으로는 Wap browser, Me browser 등을 포함하여 전반적인 휴대폰의 기능을 아우른다고 볼 수 있다. 

무선인터넷플랫폼은 현재 이통사별로 탑재된 것들이 모두 다르다. 무선인터넷플랫폼에서 구동되는 컨텐츠는 거기에서 제공되는 SDK를 이용해서 개발해야 하는데 SKT는 GVM(C), GNEX(C), SK-VM (J2ME + SK api) 등이 있으며 KTF 는 퀄컴의 BREW(C)를, LGT는 자바스테이션 (J2ME-MIDP) 을 탑재하고 있으며, 이러한 환경때문에 하나의 컨텐츠를 런칭하는데도 3가지 버젼으로 개발해야 한다는 합리적이지 못한점 때문에 한국무선인터넷포럼에서 주도하여 WIPI를 개발하게 되었다. 여기서 BREW 와 WIPI 는 소스를 시스템 바이너리로 컴파일하여 실행하는 방식으로 속도향상을 꾀하고 있으며 다른것들은 VM(Virtual Machine) 층으로서 상대적으로 실행속도는 조금 느리나 이기종간에 VM만 같으면 한번 컴파일된 바이트코드를 사용할 수 있다는 장점이 있다고 하겠다.(일반적으로 표현할땐 무선인터넷플랫폼을 망라하여 VM이라고 표현하기도 한다)
WIPI는 C와 자바 2가지를 다 지원하는데 규격(스펙)과 무선인터넷 플랫폼 소프트웨어 2가지를 다 포함한다. 원래 정통부에서 국내표준으로 지정, 나아가 세계 표준으로 밀려고 했던것은 이 규격과 소프트웨어 2가지 다 이다. 그러나 이번에 한미통상 협의과정에서 브루의 한국시장 퇴출을 막기위한 미국의 압력때문에 명분을 주고 실리를 취했다는 평가를 받는, '규격만 표준' 합의안을 도출하게 되었다. 

그러므로 차후 한국 휴대폰 무선인터넷플랫폼시장은 위피 규격을 만족하는 플랫폼이면 이통사의 선택에 따라 어느것이던지 탑재될 수 있으며 따라서 위피 온 브루를 만들어 여전히 한국시장 및 세계시장을 석권하려는 퀄컴에게도 일말의 가능성은 남겨두고 있다고 볼 수 있다. 그러나 각 이통사별로 독자적인 위피 플랫폼을 개발하고 있으며 GVM, GNEX등으로 국내 최대의 VM 점유율을 보이고 있는 신지소프트, SK-VM을 개발했던 XCE등도 기존의 기술을 바탕으로 위피 규격을 덧씌우고 있으므로 국내 이통사에서 굳이 외국 로열티를 많이 지불해가면서 퀄컴의 위피 온 블루를 선택할 이유는 점차 줄어들지 않을까 생각되므로 종래에는 퀄컴의 브루는 퇴출될 가능성도 있다고 보겠다.

위피의 자바기술은 기존 자바기술보다 한단계 발전하여 개발은 자바로, 실행은 바이너리 수준에서 이루어지게 된다. 즉, 각 이통사별로 자바 위피 프로그램을 각 휴대폰의 바이너리코드로 생성해내는 컴파일러 내지는 서버를 준비하게 되며, 이를 통해서 OS independent 한 자바의 특성은 살리고 성능은 C와 같은 수준으로 맞추는게 가능해지는것이다. 실제 이 변환과정은 자바 바이트코드를 C코드로 변환한 후 이 C코드를 컴파일하는 방식으로 진행되게 되며 이러한것을 COD(Compile on demand) 라 명명하고 있다. 그러나 향후 유비쿼터스 시대를 맞이하여 휴대폰간의 컨텐츠이동이 자유로울시에 하드웨어가 다르다면 재컴파일을 해야 사용할 수 있으므로 VM의 장점을 버린것은 안타깝다고 볼 수 도 있는데 원래 WIPI 개발초기의 기획은 VM으로 하되 성능은 바이너리 수준에 근접시키는 방법을 - 자바의 VM도 Hotspot같은 신기술을 이용하여 실행타임에 필요시에 바이너리코드도 생성하여 실행함으로서 초기에 비해 비약적인 속도향상을 가져오고 있다 - 도입할려고 하였으나 시간을 비롯한 여러가지 현실적인 제약때문에 COD방식으로 개발하게 되었다 하니, 위피가 버젼업 되어감에 혹시 이러한 기술로 변환될지도 모를일이다.

여하튼, MS의 윈도우니 퀄컴의 CDMA니 하여 외국기술에 종속적인게 많던 IT시장에 자체기술로 개발된 위피가 국내시장 및 세계속으로 파고들지의 여부는 위피 컨텐츠의 활성화로 인한 성능과 효용성의 입증에 있다고 하겠다. 빠른시간에 국내 이통사들이 위피폰들을 많이 출시하고 많은 컨텐츠가 위피로 제공되기를 바래본다.

==== 응용 프로그래밍 ====
가장 광범위한 분야이며 현대적인 OS GUI 인터페이스를 고려하여 응용 프로그램을 개발한다.

리눅스에서는 Qt/Gtk를 기반으로 vi/Kdevelop/Glade로 주로 개발하며, 윈도우에서는 VC++/VB/Delphi 같은 비주얼 개발 도구로 주로 개발한다.

응용 프로그램 영역은 넓기 때문에 각기 요구하는 스킬도 다른게 사실이다.

OS같은 시스템 SW를 기반으로 응용 프로그램을 동작시키기 때문에 시스템 프로그래밍 외에 모든 분야를 응용 프로그래밍 분야라고 볼 수 있다.

==== 웹 프로그래밍 ====
웹프로그래밍은 수많은 언어와 많은 도구들을 필요로 하는 개발영역이며 주로 손이 많이 가는게 작업이다.

크게 웹클라이언트와 서버 프로그래밍으로 나누어지며, 경우에 따라서 높은 스킬을 원하는 부분도 있지만 대부분 쉽게 접근하여 개발할 수 있는 장점이 있다.

웹사이트는 성격상 항상 업그레이드 해야하므로 완전한 완성품이 아닌  베타 서비스 형태라고 볼수 있다.

===== 웹클라이언트 영역 =====

'''개발언어&툴'''

 1. HTML
 1. JavaScript 
 1. VB Script

주로 웹브라우저가 해석해서 실행하며 Applet이나 ActiveX, 플러그인 같은 독립적인 모듈도 실행가능하다. 

웹브라우저에서는 해당 모듈을 실행하기 위해 VM이나 DLL 등을 설치해서 웹브라우저의 기능을 확장시킨다.

===== 웹서버 영역 =====

웹서버의 모듈 또는 별도의 프로세스로 동작하며 웹클라이언트가 요청한 작업내용을 해석하여, DB 이용 및, 특정 CGI(12) 프로그램을 실행시켜서 요청
에 대한 작업을 수행하고 그 결과를 HTML 형식으로 재전송해주는 서비스 역할을 담당한다.

웹클라이어트와 웹서버의 동작은 전형적인 C/S 모델이 된다.

아파치에서 php는 공유 라이브러리 형태(모듈)로 붙어 있어서 아파치내에서 실행되지만, PERL은 CGI 형태로 실행하므로 별도의 프로세스가 생성되어 실행된다.

서버사이드 웹프로그래밍 언어&툴''

'''HTML(Hyper Text Markup Language)'''


'''ASP (active server page)'''

MS사에서 개발한 언어로서 WINDOW용에서 제작, 윈도우즈 플랫폼만을 지원하며 윈도우즈 환경의 윈도우2000서버의 iis(인터넷서비스관리자)나 윈도우98/ME의 pws(persenal web server)만을 지원한다.

사용언어로는 비쥬얼베이직이나 자바이며 OLE DB를 기반으로 하는 ADO를 이용한 연결로 MS SQL DB를 사용한다.

asp스크립트는 웹서버에서 실행되며 서버측스크립트이다. 또한 컴파일언어가 아니므로 명령을 직접 삽입해서 사용되며 안에 삽입해야 할 수도 있다. asp를 이용하는 것은 비용 지불이 없으나, asp로 개발된 웹서비스를 운영하는 OS는 비용을 지출해야 한다.

  * 지원 웹서버: IIS(Internet Information Server), PWS(Persenal Web Server)
  * 지원 OS: 윈도우 NT/W2K/2003, 윈도 98/ME
  * 지원 DBMS: MSSQL(ADO 이용), Oracle, DBC를 이용하면 다양한 DBMS도 사용가능
  * 확장자: .asp
  * 응용분야: 중소형쇼핑몰

'''PHP (hypertext preprocessor)'''

1994년 rasmus lerdorf라는 사람에 의해 처음으로 고안이 되었으며 자신의 개인홈페이지를 만들기 위해 사용된다. 그리고 현재 세계에서 가장 많이 사용하는 웹서버인 아파치웹서버에 모듈형태로 장착되어 쓰이면 있으며 유닉스뿐만 아니라 윈도우에서도 사용이 가능하고 또는 ASP와 마찬가지로 서버측스크립트이다.

ASP의 ODBC나 JSP의 JDBC와 같이 보조적인 메커니즘이 필요하지 않고 바로 함수를 통한 처리방식을 채택하고 있다. 즉 데이터베이스에 대한 공통 인터페이스를 가지고 있지 않고 모든 DB에 대해 자체 라이브러리를 지원한다. php의 최대 장점은 사이트에서 다운받아 무료로 사용할수 있고 대부분의 운영체제를 지원하며 데이타베이스를 다양하게 지원한다는데 있다. 

C와 문법이 매우 유사해서 기존의 C프로그래머가 쉽게 학습할 수 있다는 장점을 가진다. 또한 내부적으로 CGI규격을 지원하는 관계로 프로그래머가 CGI에 대한 지식 없이도 웹 서비스 프로그래밍을 할 수 있다는 장점을 가진다. 

  * 지원 웹서버: 아파치, IIS, ...
  * 지원 OS : 윈도우, 리눅스, 수 많은 OS
  * 지원 DBMS: oracle, sybase, msql, mysql, solid, odbc, postgresql, adabase D, filepro, velocis, infomix, dbase, unix dbm
  * 확장자: .php, .phtml, php4
  * 응용분야: 개인혹은중소형소핑몰

'''JSP (java server page)'''

JAVA를 기반으로 하는 SUN사에서 개발한 언어이며 주로 은행이나 중요회사에 많이 쓰이면 보완성이 뛰어나다. 하지만 코딩이 어렵고 ASP에 비해 코드량이 1.5배가량 된다는 단점을 가진다. 동작가능한 곳은 리눅스와 윈도우즈 모두 가능하며 데이타베이스도 다양하고 지원한다.

자바용 웹 서비스 플랫폼인 TOMCAT이나 RESIN, JSERV에서 서버를 운영할 수 있다. JVM(Java Visual Machine)이라는 프로그램이 운영체제위에 설치되면 기종을 가리지않고 사용할수 있기 때문에 코딩이 어려워도 요즘 많이 쓰인다.

  * 지원 웹서버: TOMCAT, RESIN
  * 지원 OS: 윈도우, 리눅스
  * 지원 DBMS: Oracle, JDBC를 이용하면 다양한 DBMS도 사용가능
  * 확장자: .jsp
  * 응용분햐: 은행및보안중요성회사, 대형쇼핑몰

===== 기 타 =====

'''XML, SGML'''

XML과 SGML은 웹과는 독립적인 도구로 표준적이고 확장이 유연한 데이터 처리를 위해서 만들어 졌지만, 특히 웹에서 데이터의 처리에 유용하게 사용될 수 있다.


'''웹디자인'''

  1. 에디터: 드림위버, 나모웹에디터
  1. 그래픽툴: 포토샵, 페인트샵, 플래쉬 MX

=== 모듈 & 유닛 ===

소프트웨어에서 모듈이란 한 프로그램의 일부분이다.

프로그램들은 하나이상의 독립적으로 개발된 모듈로 구성되며, 이들은 그 프로그램이 링크되기 이전까지는 결합되지 않는다.

또한, 모듈은 하나 이상의 루틴을 포함할 수 있다

특정 기능을 담당하는 프로시저나 함수 하나 일수도 있고, 하나 이상일 수 있으며, 소스 파일이 하나의 모듈이 될 수 있고, 여러 소스파일이 모듈이 될 수 있다.

Pascal에서 유닛(프로시저의 모임)은 하나의 소스 파일이 되며 모듈이 된다.

=== 라이브러리 ===

==== 정 의 ====

다른 프로그램들과 링크되기 위하여 존재하는, 하나 이상의 서브루틴이나 함수들이 저장된 파일들의 모음을 말하는데, 함께 링크될 수 있도록 보통 컴파일된 형태인 목적코드 형태로 존재한다.

라이브러리는 코드 재사용을 위해 조직화된 초창기 방법 중의 하나이며, 많은 다른 프로그램들에서 사용할 수 있도록, 운영체계나 소프트웨어 개발 환경제공자들에 의해 제공되는 경우가 많다.

라이브러리 내에 있는 루틴들은 두루 쓸 수 있는 범용일 수도 있지만, 3차원 애니메이션 그래픽 등과 같이 특별한 용도의 함수로 설계될 수도 있다.

라이브러리들은 사용자의 프로그램과 링크되어, 실행이 가능한 완전한 프로그램을 이룬다.

이러한 링크는 대개 정적 연결되지만, 시스템에 따라 동적으로 연결(DLL)될 수도 있다.

==== 라이브러리 종류 ====

  * 정적 라이브러리
   1. 컴파일시 정적으로 바인딩된다.
   1. 실행파일이 만들어지면 실행파일에 포함된다.
   1. 실행파일이 커지는 단점이 있지만 실행 속도는 빨라진다.
   1. 단지 Object 파일들로 구성되어 있다.                             

  * 공유 라이브러리
   1. 파일시에는 공유라이브러이에 대한 정보만을 가지고 있으면 실행시 동적으로 바인딩시킨다.
   1. 실행파일은 작아지는 장점이 있지만 실행 속도는 다소 늦어진다. 
   1. 프로그램 시작시 해당 공유 라이브러리를 로딩한다.
   1. 로더에 의해서 필요한 라이브러리들을 자동으로 로딩 또는 기존에 로딩된 라이브러리를 링크시킨다.
   1. 만약 공유 라이브러리 파일을 못찾은 경우 로딩 실패라는 메시지를 출력하고 프로그램을 동작을 멈춘다.
   1. 어떤 프로그램에서든 라이브러리가 한번 메모리에 로딩되면 공유해서 사용하므로 메모리를 절약한다.

  * 동적
   1. 공유라이브러리를 프로그램 시작시 로딩하지 않고 필요할 때 로딩해서 사용하고 언로딩시킬 수 있다.
   1. 메모리 절약이나 기능 확장등 장점이 있지만 동적으로 라이브러리를 로딩하기 위해 추가적인 코드를 작성해야 한다.


  * 윈도우 w2k이상의 버전에서는 같은 DLL 이라도 버전에 따라서 여러개 같은 DLL을 메모리에 로딩시킨다. 

==== 운영체제별 라이브러리 종류 ====

'''리눅스'''
 1. 정적라이브러리: libc.a, sqlite.a
 1. 공유/동적라이브러리: libc-2.3.2.so, ...


'''윈도우''' 
 1. 정적라이브러리: libc.lib, msvcrt.lib, mfc42.lib, sqlite.lib, ...
 1. 공유/동적라이브러리: msvcrt.dll, mfc42.dll, sqlite.dll, ...

=== SDK ===

==== 정 의 ====

'''SDK: Software Development Kit(소프트웨어 개발 도구)'''

컴퓨터 프로그래머들이 응용프로그램을 개발하는데 사용하는 일련의 프로그램들이다.

SDK에는 대체로, 비주얼 화면작성기, 편집기, 컴파일러, 링커, 라이브러리, API, 문서,  그리고 그 밖의 다른 유틸리티들이 포함된다.

이 용어는 주로 마이크로소프트, 썬마이크로시스템즈, 그리고 그 밖의 몇몇 회사들에 의해 사용된다.

간혹은 개발도구 프로그램이 없이 문서와 API가 들어있는 경우도 있다.

예) Microsoft Platform SDK

=== API ===

==== 정 의 ====

API는 Application Programming Interface의 줄임말이다.

응용프로그램을 만들기 위한 인터페이스이다.

이 것은 윈도나 포토샵등의 프로그램에서 자신의 프로그램 전용의 (윈도나 포토샵에 비해) 작은 프로그램을 만들수 있게 하기 위해서 라이브러리들을 제공하는데 그것을 인터페이스라고 부른다.

예) Win32 API, System Call


=== ToolKit ===

=== 참조 ===

 * 컴퓨터 용어 사전: http://www.terms.co.kr
 * MSDN: http://msdn.microsoft.com
 * NAVER 지식iN: http://www.naver.com
