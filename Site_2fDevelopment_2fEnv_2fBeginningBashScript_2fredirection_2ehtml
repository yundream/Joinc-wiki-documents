{{{#!html
<HTML
><HEAD
><TITLE
>리디렉션의 모든 것 </TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.76b+
"><LINK
REL="HOME"
TITLE="BASH 프로그래밍 입문 하우투"
HREF="index.html"><LINK
REL="PREVIOUS"
TITLE="아주 간단한 스크립트!! "
HREF="simplescript.html"><LINK
REL="NEXT"
TITLE="파이프(pipes) "
HREF="pipes.html"><META
http-equiv="Content-Type"
content="text/html; charset=euc-kr"></HEAD
><BODY
CLASS="SECT1"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="NAVHEADER"
><TABLE
SUMMARY="Header navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>BASH 프로그래밍 입문 하우투</TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A
HREF="simplescript.html"
ACCESSKEY="P"
>&#51060;&#51204;</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
></TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A
HREF="pipes.html"
ACCESSKEY="N"
>&#45796;&#51020;</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><DIV
CLASS="SECT1"
><H1
CLASS="SECT1"
><A
NAME="REDIRECTION"
></A
>3. 리디렉션의 모든 것</H1
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="AEN57"
></A
>3.1. 정의와 기본 설명</H2
><P
> 
stdin(표준 입력), stdout(표준 출력), stderr(표준 에러)라는 세 가지의 
파일 디스크립터가 있다. 파일 디스크립터가 무엇인지 일일히 설명하기는 
그렇고.... 간단하게 이해해 보자. 어떤 프로그램을 실행했을 때 
화면에 주루룩 하고 원하는 결과가 뜨는 것이 표준 출력이다. 
어떤 프로그램을 실행하기 위해 꼭 필요한 요소를 프로그램을 실행할 때 
같이 입력해 주는 것이 표준 입력이다. 이 정도만 알고 시작하면 될 것이다. </P
><P
> 
먼저 다음과 같은 내용을 간단히 실행해 보자. 백문이 불여일견, 백견이 불여일행인 법. ^^ </P
><P
></P
><OL
TYPE="1"
><LI
><P
> 표준 출력을 파일로 보내기 </P
></LI
><LI
><P
> 표준 에러를 파일로 보내기 </P
></LI
><LI
><P
> 표준 출력을 표준 에러로 보내기 </P
></LI
><LI
><P
> 표준 에러를 표준 출력으로 보내기 </P
></LI
><LI
><P
> 표준 에러와 표준 출력을 파일로 보내기 </P
></LI
><LI
><P
> 표준 에러와 표준 출력을 표준 출력으로 보내기</P
></LI
><LI
><P
> 표준 에러와 표준 출력을 표준 에러로 보내기 </P
></LI
></OL
><P
> 
먼저 간단히 말해두겠는데, 버퍼에 남아 있는 표준 출력이나 표준 에러를 화면에 출력해 보는 것은 아주 쉽지만, 그 시도와 동시에 내용이 날아간다는 점을 상기하자. </P
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="AEN77"
></A
>3.2. 예제 : 표준 출력을 파일로 보내기</H2
><P
> 
프로그램의 실행 결과를 파일에 바로 저장하는 방법이다. 이 방법은 언제 쓰면 좋으냐 하면.... 그렇다, 수치해석 숙제 할 때 줄줄이 에러값 나오는 것, 이 방법으로 하면 파일에 기록하는 코드 없이도, 화면 캡처 따위 하지 않아도 아주 간단하게 해결된다. ^^ </P
><P
> 
<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
> 
ls -l &#62; ls-l.txt </PRE
></TD
></TR
></TABLE
> </P
><P
> 
이 내용을 실행하고 나면, 화면에 'ls -l' 명령의 실행 결과가 출력되는 대신 'ls-l.txt'라는 이름의 파일이 생긴다. 이 파일을 열어 보면 원래 'ls -l' 을 실행했을 때의 결과가 그대로 저장되어 있다. 이런 이름의 파일이 원래 있었다면, 파일의 앞부분에 그대로 
출력 내용이 덮어 씌워져 버리니 주의하자. </P
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="AEN83"
></A
>3.3. 예제 : 표준 에러를 파일로 보내기</H2
><P
> 
방법은 마찬가지이다. 이 경우에는 에러 메시지를 파일에 저장하는 것 뿐이다. 역시 같은 방법으로 다음과 같이 해 보자. </P
><P
> 
<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
> 
grep da * 2&#62; grep-errors.txt </PRE
></TD
></TR
></TABLE
> </P
><P
> 
앞서 표준 출력을 파일로 보냈을 때와 마찬가지로, 'grep-errors.txt' 파일이 만들어지며 화면 대신 이 파일 안에 에러 메시지가 기록된다. 여기에서 숫자 2는 표준 에러를 뜻하는 파일 디스크립터이다. 2가 들어가지 않으면 표준 출력이 저장된다. </P
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="AEN89"
></A
>3.4. 예제 : 표준 출력을 표준 에러로 보내기</H2
><P
> 
이 방법은 프로그램을 실행했을 때의 표준 출력을 표준 출력 디스크립터 대신 표준 에러와 같은 방식으로 출력하는 것이다. </P
><P
> 
<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
> 
grep da * 1&#62;&#38;2 </PRE
></TD
></TR
></TABLE
> </P
><P
> 
이와 같은 방법으로 명령의 표준 출력이 표준 에러에게 넘겨졌다. 그런데 정말 이것만으로 이해가 착착 간다면 정말 이 문서 볼 필요 없다. 어쩔 수 없이 추가 설명을 달아야만 하는 부분인데..... 간단히 설명하겠다. 'grep da *'는 우리가 익히 알고 있는 단순한 명령이다. 이 뒤에 붙은 숫자는 파일 디스크립터이며 특히 1은 표준 출력을 의미한다. 2는 표준 에러 되겠다. 그런데 사실, 조금만 신경 쓰면 알 수 있는 부분이지만 '1&#62;'는 그냥 '&#62;'와 같은 것이다. 이유는 각자 생각해 보자. 금방 결론이 나올 것이다. 참고로 0은 표준 입력, 3 이후는 다른 파일이 입출력용으로 할당될 때 사용하는 것으로, 그냥 적어 넣으면 에러 메시지를 볼 수 있을 것이다. </P
><P
> 
리디렉션을 '2&#62;&#38;1'과 같이 주면 표준 에러를 표준 출력과 같은 곳으로 보내라는 뜻이며, '1&#62;&#38;2'의 경우는 표준 출력을 표준 에러와 같은 곳으로 보내라는 뜻이다. </P
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="AEN96"
></A
>3.5. 예제 : 표준 에러를 표준 출력으로 보내기</H2
><P
> 
위 내용을 잘 섭렵해 왔다면 생각해 볼 필요도 없는 부분이다. </P
><P
> 
<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
> 
grep * 2&#62;&#38;1 </PRE
></TD
></TR
></TABLE
> </P
><P
> 
자, 표준 에러를 표준 출력으로 보내어 함께 출력하였다. 만약에 이 결과를 파이프를 통해 more나 less 등으로 보낸다면, 표준 출력과 표준 에러가 뒤섞인 형태를 보게 될 것이다. </P
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="AEN102"
></A
>3.6. 예제 : 표준 출력과 표준 에러를 파일로 보내기</H2
><P
> 
이 내용 역시 위와 똑.같.다. 라고 봐도 무방하지만..... 이것을 한번에 파일로 보내는 부분은 함께 보도록 하자. </P
><P
> 
<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
> 
rm -f $(find / -name core) &#38;&#62; /dev/null </PRE
></TD
></TR
></TABLE
> </P
><P
> 
따로이 디스크립터를 사용할 필요 없이 '&#38;&#62;'로 리디렉션 하는 것 만으로 해결된다. 이 방식은 표준 출력과 표준 에러를 함께 파일로 보낼때 사용한다. 이 명령을 크론에 넣어 두면, 일정한 시간마다 모든 디렉토리에 있는 core 파일을 삭제한다. 여기에서는 표준 출력과 표준 에러를 모두 '/dev/null'로 보내 실제로는 날려 버리지만, 굳이 이 내용을 확인하고 싶다면 적당한 파일로 출력하여 살펴보도록 하자. </P
></DIV
></DIV
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
SUMMARY="Footer navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A
HREF="simplescript.html"
ACCESSKEY="P"
>&#51060;&#51204;</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="index.html"
ACCESSKEY="H"
>&#52376;&#51020;&#51004;&#47196;</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A
HREF="pipes.html"
ACCESSKEY="N"
>&#45796;&#51020;</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>아주 간단한 스크립트!!</TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
>&nbsp;</TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>파이프(pipes)</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>
}}}
