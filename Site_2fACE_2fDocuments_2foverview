#title ACE Overview

==== Overview of ACE ====
ACE(Adaptive Communication Environment)는 공개적으로 개발되고 있는 객체지향 프레임워크로, 동시 통신(concurrent communication)을 다루기 위한 많은 패턴들을 포함하고 있다. ACE는 재 사용가능한 c++ 포장과 운영체제를 가로지를 수 있는 통신 소프트웨어의 개발을 위한 프레임워크 컴포넌트를 제공한다. 통신 소프트웨어의 제작을 위해서 ACE는 event demultiplexing, event handler dispatching, 시그널 제어, 서비스 초기화, 내부통신(IPC), 공유메모리 관리, 메시지 경로지정(message routing), 동적 설정, 배포 서비스, 동시실행과 동기화 등을 지원한다. 

ACE는 높은 성능과 실시간 통신 서비스를 필요로 하는 애플리케이션의 제작을 목표로 한다. ACE를 이용하면 객체지향을 지향하는 네트워크 애플리케이션과 서비스를 쉽게 개발할 수 있다. 더불어 ACE는 동적 링크 서비스를 이용해서 automate system configuration과 재설정(reconfiguration)을 가능하도록 한다. 

ACE는 오픈소스상태에서 개발되고 있지만 Riverace와 같은 회사를 통해서 상업적지원도 하고 있다. 최근 ACE의 많은 개발멤버들은 ACE ORB의 완성을 위해서 동분서주 하고 있다. 

==== ACE를 통해서 얻을 수 있는 잇점 ====
 1. 간단함 : ACE 컴포넌트를 이용해서 작성된 네트워크 응용은 다른 여러종류의 OS로 쉽게 포팅 가능하다. 또한 오픈소스를 지향하고 있기 때문에, ACE를 얻고 컴파일하고 사용하는데 있어서 어떠한 제약도 가해지지 않는다.  
 1. 소프트웨어의 질적 향상 : ACE 컴포넌트는 확장성, 유연성, 고품질, 재사용, 모듈화를 목적으로한 패턴을 적용시켜서 디자인 되었다.
 1. 높은 수준의 표준적인 미들웨어 작성 : ACE는 재사용 가능한 컴포넌트와 ACE ORB(TAO)패턴을 이용한다. TAO는 오픈소스 기반의 표준적인 (높은 성능을 위해서 최적화된)CORBA환경을 지원한다. 이처럼 ACE와 TAO를 이용해서 미들웨어 솔류션을 쉽게 개발할 수 있다.

==== ACE의 구조 ====
ACE는 다음과 같은 컴포넌트들의 상속과 연결을 통해서 이루어진다.

http://www.cs.wustl.edu/~schmidt/gifs/layer3.gif

===== ACE 운영체제 어뎁터 계층 =====
이 계층은 native 운영체제 API의 바로 위에 위치하며 C로 만들어져 있다. 이 부분은 POSIX를 최대한 따르도록 되어 있으며, ACE의 다른 컴포넌트들과 계층을 분리시킴으로써 ACE가 운영체제를 가로지를 수 있도록 도와준다. 여기에서는 다음과 같은 OS API들을 계층 밑에서 지원한다.  
 1. 동시성과 동기화 : 다중 쓰레드, 다중 프로세싱, 동기화와 관련된 OS API를 캡슐화 한다. 
 1. 내부통신(IPC)와 공유 메모리 : 내부 통신과 공유 메모리와 관련된 OS API를 캡슐화 한다. 
 1. event demultiplexing mechanisms : 동기, 비동기 demultiplexing I/O관련 OS API를 캡슐화 한다.   
 1. 동적 링크 : 동적링크를 위한 OS API의 캡슐화 
 1. 파일 시스템 : 파일과 디렉토리의 제어를 위한 OS 파일 시스템 API들에 대한 캡슐화

운영체제와 가장 밀접하게 위치하고 있다는 계층의 특성 때문에, 운영체제 어뎁터 계층이 지원하는 운영체제의 종류가 곧 ACE가 지원하는 운영체제의 종류가 된다. 현재 ACE는 윈도우즈(WinNT 3.5.x, 4.x, 2000, 임베디드 NT, XP, Win95/98, WinCE - MSVC++, Borland C++ Builder, Visual Age), Mac OS X,  Solaris, HP-UX, FreeBSD, NetBSD, SCO, UnixWare, AIX 3.x, True64UNIX 3.x, OpenVMS, MVS OpenEdition, CRAY UNICOS, LynxOS, ChorusOS, QnX Neutrino, RT Linux 등을 지원하고 있다.  

==== 운영체제 인터페이스를 위한 C++ 포장 ====
개발자는 OS의존적인 코드를 만들기 위해서 시스템 프로그래밍 기술을 낮은 수준에서 이해할 필요 없이 ACE의 OS 어뎁터계층 위에서 C++의 클래스를 사용하면 되므로 간단하게 원하는 프로그램을 작성할 수 있다. 이 C++클래스는 OS의존적인 통신, 메모리 관리, 이벤트 전달, 동적링크 파일 시스템 API들을 캡슐화시킨다. 개발자는 이러한 포장으로 부터 상속, aggregatine, and/or instantiating 시킴으로써 응용을 개발할 수 있다. 여기에는 다음과 같은 컴포넌트들이 포함된다. 
 * 동시실행및 동기화 컴포넌트 : ACE는 운영체제의 뮤텍스와 세마포어와 같은 멀티쓰레드/멀티프로세스 메커니즘을 객체지향적으로 높은 수준에서 추상화 시킨다. 
 * IPC와 파일시스템 컴포넌트 : TLI, UNIX FIFO, 파이프, Win32의 Named 파이프와 파일시스템관련 API들을 C++ 포장으로 캡슐화 한다.  
 * 메모리관리 컴포넌트 : ACE는 유연하고 확장석 높은 메모리 관리 방법을 제공한다.여기에는 동적메모리 관리, 공유메모리, 힙메모리 관련 추상을 포함한다. 

==== 프레임워크 ====
ACE는 높은 수준에서의 네트워크 프로그래밍을 지원하기 위한 통합된 C++ 인터페이스를 지원한다. 이 프레임워크는 다양한 환경으로의 배포를 위한 동적 설정을 지원한다. ACE 프레임워크에는 다음과 같은 컴포넌트들을 지원한다.  

 * Event demultiplexing 컴포넌트 : ACE Reactor과 Proactor로 I/O기반, 시간기반, 시그널 기반과 동기 이벤트 기반등 다양한 이벤트 전달방식을 지원한다.
 * 서비스 초기화 컴포넌트 :  The ACE Acceptor and Connector components decouple the active and passive initialization roles, respectively, from application-specific tasks that communication services perform once initialization is complete.
 * 계층구조의 스트림 컴포넌트 : ACE 스트림 컴포넌트를 이용하면 유저레빌 프로토콜 스택을 사용하는 통신 애플리케이션을 간단하게 개발할 수 있다. 
 * ORB 어뎁터 컴포넌트 : ACE는 ORB 어뎁터를 이용하면 단일/다중 쓰레드 CORBA를 이용해서 통합된 통신환경을 구축할 수 있다. 

ACE 프레임워크 컴포넌트는 수정이나, 재컴파일, 재링크등이 필요 없이 단지 (가끔 애플리케이션을 재시작 시켜주는 정도)로 적용가능하도록 해준다. 이러한 유연성은 C++의 템플릿과 상속, 다이나믹 바인딩, 디자인 패턴, 추상등을 이용함으로써 가능해진다. 

==== 배포와 컴포넌트 ====

OS adaptation 계층에서는 포함된 컴포넌트들을 패키징하고 배포하기 위한 표준 라이브러리를 제공한다. 이를 위해서 ACE는 다음과 같은 두가지 규칙을 통해서 컴포넌트를 작성하고 배포한다. 
 1. 서비스 컴포넌트는 일반적인 애플리케이션 작성시 운영체제에 상관없이 동일한 코드를 유지하고 배포할 수 있도록 하기 위해서, 이벤트 전달, 로깅, 시간동기화, 네트워크 잠금과 같은 공통 라이브러리를 재사용 가능하도록 한다.  

 1. 배포 서비스는 Reactors, Service Configurators, Acceptors, Connectors, Active Objects, IPC(12)를 사용하기 위한 포장클래스를 제공하며, 개발자들이 통신 소프트웨어를 사용하는데 있어서 위의 자원들을 유연하게 확장시켜서 사용할 수 있도록 만들어져 있다.  

==== 높은 수준의 미들웨어 컴포넌트 제공 ====
Developing robust, extensible, and efficient communication applications is challenging, even when using a communication framework like ACE. In particular, developers must still master a number of complex OS and communication concepts such as: 

 * Network addressing and service identification. 
 * Presentation conversions, such as encryption, compression, and network byte-ordering conversions between heterogeneous end-systems with alternative processor byte-orderings. 
 * Process and thread creation and synchronization. 
 * System call and library routine interfaces to local and remote interprocess communication (IPC) mechanisms. 

It is possible to alleviate some of the complexity of developing communication applications by employing higher-level distributed computing middleware, such as CORBA, DCOM, or Java RMI. Higher-level distributed computing middleware resides between clients and servers and automates many tedious and error-prone aspects of distributed application development, 

including: 

 * Authentication, authorization, and data security. 
 * Service location and binding. 
 * Service registration and activation. 
 * Demultiplexing and dispatching in response to events. 
 * Implementing message framing atop bytestream-oriented communication protocols like TCP. 
 * Presentation conversion issues involving network byte-ordering and parameter marshaling. 

To provide developers of communication software with these features, the following higher-level middleware applications are bundled with the ACE release: 

 1. The ACE ORB (TAO) -- TAO is a real-time implementation of CORBA built using the framework components and patterns provided by ACE. TAO contains the network interface, OS, communication protocol, and CORBA middleware components and features. TAO is based on the standard OMG CORBA reference model, with the enhancements designed to overcome the shortcomings of conventional ORBs for high-performance and real-time applications. TAO, like ACE, is freely available, open source software. 

 2. JAWS -- JAWS is a high-performance, adaptive Web server built using the framework components and patterns provided by ACE. JAWS is structured as a framework of frameworks. The overall JAWS framework contains the following components and frameworks: an Event Dispatcher, Concurrency Strategy, I/O Strategy, Protocol Pipeline, Protocol Handlers, and Cached Virtual Filesystem. Each framework is structured as a set of collaborating objects implemented by combining and extending components in ACE. JAW is also freely available, open-source software. 
