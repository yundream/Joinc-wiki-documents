#title php 기반의 웹개발 프레임워크 구상

 * 프레임워크 구조 수정에 따른 문서 업데이트 필요 : 2009/3/13
 * 아래 문서는 아직 업데이트 안되었다.

관련 프로젝트 : [http://wowclub.joinc.co.kr/controll.php 디트로이트 메탈 프레임워크]
=== 웹개발을 위한 프레임워크 ===
'''빠르고 쉬운개발, 코드의 재사용, 원할한 커뮤니케이션''' 을 보장하는 다양한 프레임워크가 있는걸로 알고 있다. 뒷 끝을 흐리는 이유는, 그렇다더라 라고 얘기만 들어봤지 실제 RoR이라든지, Django라든지 하는 프레임워크를 사용해 본적은 없기 때문이다. 

회사에서 프로젝트 단위로 웹서비스를 제작해본적이 없으니, 굳이 프레임워크를 사용할 필요성을 느끼지 못했기 때문이다. 그냥 APM(:12)으로 만족하고 살아왔다.

여하튼 그러하다가. 팀단위로 웹서비스를 제작할려고 하니 개발자와 개발자, 개발자와 디자이너 같의 협업방법, 유지보수, 좀더 쉬운 개발방법등에 대해서 생각을 할 수 밖에 없게 되었다. 그래서 생각한게 프레임워크의 도입. 프레임워크의 도입목적은 개발의 속도, 편의성이 아닌 '''협업''', '''커뮤니케이션''', '''유지보수'''에 촛점을 맞추기로 했다. 음.. 협업,커뮤니케이션, 유지보수성을 만족하면 개발의 속도와 편의성까지 보장되는건가 ??

그렇다고 해서, 기존에 만들어진 프레임워크 수준으로 만들지는 않을 것이다. 많은 기능을 가진 프레임워크라기 보다는 협업을 위한 공통인터페이스, 공통 작업환경을 제공하는 정도가 될 것이다. 

=== 환경 ===
Apache + PHP(:12) 기반으로 만들 생각이다. PHP로 하는 이유는 (언제나 그렇지만)익숙하기 때문이고, moniwiki의 플러그인 스타일을 따라서 구현하기 위함이다. 그 moniwiki가 Apache(:12), PHP(:12)로 구현되어 있기도 하고. 

=== 기본컨셉 ===
module를 포함한 page단위로 컨텐츠가 만들어지는 wiki와 동일한 컨셉이다. 다른점은 모듈을 '''MVC'''를 따르게 하겠다는 정도이다.
 1. 컴포넌트 Model 
    Module 단위로 개발된다. Page는 Module들의 집합이 된다.
 1. Message driven Architecture 
    Controll, Module는 Message를 이용해서 데이터를 전달 받는다. 
 1. Observer(:12) 패턴을 이용한 view 선택 
 1. 가볍게 : 가능한 개발자에게 많은 권한을 준다.  
 1. MVC 모델
    가볍지만 MVC(:12)의 틀은 유지하도록 한다.

=== 나름 대충 설계 ===
몇개 공개된 웹프레임워크를 간단히 살펴봤는데, 다들 MVC(:12)라는 패턴을 사용하고 있기는 한거 같다. 대략 model, view, controller을 분리하도록 하는 pattern(:12)이라고 한다. 이해는 가는데, 자세히는 모르겠고 그냥 비슷하게 대략 구현해볼까 한다. 결국 view와 로직을 분리하자라는 말이니까 !? 이미 만들어지고 검증되어진 프레임워크를 사용하는 대신 '''대략 구현'''으로 방향을 잡은 이유는 다음과 같다.
  * 너무 훌륭한 프레임워크를 만들고자 범용성을 강조한 나머지 너무 무거운 경우가 많다. 대부분의 프레임워크에 대한 평가도 그렇다.
  * 개발자에게 더 많은 권한을 주는 방향이 나을 것 같다. 많은 프레임워크가 개발자의 권한을 지나치게 제한한다는 느낌을 준다. 인터페이스정도만 따르도록 하고, 실제 개발은 각 개발자의 개성이 가능한 많이 반영 될 것이다. 개발자에게 많은 권한을 주는게 무슨 프레임워크냐고 할 수도 있겠다. 그냥 철학의 차이로 봐줬음 한다.

attachment:framework.png
 1. 서비스는 모듈들을 포함한 '''page'''단위로 이루어진다. 페이지는 하나 이상의 모듈을 포함할 수 있다.
 1. 가장 먼저 Page Reader이 호출된다.
 1. Page Reader는 요청된 서비스페이지를 읽어들이고 해석한다. 만약 [[module]]를 만나면, '''module'''의 인스턴스를 만들고, module의 controll을 실행한다. 
 1. module의 controll은 model을 실행시킨다. controll은 model의 결과데이터를 받아서 view로 넘긴다.  
 1. page reader은 각 module의 view를 출력하게 된다.

moniwiki의 플러그인 사용 구조를 따라가려고 한다. 전형적인 전술패턴(:12)을 가지게 될 것 같다. 즉
  * 모든 모듈은 서로 완전히 독립된다.
  * 각 페이지들은 이들 모듈의 집합이다. 
  * Module는 3개의 인자를 가진다. Module의 제어와 Module간의 통신은 다음의 인자를 통해서 이루어지게 된다.
   || formatter  || 기본 설정값 및 DB 인스턴스, 유저세션과 같은 전역값들 ||
   || options    || POST,PUT 등 유저입력 데이터, 필요에 따라 설정된 값들 ||
   || value      || 함수 인자                                            ||
  * 모듈은 하나의 파일에 대응된다. 다음의 MVC 모델을 따른다. 
   || Controll   || Model을 실행시키고 그 결과를 view에 넘긴다.          ||
   || Model      || 데이터 프로세싱. 로직을 가진다.                      ||
   || View       || 프로세싱된 데이터를 보여준다.                        ||
  * PageReader는 controller page에서 작동하며, page를 해석해서 모듈을 실행시키고 결과를 client에 전달한다.
예를들어서 bbs 모듈과 bbs 페이지를 네비게이션하기 위한 navi 모듈을 만들었다고 하면, 이 모듈들을 포함한 페이지는 다음과 같이 구성될 것이다.  
{{{#!plain
<table><tr><td>
[[bbs]]
</td><td>
[[navi]]
</td></tr></table>
}}}
=== module === 
module 는 model, controll, view 를 가진다.
  * controll은 하나이상의 model을 가질 수 있다.  
  * model은 데이터 프로세싱을 맡는다.
  * 프로세싱이 끝난 데이터는 view로 넘겨져서 클라이언트에 전달된다. 
  * model은 하나이상의 view를 가질 수 있다. 여러개의 view를 처리하기 위해서 observer model을 사용한다. 
아래의 예는 http://dmf.joinc.co.kr/controll.php/example/db 을 대상으로 하고 있다. 
==== controll class ====
  * model과 view를 컨트롤 한다.
  * modelLoad를 이용해서 모델을 실행한다.
  * 모델에서 읽어들인 데이터를 처리하고 - 비지니스 로직의 적용 - view로 데이터를 넘긴다.  
  * 모델은 여러개의 view를 가질 수 있는데, registerOb 를 이용해서 view를 등록하고 적당한 view를 실행하도록 한다. 
{{{#!plain
class dbtest extends ModuleControll
{
	function run()
	{
		$cp = $this->modelLoad('trackback');
		$this->viewData['data'] = $cp->get();
		$this->viewData['pagename'] = $this->formatter['pagename'];
		$this->viewData['uri'] = $this->formatter['uri'];

		// view를 등록한다.
		$this->registerOb('a', showtrackback);
		$this->registerOb('b', showtrackbackSelect);

		// d의 값에 따라서 등록된 view를 선택해서 실행한다.
		// ex) ?d=a 라면 showtrackback
		//     ?d=b 라면 showtrackbackSelect
		$this->notifyOb($this->options['d']);
	}
}
}}}
==== model class ====
데이터를 읽어들여서 처리한다.
{{{#!plain
class trackback extends Model 
{
	function get()
	{
		$DBI = $this->formatter['db'];
		// 이하 쿼리를 이용해서 trackback 정보를 얻어온다.

		return $trackbacks;
	}
}
}}}
==== view class ====
뷰는 뭐 특별히 할일이 없다. 그냥 view다.
{{{#!plain
DB Connection은 PreLoader에서 생성되며, 다른 모듈들에서는 <b>formatter</b> 를 이용해서 인스턴스를 사용할 수 있습니다. DB 툴은 다른 것들과 마찬가지로 Module로 만들어서 적재됩니다. 여기에 사용된 DB 툴은 php mysql 함수의 wrapper class 정도입
니다.
<form action=<?=$uri?> method=post>
<table class=wiki border=1>
<?
    while( list($id, $value) = each($data)){
?>
      <tr><td><?=$value['id']?></td><td><?=$value['subject']?></td><td><?=$value['ip']?></td></tr>
<?
    }
?>
</table>
  <input type=text name=searchstr size=12 class=keywords>
  <input type=submit value="search" class=keywords>
</form>
<ul>
  <li><a href=/controll.php/<?=$pagename?>?action=showmodule&mname=db>DB Module 소스코드</a></li>
</ul>
}}}

[[showComment(441)]]

