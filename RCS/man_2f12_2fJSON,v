head	1.2;
access;
symbols;
locks
	root:1.2; strict;
comment	@# @;


1.2
date	2014.11.03.14.01.14;	author root;	state Exp;
branches;
next	1.1;

1.1
date	2014.11.03.13.50.23;	author root;	state Exp;
branches;
next	;


desc
@./data/text/man_2f12_2fJSON
@


1.2
log
@119.64.102.68;;yundream;;
@
text
@#title JSON

== JSON ==
JSON(Javascript Object Notation)은 '''attribute-value''' 쌍으로 구성되는 텍스트 기반의 정보 표현 포멧이다. XML과 마찬가지로 서버와 클라이언트간 데이터를 교환하기 위한 목적으로 사용한다. 특히. 웹 애플리케이션에서 널리 사용한다.  

원래는 자바스크립트 언어에서 사용하기 위해서 만들었지만, 언어에 독립적 테이터 타입이다. 여러가지 다양한 속성들을 가지는 XML에 비해서, 하나의 attribute와 하나의 key를 가지는 단순한 구조라서 데이터를 만들고 이용하기가 훨씬 쉽다는 장점이 있다. 지금은 대부분의 언어들이 JSON 생성기와 파서 기능을 지원하고 있다.   

== 데이터 타입과 문법 ==
JSON은 아래의 타입을 지원한다.
  * Number : 소수를 포함한 숫자와 지수 표기법(E)를 지원한다. NaN 같은 숫자가 아닌 데이터는 지원하지 않으며, integer과 floating-point를 구분하지 않는다. 이들에 대한 구분은 애플리케이션 단에서 처리해야 한다.
  * String : Unicode 문자를 지원한다. String은 따움표(Double-quote)로 구분하며, 백스페이스 문자를 사용할 수 있다.
  * Boolean : '''true'''와 '''false'''를 지원한다.
  * Array : 배열을 지원한다. 배열은 대괄호 표기법으로 표현할 수 있다.
  * Object : 정렬되지 않은 연관배열(name과 key로 이루어진) 객체를 사용할 수 있다.
  * null : 값이 없을 경우 null을 사용할 수 있다.
아래는 개인정보를 포현하는 JSON 파일 예제다. Number, String, Boolean, Array, Object, null을 모두 포함하고 있다.
{{{#!plain
{
	"firstName": "John",
	"lastName": "Smith",
	"isAlive": true,
	"age": 25,
	"height_cm": 167.6,
	"address": {
		"streetAddress": "21 2nd Street",
		"city": "New York",
		"state": "NY",
		"postalCode": "10021-3100"
	},
	"phoneNumbers": [
	{
		"type": "home",
		"number": "212 555-1234"
	},
	{
		"type": "office",
		"number": "646 555-4567"
	}
	],
		"children": [],
		"spouse": null
}
}}}

== JSON-RPC ==
JSON-RPC는 XML-RPC와 SOAP를 대신하는 RPC 프로토콜로, XML대신에 RJSO을 사용한다. JSON의 사양 자체가 단순해서, 가볍게 사용하기에 좋다는 장점이 있다. 복잡한 데이터를 주고 받는 시스템이 아니라면, JSON-RPC를 사용해볼만 하다.
{{{#!plain
요청 : {"jsonrpc": "2.0", "method": "subtract", "params": [42, 23], "id": 1}
응답 : {"jsonrpc": "2.0", "result": 19, "id": 1}
}}}


@


1.1
log
@119.64.102.68;;yundream;;
@
text
@d44 9
@
