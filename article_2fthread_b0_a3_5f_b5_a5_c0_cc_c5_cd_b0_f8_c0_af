#title thread 간 데이터공유

[wiki:docbook_thread간_데이터공유 Docbook 원본문서]
{{{#!html
<HTML
><HEAD
><TITLE
>Thread에서의 데이터 공유</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.76b+
"><META
http-equiv="Content-Type"
content="text/html; charset=euc-kr"></HEAD
><BODY
CLASS="ARTICLE"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="ARTICLE"
><DIV
CLASS="TITLEPAGE"
><H1
CLASS="TITLE"
><A
NAME="AEN2"
></A
>Thread에서의 데이터 공유</H1
><H3
CLASS="AUTHOR"
><A
NAME="AEN4"
>윤 상배</A
></H3
><DIV
CLASS="AFFILIATION"
><DIV
CLASS="ADDRESS"
><P
CLASS="ADDRESS"
>				yundream@joinc.co.kr<br>
			</P
></DIV
></DIV
><DIV
CLASS="REVHISTORY"
><TABLE
WIDTH="100%"
BORDER="0"
><TR
><TH
ALIGN="LEFT"
VALIGN="TOP"
COLSPAN="3"
><B
>&#44256;&#52828; &#44284;&#51221;</B
></TH
></TR
><TR
><TD
ALIGN="LEFT"
>&#44256;&#52840; 0.8</TD
><TD
ALIGN="LEFT"
>2004년 1월 27일</TD
><TD
ALIGN="LEFT"
></TD
></TR
><TR
><TD
ALIGN="LEFT"
COLSPAN="3"
>최초 문서작성</TD
></TR
></TABLE
></DIV
><HR></DIV
><DIV
CLASS="TOC"
><DL
><DT
><B
>&#52264;&#47168;</B
></DT
><DT
>1. <A
HREF="#AEN16"
>전통적 IPC의 사용</A
></DT
><DT
>2. <A
HREF="#AEN19"
>Thread 데이터 동기화 도구의 사용</A
></DT
></DL
></DIV
><BLOCKQUOTE
CLASS="ABSTRACT"
><DIV
CLASS="ABSTRACT"
><A
NAME="AEN14"
></A
><P
></P
><P
>		멀티 쓰레드방식의 프로그램을 선호하는 이유중의 하나가 데이터 공유의 
		유연함 때문이다 보니, 쓰레드간 어떻게 효과적으로 데이터를 공유할 
		것인지가 주요 관심사가 되는 경우가 많다. 데이터 공유를 위한 
		여러가지 방법들이 존재하는데, 쓰레드간 데이터 공유에 대한 다양한 
		방법들에 대해서 알아보도록 하자. 
	</P
><P
></P
></DIV
></BLOCKQUOTE
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN16"
></A
>1. 전통적 IPC의 사용</H1
><P
>		PIPE, FIFO, 세마포어, 메시지 큐, sockpair, 공유 메모리등을 통한 
		쓰레드간 데이터 공유 및 동기화 방법에 대해서 알아본다. 
		여기에서 설명하는 IPC설비들은 프로세스 모델에도 그대로 적용 가능할 
		것이다.
	</P
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN19"
></A
>2. Thread 데이터 동기화 도구의 사용</H1
><P
>		Thread라이브러리(pthread)에서 제공하는 데이터 공유 및 동기화 관련 
		기능들에 대해서 알아본다. 아마도 mutex와 조건변수에 대한 내용이 
		주를 이룰 것으로 생각된다.     
	</P
></DIV
></DIV
></BODY
></HTML
>
}}}
