#title AWS CloudFormation

[[TableOfContents]]
== 소개 ==
이 문서는 아마존의 클라우드포메이션의 가이드 문서가 아니다. 어떻게 클라우드포메이션같은 서비스를 구현할 수 있을지에 대한 아이디어를 만드는 것을 목적으로 한다.

== CloudFormation에 대하여 ==
클라우드포메이션은 웹 서비스를 빠르게 전개하기 위해서 제공하는 서비스다. 아주 간단히 생각하면, 자주 사용하는 웹 서비스에 대한 템플릿을 만들어서, 이 템플릿을 이용하면 VM 설치와 동시에 웹 서비스까지 가능하게 하는 서비스다.

예컨데, 설치와 설정까지 모두 끝난 moniwiki VM에 대한 템플릿을 두면 사용자는 이 템플릿을 사용하는 것만으로 moniwiki를 즉시 사용할 수 있게 된다. 사용자는 자신만의 템플릿을 운용하거나 혹은 공개할 수도 있다.

=== 서비스 목적 ===
AWS의 클라우드포메이션은 비용을 받지 않는다. VM 생성에 따른 일반적인 리소스 사용비용만 받는다.

유저 입장에서 퍼블릭 클라우드 서비스를 이용하는 이유는 서비스를 쉽게 전개하기 위함이다. 클라우드포메이션으로 서비스를 쉽게 전개할 수 있게 도와 줌으로써, 유저를 AWS 생태계에 끌어들일 수 있다. 제로보드 XE기반의 커뮤니케이션을 만든다고 가정해 보자. VM을 올리기만 하면, XE를 운영할 수 있도록 서비스를 제공하는 클라우드 제공 회사가 있다면, 당연히 이 회사의 서비스를 받으려 할 것이다. SaaS의 한 형태라 할만 하다.

  1. 자신의 클라우드 서비스로 유도 : 자사의 클라우드 서비스를 사용하도록 유도할 수 있다. 들어 wordpress 템플릿을 제공한다고 가정해 보자. 기본 데이터베이스는 VM에 함께 설치된 MySQL이지만 좀 더 안정적인 서비스를 원할 경우 자사의 DB 서비스를 이용하도록 선택옵션을 준다거나, Availability zone 선택 옵션을 두는 식으로 유저를 클라우드 생태계 안으로 끌어들일 수 있다. 
  1. 공개 소프트웨어 생태계 지원 : 다양한 종류의 웹 기반 공개 소프트웨어 들이 등장하고 있다. 최근에는 SNS 애플리케이션들도 찾아볼 수 있다. 소프트웨어 개발자는 템플릿을 만들어서 배포할 수 있고, 사용자는 간단하게 이들 애플리케이션을 전개해서 테스트/사용해 볼 수 있다. 
  1. 기업유저 유도 : 개발한 소프트웨어를 배포하기 위해서, 혹은 마케팅 용도로 템플릿을 사용하려는 기업유저를 끌어들일 수 있다. 

"유저 <->개발자 <-> 기업" 간의 클라우드 생태계를 만들 수 있다.

=== 필요한 기술들 ===
퍼블릭 클라우드에서 클라우드포메이션과 같은 서비스를 제공하려고 한다면, 대상 애플리케이션은 공개 소프트웨어야 할 것이다.
  1. 오픈소스에 대한 전반적인 경험과 노하우
  1. 정돈된 API : 개발자는 API를 이용해서 자신의 템플릿을 만들 수 있어야 한다. 이미지 종류, 매개변수, 
  1. 정돈된 UI : 유저는 Web UI를 이용해서 템플릿, 클라우드 자원, 애플리케이션 매개변수 등을 설정하는 것으로 간단하게 서비스를 올릴 수 있어야 한다.   
  1. 서비스 관리 : 정보를 공유하려는 목적으로 서비스를 전개하려는 유저가 많을 것이다. 이런 유저에게는 저렴한 가격으로 VM을 서비스 할수 있어야 하므로 Micro VM이 사용될 것이다. 하지만 어떤 유저는 다양한 어플리케이셔을 서비스하기를 원할 수도 있다. 예컨데 형상관리, 이슈추적 시스템, CMS, 블로그, Wiki 등을 서비스 하기를 원할 수 있는데 이들 유저를 위해서 자동설치/설정 서비스를 제공하면 좋을 것이다. chef, puppet 등의 자동화 솔류션을 이용해서 인프라를 구축할 필요가 있다. 

=== 서비스 할만한 오픈소스들 ===
 * WordPress 
   * 각종 플러그인
 * 제로보드  : XpressEngine
 * Drupal
   * Durpal + [wiki:Site/Database/Mysql MySQL]
   * Durpal + RDBAS  
 * Joomla
 * PHPNuke
 * Redmine
 * 태터툴즈
 * Moniwiki 
 * Mediawiki 
 * APM
 * Git
 * SVN
 * Bugzilla
 * Trac (+Git, +SVN)
 * Mentis
 * FreeNAS
 * Chef
 * Puppet
 * Ruby on Rails
 * PHP-Nuke
 * Memcache

CMS 부터 시작하는게 무난해 보인다. 사용자가 많아서 배포와 피드백이 용이하기 때문이다.
 * [wki:http://w3techs.com/technologies/overview/content_management/all  Usage of content management systems for websites]
 * [http://w3techs.com/technologies/segmentation/tld-kr-/content_management Distribution of content management systems among websites that use .kr]
Wordpress와 XpressEngine(제로보드 XE) 부터시작하는게 무난하겠다. 

== 클라우드 소프트웨어를 위한 Cloudformation ==
클라우드 소프트웨어들은 Template를 제공한다. 현재 운영중인 VM을 VHD로 만들어서 메타정보와 함께 저장해 두고, 이 VHD로 부터 VM을 생성하는 방식이다. 예컨데 APM을 운영중이라면 이 VM을 APM 템플릿을 만든다음, APM을 운용할 필요가 있다면 APM 템플릿을 이용해서 VM을 생성한다.

CloudFormation 서비스를 하려면 이걸로는 부족하다. 서비스를 배포하는 게 목적이므로, 운영체제와 애플리케이션 설정이 가능해야 한다. 예컨데, Mysql 이라면 Admin 계정과 패스워드 서비스 포트등을 유저가 설정할 수 있도록 인터페이스를 제공해야 한다.

== 서비스 개발 계획 ==
  1. Simple is best 
     * '''설치만을 관리한다.'''  설치 후 패키지 업데이트관리 등은 신경쓰지 않는다. chef, puppet등을 이용해서 설치 후에도 관리할만한 여지가 있으나, 시스템이 복잡해 진다. 이 서비스는 어디까지나 초기 서비스 전개를 빠르게 도와주기 위함이다.   
     * 마찬가지로 (설정 관리를 하지 않기 때문에)이미 설치된 VM에, 서비스를 전개할 수 있는 기능은 제공하지 않는다. 굳이 이러한 기능을 추가하길 원한다면, chef 등을 이용한 별도의 설정관련 서비스를 만든다.  
  1. 초기 설정값을 지정할 수 있도록 API를 제공한다.
     * Port 번호, 도메인 이름, Admin 계정 정보 등 애플리케이션과 관련된 몇가지 값들을 사용자가 정할 수 있도록 (AWS는 JSON 형태의)API를 제공해야 한다. AWS는 CloudFormation을 위해서 Agent를 제공한다. 이 Agent가 JSON 템플릿 설정을 읽어서, 애플리케이션의 설정파일을 변경한다. 
  1. Amazon API와의 호환성
     * Amazon과 경쟁을 해야하는 상황이라도, Amazon API와 호환되야 한다. AWS CloudFormation을 분석해야 한다.
=== 매개변수 적용 ===
웹 서비스 Template를 만드는 것은 어려울게 없는데, 설정을 변경하는게 문제다. AWS는 JSON 형식의 Template 설정파일을 이용해서 설정을 변경을 가능하게 한다. 웹에서 설정한 매개 변수값으로 JSON 파일이 만들어지고 이 파일을 해석해서 설정파일을 만드는 방식이다.

설정파일을 수정하기 위해서 Agent를 제공한다. Amazon Linux AMI에 Agent가 설치돼 있으므로, 이 AMI를 이용해서 VM 인스턴스를 생성해서 템플릿을 만들면 된다. 

직접 개발한다면, 대략 아래의 구조를 가지지 않을까. 

{{{#!html
<img src="https://docs.google.com/drawings/pub?id=1ZT6nqWAW1HhJu8UzDxhtnPAET0WuLJcioCipobULwdo&amp;w=771&amp;h=331">
}}}
  1. WebUI로 user template 명세서를 작성한다. 
  1. User Template는 두 부분으로 저장된다. 
     * Cloud Resource : VM Type, Storage, Network service, 사용할 템플릿
     * App Config : 설정파일 위치, 설정파일 템플릿. 매개변수 이름과 값 
  1. Cloud Agent 
     * Config Generation Server에게 설정정보를 요청한다.
     * 설정정보를 이용해서 설정파일을 생성한다.
     * Amazon cloudformation 서비스는 패키지까지 관리한다.

=== 서비스 시나리오 ===
나름대로 정의한 서비스 시나리오
  1. Cloud Agent가 설치된 VM을 생성한다. 
  1. 원하는 운영체제 + 애플리케이션 환경을 만든다.
     * ex) wordpress + mysql
  1. VM을 shutdown 한다음 shapshot을 만든다. 
  1. snapshot 으로 Template를 만든다. 
     * 만든 Template는 S3 같은 Storage에 올려서 누구든지 다운로드 받을 수 있게 한다.
  1. Template 설정 파일을 만든다. 
     * 서비스에 사용할 설정 포맷은 미리 정의해야 한다. 
     * wordpress + mysl 이라면 port, mysql admin password, wordpress admin password를 매개 변수로 받도록 설정파일을 만든다.

CloudFormation 서비스 사용자는 아래의 시나리오를 따른다.
  1. CloudFormation 서비스를 선택한다.
  1. 사용할 수 있는 Template 목록을 출력한다.
  1. Tempalte를 선택하면, Template 설정 파일을 로드해서 매개 변수입력을 위한 submit 폼을 만든다.  
  1. 매개 변수 입력을 마치고, submit하면 입력 정보를 이용해서, 애플리케이션 설정 파일을 만든다.  
  1. 유저가 "설치"버튼을 클릭한다.  
  1. Template로 부터 VM 인스턴스를 만든다.
  1. VM 인스턴스가 실행되면, CloudAgent가 실행된다.   
  1. CloudAgent는 서버에 연결해서 설정파일(스크립트를 포함한)을 다운로드 받아서 실행한다. 
     * 설정파일을 원하는 위치에 복사.
     * 혹은 스크립트를 이용해서 애플리케이션 환경 설정(ex. mysql admin 패스워드 설정과 같은) 

실제 구현하려면 각 신경써야 할게 많겠지만 큰 틀에서는 대략 위와 같이 정의할 수 있을 것이다.
== 마치며 ==
AWS 기반으로 개인적으로 사용하던 웹 기반 애플리케이션들의 템플릿을 만들어서 올려봐야 겠다. Moniwiki 부터 시작하면 되겠지 싶다.

== 히스토리 ==
  * 첫 작성 : [[Date(2012-07-11T05:37:49)]]

[[Tag(AWS,cloud,cloudformation)]]
