#title 루비 사용자 가이드 - 배열 

== 배열(Array) ==
거의 모든 언어들이 배열을 지원하며, 거의 모든 언어들이 괄호(![!])과 컴마(,)를 이용해서 원소를 나열한다.
{{{#!plain
ruby> ary = [1, 2, "3"]
   [1, 2, "3"]
}}}
C같은 언어와 달리, 하나의 배열이 int형과 string등 다른 타입의 원소들을 포함할 수 있다. 또한 유용한 배열 연산들을 지원한다.

스트링과 마찬가지로 합치거나 반복(곱)할 수 있다.
{{{#!plain
ruby> ary + ["foo", "bar"]
   [1, 2, "3", "foo", "bar"]
ruby> ary * 2
   [1, 2, "3", 1, 2, "3"]
}}}

인덱스 번호를 이용해서 색인에 접근할 수 있다. 범위 접근도 가능하다.
{{{#!plain
ruby> ary[0]
   1
ruby> ary[0,2]
   [1, 2]
ruby> ary[0..1]
   [1, 2]
ruby> ary[-2]
   2
ruby> ary[-2,2]
   [2, "3"]
ruby> ary[-2..-1]
   [2, "3"]
}}}
음수는 배열의 끝부터 역으로 인덱스를 참조하겠다는 의미다.

join을 이용해서 배열의 원소를 문자열로 만들 수 있고, 반대로 split을 이용해서 문자열을 배열로 만들 수도 있다.
{{{#!plain
ruby> str = ary.join(":")
   "1:2:3"
ruby> str.split(":")
   ["1", "2", "3"]
}}}

=== 해시(Hashes) ===
인덱스에 숫자뿐만 아니라 스트링을 포함한 다른 객체를 사용할 수 있다는 것을 제외하면 배열과 비슷하다. 이렇게 임의의 값을 넣을 수 있는 자료구조를 해시 혹은 사전 이라고 한다. 해시와 사전에서는 인덱스 대신 '''키'''를 사용한다. 키를 이용해서 원소에 접근할 수 있다. 

{{{#!plain
ruby> h = {1 => 2, "2" => "4"}
   {1=>2, "2"=>"4"}
ruby> h[1]
   2
ruby> h["2"]
   "4"
ruby> h[5]
   nil
ruby> h[5] = 10    # appending an entry
   10
ruby> h
   {5=>10, 1=>2, "2"=>"4"}
ruby> h.delete 1   # deleting an entry by key
   2
ruby> h[1]
   nil
ruby> h
   {5=>10, "2"=>"4"}
}}}
