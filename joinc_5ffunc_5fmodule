#title 함수사전을 위키페이지로. 

|| 만든날 	|| 2003/01/03 						||<|4> http://www.joinc.co.kr/images/myavata/2.gif	||
|| 관리자 	|| yundream							||
|| 홈페이지	|| http://www.joinc.co.kr			||
|| 이메일	|| [mailto:yundream@joinc.co.kr]	||

[[TableOfContents]]

=== 교정 과정 ===

=== 토론및 잡담 ===

=== 소개 ===
joinc에서는 [http://www.joinc.co.kr/modules.php?name=Encyclopedia&op=list_content&eid=2 함수사전]을 제공하는데, 사전의 내용을 모두 위키로 옮기는 작업을 하기로 했다. 여기에서는 옮기는 과정에 대해서 기술한다.   

==== 왜 위키페이지로 옮기는가 ====
===== google에서의 검색용이를 위해서 ===== 
어떤 이유에서인지 모르겠지만 [http://www.google.co.kr google]에서 함수사전에 있는 함수들의 내용이 검색되지 않는다는 것을 확인했다. 비록 내부적으로 Joinc 통합검색엔진 프로젝트를 진행하고 있긴 하지만 google등의 검색엔진에서도 쉽게 검색될 수 있다면 좋을 것이다. 지금 운영중인 위키에 있는 페이지들은 google을 통한 검색이 잘 이루어 지고 있음을 확인했고, 그런이유로 위키 페이지로 옮기기로 결정했다. 

===== 위키 페이지에서 직접적인 함수참조 가능하도록 =====
사이트의 특성상 위키 페이지에 함수들이 자주 등장하게 되는데, 함수의 내용이 궁금할경우 joinc의 함수찾기 기능을 이용해서 함수를 참조해야만 한다. 4-5번 정도의 마우스 클릭작업이 들어갸야 하는데, 시간도 많이 걸리고 매우 불편하다.  

이들 함수사전의 내용을 위키로 만들면 관련 메크로를 만들어서 원클릭으로 함수에 대한 내용의 확인이 가능하도록 할 수 있다. 예를 들어서 gets(3)에 대한 함수에 대한 링크를 만들기를 원한다면 
{{{#!plain
[func:gets(3)]
}}}
위와 같은 간단한 방법으로 링크를 만들 수 있다. 

===== 사용자 피드백의 용이성 =====
위키의 특성으로 용이한 사용자 피드백이 가능할 것이다. 필요하다면 wiki전용의 댓글 시스템을 만들 수도 있다.  


=== 함수사전을 위키페이지로 ===
==== 기본 아이디어 ====
현재 함수사전의 모든 내용은 DB를 통해서 관리된다. 간단한 스크립트를 이용해서 각각의 함수이름과 함수이름에 대한 설명이 들어 있는 필드의 정보를 가져올 수 있다. 그러면 이들 내용을 토대로 wiki페이지를 만든다.    

==== DB에서 함수사전 테이블 내용 가져오기 ==== 
DB에서 내용을 가져오기 위해서 함수사전에 사용되는 테이블의 구조를 분석할 필요가 있다. 함수사전에는 '''joinc_encyclopedia'''와 '''joinc_encyclopedia_text''' 두개의 테이블이 사용된다.  

===== 함수 사전 관련 테이블 =====
 * joinc_encyclopedia에는 사전의 타입과 설명등이 입력된다. joinc의 사전은 여러 종류의 사전이 동시에 운용될 수 있으므로 사전의 프로토타입의 정의를 위한 테이블이 별도로 필요하다.     
 || 1	|| Field		|| Type		|| Null		|| Key	|| Default	|| Extra		||
 || 2	|| eid			|| int		||			|| PRI	|| NULL		|| auto_inc		||
 || 3	|| title		|| varchar	||			||		||			||				||
 || 4	|| description	|| text		||			||		||			||				||
 || 5	|| counter		|| int		||			||		||			||				||
  1. '''eid''' : 새로운 사전이 추가될때 마다 1씩 증가하며 함수내용에 대한 인덱스 값이 된다.    
  1. '''title''' : eid번호를 가지는 사전에 대한 제목
  1. '''description''' : 사전에 대한 상세 설명 
  1. '''counter''' : 방문 카운트 


 * joinc_encyclopedia_text에는 실질적인 내용이 들어간다. 
 || 1	|| Field	|| Type		|| Null		|| Key	|| Default	|| Extra		||
 || 2	|| tid		|| int		||			|| PRI	|| NULL		|| auto_inc		||
 || 3	|| eid		|| int		||			||		|| 0		||				||
 || 4	|| title	|| varchar	||			||		||			||				||
 || 5	|| text		|| text		||			||		||			||				||
 || 6	|| counter	|| int		||			||		|| 0		||				||
  1. '''tid''' : 사전내용에 대한 일련번호 
  1. '''eid''' : 사전내용이 어느 사전에 포함된것인지에 대한 정보로 joinc_encyclopedia.eid를 인덱스한다.
  1. '''title''' : 사전내용에 대한 제목
  1. '''text''' : 실질적인 사전내용  
  1. '''counter''' : 방문 카운트 

==== wiki페이지로 저장하기 ====
DB를 뒤져서 함수사전 내용을 얻어왔다면, 얻어온 내용을 토대로 위키페이지를 만들어야 한다. 위키페이지는 파일기반으로 [http://doc.kldp.org/KoreanDoc/html/RCS/RCS.html RCS]를 통해서 관리된다. 

파일에 저장할 때는 모든내용을 저장하지 않고 DB의 내용을 호출하는 wiki macro만을 등록시킬 것이다.
{{{#!plain
[printency(2,111)]
}}}

파일로 저장되므로 파일이름을 정해야 하는데 중복을 피하기 위해서 합수명앞에 '''function_'''을 붙이도록 한다. 실제 저장되는 위키페이지는 '''_'''를 '''_5f'''로 치환된다. 또한 '''(''', ''')'''는 각각 '''_28''', '''_29'''로 치환된다. 만약 '''fgets(3)'''을 등록시키길 원한다면 
'''function_5ffgets_283_29'''라는 이름의 파일로 등록된다. 

등록된 후에는 이걸 RCS로 보내야 한다. 이를 위해서 '''ci'''명령을 사용한다. 
{{{
# ci -tfunction_5ffgets_283_29 function_5ffgets_283_29 
}}}
그러면 RCS파일이 생성된다. 이후 '''co'''명령을 이용해서 RCS파일을 다시 받아와서 원본파일을 유지하면 된다. 
{{{
co function_5ffgets_283_29
}}}

위의 내용이 잘 이해되지 않는다면 RCS레퍼런스 문서를 읽어 보기 바란다. 

=== 프로그램 작성 ===
프로그램은 C를 이용해서 작성된다. 

==== 전체 프로세스 ====
프로세스는 간단하다.
{{{#!vim c
int main()
{
  nobody 권한으로 변경한다.
  mysqldb에 접근
  함수사전을 얻기 위한 쿼리 수행
  while(더이상 사전내용이 없을 때 까지) 
  {
    list(title, text)를 얻어온다. 
    function_5ftitle 이름으로 파일을 만든다.  
    파일에 text를 적는다.
    {
      write wiki메크로 
    }
    co명령을 이용해서 RCS에 등록한다. 
    ci명령을 이용해서 RCS의 내용을 가져온다.   
  }
}
}}}

==== 코드 ====
코드 역시 매우 단순하다. 이 코드는 그럭저럭 돌아가지만 수정해야될 부분과 추가해야될 몇 가지 기능들이 있다. 간단한 주석으로 설명을 대신한다. 
{{{#!vim c
#include <mysql.h>
#include <string.h>
#include <stdio.h>
#include "jdb.h"
#include <stdlib.h>

static char page_name[80];

// ( ==> _28 
// ) ==> _29
char * replace_tag(char *str)
{
    char null[12];
    char fu[80];
    char num[12];
    sscanf(str,"%[^(]%[(]%[^)]", fu, null, num);
    sprintf(page_name, "%s%s%s%s", fu, "_28", num, "_29");
    return &page_name[0];
}

int main(int argc, char **argv)
{
    MYSQL   *connection = NULL, conn;
    MYSQL_RES *sql_result;
    MYSQL_ROW sql_row;
    int query_stat;
    char wiki_macro[80];
    char wiki_page[80];
    char *perfect_page;
    char man_section[16];
    FILE *fp;

    // MysqlDB에 연결  
    mysql_init(&conn);
    connection = mysql_real_connect(&conn, DB_HOST,
                                DB_USER, DB_PASS,
                                DB_NAME, 3306, (char *)NULL, 0);

    if (connection == NULL)
    {
        fprintf(stderr, "Mysql connection error : %s", mysql_error(&conn));
        return 1;
    }
    query_stat = mysql_query(connection,
            "select title, eid, tid from nuke_encyclopedia_text where eid=2");
    if(query_stat != 0)
    {
        fprintf(stderr, "Mysql query error : %s\n", mysql_error(&conn));
        return 1;
    }

    sql_result = mysql_store_result(connection);
    while((sql_row = mysql_fetch_row(sql_result)) != NULL)
    {
        char ci_command[120];
        char co_command[120];
        char title[80];
        if(strlen(sql_row[0]) > 3)
        {
            // wikipage에 들어갈 메크로문자열과 
            sprintf(wiki_macro, "[[printency(%s,%s)]]\n", sql_row[1], sql_row[2]);
            // wikipage 이름
            sprintf(wiki_page, "function_5f%s", sql_row[0]);
            // wikipage 타이틀
            sprintf(title, "#title %s\n", sql_row[0]);
            // wikipage이름을 wiki스타일에 맞도록 변경한다. 
            perfect_page = replace_tag(wiki_page);

            // RCS등록을 위한 명령
            sprintf(ci_command, "/usr/bin/ci -t%s %s", perfect_page, perfect_page);
            sprintf(co_command, "/usr/bin/co %s", perfect_page);
            if((fp = fopen(perfect_page, "w")) != NULL)
            {
                fputs(title,fp);
                fputs(wiki_macro, fp);
                fclose(fp);
                // RCS등록을 한다. 
                system(ci_command);
                system(co_command);
            }
        }
    }
    mysql_free_result(sql_result);
    mysql_close(connection);
    return 0;
}
}}}
다음과 같이 컴파일 했다. 
{{{
# gcc -o wikifunc  main.c -I/usr/include/mysql -L/usr/lib/mysql -lmysqlclient -Wall
}}}

==== wiki 메크로 작성 ====
이제 남은 일은 '''prientency''' 메크로를 작성하는 일이다. moniwiki는 php기반이므로 약간의 php프로그래밍이 필요하다. moniwiki/plugin에 printency.php를 만들었다. 내용은 다음과 같다.      
{{{#!vim php
<?php

function macro_printency($formatter,$value='2,1')
{
    global $DBInfo, $dbi;
    $content;
    list($eid, $tid) = split(",", $value);
    if (eregi("[^0-9]", $tid) || eregi("[^0-9]", $eid))
    {
        $content = "잘못된 ID";
        return $content;
    }
	$query = "select text from nuke_encyclopedia_text where tid = $tid and eid = $eid";
    $result = sql_query($query, $dbi);
    if (!$result)
    {
        $content = "존재하지 않는 함수";
		return $content;
    }

    list ($text) = sql_fetch_row($result, $dbi);
    $content  = $text;
    return $content;
}
?>
}}}

==== 테스트 ====
파일을 열 때는 open(2)을 이용하고 파일을 닫을 때는 close(2)를 사용한다. 

=== 참고문헌 ===
 1. [http://doc.kldp.org/KoreanDoc/html/RCS/RCS.html RCS 레퍼런스]
