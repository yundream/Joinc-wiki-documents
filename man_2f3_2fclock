#title clock - 프로세서 시간을 구한다.

=== 사용법 ===
{{{#!plain
#include <time.h>

clock_t clock(void);
}}}

=== 설명 ===
clock()함수는 프로그램에의해서 사용된 대략적인 프로세스 시간을 리턴한다.

=== 반환값 ===
반환된값은 '''clock_t'''로 CPU시간으로 '''CLOCKS_PER_SEC'''로 나누면, 초로 환산할 수 있다. 만약 프로세서 시간을 얻을 수 없다면 (clock_t)-1을 리턴한다.

=== 참고 ===
{{{#!plain
 getrusage(2) , times(2)
}}}

=== 셈플 프로그램 ===
{{{#!plain linenum
#include <stdio.h>
#include <string.h>
#include <time.h>

mymemcpy(void *dst, void *src, unsigned int size)
{
  int i;
  char *a = (char *)src;
  int pad = size%sizeof(int);
  for(i = 0; i < size/sizeof(int); i++)
  {
    *(int *)dst = *(int *)src;
    dst +=4;
    src +=4;
  }
  for (i = 0; i < pad; i++)
  {
    *(char *)dst = *(char *)src;
    dst++;
    src++;
  }
}

struct data
{
  int age;
  char name[24];
  char a;
};
int main(int argc, char **argv)
{
  int i = 0;
  struct data src, dst;
  clock_t stime, etime;

  memset((void *)&dst, 0x00, sizeof(src));
  src.age = 10;
  src.a = 'a';
  sprintf(src.name, "%s", "yundream");

  stime = clock();
  for (i = 0; i < 10000000; i++)
  {
    mymemcpy((void *)&dst, (void *)&src, sizeof(src));
  }
  etime = clock();
  printf("Time : %.3fs\n",(double)(etime - stime)/CLOCKS_PER_SEC);
  printf("%d\n", dst.age);
  printf("%c\n", dst.a);
  printf("%s\n", dst.name);
}
}}}
메모리 카피하는 프로그램으로 성능을 측정하기 위해서 clock()함수를 사용했다.
