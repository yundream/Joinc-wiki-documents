#title 해시 - hash

== Hash ==
해시는 임의의 데이터를 해시알고리즘을 통과 시켜서 만들어낸 "전자지문"이다. 해시알고리즘은 동일한 데이터를 입력했을 때, 반드시 동일한 결과값(해시값)이 나온다는 보장한다.

이러한 해시의 특성을 이용해서 큰 크기의 파일을 비교하거나 중복되는 레코드를 찾는등의 애플리케이션을 개발할 수 있다. 

일상에서 가장 쉽게 찾아볼 수 있는 해시의 응용사례는 '''해시를 이용한 파일 변조 여부 검사'''다. 애플리케이션을 웹에서 배포한다고 가정해 보자. 이경우 다운로드 받는 사람은 애플리케이션의 변조여부를 확인할 수 있어야 한다. 이를 위해서 애플리케이션 배포자는 애플리케이션과 함께 애플리케이션 데이터로 부터 추출한 '''hash'''파일을 함께 배포한다. 

애플리케이션을 다운로드 받은 사용자는 해시 알고리즘을 이용해서 애플리케이션의 해시 값을 추출해서 원본 해시 값과 비교하는 방법으로 애플리케이션 변조 유무를 확인할 수 있다. 물론 서로 같은 해시 알고리즘을 사용해야 한다.

=== Hash table ===
해시 함수를 이용하는 가장 주요한 목적 중 하나는 해시 테이블을 만들기 위함이다. 해시 테이블은 데이터를 빠르게 찾기 위해서 만든다. 원본 데이터로 부터 추출한 해시가 키가 되고, 원본 데이터가 value가 되는 key <-> value 자료구조다. 

{{{#!html
<img src="https://docs.google.com/drawings/d/18F4U2Jl7OsYo7QRdBUM3OlXNZA1kQPIMU0RIEo1yXZU/pub?w=554&amp;h=309">
}}}

Hash 함수를 통과 함 key는 bucket에 저장이 된다. 위의 그림에서는 Bucket이 리스트가 아니다. 따라서 Value-A와 Value-D는 충돌(collision)로 인하여, 데이터를 잃어 버릴 수 있다. 이 경우 충돌을 피하기 위한 목적으로 bucket에 List를 저장할 수도 있다. 

=== 충돌 회피 ===
==== Separate chaining ====
Hash 함수는 원리적으로 key와 bucket을 1:1로 가져갈 수는 있다. 하지만 "무한한 가짓수의 입력을 받아서 유한한 가짓수의 출력 값을 만들어야 하는 경우" hash 충돌이 존재한다. 

=== consistent hashing ===
[wiki:man/12/ConsistentHashing Consistent hashing 참고]


== 참고 ==
 * [http://codecapsule.com/2013/05/13/implementing-a-key-value-store-part-5-hash-table-implementations/ Implementing a key value store]
