#title AWS - CloudSearch

[[TableOfContents]]
== CloudSearch ==
'''CloudSearch'''는 AWS에서 제공하는 검색 서비스로 ([[Date(2012-07-27T15:24:45)]])현재 Beta 서비스 중이다. 이 글은 CloudSearch를 분석하는게 목적이 아니다. 언젠가는 테스트 해보겠지만 아직은 AWS CloudSearch를 사용해 본적도 없다. 대략적인 서비스 개요를 확인 한 다음, 어떤식으로 개발하면 될지를 계획해볼 것이다.

== 개발 조건 정의 =
검색서비스를 위한 기술들은 Lucene이 있으니 크게 걱정할 필요는 없겠다. Lucene를 기반으로 한 검색엔진 중에서 Solr를 사용할 계획이다. 

검색이라는게 엔진이 잘 만들어져 있다고 해서 좋은 서비스가 만들어지는 분야가 아닌게 문제다. 일반적으로 검색 서비스를 하려면 다음과 같은 과정을 거친다.  
  1. 색인할 컨텐츠의 성질과 구조를 파악한다.  
  1. 조사한 컨텐츠 정보를 토대로 Field schema를 설계한다. 
  1. 컨텐츠를 색인한다.  
  1. 검색결과를 확인한다. 
  1. 검색결과를 이용해서 튜닝한다. 
     1. Length Norm
     1. Field Boost
     1. 구분 분석 방식
     1. 필요에 따라서는 단어사전 유지
     1. 검색시간
     1. Query planing  
2번 부터 5번까지를 무한 반복해서 품질을 높이는 작업을 수행한다. 예컨데, 검색 엔진가지고 이래저래 개발하는 개발 영역이 아닌, 컨텐츠 컨설팅 혹은 QA 작업에 가깝다. 클라우드 서비스의 생명은 온디멘드인데, 위의 과정을 거칠 수는 없는 일이다. 

해서 아래와 같이 서비스 대상과 범위를 제한할 것이다.
  1. 일반유저를 대상으로 하는 일반적인 문서들
  1. 일반적인 검색 알고리즘을 통한, 일반적으로 쓸만한 수준에서의 검색결과를 보여준다.
     * 엔진 수정은 없다.
     * 필드 부스트 값 정도만 수정할 수 있다. 이 작업은 유저가 한다. 서비스측에서는 UI만 제공한다.
  1. 구문분석는 제공한다.
     * 단어사전 같은건 제공하지 않는다.
  1. 웹 크롤기반이 아니다. 색인할 데이터의 위치를 알고 있어야 한다. 
     * Database를 색인하거나
     * RSS를 이용해서 색인하는 방식이다.

== 구성 ==
{{{#!html
<img src="https://docs.google.com/drawings/pub?id=1JJ3z6I9DIUX6EDOxNd6MGJ08y0x15Ox8aXEyQQsDGC0&amp;w=656&amp;h=324">
}}}
  * 검색엔진을 가진 VM이 만들어진다.
  * 검색 VM에는 Indexer과 Search 그리고 설정을 위한 Web UI 가 있다.
    * Web UI에는 RSS 주소와 database connection 설정과
    * Field 설정을 할 수 있다.
  * Indexer는 RSS 혹은 database connection을 이용해서 Contents 서버로 부터 데이터를 읽어와서 색인한다.
  * Searcher는 색인을 이용해서 Query에 대해서 응답을 한다.
  
=== 검색엔진 ===
Solr를 사용할 것이다. 

=== 서비스 품질 ===
전문 검색 품질이 중요한 컨텐츠 업체를 대상으로 하는 검색 서비스가 아니다. 사용자는 간단하게 검색 서비스를 이용할 수 있어야 한다. 사용자는 스키마 설계 같은 것에 신경쓰지 않는다. 단지 필드 부스트 정도를 설정할 수 있는데, 이 값도 색인시간이 아닌 질의시간에 설정할 수 있도록 한다. 검색 결과에 대한 하이라이트와 snippet 도 설정 없이 사용할 수 있어야 한다. 

=== 색인 방식 ===
웹 문서를 크롤링 하는 방식은 생각하지 않으려 한다. 범용 검색 서비스를 하려는게 아닌, 유저 컨텐츠에 대한 검색 서비스가 목적이기 때문이다.

=== 데이터베이스 색인 ===
많은 경우 데이터는 데이터 베이스에 저장되어있을 것이다. 다음과 같은 방식으로 데이터 베이스 값을 색인한다.
   * 검색 VM의 Web UI를 통해서 Database connection 설정을 한다.
   * 데이터베이스에 연결한 다음 테이블과 스키마 정보를 보여준다.
   * 색인에 사용할 필드를 선택한다. 
   * URL 패턴을 만든다. 데이터베이스를 기반으로 색인할 경우 테이블의 필드 값들을 조합해서 URL을 만들 수 있도록 UI를 제공해야 한다. 

처음에는 모든 컨텐츠를 색인하고, 그 다음 부터는 추가되는 데이터를 색인하면 된다. 이 방식에서는 '''수정되는 컨텐츠에 대한 색인 업데이트'''문제를 해결해야 한다. 

모니위키와 같이 에디터로그로 색인을 업데이트하는 방법이 있다. 모니위키는 위키 시스템이기 때문에, 문서 추가 뿐만 아니라 문서 수정도 중요한 데이터이고 따라서 수정정보도 따로 저장을 한다. 이 정보는 RSS로 받아올 수 있다. 

다른 방법으로 데이터베이스에서 order 필드를 설정하는 방법이 있다. 모든 컨텐츠를 저장하는 테이블은는 반드시 업데이트를 확인하기 위한 필드를 가지고 있다. 예컨데, updatetime 필드 같은 것들이다. 데이터베이스 설정 UI에서 order 필드를 선택하게 할 수 있을 것이다. 이렇게 하면 데이터베이스만으로 색인 가능할 것이다. 

=== RSS & Atom 색인 ===  
주기적으로 RSS 내용을 확인해서 업데이트를 한다. 쉬운 방법이긴 한데, 이미 상당량의 컨텐츠가 쌓였을 경우 좀 골치가 아프다. 처음 한번 전체 컨텐츠를 RSS로 보내는 방법이 제일 쉬운 방법일 것 같다. 일단 전체 컨텐츠에 대한 색인이 끝난 다음에는 RSS 설정을 바꾸면 되겠다. 

=== 공통 색인 방법을 제공하기 힘든 컨텐츠들 ===
몇몇 애플리케이션은 데이터베이스를 이용하지 않고, 나름대로의 방법으로 쌓는 경우가 있다. 예를들어 모니위키 같은 경우 위키 포맷으로 된 컨텐츠를 텍스트 파일로 저장한다. 

이런 컨텐츠도 색인하기 위한 방안을 제시해야 한다. rsync를 이용해서 파일들을 그대로 올리는 방법이 있다. 데이터 베이스의 경우 각 필드가 색인 필드에 대응하지만, 이런 류의 비정형 데이터는 "파일 이름"과 "본문내용" 두개의 필드만을 가질 수 밖에 없다. URL은 파일 이름을 조합해서 만들면 된다. rsync를 이용하면 변경이나 추가된 파일을 검사할 수 있으므로 비교적 쉽게 색인 추가와 업데이트 작업을 할 수 있다.

== 테스트 ==
[wiki:Site/Search/Document/Solr solr]를 검색엔진으로 사용한다. 데이터베이스 색인을 테스트할 건데, 대상은 wordpress 컨텐츠다. solr는 데이터베이스 색인을 위해 JDBC를 지원한다. 하지만 JDBC를 사용하진 않을 테다. 유저가 색인에 사용할 데이터베이스 필드를 설정해야 하는데, 이 검색설정 페이지를 PHP로 만들 계획이다.

이 PHP 프로그램은 데이터베이스 서버 설정을 읽어서 wordpress 데이터베이스에 연결한 다음에, 필드 설정대로 테이블의 필드 값을 읽어와서 XML형식으로 저장해서 색인한다. 

먼저 wordpress 부터 서치해야 겠다. 쩝. 오늘은 이만 자고 내일..부터..

== 히스토리 ==
  1. 문서작성 : [[Date(2012-07-30T15:02:09)]]
