= 개 요 =

 * 현재 프로젝트에서 Signal 처리를 함에 있어서 심도 있게 테스트 해보고 있는중, 꽤나 주의깊게 다뤄야 할 점이 많아서 비록 시그널 관련 내용을 윤드림님이 많이, 또한 잘 정리해놓았지만 잊지않기 위하여 중요 내용들을 다시한번 여기 정리한다.
 * 100% 정확하지 않은 내용이 있을수도 있으므로 (특히 OS별 차이) 정확히 아시는분은 적절히 수정해주시면 고맙겠다.
 * 현재 본인의 OS인 Ubuntu 에서의 테스트가 주 이었으며 솔라리스에서도 간단한 테스트를 해본결과 비슷한 결과를 보였다. 따라서, 테스트 없이 결과를  예상해본 내용도 일부 포함되어 있음을 미리 말해둔다.

= 프로세스로 시그널을 보낼때 =

== 동 작 == 

 * main()에서 해당 시그널이 블럭되어 있지 않다면 일단 인터럽트가 걸린다.
 * 해당 시그널에 대한 핸들러를 찾는데, 그 순서가 포함하고 있는 쓰레드에서 등록된 시그널 핸들러부터 시작한다.
   * 여러 쓰레드가 있을 경우 최근에 시작된 쓰레드로 부터 시작한다. (아래 보조 설명함)
   * 즉, 세개의 쓰레드를 가진 main()이 있다면 똑같은 시그널 핸들러가 main()과 첫번째 및 두번째 쓰레드에 등록되어 있다고 할때 두번째 쓰레드에 등록되어 있던 핸들러가 실행된다.
   * 핸들러 실행 후 main()에서 인터럽트되었던 다음 과정으로 복귀한다. 즉, 쓰레드의 핸들러가 실행되었다고 해서 쓰레드쪽으로 복귀하는것이 아니라, 인터럽트가 걸렸던 main()으로 복귀하는 것이다.
    * 포함쓰레드부터 main까지 해당 시그널의 핸들러가 없다면 기본 동작이 되는데 보통 종료된다.
    * 해당 시그널이 블럭이 되어있을 경우 핸들러를 찾는 과정에서 무시하고 다음 쓰레드에서 찾는다.

== 쓰레드로의 시그널 전파 ==

 * 이 메카니즘은 OS의 쓰레드 구조에 기반을 두고 있는것 같다.
 * 하나의 프로세스에서 다중 쓰레드를 관리하는 시스템에서는 PID가 하나이므로 이곳으로 보내는 시그널은 위에 설명한 바와 같이 최근에 실행된 쓰레드로부터 전파되기 시작하여 맨 마지막에 main()에서 핸들러를 찾는것 같으며,
 * 다중 쓰레드가 각각의 PID를 가지는 시스템들은 시그널이 전송되는 해당 쓰레드에서만 처리될것으로 보인다.
 * SystemV계열 BSD계열에 따라 차이가 있을것 같고, ANSI C기반인지 POSIX기반인지에 따라서도 차이가 있을것같다. POSIX 기반의 함수를 사용하면 동일한 결과를 보일것도 같다. 아래 man의 내용을 올린다.

=== PORTABILITY ===
{{{       
       The original Unix signal() would reset the handler to SIG_DFL, and System V  (and  the
       Linux  kernel  and  libc4,5) does the same.  On the other hand, BSD does not reset the
       handler, but blocks new instances of this signal from occurring during a call  of  the
       handler.  The glibc2 library follows the BSD behaviour.

       If  one on a libc5 system includes <bsd/signal.h> instead of <signal.h> then signal is
       redefined as __bsd_signal and signal has the BSD semantics.  This is not  recommended.

       If one on a glibc2 system defines a feature test macro such as _XOPEN_SOURCE or uses a
       separate sysv_signal function, one obtains classical behaviour.  This  is  not  recom&#8208;
       mended.

       Trying  to  change the semantics of this call using defines and includes is not a good
       idea.  It is better to avoid signal altogether, and use sigaction(2) instead.
}}}

=== NOTES ===
{{{
       The effects of this call in a multi-threaded process are unspecified.

       The routine handler must be very careful, since processing elsewhere  was  interrupted
       at some arbitrary point. POSIX has the concept of "safe function".  If a signal inter&#8208;
       rupts an unsafe function, and handler calls an unsafe function, then the  behavior  is
       undefined.  Safe  functions are listed explicitly in the various standards.  The POSIX
       1003.1-2003 list is

       _Exit() _exit()  abort()  accept()  access()  aio_error()  aio_return()  aio_suspend()
       alarm() bind() cfgetispeed() cfgetospeed() cfsetispeed() cfsetospeed() chdir() chmod()
       chown() clock_gettime() close() connect() creat() dup() dup2() execle() execve()  fch&#8208;
       mod()  fchown()  fcntl()  fdatasync()  fork()  fpathconf() fstat() fsync() ftruncate()
       getegid() geteuid() getgid() getgroups() getpeername()  getpgrp()  getpid()  getppid()
       getsockname()  getsockopt()  getuid()  kill()  link() listen() lseek() lstat() mkdir()
       mkfifo() open() pathconf() pause() pipe() poll() posix_trace_event() pselect() raise()
       read()  readlink()  recv()  recvfrom()  recvmsg() rename() rmdir() select() sem_post()
       send() sendmsg() sendto() setgid() setpgid() setsid() setsockopt() setuid() shutdown()
       sigaction()  sigaddset() sigdelset() sigemptyset() sigfillset() sigismember() signal()
       sigpause()  sigpending()  sigprocmask()  sigqueue()  sigset()   sigsuspend()   sleep()
       socket()  socketpair()  stat()  symlink() sysconf() tcdrain() tcflow() tcflush() tcge&#8208;
       tattr() tcgetpgrp() tcsendbreak() tcsetattr()  tcsetpgrp()  time()  timer_getoverrun()
       timer_gettime()  timer_settime() times() umask() uname() unlink() utime() wait() wait&#8208;
       pid() write().

       According to POSIX, the behaviour of a process is undefined after it ignores a SIGFPE,
       SIGILL,  or SIGSEGV signal that was not generated by the kill(2) or the raise(3) func&#8208;
       tions.  Integer division by zero has undefined result.  On some architectures it  will
       generate a SIGFPE signal.  (Also dividing the most negative integer by -1 may generate
       SIGFPE.)  Ignoring this signal might lead to an endless loop.

       See sigaction(2) for details on what happens when SIGCHLD is set to SIG_IGN.

       The use of sighandler_t is a GNU extension.  Various versions of libc  predefine  this
       type;  libc4 and libc5 define SignalHandler, glibc defines sig_t and, when _GNU_SOURCE
       is defined, also sighandler_t.
}}}


= 쓰레드로 시그널을 보낼때 =

 * 핸들러가 있다면 수행하고 인터럽트가 걸렸던 다음 부분으로 복귀한다. 


