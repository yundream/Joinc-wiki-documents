#title Strategy pattern 

== Strategy Pattern ==
http://www.dofactory.com/Patterns/Diagrams/strategy.gif

'''strategy pattern'''은 소프트웨어 디자인 패턴의 하나로, 실행시간에 알고리즘(:12)을 선택하기 위한 목적으로 사용된다. policy pattern 이라고 부르기도 한다.

이 패턴은 알고리즘군을 정의하고 각각을 캡슐화하고 교환해서 사용할수 있도록 만든다. 이 패턴을 이용해서 만들어진 소프트웨어는 원본 소스크드의 변경없이 알고리즘을 추가할 수 있으며, 추가된 알고리즘을 동적으로 적재할 수 있다. 결과적으로 클라이언트의 요청에 유연하게 대응할 수 있는 소프트웨어의 개발이 가능하게 한다. 

C언어의 경우에는 함수포인터(:12)와 동적라이브러리(:12)적재를 통해서 이를 구현할 수 있다. 

 * 구현예 : [wiki:Site/C/Documents/ProtocolFunction 함수포인터를 이용한 프로토콜 처리]
 * 구현예 : [wiki:Site/system_programing/Unix_Env/Library#AEN93 동적라이브러리를 이용한 계산기]
 * 구현예 : [wiki:Site/C%2B%2B/Documents/Dynamic_Class_Loading 클래스 동적적재]
 * Perl로도 구현해봐야 겠다.
