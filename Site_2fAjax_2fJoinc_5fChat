#title Ajax Chating 서비스 제작 2탄

음.. IRC를 이용해서 Ajax(:12) 채팅 서버를 만들어보려고 했는데, 아무래도 좀 복잡한 감이 있어서 중단하고 간단하게 만들어 보기로 했다. 이번에는 기필코 완성해야지 흑.. 프로토콜만 IRC(:12)를 사용하지 않을 뿐 기본 구조는 동일하게 가져갈 것이다. 즉
   1. write 와 read를 분리하고
   1. write 는 GET(:12) 방식, read는 서버 push 방식
을 사용할 것이다.

=== 채널 특성 ===
  * 유저는 하나의 채널에서 대화를 할 수 있다.
  * 채널간 대화는 허용하지 않는다.
  * 채널내에서의 귓말

=== 서버프로그램 구성 ===
유저로부터 데이터를 읽어들이는 read 서버, 읽어들인 데이터를 채널의 유저에게 보내는 write 서버로 구성된다.
{{{#!plain
      +-----------+       GET        +--------------+
      | Read      |<-----------------| Client       |
  +---| Server    |                  | Web Browser  |
  |   +-----------+                  +--------------+
  |   +-----------+ 
  +-->| Channel   |
      | Message   |
  +---| Queue(:12)     | 
  |   +-----------+
  |   +-----------+  Server Push     +--------------+
  +-->| Write     |----------------->| Client       |
      | Server    |                  | Web Broser   |
      +-----------+                  +--------------+
}}}
==== Channel Message Queue 의 구현 ====
Message Queue는 파일로 구현할 것이며 환형큐(:12)자료구조를 가지도록 할 것이다. 메시지는 이 파일에 고정된 Recode 길이로 쌓이게 된다. 이 파일의 구조는 다음과 같다. 
{{{#!plain
  |<-- 4 -->|<---- 256 ----->|
  +---------+----------------+----------------+    +----------------+
  | Header  | Message        | Message        |....| Message        | 
  +---------+----------------+----------------+    +----------------+
}}}
Header는 다음의 값을 가진다.
  1. Index : 현재 읽어야할 메시지의 위치
  1. Size : queue의 크기  
'''Message'''는 유저가 쓴 메시지로 256 byte의 고정길이를 가지도록 할 것이다. 고정길이로 한 이유는 순전히 귀차니즘 때문이다.

Header의 Index와 Size값을 알고 있다면 환형큐는 간단히 구현할 수 있을 것이다.

이제 문제는 새로운 메시지가 들어왔는지 확인하기 위해서 바쁜대기 상태에 놓이지 않도록 장치를 마련하는 것이다. 여기에서는 record 잠금(:12)을 이용할 생각이다. 각 Message의 첫 byte(:12)를 잠금영역으로 사용할 것이다. Channel Message Queue로 부터 데이터를 읽어가는 write 서버 프로그램은 잠금에서 대기를 하게 된다. 잠금을 푸는 서버는 read 서버로 큐에 새로운 메시지를 집어 넣었다면 해당 레코드에 대한 잠금을 풀고 다음레코드를 잠그게 된다. 

==== read 서버 ====
유저로 부터 데이터를 읽어들이는 서버프로그램이다. 클라이언트로부터 HTTP(:12)프로토콜의 GET(:12)을 통해서 넘어온 데이터를 읽어들인다음에 이 정보를 채널파일에 append 한다.

==== write 서버 ====
  * 채널당 하나의 채널 thread(:12)를 생성 한다. 채널정보를 유지하기 위한 아래와 같은 객체를 생성한다. 부모쓰레드는 채널번호를 Key로 하고 아래의 객체리스트를 value로 하는 배열을 유지한다.
      || id        || 채널 ID                 ||
      || uid     || 유저 ID                  ||
      || sid      || 소켓 지정자         ||
      || msgWrite  || sid로 write하기 위한 메서드        ||
  * 유저는 채팅을 할 채널 ID를 가지고 HTTP(:12) 프로토콜을 이용해서 접근한다.
  * 부모쓰레드는 유저객체를 생성하고 채널 목록에 추가한다.
  * 각각의 채널쓰레드는 자신이 관리하는 채널파일에 새로운 메시지가 추가되는 지를 확인한다. tail(:12)의 간단한 응용이다.
  * 만약 새로운 메시지가 추가되었다면, 채널.id.msgWrite 를 이용해서 유저에게 메시지를 Push 한다.
