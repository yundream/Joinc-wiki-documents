* Counting Like a Computer 임시 번역 페이지 2006/02/06 시작!!
 * '''처음에는 영문 밑에 한글을 써나갈 것입니다. 그래서 의미가 달라지지 않았는가 번역에 오류는 없는가 검사하기 편하게요.'''

[[TableOfContents]]

= Chap 10. Counting Like a Computer =

== Counting ==

=== Counting Like a Human ===

컴퓨터는 여러가지 면에서 사람과 유사한 방식의 계산을 한다. 그래서 컴퓨터가 어떻게 계산을 하는지 알아보기 전에 우리 사람이 어떻게 계산하는지 부터 자세히 알아보자.
사람은 손가락이 몇개일까? 넌센스 문제가 아니다. 사람은 (정상적인..) 열개의 손가락을 가지고 있다. 무슨 상관일까? 사람이 쓰는 수 개념을 보면 손가락의 갯수와 관련이 있음을 알게된다. 어떤 상황에서 한자리 숫자가 두자리 숫자가 될까?

맞다. 10이다. 사람은 10을 기본 단위로 숫자를 센다. 10이 기본 단위라는 것은 사람은 무엇이든지 10개 단위로 센다는 뜻이 된다. 양을 센다고 해보자. 1,2,3,4,5,6,7,8,9,10. 왜 갑자기 두개의 숫자가 생겨났고 1을 다시 쓰게 되나? 그것은 우리가 숫자를 10 단위로 묶어서 생각하고  열 마리의 양을 한 그룹으로 생각하기 때문이다. 이제 다음 숫자 11로 넘어가보자.

11마리의 양은 우리가 10마리로 된 한 그룹의 양을 가지고 있고 거기에 1마리 양이 더 있다는 의미이다. 계속하면 12, 13, 14, 15, 16, 17, 18, 19, 20이 된다. 이제 우리는 열마리짜리 양 그룹을 두개 가지고 있다. 21은 두 그룹의 양과 1 그룹에 안들어있는 한마리의 양이 있다는 것이다. 계속 더하면 97,98,99,100이 된다. 아까와 같은 일이 또 반복된다. 100으로 넘어갈 때 무슨 일이 벌어진걸까? 우리는 10마리 양 그룹을 10개 가지게 됐다. 101은 여기에서 그룹에 못들은 1마리 양이 더 생긴 것이다.
우리는 어떤 수라도 이렇게 이해할 수 있다. 60879마리의 양을 센다면 열마리 양 그룹이 열개 있고 이게 또 열개 있고 또 열개 있고 또 열개 있는게 6개가 있다는 것이고, 열마리 그룹이 열개있고 이게 또 열개 있고... (역자: 알아서 이해하시라...)

이렇게 10개를 그룹으로 계산하는 것에 뭔가 특별한 점이 있을까? 아니다. 우리가 10개의 손가락을 가지고 하던 방식 그대로이다. 우리는 (새로운 숫자를 만들어 낸다면) 9개나 11개를 그룹으로 셀 수도 있을 것이다.

그룹으로 묶는 갯수가 달라지면 우리는 곱셈이나 덧셈, 뺄셈, 나눗셈을 각 그룹 방식에 맞게 새롭게 배워야 한다. 하지만 기본적인 규칙은 바뀌지 않는다. 표현하는 방식만 달라질 뿐이다.

마찬가지로 위에서 배운 계산 방식도 달라진다. 예를 들어 그룹 단위로 10대신 9를 써보면 한 자리가 늘어나는 것이 10을 곱한 결과가 아니라 9를 곱한 것이 된다. 500은 50의 9배를 한 결과가 된다.

=== Counting Like a Computer ===
그럼 컴퓨터가 숫자를 세기 위해서는 몇개의 손가락이 필요할까? 컴퓨터는 손가락이 두개밖에 없다. 2개를 한 그룹으로 계산한다는 말이다. 그러면 이진법으로 숫자를 세어보자.
0(영), 1(하나), 10(둘 - 두개가 한 그룹), 11(셋 - 한 그룹에 한개가 남음), 100(넷 - 두개씩 두 그룹), 101(다섯 - 두개씩 두 그룹과 한개 남음)...으로 계속된다.
이진법에서는 어떤 수에 2를 곱하면 한자리가 왼쪽으로 늘어난다.
이진법을 바이너리라고도 부른다. 이진법을 사용하면 좋은 것이 기본적인 수학 연산이 매우 간단해진다는 것이다.
이진법은 매우 간단하다.

이진법 덧셈
{{{
+ | 0 | 1
--+-----+-----
0 | 0 | 0
--+-----+-----
1 | 1 | 10
}}}

이진법 곱셈
{{{
* | 0 | 1
--+-----+-----
0 | 0 | 0
--+-----+-----
1 | 0 | 1
}}}

10010101과 1100101을 더해보자.

{{{
10010101
+ 1100101
-----------
11111010
}}}

이번에는 곱해보자.

{{{
      10010101
*      1100101
-----------
      10010101
     00000000
    10010101 
   00000000
  00000000
 10010101
10010101
---------------
11101011001001
}}}


=== Conversions Between Binary and Decimal ===


이진법의 숫자를 십진법으로 바꾸는 방법을 배워보자. 사실 매우 간단하다. 각 자리수가 2개로 묶인 그룹의 개수를 나타낸다는 것을 기억할 것이다.
우리는 단지 각 자리의 숫자대로 더해주기만 하면 십진수의 숫자를 만들 수 있다. 10010101을 가지고 십지수의 의미를 알아보기 위해 다음과 같이 생각해보자.

{{{
1 0 0 1 0 1 0 1
| | | | | | | |
| | | | | | | 한 개만 남은 나머지 (2^0)
| | | | | | 0 2개로 된 그룹 (2^1)
| | | | | 1 4개로 된 그룹 (2^2)
| | | | 0 8개로 된 그룹 (2^3)
| | | 1 16개로 된 그룹 (2^4)
| | 0 32개로 된 그룹 (2^5)
| 0 64개로 된 그룹 (2^6)
1 128개로 된  (2^7)
}}}

이렇게 각 자리의 수들을 조각낸 다음 하나씩 더해보면 다음과 같이 된다.

{{{
1*128 + 0*64 + 0*32 + 1*16 + 0*8 + 1*4 + 0*2 + 1*1 =
128 + 16 + 4 + 1 =
149
}}}


그래서 바이너리 숫자 10010101은 십진수로 129가 된다. 1100101의 경우는 다음과 같이 된다.

{{{
1*64 + 1*32 + 0 * 16 + 0*8 + 1*4 + 0*2 + 1*1 =
64 + 32 + 4 + 1 =
101
}}}

그래서 바이너리 숫자 1100101은 십진수로 101이 된다. 하나만 더 보자. 1101011001001은 다음과 같이 십진수로 변환된다.

{{{
1*8192 + 1*4096 + 1*2048 + 0*1024 + 1*512 + 0*256 + 1*128 + 1*64 + 0*32 + 0*16 + 1*8 + 0*4 + 0*2 + 1*1 =
8192 + 4096 + 2048 + 512 + 128 + 64 + 8 + 1 =
15049
}}}


이렇게 변환한 숫자들은 방금 위에서 우리가 곱한 숫자와 같다. 101 * 149 = 15049가 된다.

십진수를 이진수로 바꾸는 것을 알아보자. 두개씩 한 그룹을 만들기 위해 나누기를 해야 한다. 17이라는 숫자가 있을 때 2로 나누게 되면 1이 남고 몫이 8이 된다.
즉 두개로 된 그룹이 8개가 있고 1개가 그룹에 속하지 못했다는 것이다. 즉 가장 오른쪽 자리가 1이 된다는 말이다.

이제 첫번째 자리 수를 알았고 8개의 그룹이 남았다. 몫을 또 2로 나누면 4가 되고 나머지가 없게된다. 즉 두개로 묶인 그룹을 또 두개로 묶은게 4개가 된다는 의미이다.
따라서 다음 자리 수는 0이 되고 그리고 또 이 그룹을 2개씩 묶을 수 있다. 이제는 8개로 된 그룹이 두개가 있고 또 두개씩 묶으면 1만 남는다.
1은 2로 나눠도 몫이 없고 1이 남기 때문에 마지막 자리는 1이 된다.

결국 얻은 수는 10001이다. 이전에 십진수 15049를 이진수 11101011001001로 변환한 과정을 거꾸로 해보자.

우리가 변환을 바르게 했는지 확인해볼 수 있다.

{{{
15049 / 2 = 7524 나머지 1
7524 / 2 = 3762 나머지 0
3762 / 2 = 1881 나머지 0
1881 / 2 = 940 나머지 1
940 / 2 = 470 나머지 0
470 / 2 = 235 나머지 0
235 / 2 = 117 나머지 1
117 / 2 = 58 나머지 1
58 / 2 = 29 나머지 0
29 / 2 = 14 나머지 1
14 / 2 = 7 나머지 0
7 / 2 = 3 나머지 1
3 / 2 = 1 나머지 1
1 / 2 = 0 나머지 1
}}}

나누고 남은 수들을 위에서부터 써보면 원래 이진수를 얻을 수가 있다. 첫번째 나머지가 첫번째 자리수가 되고 끝까지 내려오다보면 11101011001001을 얻을 수가 있다.

이진수에서 각 자리의 숫자를 '비트'라고 부른다. 컴퓨터는 저장 장치를 바이트 단위로 나눠서 처리한다. x86 프로세서는 (대부분의 다른 프로세서처럼) 저장 장치의 위치 지정을 8비트 단위로 한다.
이전에 우리는 한 바이트가 0에서 255 사이의 수를 나타낼 수 있다고 배웠다. 그 이유는 8비트로 나타낼 수 있는 가장 큰 숫자가 255이기 때문이다.
이진수 11111111를 십진수로 직접 바꿔보면 이해할 수 있다.

{{{
11111111 =
(1 * 2^7) + (1 * 2^6) + (1 * 2^5) + (1 * 2^4) + (1 * 2^3)
+ (1 * 2^2) + (1 * 2^1) + (1 * 2^0) =
128 + 64 + 32 + 16 + 8 + 4 + 2 + 1 =
255
}}}

16비트로 나타낼 수 있는 가장 큰 수는 65535이다. 32비트로는 4294967295까지 나태날 수 있다. 64비트는 18,446,744,073,709,551,615이고 128비트는 340,282,366,920,938,463,463,374,607,431,768,211,456이다. x86 프로세서에서는 레지스터들의 크기가 4바이트이므로 대부분 4바이트(32비트) 크기의 수를 다루게 될 것이다.

== 참, 거짓의 진리값과 이진수 Truth, Falsehood, and Binary Numbers ==

이제 우리는 컴퓨터가 모든 것을 1과 0만으로 저장한다는 것을 알았다. 이것들을 다르게 쓰는 법을 한번 알아보자. 비트의 나열을 숫자로 보는 것 말고 일종의 스위치들의 집합으로 생각해보자.
예를 들어 집에서 전등을 켜는 4개의 스위치가 있다고 생각해보자.


마당에 있는 전등의 전원 스위치와 복도, 거실, 침실의 전등 스위차가 있다. 이 전등들이 켜있는지 꺼져있는지를 보기위해 다음과 같은 테이블을 만들 수 있다.

{{{
마당 복도 거실 침실
켜짐 꺼짐 켜짐 켜짐
}}}

복도를 제외하고는 모든 전등이 켜져있는 것을 확실히 알 수 있다. 이제 '켜짐'이나 '꺼짐'이라는 말 대신에 숫자 1과 0을 써보자. 1은 켜진 상태를 나타내고 0은 꺼진 상태를 나타낸다.
그래서 똑같은 정보를 다음과 같이 나타낸다.

{{{
마당 복도 거실 침실
1    0    1    1
}}}

이제 전등 스위키 이름을 붙이지 말고 각 자리가 어디의 전등을 나타내는 것인지를 기억하면서 숫자만을 적어보자. 같은 정보를 1 0 1 1 이나 1011로 표시할 수 있다.

이것이 컴퓨터 저장 장치를 이용하는 다양한 방법 중에 하나이다. 숫자만을 저장할 수 있는게 아니다. 
컴퓨터의 메모리가 숫자들로 보이지만 프로그래머는 이 수들을 가지고 상상할 수 있는 모든 것들을 표현할 수 있다. 프로그래머들은 가장 좋은 표현을 알아내기 위해 창조력을 발휘해야 할 때도 있다.

이진수를 가지고 일반적인 산술 계산만 할 수 있는게 아니라 논리 연산이라는 것도 할 수가 있다. 일반적인 바이너리 연산들은 AND, OR, NOT, XOR 등이 있다.

각 연산들이 무엇인지 설명하고 예를 들어보겠다. AND는 두 비트를 가지고 한 비트를 뽑아내는 연산이다. AND는 두 비트가 모두 1이면 1을 출력하고.
그 외에는 모두 0을 반환한다. 예를 들어 1 AND 1은 1이고 1 AND 0, 0 AND 1, 0 AND 0은 모두 0이 된다.

OR은 두개의 비트를 가지고 한 비트를 반환한다. 두 비트중에 하나라도 1이면 1을 반환한다. 예를 들어 1 OR 1, 1 OR 0, 0 OR 1은 모두 1이고 0 OR 0만 0이 된다.

NOT 연산은 한 비트를 가지고 반대 비트값을 반환한다. NOT 1은 0이고 NOT 0은 1이 된다. 마지막으로 XOR은 OR 과 비슷한데 두 비트가 모두 1일 때 0을 반환한다는 것만 다르다. 컴퓨터는 이런 논리 연산을 할 때 하나의 레지스터에 있는 모든 비트들을 한꺼번에 계산할 수 있다. 예를 들어 어떤 레지스터가 10100010101010010101101100101010 값을 가지고 다른 하나가 10001000010101010101010101111010 값을 가진다면 
레지스터의 모든 비트들에 대한 연산을 한꺼번에 할 수 있다.

예를 들어 이 두 숫자를 AND 연산한다면 컴퓨터는 첫번째 비트부터 32번째 비트까지 연산할 것이고 다음과 같이 될 것이다.

{{{
10100010101010010101101100101010 AND
10001000010101010101010101111010
--------------------------------
10000000000000010101000100101010
}}}


계산 결과를 보면 알겠지만 두 비트가 모두 1일 때는 1이 되고 그 외의 경우에는 0이 된다. OR 연산은 다음과 같다.
{{{
10100010101010010101101100101010 OR
10001000010101010101010101111010
--------------------------------
10101010111111010101111101111010
}}}

OR 연산은 한 비트만 1이라도 결과값이 1이 된다. NOT 연산을 보면 다음과 같다.
{{{
NOT 10100010101010010101101100101010
------------------------------------
01011101010101101010010011010101
}}}


각 비트를 반전시키기만 한다. 마지막으로 XOR은 OR과 비슷하지만 두 비트가 모두 1일 때는 0이 되는게 다르다.
{{{
10100010101010010101101100101010 XOR
10001000010101010101010101111010
--------------------------------
00101010111111000000111001010000
}}}

NOR에 사용된 두 숫자는 OR 연산에서 사용한 숫자와 같다. OR 연산과 비교해보면 XOR이 어떻게 동작하는지 알 수 있을 것이다.
또한 어떤 수를 그 자신과 XOR 연산을 하면 다음에서 보다시피 항상 0이 된다.
{{{
10100010101010010101101100101010 XOR
10100010101010010101101100101010
--------------------------------
00000000000000000000000000000000
}}}

이 연산들이 쓸모있는 이유는 두가지 이다.

 * 컴퓨터가 매우 빠른 속도로 실행할 수 있다.
 * 동시에 많은 진리 값을 비교할 수 있다.

서로 다른 명령어들은 다은 속도로 실행된다는걸 모를지도 모르겠다. 정말 그렇다. 그리고 이 연산들은 대부분의 프로세서들이
최고로 빠르게 처리할 수 있는 연산들이다. 예를 들어 0을 만들 때 XOR을 사용하는 것을 봤을 것이다. XOR 연산은 로딩하는 동작보다 빠르기 때문에
많은 프로그래머들이 레지스터에 0을 저장하기 위해 사용한다.

예를 들어 movl $0, %eax 라는 코드는 xorl %eax, %eax 로 더 많이 사용된다.


12장에서 속도에 대해서 더 자세히 설명하겠지만 이진 연산자들을 이용해서 더 빠른 속도를 낼 수 있는 트릭을 알아두면 좋을 것이다. 이제는 어떻게하면 
논리 연산자들을 가지고 참/거짓 값을 만들 수 있는지 알아보자.

이전에 우리는 어떻게 하면 이진 숫자들을 가지고 갯수를 셀 수 있는지 이야기했다. 이제 이진 수를 가지고 우리 아빠랑 내가 좋아하는 물건들을 표현해보자.
우선 내가 좋아하는 것들이다.

먹기 : 좋다
헤비메탈음악 : 좋다
양복 입기 : 싫다
축구 : 좋다

다음은 우리 아빠가 좋아하는 것들이다.

먹기 : 좋다
헤비메탈음악 : 싫다
양복 입기 : 좋다
축구 : 좋다

'좋다'를 1로, '싫다'를 0으로 나타내보자. 다음과 같이 될 것이다.

나

먹기 : 1
헤비메탈음악 : 1
양복 입기 : 0
축구 : 1

아빠

먹기 : 1
헤비메탈음악 : 0
양복 입기 : 1
축구 : 1


어떤 자리수가 어느 물건을 가르키는지 기억한다면 다음과 같이 나타낼 수도 있을 것이다.

나 1101
아빠 1011

이제 나와 우리 아빠가 함께 좋아하는 것들을 나타내보자. AND 연산자를 쓰면 된다.

{{{
1101 AND
1011
--------
1001
}}}


연산 결과를 해석하면 무엇을 동시에 좋아하는지 알 수 있다.

먹기 : 맞음
헤비 메탈 음악 : 아님
양복 입기 : 아님
축구 : 맞음

컴퓨터는 0이나 1이 무엇을 의미하는지 모른다. 각 자리수의 의미를 기억하는 것은 우리가 직접 하거나
우리가 만든 프로그램이 해야 할 일이다. 이러한 표현 방법을 써서 프로그램을 만들 때에는 반드시 각 자리의 코드가 무엇을 의미하는지
반드시 사용자에게 알려주어야 한다. (만약 당신이 컴퓨터에게 당신과 당신 아버지가 같이 좋아하는게 무엇이냐고 물어봤을 때
컴퓨터가 1001 이라고 답하면 그것은 아무 소용도 없는 표현이 되버릴 것이다.)

어쨋든 뭔가 서로 다른 것에 대해서 표현하고 싶을 때는 XOR을 쓰면 된다. XOR은 한쪽만 1이고 다른 쪽은 0일 때,
즉 서로 다른 값일 때 1을 출력하고 나머지는 0을 출력하기 때문이다. 따라서 다음과 같은 계산이 된다.

{{{
1101 XOR
1011
--------
0110
}}}


지금까지 다뤘던 AND, OR, NOT, XOR 연산자들은 부울 연산자라고 불린다. 왜냐하면 George Boole 이라는 사람이 처음으로 연구했기 때문이다.
지금까지 부울 연산자나 부울 대수가 무엇인지 알아보았다.

부울 연산자뿐 아니라 부울 연산에 속하지 않는 두가지 이진 연산자가 있다. shift와 rotate 인데 이들은 그 이름이 말하는 것처럼
어떤 수를 오른쪽이나 왼쪽으로 이동시키거나 회전시키는 일을 한다.

왼쪽 shift 연산은 이진 숫자를 한칸 왼쪽으로 옮긴다. 그리고 오른쪽에 빈 자리에는 0을 채워넣는다. 왼쪽 rotate는
비슷한 일을 하지만 오른쪽에 빈 자리에 가장 왼쪽에 있던 수를 넣는 것이 다르다.

예를 들면,
왼쪽 Shift  10010111 = 00101110
왼쪽 Rotate  10010111 = 00101111

만약에 이진 수의 자리수 만큼 rotate를 실행하면 다시 원래의 수로 돌아온다는 것을 알 수 있다. 그러나 shift를 자리수만큼 실행하면
0이 될 것이다.

그래서 이런 연산자들이 어디에 쓰인다는 것일까? 만약 이진 수로 무엇인가를 표현한다면 이런 쉬프트 연산이 각각의 값을 확인하는데 사용될 수 있다.
예를 들어 우리 아빠의 기호품을 32비트 레지스터에 저장하면 다음과 같이 될 것이다.
00000000000000000000000000001011

이게 프로그램의 결과물이 아니고 이 값을 가지고 뭔가 쉬프트를 하거나 마스킹을 해야 한다.
마스킹이란 원하지 않는 값들을 지우는 작업을 말한다. 예를 들면, 우리가 어떤 값을 원한다면
원하는 값을 특정 위치에 가도록 쉬프트를 하고 나머지 원하지 않는 자리의 숫자들은 마시킹을 하는 것이다. 

마시킹은 우리가 원하는 자리는 1이고 원하지 않는 자리는 0으로 설정된 값과 AND 연산을 하는 식으로 이루어진다.
예를 들어 우리 아빠가 정장 입기를 좋아하시는지 아닌지를 알아보고 싶다고 하자. 해당 데이터는 오른쪽에서 두번째 자리의 숫자이다.

그러면 전체 숫자를 오른쪽으로 1칸 쉬프트를 해보자. 다음과 같은 수가 될 것이다.

00000000000000000000000000000101

그리고 우리가 원하는 데이터만을 보기 위해 00000000000000000000000000000001 으로 마스킹을 해보자.
다음과 같은 계산식으로 처리된다.

{{{
00000000000000000000000000000101 AND
00000000000000000000000000000001
-----------------------------------
00000000000000000000000000000001
}}}

우리 아빠가 정장을 좋아하시면 레지스터의 값이 1이 될 것이고 아니면 0이 될 것이다. 
결국 레지스터의 값을 1과 비교해서 결과에 맞게 메시지를 출력하면 될 것이다.
코드로 만들면 다음과 같이 될 것이다.

{{{
#NOTE - %ebx 레지스터에 아빠가 좋아하는 것들이 저장되어 있다
movl %ebx, %eax #원본 데이터를 %eax에 저장해서
#원본 데이터를 잃어버리지 않게 한다.
shrl $1, %eax #1번 오른쪽으로 쉬프트한다.
#첫번째 오퍼랜드 $1은 몇번 쉬프트할 것인지를 지정하고
#두번째 오퍼랜드 %eax는 어떤 레지스터인지를 지정한다.

#마스킹을 한다.
andl $0b00000000000000000000000000000001, %eax
#결과값이 1인지 확인한다.
cmpl $0b00000000000000000000000000000001, %eax
je yes_he_likes_dressy_clothes
jmp no_he_doesnt_like_dressy_clothes
}}}

코드 아래로 가면 정장을 좋아하는지 아닌지에 따라서 뭔가 메시지를 출력하는 코드들이 있는 라벨이 두개 있을 것이다.
0b는 뒤에 있는 숫자가 이진 숫자라는 것을 말한다. 1은 어느 진법이나 1이므로 이진수라는 것을 꼭 지정하지 않아도
상관이 없다. 하지만 명확하게 하기 위해 써주었다. 마찬가지로 0을 31번 써줄 필요가 없지만 32비트라는 것을 나타내기 위해
일부러 써주었다.

어떤 숫자가 함수나 시스템 콜에서 옵션을 나타낼 때 한 비트의 값을 플래그라고 부르기도 한다. 많은 시스템 콜들이
다양한 옵션을 가지고 있고 지금까지 했던 연산들을 가지고 이런 옵션을 지정할 수 있다. open 시스템 콜을 쓸 때를 예로 들면
두번째 함수 인자가 플래그를 나타내고 운영체제에게 파일을 어떻게 열어야 하는지를 말해주게 된다.
다음은 일부 플래그들을 나타낸 것이다.

O_WRONLY
이진수로 0b00000000000000000000000000000001로 나타낼 수 있고 8진수로는 01이 된다.
파일을 쓰기만 가능하게 연다.

O_RDWR
이진수로 0b00000000000000000000000000000010로 나타내고 8진수로는 02가 된다
파일을 읽고 쓰기가 모두 가능하도록 열게 된다.

O_CREAT
이진수로 0b00000000000000000000000001000000 이고 8진수로는 0100 이다.
파일이 만약 없다면 새로 생성하라는 의미이다.

O_TRUNC
이진수로 0b00000000000000000000001000000000 이고 8진수로 01000 이다.
파일이 이미 있다면 그 내용을 지우라는 의미이다.

O_APPEND
이진수로 0b00000000000000000000010000000000 이고 8진수로 02000 이다.
파일에 데이터를 쓸 때 파일의 처음부터 시작하는게 아니라 끝에서 시작하도록 한다.


이런 플래그들을 쓸 때 여러 옵션들을 동시에 지정하려면 OR 연산만 하면 된다. 예를 들어 파일을 쓰기 전용으로 열고
파일이 없다면 새로 생성하도록 하고 싶을 때 O_WRONLY과 O_CREAT를 같이 써야 한다. 이럴 때 OR를 써서
O_WRONLY or O_CREAT로 계산해서 0101을 지정해주면 된다.

O_WRONLY 나 O_RDWR 둘 중에 아무것도 지정하지 않으면 자동으로 읽기 전용 모드로 파일을 연다. 많은 함수들과
시스템 콜들이 옵션을 설정하기 위해 플래그를 사용하는데 한 비트가 하나의 옵션을 나타내고 최대 32비트 인자를 사용하면
32개의 옵션을 나타낼 수 있게 되는 것이다.

== The Program Status Register ==

지금까지 레지스터의 각 비트가 어떻게 예/아니오 와 참/거짓의 상태를 표현하는지 알아보았다. 우리가 쓰는 컴퓨터에는
프로그램 상태 레지스터라고 불리는 레지스터가 있다. 이 레지스터는 컴퓨터의 연산에 대한 다양한 정보들이 저장되어 있다.
만약 두 레지스터를 더했는데 결과값이 레지스터가 저장할 수 있는 값보다 크면 어떻게 될까? 프로그램 상태 레지스터는
캐리 플래그라는 플래그를 가지고 있는데 이 플래그를 확인해서 최근에 오버플로우가 발생했는지를 확인할 수 있다
다른 상태들을 나타내는 다양한 플래그들이 있다. 사실 비교 명령어 cmpl를 실행할 때 그 결과값도 이 레지스터에 저장된다.
조건 점프 명령 jge, jne 등도 점프를 해야할지 말아야 할지를 알기 위해 이 레지스터의 값을 확인하고
jmp는 상태를 상관하지 않고 무조건 점프하는 명령이므로 상태 레지스터를 상관하지 않는다.

만약 32비트보다 큰 값을 저장해야 한다면 어떻게 해야 할지 알아보자. 그 값이 64비트로 저장된다면 어떻게 해야 할까?
만약 두 개의 64비트 값을 더하고 싶다면 낮은 자리 수가 저장된 레지스터부터 더할 것이다. 만약 낮은 자리 수를 더했을 때
캐리가 발생했다면 높은 자리 수를 더할 때 이 캐리도 같이 더해야 할 것이다. 십진수 덧셈을 할 때 더한 수가 9를 넘으면
1을 높은 자리에 더해주는 것처럼 낮은 자리가 저장된 레지스터에서 끝자리에서 캐리가 발생하면 다음 레지스터에
1을 더해주어야 할 것이다. 이럴 때 상태 레지스터를 사용해서 낮은 자리의 레지스터를 더하고 캐리 플래그를 확인해서
높은 자리의 레지스터의 덧셈에 사용하면 된다. 물론 거의 대부분의 연산이 32비트로 해결되기는 한다.
프로그램 상테 레지스터에 대해 더 알고 싶다면 Appendix B를 확인하도록 하자.

== Other Numbering Systems ==

지금까지 다룬 것들은 양의 정수들이었다. 하지만 실제로는 양의 정수만 다루지 않는다. 음수나 소수도 다루게 될 것이다.

=== Floating-Point Numbers ===

지금까지는 소수점이 없는 정수들만을 다뤘다. 컴퓨터는 정해진 크기의 유한한 값만 저장할 수 있기 때문에
보통 소수점이 있는 수들을 계산하는데 어려움이 있다. 1/3같이 무한한 소수는 그 길이가 정해지지 않는다.

컴퓨터가 소수를 저장할 때는 어느 정도까지만 자리수를 저장하는 방식을 쓴다. 컴퓨터는 지수와 가수로 나눠서 소수를 저장한다.
가수는 실제 수를 나타내고 지수는 가수의 10의 배율을 나타낸다.  예를 들어 12345.2는 1.23452 * 10^4 로 저장된다.
가수는 1.23452이고 지수는 4가 된다. 모든 숫자들이 이렇게 X.XXXXX *10^XXXX 로 저장된다. 1은 1.00000 * 10^0으로 저장된다.

지수와 가수가 매우 크다면 신기한 문제들이 생기기도 한다. 예를 들어 정수에 1을 더하면 결과값은 원래의 수보다 1이 더 커진 값이 되야 한다.
하지만 부동 소수점 연산에서는 이게 반드시 그렇기만 한게 아니다. 만약 5.234 * 10^5000 처럼 매우 큰 수에 1을 더하면 이것은
꼭 1이 더 커진 수로 저장되지 않는다. 그런데 1을 더하는 것을 수십억번 반복하면 어떻게 될까? 두가지 경우로 생각해볼 수 있는데
만약 5.234 * 10^5000 에 1을 수십억번 더한다면 이건 그냥 5.234 * 10^5000 이 된다. 1을 더해도 값이 그대로이므로
아무리 반복해도 소용이 없는 것이다. 하지만 1에 1을 더하는 것을 수십억번 하고 여기에 5.234 * 10^5000 을 더하면
결과값이 달라질 것이다. 

거의 모둔 컴퓨터의 부동 소수점 연산이 정수 연산보다 매우 느리다는 것을 명심해야 한다. 속도가 중요한 프로그램이라면 최대한 정수만
사용하도록 해야 한다.

=== Negative Numbers ===
컴퓨터에서 어떻게 음수를 표현할지 생각해보자. 한가지 방법은 첫번째 비트를 부호 비트로 사용해서 
00000000000000000000000000000001 을 1로 표현하고
10000000000000000000000000000001 을 -1로 표현하는 방법이다. 상당히 적당한 방법이고
사실 오래된 프로세서들이 이런 방식으로 동작하기도 한다. 그러나 몇가지 문제가 있는데 무엇보다도
덧셈 뺄셈을 하기 위해서 더 많은 회로가 필요하다는 것이다. 심지어는 양수 0과 음수 0이 존재하는 문제도 있다.
음수의 0과 양수의 0을 어떻게 구분할지 어떤 상황에서 음수 0이 되고 어떤 상황에서는 양수 0이 되야 하는지가 문제로 나타난다.

이 문제들은 2의 보수를 사용하면서 해결되었다. 2의 보수를 계산하기 위해서는 다음과 같이 처리하면 된다.

1. 원하는 수에 NOT 연산을 한다.
2. 연산 결과에 1을 더한다.

00000000000000000000000000000001의 음수를 얻기 위해서는 첫번째로 NOT 연산을 해서 11111111111111111111111111111110을 얻고
1을 더해서 11111111111111111111111111111111을 얻어내면 된다. 2의 보수를 얻기 위해서는 00000000000000000000000000000010을
NOT 연산해서 11111111111111111111111111111101을 얻고 그 다음 1을 더해서 11111111111111111111111111111110을 얻으면 된다.
이런 표현을 이용하면 두 수가 양수인것과 같이 바로 덧셈을 해서 바른 결과를 얻을 수 있다. 예를 들어 이진수로 1과 -1을 더하면
모든 비트가 0이 되는 것을 알 수 있을 것이다.

또 첫번째 비트를 부호 비트로 하면 음수인지 양수인지 알아내기가 편해진다. 음수는 가장 왼쪽의 비트가 항상 1이 된다.
이렇게 되면 정해진 비트 수에서 표현할 수 있는 수의 범위가 달라진다. 부호가 있는 수에서는 표현 가능한 수가
음수와 양수로 나눠지게 된다. 예를 들어 한 바이트는 0에서 255까지의 수를 표현할 수 있지만 부호를 가지게 되면
-128에서 127까지의 수를 표현할 수 있게 된다.

2의 보수로 음수를 표현하는 방식에서는 그 수의 왼쪽에 0을 붙인다고 비트수가 많아지는게 아니다. 
예를 들어 4비트의 십진수 -3, 이진수로 1101을 8비트 레지스터에 저장하기 위해 8비트로 늘렸을 때
00001101로 생각하면 안된다. 00001101은 13이지 -3이 아니기 때문이다. 2의 보수에서
부호가 있는 수의 범위를 늘리려면 왼쪽에 부호 비트를 붙여서 늘려야 한다. 4비트의 음수를 늘리기 위해서는 1을 붙여야 하는 것이다.
만약 양수라면 0을 붙여야 한다. 따라서 -3을 8비트로 확장하면 11111101가 된다.

x86 프로세서는 부호가 있는 수와 부호가 없는 수를 다루기 위한 연산자들이 구분되어 있다.
Appendix B에 리스트가 나와있다. 예를 들어 오른쪽으로 쉬프트하는 연산자에서 부호 비트를 유지하는 명령어는
sarl이고 유지하지 않는 명령어는 shrl이다.

== Octal and Hexadecimal Numbers ==

지금까지 이야기했던 수들은 십진수와 이진수였다. 그러나 8진수와 16진수도 컴퓨터에서 많이 사용된다.
사실 이진수보다도 더 많이 사용될 것이다. 8진수는 0부터 7까지의 수만 사용해서 수를 나타내는 것이다. 
8진수로 10은 한 그룹 8개를 나타내므로 십진수로 8이 된다. 8진수의 121은 한 그룹의 그룹 64와 2개의 8개 그룹,
그리고 1개를 나타내므로 81이 된다. 8진수는 3개의 비트가 한자리 수가 되므로 편리한 점이 있다. (십진수로는 그렇게 할 수가 없다)
8진수 0은 이진수로 000이 되고 1은 001, 2는 010, 3은 011, 4는 100, 5는 101, 6은 110, 7은 111이 된다.

Linux에서 읽기, 쓰기, 실행 하기의 권한을 나타낼 때 8진수를 사용한다. 첫번째 비트는 읽기 권한이고 두번째는 쓰기, 세번째 비트는 실행 권한을 나타낸다.
그래서 0(000)은 아무 권한이 없는 것이고 6(110)은 읽기와 쓰기 권한이 있는 것을 나타내고 또 5(101)은 읽기와 실행 권한이 있는 것을 나타낸다.
그리고 소유자, 소유자의 그룹, 그 외 사람들의 권한을 나타내는 데에도 사용된다. 0644는 소유자에게 읽기와 쓰기 권한을,
소유자의 그룹과 그 외 사람들에게는 읽기 권한만을 허용한다는 의미이다. 또 0751은 파일의 소유자에게 읽기, 쓰기, 실행 권한을 주고
소유가의 그룹 멤버들에게는 읽기와 실행 권한, 그 외 사람들에게는 실행 권한만을 허용한다는 의미이다.

어쨌든 8진수는 3개의 비트를 한 그룹으로 나타낼 때 사용된다. 어셈블러에게 어떤 수가 8진수인지를 알리기 위해서는 숫자를 0으로 시작하면 된다.
예를 들어 010은 8진수 10, 10진수로 8을 나타내는 것이다. 그냥 10만 쓰면 10진수로 10을 나타내는 것이다. 10진수를 쓸 때는 숫자 앞에 0을 쓰지 않도록
주의해야 10진수가 8진수로 인식되지 않는다!

16진수는 헥사라고도 불리는데 각 자리수마다 1에서 15의 수를 나타낸다. 그런데 10에서 15는 한자리로 나타내는 수가 없으므로 a부터 f의 알파벳을 사용해서 나타낸다.
예를 들어 a는 10을 나타내고 b는 11을 나타내는 식이다. 16진수로 10은 16을 나타낸다. 8진수에서는 각 자리가 3비트였다. 16진수에는 각 자리가
4비트를 나타낸다. 16진수로 두자리면 8비트를 나타내고 여덞자리는 32비트를 나타낸다. 그래서 이미 알고 있겠지만 이진수로 값을 쓰는 것보다는
16진수로 값을 쓰는게 더 편하다. 써야 할 숫자가 1/4로 줄어드는 것이다. 16진수에서 가장 중요하고 기억해야 할 숫자는 f이다. f는 모든 비트가 1이 되는 것을 의미한다.
그래서 레지스터의 모든 비트를 1로 채우고 싶다면, 이렇게 하게 된다.

{{{
movl $0xFFFFFFFF, %eax
}}}

이것은 다음처럼 하는 것보다 쉽고 에러도 적게 난다.

{{{
movl $0b11111111111111111111111111111111, %eax
}}}

16진수가 0x로 시작하는 것을 주의하자. 

{{{
int $0x80
}}}

위와 같은 코드는 인터럽트 128을 호출하는 것이다.

16진수나 8진수는 좀 낯설지만 컴퓨터 프로그래밍에서는 정말 많이 사용된다. 따라서 16진수를 이진수로 바꾸거나 십진수를 8진수로 바꾸는 등
각 진수에 맞게 변환하는 것에 대해 알아 둘 필요가 있다.

== Order of Bytes in a Word ==

많은 사람들이 비트나 바이트를 다룰 때 자주 혼동하는 것이 레지스터의 바이트 값들이 메모리로 쓰여질 때 순서가 뒤바뀐 다는 것이다.
대부분의 사람들은 레지스터에 0x5d 23 ef ee를 썼으면 메모리에도 같은 순서로 기록되리라고 생각한다. 그러나 x86 프로세서에서는
바이트들이 반대 순서로 저장된다. 메모리에는 0xee ef 23 5d로 기록된다. 각 바이트 내부의 비트 값들은 원래 순서대로 기록되지만
각각의 바이트들은 반대로 저장되는 것이다.

x86은 little-endian 프로세서라고 불리는데 이 말의 뜻은 "little end" 즉 가장 왼쪽의 바이트가 먼저 저장된다는 것이다.

{{{

150페이지의 그림이 들어감

}}}

big-endian 프로세서들은 바이트들이 원래 순서 그대로 저장되는 프로세서이다.

{{{

151페이지의 그림이 들어감

}}}

이 차이는 별로 큰 문제가 되지 못했다 (비록 오랜 시간동안 많은 논쟁이 되어왔지만). 바이트들이 메모리에서 읽혀질 때 다시 원래 순서로
자동으로 돌아오기 때문에 프로그래머들은 보통 바이트의 순서가 어떻게 &#46124;는지 알지 못한다. 바이트들의 바뀌는 일은 레지스터와 메모리 사이에서
자동으로 발생한다. 그런데 몇가지 경우에는 이런 바이트 순서가 문제를 일으킬 수 있다.

 * 몇 바이트를 movl 명령어로 한꺼번에 읽어서 앞에서부터 한 바이트씩 처리하려고 할 때, 메모리에서 보이는 순서대로 처리되지 않는다.
 * 다른 프로세서 아키텍처에서 만들어진 파일에 값을 읽거나 쓸 때 바이트가 어떤 순서로 기록되었는지 살펴보아야 한다.
 * 네트워크 소켓에 값을 쓰거나 읽을 때 프로토콜에 따라 바이트 순서를 고려해야 한다.

이런 사항들을 기억하기만 하면 보통 별로 큰 문제를 일으키지는 않을 것이다. 바이트 순서에 대해 더 자세히 알고 싶다면
http://www.rdrop.com/~cary/html/endian_faq.html 에 있는 DAV's Endian FAQ 중에서 Daniel Cohen이 쓴 "On Holy Wars and a Plea for Peace"를 읽어본다.

== Converting Numbers for Display ==

지금까지는 프로그램 종료 코드에 숫자를 전달하는 제한된 방법 외에 사용자에게 제대로 숫자를 보여줄 수 있는 방법이 없었다. 이 섹션에서는 양수를
출력하기 위해 문자열로 바꾸는 방법에 대해서 알아보도록 하겠다

이 함수는 integer2string 이라고 불릴 것이고 두개의 파라미터를 가진다. 하나는 변환할 정수와 하나는 널로 끝나는 문자열을 저장할 버퍼이다.
이 버퍼는 문자열로 바뀐 숫자를 저장하기에 넉넉한 크기라고 생각하자. (널 문자까지 저장하기 위해 최소 11글자를 저장할 수 있어야 한다)

우리가 10진수로 숫자를 읽는 방법을 생각해보자. 각 자리수를 계산하기 위해 우리는 숫자를 10으로 나누고 그 나머지를 각 자리수에 채워넣는다.
따라서 다음과 같이 하면 된다.

 * 숫자를 10으로 나눈다
 * 나머지가 현재 자리수이다. 문자열로 변환해서 버퍼에 저장한다.
 * 숫자가 0이 되면 멈춘다.
 * 아니면 나눈 숫자를 가지고 버퍼의 다음 자리로 이동하면서 계속 반복한다.

한가지 문제라면 첫번째 자리수가 문자열의 처음에 오게 되서 숫자가 거꾸로 기록된다는 것이다.
따라서 함수 마지막에 문자열을 뒤집는 처리를 해준다. 우리는 이것을 스택에 문자열을 저장하는 방식으로 해결할 것이다.
스택에서 한 자리씩 뽑아내서 버퍼에 저장해주면 거꾸로 기록된 문자열이 바로 잡힐 것이다.

integer-to-string.s 라는 파일에 함수 코드를 저장한다.

{{{
#목적 : 정수를 스크린에 출력하기 위해 문자열로 바꾼다
#
#입력: 최대 숫자까지 저장할 수 있는 충분히 큰 버퍼
#        변환할 정수
#
#출력: 십진수 문자열이 저장된 버퍼
#
#변수:
#
# %ecx 현재 처리되고 있는 문자열의 카운터
# %eax 현재 값
# %edi 진수 값 10
#
.equ ST_VALUE, 8
.equ ST_BUFFER, 12

.globl integer2string
.type integer2string, @function
integer2string:
#함수 시작을 위한 스택 보존
pushl %ebp
movl %esp, %ebp

#현재 문자열의 크기
movl $0, %ecx

#파라미터로 전달된 값을 읽어온다
movl ST_VALUE(%ebp), %eax

#10으로 나누기 위해서는 10을 레지스터에 저장해놔야 한다
movl $10, %edi

conversion_loop:
#나눗셈은 %edx:%eax 레지스터 쌍에서 이루어진다
#따라서 %edx에는 0을 넣어논다
movl $0, %edx

#10으로 나눈다.
#몫은 %eax에 저장되고 나머지는 %edx에 저장된다
divl %edi


#%edx에 저장된 나머지를 문자로 변환해야 한다.
#10으로 나눈 나머지 값은 0에서 9사이의 값이 된다.
#따라서 이 수를 가지고 아스키 테이블의 '0'의 값을 기준으로 변환하면 된다.
#'0'에 0을 더하면 아스키 코드로 '0'이 되고 1을 더하면 '1'이 된다.
#따라서 다음과 같이 '0'에 나머지 값을 더하면 아스키 코드가 된다.
addl $’0’, %edx


#이제 변환된 값을 스택에 저장한다.
#이렇게 스택에 값을 저장한 다음에 한글자씩 꺼내서 버퍼에 저장하면
#글자 순서가 바로 잡히게 된다.
#레지스터 전체 값을 저장하지만 %dl 에 저장된 한 바이트가
#문자를 저장하고 있다는 것을 주의하자
pushl %edx

#자리수 카운터를 증가시킨다
incl %ecx

#%eax가 0인지 확인해서
#0이면 루프를 벗어난다
cmpl $0, %eax
je end_conversion_loop

#%eax 에는 새로 나누어야 할 값이 저장되어 있다

jmp conversion_loop

end_conversion_loop:
#문자열은 스택에 저장되어 있다. 
#한글자씩 써내서 버퍼에 저장해야 한다.

#%edx에 버퍼의 포인터를 저장한다
movl ST_BUFFER(%ebp), %edx

copy_reversing_loop:
#레지스터 전체를 스택에 저장했기 때문에
#마지막 한 바이트만 필요하게 된다.
#따라서 %eax에 스택의 값을 저장한 다음
#%al만 문자열에 저장한다.
popl %eax
movb %al, (%edx)

#%ecx에 저장된 자리수 카운터를 감소시켜서 언제 끝내야 할지 계산한다
decl %ecx
#%edx를 증가시켜서 다음에 문자를 저장할 포인터를 계산한다
incl %edx

#%ecx가 0이면 끝낸다.
cmpl $0, %ecx
#함수의 끝으로 점프한다
je end_copy_reversing_loop
#아니면 반복한다
jmp copy_reversing_loop

end_copy_reversing_loop:
#문자열 끝에 널을 저장하고 함수를 끝낸다.
movb $0, (%edx)

movl %ebp, %esp
popl %ebp
ret
}}}

완성된 프로그램을 만들기 위해서는 다음 코드를 사용한다. 이전 장에서 만들었던 count_chars와 write_newline 함수들을 같이 사용한다.
conversion-program.s 파일에 다음 코드를 저장한다.

{{{
.include "linux.s"

.section .data

tmp_buffer:
.ascii "\0\0\0\0\0\0\0\0\0\0\0"

.section .text

.globl _start
_start:
movl %esp, %ebp

#결과 값이 저장될 버퍼
pushl $tmp_buffer
#변환된 숫자
pushl $824
call integer2string
addl $8, %esp

#우리가 만든 함수로 몇 글자인지 확인한다
pushl $tmp_buffer
call count_chars
addl $4, %esp

#SYS_WRITE를 위해서 결과 값을 %edx에 저장한다.
movl %eax, %edx

#시스템 콜을 실행하기 위해 준비
movl $SYS_WRITE, %eax
movl $STDOUT, %ebx
movl $tmp_buffer, %ecx

int $LINUX_SYSCALL

#개행 문자를 쓴다
pushl $STDOUT
call write_newline

#프로그램 종료
movl $SYS_EXIT, %eax
movl $0, %ebx
int $LINUX_SYSCALL
}}}

실행 파일을 만들기 위해 다음 명령어를 입력한다.

{{{
as integer-to-string.s -o integer-to-number.o
as count-chars.s -o count-chars.o
as write-newline.s -o write-newline.o
as conversion-program.s -o conversion-program.o
ld integer-to-number.o count-chars.o write-newline.o conversion-program.o -o conversion-program
}}}

./conversion-program 이라고 치면 824라고 출력될 것이다.
