#title linux man page : grep - 라인 출력에 특정 패턴의 문자열이 있는지 확인한다.

== grep ==
=== 사용 법 ===
{{{#!plain
grep [OPTIONS] PATTERN [FILE ...]
}}}

=== 설명 ===
grep는 입력 파일을 줄단위로 읽으면서 __PATTERN__과 일치하는 문자열이 있는지 확인해서 출력한다.

=== 옵션 ===
매칭방법 선택
  -E, --extended-regexp
      패턴일치를 확인하기 위해서 확장 정규표현(:12)식을 사용한다. 확장 정규표현식은 POSIX에 정의되어 있다. egrep명령을 사용한 것과 같다.
  -F, --fixed-string
      정규표현식을 사용하지 않고, __PATTERN__과 일치하는지를 단순 확인한다.
  -G, --basic-regext
      기본 정규표현식으로 패턴일치를 확인한다.
  -P, --perl-regexp
      perl(펄)의 정규표현식으로 패턴일치를 확인한다. 펄의 패턴일치를 완전하게 구현했다고 볼 수 없으므로 제대로 사용하려면 어느 정도의 경험이 필요하다.

매칭제어
  -e __PATTERN__, --regexp=PATTERN
    __PATTERN__을 패턴일치 문자열로 사용한다.
  -f __FILE__, --file=FILE
    패턴일치를 검사할 파일을 지정한다.
  -i, --ignore-case
    대소문자를 구분하지 않는다.
  -v, --invert-match
     일치하는 문자열을 포함하지 않는 줄을 출력한다.

=== 예제 ===
모든 파일에 대해서 첫 글자가 a에서 z사이의 알파벳인 행을 출력한다.
{{{#!plain
# grep "^[a-z]" *
}}}
"hello"를 포함한 모든 행을 출력한다.
{{{#!plain
# grep "hello" *
}}}

"hello"를 포함하지 않은 행을 출력한다.
{{{#!plain
# grep -v "hello" *
}}}
전화번호를 포함한 행을 출력한다. 포맷 : 000-0000-0000
{{{#!plain
# grep -E '^[0-9]{3}-[0-9]{3}-[0-9]{4}' *
}}}
failure가 1번 이상 연속한 행을 출력한다.
{{{#!plain
# grep -E "(failure)+" *
}}}
?다음에 yes나 no가 오는 행을 출력한다.
{{{#!plain
# grep -E '? (yes|no)' *
}}}
