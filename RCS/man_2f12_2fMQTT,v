head	1.28;
access;
symbols;
locks
	root:1.28; strict;
comment	@# @;


1.28
date	2015.02.09.01.37.17;	author root;	state Exp;
branches;
next	1.27;

1.27
date	2015.01.31.03.04.01;	author root;	state Exp;
branches;
next	1.26;

1.26
date	2015.01.31.03.02.56;	author root;	state Exp;
branches;
next	1.25;

1.25
date	2015.01.30.15.15.00;	author root;	state Exp;
branches;
next	1.24;

1.24
date	2015.01.30.15.13.13;	author root;	state Exp;
branches;
next	1.23;

1.23
date	2015.01.28.14.40.52;	author root;	state Exp;
branches;
next	1.22;

1.22
date	2015.01.28.14.38.28;	author root;	state Exp;
branches;
next	1.21;

1.21
date	2015.01.28.14.34.03;	author root;	state Exp;
branches;
next	1.20;

1.20
date	2014.11.10.15.44.13;	author root;	state Exp;
branches;
next	1.19;

1.19
date	2014.11.06.01.37.06;	author root;	state Exp;
branches;
next	1.18;

1.18
date	2014.11.05.08.19.55;	author root;	state Exp;
branches;
next	1.17;

1.17
date	2014.11.05.06.23.16;	author root;	state Exp;
branches;
next	1.16;

1.16
date	2014.11.05.06.20.59;	author root;	state Exp;
branches;
next	1.15;

1.15
date	2014.11.05.06.14.01;	author root;	state Exp;
branches;
next	1.14;

1.14
date	2014.11.03.03.29.35;	author root;	state Exp;
branches;
next	1.13;

1.13
date	2014.10.01.07.40.44;	author root;	state Exp;
branches;
next	1.12;

1.12
date	2014.10.01.07.40.16;	author root;	state Exp;
branches;
next	1.11;

1.11
date	2014.10.01.07.38.25;	author root;	state Exp;
branches;
next	1.10;

1.10
date	2014.09.23.15.00.50;	author root;	state Exp;
branches;
next	1.9;

1.9
date	2014.09.20.17.13.46;	author root;	state Exp;
branches;
next	1.8;

1.8
date	2014.09.20.17.01.06;	author root;	state Exp;
branches;
next	1.7;

1.7
date	2014.09.18.16.05.28;	author root;	state Exp;
branches;
next	1.6;

1.6
date	2014.09.18.15.43.06;	author root;	state Exp;
branches;
next	1.5;

1.5
date	2014.09.15.08.42.07;	author root;	state Exp;
branches;
next	1.4;

1.4
date	2014.06.07.12.33.41;	author root;	state Exp;
branches;
next	1.3;

1.3
date	2014.06.07.09.20.24;	author root;	state Exp;
branches;
next	1.2;

1.2
date	2014.06.06.16.04.24;	author root;	state Exp;
branches;
next	1.1;

1.1
date	2014.06.06.16.00.56;	author root;	state Exp;
branches;
next	;


desc
@./data/text/man_2f12_2fMQTT
@


1.28
log
@1.214.223.250;;yundream;;
@
text
@#title MQTT 
[[TableOfContents]]
== MQTT ==
MQTT는 경량의 Publish/Subscribe(Pub/Sub) 메시징 프로토콜이다. M2M(machine-to-machine)와 [wiki:Site/IOT IoT(Internet of things)]에서 사용하는 걸 목적으로 하는 만큼, 낮은 전력으로도 사용할 수 있도록 설계됐다. 저전력, 소규모 기기들 간의 통신이 필요한 IoT에서 주목하는 프로토콜이다. [https://www.oasis-open.org/committees/tc_home.php OASIS]는 MQTT 3.3.1 를 IoT에서의 표준 프로토콜로 채택했다. 

지금 나는 IoT관련 일을 하고 있으며, 로컬과 원격 모두에서 사용할 수 있는 경량의 통신 프로토콜로 MQTT를 고려하고 있다. 예전이라면 직접 만들어서 사용을 했겠지만 IoT가 점차 확산되는 시점에서, 표준(혹은 표준에 가까운, 혹은 채택될 가능성이 높은) 프로토콜을 선택해야 할 필요가 있었다.  

IoT에서 선택 가능성이 있는 프로토콜로는 '''MQTT''', '''CoAP''', '''XMPP'''정돌를 꼽을 수 있겠다. 각각의 특징을 정리했다.

{{{#!html
<dl class="tabs" data-tab>
  <dd class="active"><a href="#panel1">MQTT</a></dd>
  <dd><a href="#panel2">MQTT-S</a></dd>
  <dd><a href="#panel3">CoAP</a></dd>
  <dd><a href="#panel4">XMPP</a></dd>
</dl>
<div class="tabs-content">
  <div class="content active" id="panel1">
    <ul>
      <li>신뢰하기 힘든 네트워크에서의 쌍방향 커뮤니케이션(Tow-way communications)</li>
      <li>Asynchronous</li>
      <li>배터리 기반의 낮은 전력 소비가 필요한 장치</li>
      <li>많은 시간을 휴면하는 장치들. 이 경우 <a href="http://www.joinc.co.kr/modules/moniwiki/wiki.php/man/12/MQTT">CoAP</a>가 더 적합할 수 있다.</li>
    </ul>
  </div>

  <div class="content" id="panel2">
    <ul>
      <li>MQTT와 유사하다. 휴면 시간이 긴 장치를(센서 네트워크 등) 위한 프로토콜이다.</li> 
      <li>MQTT에 비해서 확장이 유연하다. UDP 프로토콜의 특성에 기인한다.</li> 
    </ul>
  </div>

  <div class="content" id="panel3">
    <ul>
     <li>MQTT-S와 비슷한 목적으로 사용할 수 있다.</li>
     <li>UDP 프로토콜을 사용한다.</li>
     <li>HTTP기반. <a href="http://www.joinc.co.kr/modules/moniwiki/wiki.php/man/12/rest">REST</a> 아키텍처 적용이 용이하다.</li>
     <li>Observer 패턴 사용. 롱폴링 없이 응답을 받을 수 있다.</li>
    </ul>
  </div>

  <div class="content" id="panel4">
    <ul>
      <li>강력한 보안</li>
      <li>대량의 메시지를 처리 하기에 적합하다.</li>
      <li>태생이 메신저를 위한 프로토콜로 다른 프로토콜에 비해서 무겁다.</li> 
    </ul>
  </div>
</div>
}}}
== 문서 ==
  * [wiki:man/12/MQTT/Tutorial MQTT 소개]
  * [wiki:man/12/MQTT/iot IoT에서의 MQTT]
  * [wiki:man/12/MQTT/MultiChat MQTT를 이용한 Push 서비스 구현]
  * [wiki:man/12/MQTT/WithWeb Web에서의 MQTT 활용]
  * [wiki:man/12/MQTT/Websocket WebSocket을 이용한 MQTT 서비스]
  * [wiki:man/12/MQTT/Cluster MQTT Cluster 구성]
  * [wiki:man/12/MQTT/Rest MQTT에서의 REST 아키텍처링]
== 참고 ==
  * [http://www.slideshare.net/paolopat/mqtt-iot-protocols-comparison mqtt iot protocols comparison]
@


1.27
log
@119.64.102.68;;yundream;;
@
text
@d23 1
a23 1
      <li>많은 시간을 휴면하는 장치들. <a href="http://www.joinc.co.kr/modules/moniwiki/wiki.php/man/12/MQTT">CoAP</a>가 더 적합할 수 있다.</li>
@


1.26
log
@119.64.102.68;;yundream;;
@
text
@d57 1
a61 2
== 하위 문서들 ==
[[SubIndex]]
@


1.25
log
@119.64.102.68;;yundream;;
@
text
@d61 2
@


1.24
log
@119.64.102.68;;yundream;;
@
text
@d58 1
@


1.23
log
@119.64.102.68;;yundream;;
@
text
@a1 1

@


1.22
log
@119.64.102.68;;yundream;;
@
text
@d24 1
a24 1
      <li>많은 시간을 휴면하는 장치들. 이런 용도에는 MQTT-S와 [http://www.joinc.co.kr/modules/moniwiki/wiki.php/man/12/CoAP CoAP]가 더 적합할 수 있다.</li>
d39 1
a39 1
     <li>HTTP기반. [wiki:man/12/rest REST] 아키텍처 적용이 용이하다.</li>
@


1.21
log
@119.64.102.68;;yundream;;
@
text
@d24 1
a24 1
      <li>많은 시간을 휴면하는 장치들. 이런 용도에는 MQTT-S와 [wiki:man/12/CoAP CoAP]가 더 적합할 수 있다.</li>
@


1.20
log
@119.64.102.68;;yundream;;
@
text
@d24 1
a24 1
      <li>많은 시간을 휴면하는 장치들. 이런 용도에는 MQTT-S와 CoAP가 더 적합할 수 있다.</li>
d39 1
a39 1
     <li>HTTP기반. REST 아키텍처 적용이 용이하다.</li>
@


1.19
log
@1.214.223.250;;yundream;;
@
text
@d58 1
@


1.18
log
@1.214.223.250;;yundream;;
@
text
@d5 1
a5 1
MQTT는 경량의 Publish/Subscribe(Pub/Sub) 메시징 프로토콜이다. M2M(machine-to-machine)와 IoT(Internet of things)에서 사용하는 걸 목적으로 하는 만큼, 낮은 전력으로도 사용할 수 있도록 설계됐다. 저전력, 소규모 기기들 간의 통신이 필요한 IoT에서 주목하는 프로토콜이다. [https://www.oasis-open.org/committees/tc_home.php OASIS]는 MQTT 3.3.1 를 IoT에서의 표준 프로토콜로 채택했다. 
d53 1
a53 1
== 문서 == 
@


1.17
log
@1.214.223.250;;yundream;;
@
text
@d56 1
@


1.16
log
@1.214.223.250;;yundream;;
@
text
@d9 2
a10 1
IoT에서 선택 가능성이 있는 프로토콜로는 '''MQTT''', '''CoAP''', '''XMPP'''정돌를 꼽을 수 있겠다. 각각의 특징을 정리해봤다.
@


1.15
log
@1.214.223.250;;yundream;;
@
text
@d10 16
a25 18
  * MQTT
    * 신뢰하기 힘든 네트워크에서의 쌍방향 커뮤니케이션(Tow-way communications) 
    * Asynchronous
    * 배터리 기반의 낮은 전력 소비가 필요한 장치  
    * 많은 시간을 휴면하는 장치들. 이런 용도에는 MQTT-S와 CoAP가 더 적합할 수 있다. 
  * MQTT-S (over UDP)
    * MQTT와 유사하다. 휴면 시간이 긴 장치를(센서 네트워크 등) 위한 프로토콜이다. 
    * MQTT에 비해서 확장이 유연하다. UDP 프로토콜의 특성에 기인한다.   
  * CoAP (사양이 맘에 든다. 따로 살펴봐야 겠다.)
    * MQTT-S와 비슷한 목적으로 사용할 수 있다.
    * UDP 프로토콜을 사용한다.
    * 웹 서비스 지향이며, URI, HTTP를 이용해서 자원에 도달할 수 있기 때문이다. 인터넷과 같은 개방된 환경에서 플랫폼의 개발이 용이할 수 있다.  
    * Observer 패턴 사용. 롱폴링 없이 응답을 받을 수 있다.
    * REST 아키텍처의 구현이 용이하다.
  * XMPP 
    * 추가적인 보안이 필요할 경우.  
    * 대량의 메시지를 처리 하기에 적합하다.
    * 태생이 메신저를 위한 프로토콜로 다른 프로토콜에 비해서 무겁다.    
d27 25
@


1.14
log
@1.214.223.250;;yundream;;
@
text
@d5 1
a5 1
MQTT는 경량의 Publish/Subscribe(Pub/Sub) 메시징 프로토콜이다. M2M(machine-to-machine)와 IoT(Internet of things)에서 사용하는 걸 목적으로 하는 만큼, 낮은 전력으로도 사용할 수 있도록 설계됐다.
d7 23
a29 1
== 문서들 == 
d33 2
@


1.13
log
@1.214.223.250;;yundream;;
@
text
@d10 1
@


1.12
log
@1.214.223.250;;yundream;;
@
text
@d9 1
@


1.11
log
@1.214.223.250;;yundream;;
@
text
@d8 1
@


1.10
log
@119.64.102.68;;yundream;;
@
text
@a2 1
<!> 미완성
d7 1
a7 168
=== Publish/Subscribe ===
MQTT 프로토콜은 메시지를 '''발행(publishing)''' 하고, 관심 있는 주제를 '''구독(subscribe)''' 하는 것을 기본 원칙으로 한다.

{{{#!html
<img src="https://docs.google.com/drawings/d/17LKdzxE9KiDXsfCMNCuR4DRStxeBaqnTL3b_zX3376g/pub?w=585&amp;h=255">
}}}

Publisher과 Subscriber은 모두 '''Broker 서버'''에 대한 클라이언트로 작동한다. Publisher는 토픽을 발행하기 위한 목적으로 Subscriber은 토픽을 구독하기 위한 목적으로 Broker 서버에 연결한다. 하나 이상의 Pub와 Sub가 브로커에 연결해서 토픽을 발행 하거나 구독할 수 있다. 또한 다수의 클라이언트가 하나의 주제를 구독할 수도 있다. 

=== 토픽 ===
Pub와 Sub는 토픽을 기준으로 작동한다. 토픽은 슬래시(/)를 이용해서 계층적 구조를 가지는데, 주제들을 파일 시스템 형식으로 나눌 수 있어서 좀 더 효율적인 관리가 가능하다. 예를들어 컴퓨터의 다양한 상태를 측정하는 센서가 있다고 다음과 같이 구성할 수 있을 것이다. 

{{{#!html
<img src="https://docs.google.com/drawings/d/1qN-CtcvdojhgnfX2ONynNhPGHDvln5iPbZlOEh2dbPE/pub?w=734&amp;h=291" width=513 height=203> 
}}}

IoT 환경에서의 사용을 예로 들었다. 센서를 가진 기기들이 수집한 센서 정보를 publish 하면, 게이트웨이가 가져가는 식으로 활용 할 수 있겠다. 좀 더 크게 그림을 그려보자면, 로컬에서 수집한 센서 정보를 중앙 서버에 보내서 분석하는 구조도 생각해 볼 수 있겠다. IoT 환경에서의 MQTT 활용은 문서 후반에서 따로 살펴보겠다.

== Mosquitto ==
모스키토(Mosquitto)는 (2014년 6월 현재)MQTT 프로토콜 3.1을 구현한 BSD 라이센스 기반의 오픈소스 메시지 브로커다. 나는 모스키토를 이용해서 PUB,SUB,Broker 테스트를 진행하기로 했다.

모스키토는 서버/클라이언트 모델을 따른다. 메시지 브로커가 서버역할을 하는데, Pub 채널을 유지하는 일을 한다. 클라이언트는 메시지 브로커에 붙어서 메시지를 교환하는데, '''pub'''과 '''sub'''역할을 모두 할 수 있다.  
=== 테스트 환경 ===
{{{#!html
<img src="https://docs.google.com/drawings/d/1RKsCp_LfXW7xjoUiMnXaUPLdzQM28I-GVqQZXmhKaNY/pub?w=504&amp;h=395">
}}}
  * VirtualBox를 이용해서 PUB, SUB, Broker를 위한 3개의 게스트 운영체제를 실행했다. 호스트 이름은 각각 pub.local, sub.local, broker.local 이다.
  * 게스트 운영체제 : 우분투 리눅스 14.04로 통일
=== Mosquitto 브로커 설치 ===
{{{#!plain
broker.local # apt-get install mosquitto 
}}}
설치가 끝나면 바로 bind 된다.
{{{#!plain
broker.local # netstat -nap | grep mosquitto
tcp        0      0 0.0.0.0:1883            0.0.0.0:*               LISTEN      1512/mosquitto  
tcp6       0      0 :::1883                 :::*                    LISTEN      1512/mosquitto  
}}}

=== Mosquitto 클라이언트 설치 ===
모스키토 클라이언트 프로그램을 설치했다.
{{{#!plain
# apt-get install mosquitto-clients
}}}

=== Pub/Sub 테스트 ===
hello/world 토픽을 subscribing 한다.  
{{{#!plain
# mosquitto_sub -d -t hello/world
Received CONNACK
Received SUBACK
Subscribed (mid: 1): 0
}}}

hello/world토픽에 Publishing을 했다.
{{{#!plain
# mosquitto_pub -d -t hello/world -m "Hello World"
Received CONNACK
Sending PUBLISH (d0, q0, r0, m1, 'hello/world', ... (11 bytes))
}}}
Sub 클라이언트는 "Hello World"를 전송 받는다.

modquitto_sub를 하나 더 실행 한다음 "Hello World"를 publishing 해보자. 토픽에 subscribing한 모든 클라이언트에 메시지가 전달되는 걸 확인할 수 있다. 

== Chatting 프로그램 ==
MQTT를 이용한 Pub/Sub 테스트는 끝냈으니, 이제 좀 그럴 듯한 서비스를 만들어봐야 겠다. MQTT를 이용한 chatting 프로그램을 개발할려고 한다. 이 chatting 프로그램은 아래의 기능을 지원한다.
  * 채팅방 생성 : 채팅방을 Topic으로 하면 된다. Topic을 늘리는 것으로 여러 개의 채팅방을 운용할 수도 있을 거다. 채팅방을 임의로 만들게 하는 건 귀찮으니.. 그냥 "chat/public", "chat/private" 두개의 채팅방만 만들기로 했다. 
 * 채팅방 Join : 원래는 채팅방 목록을 확인해서 Join해야겠으나 귀찮으니, chat/public, chat/private 모두를 sub 하는 걸로 join을 대신하겠다. 유저는 nickname을 만들어서 두개의 topic에서 메시지를 받아본다. 
채팅 클라이언트 프로그램은 Sub와 Pub를 모두 해야 하니 멀티 쓰레드로 작동해야 한다. 

{{{#!html
<img src="https://docs.google.com/drawings/d/1_KlS0GuVUCfa-kDYPs4T4iaUo8lAUHlbWzPSTsZyRg8/pub?w=860&amp;h=329">
}}}
  1. MQTT 브로커로는 앞서 다룬 모스키토를 사용했다.
  1. 쓰레드 하나는 Sub 전용이다. 토픽으로 받은 정보를 화면에 출력한다. 
     * chat/public : 공개 채널의 메시지를 받기 위해서 사용한다.
     * chat/public/nickname : 자신의 nicname 토픽에 메시지를 받기 위함.
  1. 쓰레드 하나는 Pub 전용이다. 표준입력을 토픽에 publishing 한다.
     * chat/public : 공개 채널에 publishing 한다. 
	 * chat/public/other : 특정 유저에게 publishing 하기 위해서 사용한다.  
=== 개발 환경 ===
 * 우분투 리눅스 14.04
 * Ruby 1.9.3 
 * mqtt broker : mosquitto 
mqtt 모듈은 설치해야 겠다.
{{{#!plain
# gem install mqtt
}}}
지원하는 메시지 타입이다.
  * 공개 메시지 : message
  * 개인 메시지 : /priv nickname message
  * 채팅방 나가기 : /quit message
curses 혹은 Tk, GTk, Qt등을 사용하면 예쁜 인터페이스를 만들 수 있겠으나 귀찮아서 생략
{{{#!plain
require 'rubygems'
require 'mqtt'
require 'readline'            

# nickname 설정    
nickname=ARGV[0]              

# localhost에서 테스트 했다.
mqtt = MQTT::Client.new('localhost')

mqtt.connect do |client|
    client.subscribe('chat/public')
    client.subscribe("chat/private/#{nickname}")
    enter_msg = "#{nickname} enter room!!"
    client.publish 'chat/public', enter_msg

    # Publish Thread
    Thread.new do
        while message = Readline.readline("", true)
            case message
            when /^\/priv\s*(\w*)\s*(.*)/       # 개인 메시지
                client.publish "chat/private/#{$1}", "<#{nickname}> : #{$2}"
            when /^\/quit\s*(.*)/               # 나가기 
                client.publish 'chat/public', "#{nickname} has quit (#{$1})"
                exit 1
            else                                # 공개 메시지
                client.publish 'chat/public', "#{nickname} : #{message}"
            end
        end
    end

    loop do
        topic, message = client.get    
        print message,"\n"
    end
end
}}}

== IoT와 MQTT ==
네트워크 영역으로 볼때, IoT는 크게 로컬 네트워크와 광역 네트워크로 나눌 수 있을거다. 로컬 네트워크는 예컨데, 홈 AP(access Point)에 묶여있는 네트워크가 되겠다. 같은 로컬 네트워크에 있는 디바이스들은 중앙서버등에 연결할 필요 없이, 주변에 있는 디바이스들과 데이터를 주고 받을 수 있다. 만약 원격에서 디바이스를 제어하기 원한다면, 중앙에 있는 IoT 인프라에 연결을 해야 할 것이다.  

{{{#!html
<img src="https://docs.google.com/drawings/d/1DEpTe1q2ZwRmpXqd68VMbr7Jp50HweRuupsjl4XZUCA/pub?w=1050&amp;h=481" width="735" height="336">
}}}

네트워크 영역별로 데이터 통신 특성이 다른 관계로, 각각의 경우에 MQTT를 어떻게 응용할 수 있을지를 고민해 보려 한다.

=== 로컬 네트워크에서의 MQTT ===
로컬 네트워크는 "Discovery 가능한 영역"이다. 보통 멀티캐스트 채널을 이용해서, 주변에 있는 디바이스에 자신을 advertise 하거나 반대로 주변에 있는 디바이스를 찾을 수 있다. Discovery가 끝난 후, 데이터를 주고 받을 거다.   

로컬 네트워크에서 데이터 교환은 단순한 메시지 교환과 (멀티미디어 데이터와 같은)컨텐츠 교환으로 나눌 수 있을 거다. 기기 종류에 따라서 교환하는 데이터의 종류에 차이가 있을 수 있다. 조명이나 커피포트, 온도계, 에어컨 등은 단순 메시지를 교환할 테고, TV, 오디오, 스피커, CCTV등은 컨텐츠 교환이 필요하다. 기기에 따라서 데이터 통신 방법을 다르게 할 필요가 있다.  

==== 단순 메시지 교환 ====
제어 메시지를 보내고, 센서 정보를 받는 종류의 기기들은 MQTT 만으로 데이터 통신이 가능할 거다. 아마도 소형의 기기들일 수 있으므로 zigbee와 같은 non-TCP/IP기반의 프로토콜 사용도 고려해야 한다. 이 경우 MQTT-SN(MQTT for Sensor Networks)의 사용을 고려해야 할 것이다. 모스키토 같은 MQTT 브로커들이 MQTT-SN을 지원하고 있으니, 구성에 문제는 없을 거다. 

MQTT(MQTT-SN)를 이용한 구성 시나리오다.  

{{{#!html
https://docs.google.com/drawings/d/1V8MyGdPstTY33xHRAX20Ke8iAyJAMOf7ix34_W4tDC4/pub?w=636&h=266
}}}
 * 온도계는 /sensor/temperature 에 온도를 Puslish 한다. 온도가 변할 때만 puslish 하면 될 거다. 
 * 스마트폰은 /sensor/temperature 를 subscribe 한다.  




=== 광역 네트워크 ===

== 예제 프로그램 ==

  * http://mosquitto.org/man/mqtt-7.html
  * http://madalanarayana.wordpress.com/2014/03/25/learnings-on-publish-subscribe-mqtt-mosquitto/

== 참고 ==
@


1.9
log
@119.64.102.68;;yundream;;
@
text
@d24 1
d29 1
d35 1
a35 1
  * 게스트 운영체제 : 우분투 리눅스 14.07로 통일
d81 1
a139 55
=== go 버전 ===
미완성 코드임
{{{#!plain
package main

import (
    "flag"
    "fmt"
    "net"
    "os"

    "code.google.com/p/jra-go/mqtt"
    proto "github.com/huin/mqtt"
)

var host = flag.String("host", "localhost:1883", "hostname of broker")
var id = flag.String("id", "", "client id")
var user = flag.String("user", "", "username")
var pass = flag.String("pass", "", "password")
var dump = flag.Bool("dump", false, "dump messages?")

func main() {
    fmt.Println(*host)
    flag.Parse()
    if flag.NArg() < 1 {
        fmt.Fprintln(os.Stderr, "usage: sub topic [topic topic...]")
        return
    }
    conn, err := net.Dial("tcp", *host)
    if err != nil {
        fmt.Fprintf(os.Stderr, "dial: ", err)
        return
    }
    cc := mqtt.NewClientConn(conn)
    cc.Dump = *dump
    cc.ClientId = *id
    tq := make([]proto.TopicQos, flag.NArg())
    for i := 0; i < flag.NArg(); i++ {
        tq[i].Topic = flag.Arg(i)
        tq[i].Qos = proto.QosAtMostOnce
    }
    if err := cc.Connect(*user, *pass); err != nil {
        fmt.Fprintf(os.Stderr, "connect: %v\n", err)
        os.Exit(1)
    }
    fmt.Println("Connected with client id ", cc.ClientId)
    cc.Subscribe(tq)
    for m := range cc.Incoming {
        fmt.Print(m.TopicName, "\t")
        m.Payload.WritePayload(os.Stdout)
        fmt.Println("\tr: ", m.Header.Retain)
    }
}
}}}

d149 1
a149 1
=== 로컬 네트워크 ===
d152 16
@


1.8
log
@119.64.102.68;;yundream;;
@
text
@a84 1

d93 4
a96 1

d119 1
a119 1
            when /^\/priv\s*(\w*)\s*(.*)/      
d121 1
a121 1
            when /^\/quit\s*(.*)/              
d124 1
a124 1
            else
d137 2
a138 14
== IoT와 MQTT ==
네트워크 영역으로 볼때, IoT는 크게 로컬 네트워크와 광역 네트워크로 나눌 수 있을거다. 로컬 네트워크는 예컨데, 홈 AP(access Point)에 묶여있는 네트워크가 되겠다. 같은 로컬 네트워크에 있는 디바이스들은 중앙서버등에 연결할 필요 없이, 주변에 있는 디바이스들과 데이터를 주고 받을 수 있다. 만약 원격에서 디바이스를 제어하기 원한다면, 중앙에 있는 IoT 인프라에 연결을 해야 할 것이다.  

{{{#!html
<img src="https://docs.google.com/drawings/d/1DEpTe1q2ZwRmpXqd68VMbr7Jp50HweRuupsjl4XZUCA/pub?w=1050&amp;h=481" width="735" height="336">
}}}

네트워크 영역별로 데이터 통신 특성이 다른 관계로, 각각의 경우에 MQTT를 어떻게 응용할 수 있을지를 고민해 보려 한다.
=== 로컬 네트워크 ===
로컬 네트워크는 "Discovery 가능한 영역"이다. 보통 멀티캐스트 채널을 이용해서, 주변에 있는 디바이스에 자신을 advertise 하거나 반대로 주변에 있는 디바이스를 찾을 수 있다.   

=== 광역 네트워크 ===

== 예제 프로그램 ==
d192 16
@


1.7
log
@119.64.102.68;;yundream;;
@
text
@d73 1
a73 1
 * 채팅방 Join : 원래는 채팅방 목록을 확인해서 Join해야겠으나 귀찮으니, chat/public, chat/private 모두를 sub 하는 걸로 join을 대신하겠다. 
d79 3
d83 2
a84 1
  1. 쓰레드 하나는 Sub 전용이다. 토픽으로 받은 정보를 화면에 출력한다. 
d86 8
a93 2
=== 개발 ===
Ruby로 개발하기로 했다.
d95 39
@


1.6
log
@119.64.102.68;;yundream;;
@
text
@d3 1
d77 1
a77 1
https://docs.google.com/drawings/d/1_KlS0GuVUCfa-kDYPs4T4iaUo8lAUHlbWzPSTsZyRg8/pub?w=860&h=329
d81 1
d86 12
a97 1
== 참고 ==
d155 2
@


1.5
log
@1.214.223.250;;yundream;;
@
text
@d3 1
a3 1
<!> 미완성
d26 1
d32 1
a32 1
  * 게스트 운영체제 : 우분투 리눅스 13.10으로 통일
d44 40
@


1.4
log
@119.64.102.68;;yundream;;
@
text
@d43 11
d55 43
a97 1
== 참고 ==
@


1.3
log
@119.64.102.68;;yundream;;
@
text
@d24 19
a42 1
== Mosquitto 브로커 ==
d45 1
@


1.2
log
@119.64.102.68;;yundream;;
@
text
@d13 13
@


1.1
log
@119.64.102.68;;yundream;;
@
text
@d15 1
@
