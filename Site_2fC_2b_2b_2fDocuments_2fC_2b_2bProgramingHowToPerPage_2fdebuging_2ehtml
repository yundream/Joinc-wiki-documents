{{{#!html
<HTML
><HEAD
><TITLE
>디버깅</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.76b+
"><LINK
REL="HOME"
TITLE="C++ Programming HOW-TO"
HREF="index.html"><LINK
REL="PREVIOUS"
TITLE="포인터가 문제이다"
HREF="pointers.html"><LINK
REL="NEXT"
TITLE="C++을 위한 IDE (Integrated Development Enviroment)와 에디터"
HREF="ideandeditors.html"><META
http-equiv="Content-Type"
content="text/html; charset=euc-kr"></HEAD
><BODY
CLASS="SECT1"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="NAVHEADER"
><TABLE
SUMMARY="Header navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>C++ Programming HOW-TO</TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A
HREF="pointers.html"
ACCESSKEY="P"
>&#51060;&#51204;</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
></TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A
HREF="ideandeditors.html"
ACCESSKEY="N"
>&#45796;&#51020;</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><DIV
CLASS="SECT1"
><H1
CLASS="SECT1"
><A
NAME="DEBUGING"
></A
>11. 디버깅</H1
><P
>정확한 버그의 원인을 알아내는 것은 꽤나 성가신 일이지만,
여기에도 몇가지 테크닉이 있다.

<P
></P
><UL
><LI
><P
>표준출력으로 프린트하여 - 프로그램이 간단한 경우, 몇몇 변수들의 값을
프린트해보고, 어떤 값인지 본다 - 무엇이 잘못되었는지 찾기</P
></LI
><LI
><P
>디버거를 이용하기. 디버거는 breakpoint를 설정하고, 실행도중에 코드를 
추적해볼 수 있도록 해준다. 대부분의 IDE는 디버거가 같이 있다.
GNU 시스템의 경우, gdb가 있다.</P
></LI
><LI
><P
>컴파일러에서 지원하는 옵션들을 사용하여 보다 많은 경고(warning)을 볼 수 있도록
해라. 예를들어 g++의 경우, -Wall 옵션을 사용해라.</P
></LI
></UL
>&#13;</P
><P
>디버깅에 도움이 되는 사이트 :

<P
></P
><UL
><LI
><P
> Unix 환경에서 C, C++ 디버깅하기
<A
HREF="http://www.liacs.nl/~jdassen/onderwijs/stuva/debug/debug.html"
TARGET="_top"
>http://www.liacs.nl/~jdassen/onderwijs/stuva/debug/debug.html</A
></P
></LI
><LI
><P
> MPatrol - 유용한 메모리 디버깅 툴 : <A
HREF="http://www.cbmamiga.demon.co.uk/mpatrol"
TARGET="_top"
>http://www.cbmamiga.demon.co.uk/mpatrol</A
></P
></LI
><LI
><P
> NJAMD - 역시 유용한 메모리 디버깅 툴 : <A
HREF="http://sourceforge.net/projects/njamd/"
TARGET="_top"
>http://sourceforge.net/projects/njamd/</A
></P
></LI
><LI
><P
> LeakTracer - 메모리 릭을 찾는 간단하면서도 유용한 툴 : <A
HREF="http://www.andreasen.org/LeakTracer/"
TARGET="_top"
>http://www.andreasen.org/LeakTracer/</A
></P
></LI
></UL
>&#13;</P
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="AEN529"
></A
>11.1. 디버깅 파일</H2
><P
>C++이나 C 프로그램을 디버깅하려면 <A
HREF="appendixa.html"
>23&#51208;</A
> 의 파일을 인클루드하고,
'Makefile'에 DEBUG_STR, DEBUG_PRT , DEBUG&#38;_MEM을 디파인 해서
debug.h 의 함수들로 추적할 수 있도록 한다.
'-DDEBUG_STR' 등을 없앨 때, 디버깅 함수들은 ((void)0) (NULL을 의미)으로 세팅될
것이다. 따라서 최종 결과물에는 아무런 영향을 주지 않는다.
이 디버깅 함수들은 프로그램에 다양하게 적용될 수 있을 것이고, 결과물의 크기를
증가시키지는 않을 것이다.</P
><P
>debug 루틴의 구현을 위해서는 <A
HREF="appendixa.html"
>23&#51208;</A
> 를 참조해라.</P
><P
>또한, <A
HREF="appendixa.html"
>23&#51208;</A
> 에서 debug.h 와 디버깅 함수들을
이용한 예제 프로그램을 보아라.</P
><P
><A
HREF="appendixa.html"
>23&#51208;</A
> 의 예를 보라.</P
></DIV
></DIV
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
SUMMARY="Footer navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A
HREF="pointers.html"
ACCESSKEY="P"
>&#51060;&#51204;</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="index.html"
ACCESSKEY="H"
>&#52376;&#51020;&#51004;&#47196;</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A
HREF="ideandeditors.html"
ACCESSKEY="N"
>&#45796;&#51020;</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>포인터가 문제이다</TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
>&nbsp;</TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>C++을 위한 IDE(Integrated Development Enviroment)와 에디터</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>
}}}
