'''프로젝트 데드라인'''

[[TableOfContents]]

== 3부. 프로젝트 실행 ==

    === 12장. 계획대로 진행하기 ===
	
	'''비행기 분석'''
	


	비행기처럼 프로젝트의 스케줄과 계획을 유지하는 데 도움을 주는 항법 시스템과 비행 절차가 필요하다.


	* 비행 계획
	* 예측 불가능한 비행
	* 항법 시스템
	* 하강


	'''진척도를 측정하고 관찰하기'''


	* 상태를 측정하기
		1. 일별 빌드와 스모크 테스트를 수행하기
			프로젝트의 원동력이며 두 방법 모두 프로젝트의 상태를 측정하는데 매우 중요하다.
		1. 회의(상태 점검 회의)
			* 특정한 목적을 가져라
				무엇이 완성되었고 무엇이 그렇지 못한지를 확인
			* 모든 사람에게 참석을 요청하라
			* 주제를 확산시키라
			* 회의를 간소하시켜라
			* 중요한 이슈를 리스트로 정리하라
		1. 현장관리
			업무 현장을 돌아보면 프로젝트 관리자나 주임이 형식에 구애받지 않고 팀원들과 만나 이슈에 대해 논의할 수 있다.
		1. 정보 공유
			중요한 성과와 실패를 조직 전체와 공유한다.

			
	'''변경하기'''


	* 코스 변경
		기능이나 기술, 플랫폼, 스케줄과 같은 프로젝트의 중요 요소를 변경하는 일을 심사숙고하고 있다면, 다음의 치짐을 고려하라
	
		1. 사실을 인식하되,과대 분석하지 마라
		1. 문제의 논의에 다른 사람도 관여시켜라
		1. 개발과 QA를 보충하기 위해 외부의 팀을 이용하라
		1. 컨설턴트와 계약직을 고용하라
		1. 스케줄을 연장하는 대신에 기능을 제거시켜라
		1. 올바르게 질문하라
			"변경하지 않으면 어떤 일이 발생하는가?" 이 질문은 특히 어떤 기능의 추가 여부를 결정하는 데 유용하게 사용될 수 있다.
			실제 프로젝트에서는 확실한 비즈니스 또는 기술적인 정당성 없이 기능을 변경하는 일이 비일비재하다.
		1. 과감하게 결론을 내려라
			이슈나 문제가 더 악화되도록 내버려두어서는 안 되며, 반드시 어떤 결론을 내려야 한다.

	* 속도를 변경하기	
		1. 부담을 줄 때
			* 기본 단계나 중요 시점을 충족시키기 위해
			* 지키지 못한 날짜를 따라잡기 위해
			* 외부의 경쟁적인 압박에 대응하기 위해

		1. 부담을 증가시키는 방법
			* 지속 기간
			* 편안함
			* 활기
			* 진척도
			* 감사 표시

	=== 13장. 베타 테스트 ===

	베타 테스트: 외부에서 소프트웨어를 평가하는 과정
 


	'''베타 테스트 계획의 중요성'''


	
	* 실제 상황에서의 테스트
	* 소프트웨어에 대한 평가를 얻기
	* 마케팅
	* 직원의 증가


	'''베타 프로그램에서 발생할 수 있는 가장 일반적인 실수'''


	제품의 핵심 요구사항을 정의하고 선별하는 목적으로 베타프로그램을 계획해서는 안된다.


	'''베타 프로그램의 유형'''


	* 베타 단계1
                  60~80% 정도로 코딩된 제품
	* 베타 단계2
                  100%로 코딩된 제품, 최종 릴리즈에 포함되기로 결정한 모든 기능이 코딩되어야 한다.
	* 베타 단계3
                  더 이상 제품의 기능을 변경하는 것을 허락해서는 안 된다.
		제품을 테스트하고 버그를 수정하며, 문서를 최종마무리하여 시장에 바로 출시할 수 있을 정도의 상태로 만드는 것이다.
	* 마케팅 베타
		잠재적인 소비자가 소프트웨어의 프리 릴리즈를 얻도록 하여, 제품이 그들의 요구 사항을 충족시키는지를 평가하는 특수한 베타 유형이다.
		제품 최근의 베타(베타2 또는 3)와 같은 완성도 높은 제품을 마케팅 베타로 제공한다.
	

	'''베타 프로그램의 요소'''


	* 베타 프로그램 시작
		1. 베타 사이트의 조건은 무엇인가
		1. 베타 프로그램의 초점은 무엇인가
		1. 얼마나 많은 베타 사이트를 이용할 것인가
		1. 얼마나 오랫동안 베타 프로그램을 실행할 것인가

	* 베타 사이트 모집하기: 소프트웨어의 성공 여부에 관심을 가지고 있는지 확인하는 것이 가장 중요
		1. 기존의 고객(외부의 이해 관계자와 내부의 최종 사용자)
		1. 기술 지원 직원
		1. 웹사이트 방문자
		1. 파트너와 동맹 기업

	* 베타 사이트와 의사 소통하기
		1. 기대치를 알려주어라
		1. 중요한 이슈와 해결책을 널리 알려라
		1. 이슈를 신속하게 관리하라
		1. 지원하라
		1. 베타 사이트 문제를 처리하라

	* 베타 기간의 진척도 측정하기
		베타 관리자를 따로 두어, 각 사이트가 베타 평가를 제대로 수행하는 중인지 전화를 걸거나 이메일을 보내 확인하는 것이 바람직하다.

	* 베타 프로그램의 마무리			
		베타 사이트에서 공식적인 설문 조사를 수행한다.
		제품을 사용하면서 발견한 이슈와 문제를 효과적으로 알아낼 수 있다.

	* 베타 사이트에 대한 보상


	'''베타 관리자'''


		
	베타 테스트 프로그램을 감독하고 그것의 실행을 관리하는 책임을 지는 팀원

	베타 관리자가 수행해야 하는 기본적인 책임
		* 목적과 목표를 설정하기
		* 베타 사이트를 모집하기
		* 소프트웨어 배포하기
		* 베타 상태에 대해 의사 소통하기
		* 성과를 관리하기
		* 베타를 종료하기
		* 베타 사이트를 보상하기
	
	=== 14장. 릴리즈 캔디데이트 ===

	릴리즈 캔디데이트 과정은 소프트웨어의 최종 빌드가 릴리즈할 준비가 되었다는 사실을 체계적이고 객관적으로 검증해주는 일련의 단계이다.


	'''기본 조건'''


	제품을 반드시 완벽하게 마무리하고 난 후에 릴리즈 켄디데이트 과정을 시작해야 한다.
	릴리즈 캔디데이트를 시작하는 시점에서는 모든 변경 사항을 매우 엄격하게 관리해야 한다.

	기본 조건		
		* 모든 기능을 완성했다
		* 최종적인 온라인 사용자 교육 자료를 완성했다
		* 최종 UI 검토를 끝냈다
		* QA 테스트를 끝냈다
		* 버그 검토를 끝냈다



	'''릴리즈 캔디데이트 테스트'''
	


	릴리즈 캔디데이트란 마지막 단계의 테스트에서 어떤 심각한 문제도 발견되지 않았다는 검증을 받은 후 소비자에게 릴리즈할 수 있는 또는 릴리즈하려고 하는 실제 소프트웨어를 의미한다.
	최종 빌드를 사용하여 소프트웨어의 핵심 기능을 반드시 테스트하고 넘어가야 한다.

	* 최종 빌드를 만들어라
	* 자동화된 테스트와 수동 테스트를 실행하라
		1. 설치 및 라이센스 테스트
		1. 제품의 핵심 기능 테스트
		1. 결정적인 성능 및 부하를 테스트
		1. 그 외에 프로젝트에 특별한 관련이 있는 부분
	* 프로젝트를 안전하게 착륙시켜라
		1. 일이 잘못 진행되고 있다면 그에 대해 고민하라
			* 문제를 명확히 하라
			* 수정이나 변경 사항이 미치는 영향을 평가하라
			* 소프트웨어를 다시 빌드할 것인지 결정하라
			* 필요하다면 릴리즈 캔디데이트 테스트 과정을 다시 실행하라
	
		1. 일이 문제없이 진행된다면 출시를 승인하라
			* 엔지니어링
			* 제품 관리
			* 기술 지원
			* 고객

		1. 모든 일이 마무리되면 출시하라


	=== 15장. 프로젝트 마감 ===
	

	'''프로젝트 마감이 왜 중요한가'''


	팀의 노력을 최종적으로 보상하는 역할을 한다.
	팀원들이 그들이 참여한 프로젝트가 중요한 가치가 있으며, 그들이 공헌화 희생이 그 가치를 인정받았다는 사실을 느끼게 만들어야 한다.


	'''어떻게 프로젝트를 마감하는가'''


	* 제품의 출하
		팀을 불러모아 제품이 출시되었다는 사실을 반드시 알려주어야 한다.
	* 최종 이메일
	* 릴리즈 축하
	* 공개적인 인정
		팀과 개인에게 뛰어난 성과에 대한 고마움을 표시하는 데 매우 효과적인 방법이다.
	* 비공개적인 인정
		어떤 개인이 프로젝트에 참여하여 공헌하였음을 존중받고 있다는 사실을 입증시켜주는 매우 효과적인 방법이다.
	* 현금, 주식 그리고 선물
		시상의 형태를 빌려 보상하는 것
	* 사진과 이스터 에그
		많은 팀들이 자신의 제품에 이스터 에그를 숨겨놓는다.
		숨겨진 명령을 사용하거나 메뉴를 마우스로 클릭함으로써 팀의 사진이나 이름이 포함된 숨겨진 화면을 출력하는 역할을 한다.


	'''다음에 할 일은 무엇인가'''


	* 과거로부터 배우기

	* 프로젝트 기반 구조에 투자하기
		1. 프로세스
		1. 자동화
		1. 장비
		1. 도구

	* 사람에 투자하기
		1. 수행 능력 검토
		1. 교차 훈련
		1. 훈련
		1. 휴가
