#title Joinc표 lotto 번호 자동 생성 코드

=== 설명 ===
[wiki:Code/C/random_read2 random_read2]를 이용한 로또 번호 생성기입니다. STL(:12)의 set을 사용해서 중복된 값을 제거했습니다. 

=== 사용방법 ===
{{{#!plain
#include "myrand.h" // random_read2()함수 선언 

using namespace std;

int main()
{
	lotte();
}
}}}

=== 코드 ===
{{{#!plain
#include <unistd.h>
#include <stdio.h>
#include <string.h>
#include <set>
#include <vector>
#include "myrand.h"

void lotto()
{
    int myvalue;
    set<int> rbuf;
    vector<int> lotto;
    int i = 1;
    int seed;
    cout << "JOINC표 로또 번호 생성기 !!!" << endl;
    cout << "대박의 꿈은 이루어진다 !!!\n" << endl;
    while(1)
    {
        getrandom((void *)&myvalue, 4);
        seed = (myvalue%46) + 1;
        if (rbuf.find(seed) == rbuf.end())
        {
            rbuf.insert(seed);
            cout << i << " : " << seed << endl;
            i++;
        }
        if (rbuf.size() == 6)
        {
            break;
        }
    }

    cout << "\n<당첨 확률 : 대략 1/9000000>" <<endl;
}
}}}

=== 변경사항 ===
 * 몇몇 문제점이 있어서 수정해 보았습니다. 괜한 딴지일지도 모르겠습니다. - KCandoAll
   * {{{main.cpp}}} - 잘못된 헤더 파일과 함수명을 수정하였습니다.
   {{{#!plain
#include "lotto.h" // lotto()함수 선언 

int main()
{
  lotto();

  return 0; // 표준 C++에서는 생략 가능합니다.
}
}}}
   * {{{lotto.h}}}
   {{{#!vim cpp number
void lotto(); 
}}}
   * {{{lotto.cpp}}} - 좀 더 c++ 표준에 맞게 수정하였으며, 쓰이지 않는 코드를 삭제하고 코드의 응집력을 높혔습니다. 한가지 덧붙이자면, set을 이용하는 것 보다는 vector를 이용하여 존재 유무를 검사하는 루틴을 병행하는 것이 더 효율적이지 않을까 합니다. 저 역시 컴파일을 해보지 않은 관계로 오류가 없다고 장담을 못하겠습니다. -_-;
   {{{#!plain
#include <set>
#include "myrand.h"

using namespace std;

void lotto()
{
    cout << "JOINC표 로또 번호 생성기 !!!" << endl;
    cout << "대박의 꿈은 이루어진다 !!!\n" << endl;

    set<int> rbuf;
    pair<set<int>::const_iterator, bool> p;
    while (rbuf.size() < 6)
    {
        int myvalue; 
        getrandom((void *)&myvalue, 4);
        int seed = (myvalue%46) + 1;
        p=rbuf.insert(seed);
        if (p.second)
        {
            cout << rbuf.size() << " : " << seed << endl;
        }
    }
    cout << "\n<당첨 확률 : 대략 1/9000000>" <<endl;
}
}}}
