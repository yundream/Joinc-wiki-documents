#title 왜!! 소프트웨어 관련 보험은 없는가.

=== 보험의 필요성 ===
세계는 존재하는 구체적인 것들로 구성이 된다. 숲은 나무, 돌맹이, 동물, 바람, 물, 흙 기타등등등등등이 모인 것들로 이것들은 매우 구체적인 것들이다. 이렇게 구체적인 것들로만 이루어진 계를 원시계라고 한다. 원시림이라든지 하는 말들이 여기에서 나온 것들이다. 

반면 인간은 세계를 구체적인 것들을 '''가상'''의 것들로 추상화 시킨다. 아마 인류가 문명을 이룩하게 된 이유가 바로 여기에 있을 것이다. 얼마나 '''가상화'''가 잘되어 있는지, 즉 얼마나 추상화 되어 있는지는 문명이 얼마나 발전했는지를 나타내는 척도가 되기도 한다.

예컨데, 원시 사회는 매우 구체적이다. 뛰어다니는 동물을 잡아서 먹거리로 만든다던지, 채집을 한다든지 하는 것들은 구체적인 행위이며, 각 개인은 많은 구체적인 일을 직접해낸다. 서울에 사는 우리는 주린 배를 채우기 위해서 어떻게 종자를 구해서 씨를 뿌리고, 잘키우고 가공을 하고 포장을 해야할지 걱정하지 않는다. 혹은 고기를 먹기 위해서 사냥감을 얼마나 잘 발견하고 몰래 뒤를 잡아서 화살을 날려야 할지 고민하지 않는다.  

이러한 모든 과정은 '''추상화'''되어 있기 때문이다. 

추상화가 문명에 있어서 반드시 필요한 이유는 '''복잡성'''을 감추기 때문일 것이다. 개개인이 일일이 수렵과 채집을 하고 자식을 가르치고 물물교환을 해야 한다면 소규모 부족이상의 문명에서 벗어나기가 매우 힘들 것이다.

그러나 '''추상화'''는 단점이 있다. 고도로 추상화가 될 수록, 내부에 복잡성을 감추게 되고, 복잡성을 감추는 만큼 '''문제'''가 터질 확률이 많아진다는 점이다. 또한 추상화는 엔트로피를 낮추는 방향으로 진행이 되는데, 때문에 한번 터지면 제대로 터지게 된다.

'''원시적인 방법으로''' 뛰다가 넘어진다면 무릎정도 까질 뿐이다. 운동신경이 남다르다면, 거의 다치지 않고 넘어질 수 있다. 덤블링을 할 수도 있을 것이다. 그러나 페라리를 타고 100km로 달리다가 가로수를 들이받아야 되는 상황이라면 이야기가 달라진다. 비행기는 더 심각하다. 우주선이라도 폭발하게 되면 탑승자 100%사망에 수천억원이 날아간다. 

또다른 문제가 있는데, 이 감추어진 '''추상적인 부분'''들은 내가 직접관여하는 부분이 아니라는 점이다. 나는 이용자일 뿐인데, 직접 관여하지는 않는다. 그러나 매우 큰 손실을 입을 수도 있다. 이 때문에, 이를 보장받을 수 있는 장치를 필요료 하게 되고 그래서 만들어진게 '''보험'''이다.

원시부족사회에 '''보험'''이 있을 필요는 없을 것이다.

해서.. 자동차보험, 화재보험, 해상보험, 운송보험, 무슨무슨 보험 보험 보험 등등 끝도 없이 많은 보험들이 생겨난다.

=== 그런데 왜 소프트웨어 (혹은 컴퓨터) 보험은 없지 ? ===
컴퓨터와 소프트웨어는 모든 영역에서 중요하게 사용한다. 개인, 회사, 국가, 단체를 불문하고 정보의 처리를 위한 핵심적인 요소로 사용된다. 심지어는 보험회사들도 컴퓨터를 사용한다. 소프트웨어 오류로 '''개인 데이터가 싹 날아갔네''', '''회사 업무가 마비되었네''' 라는 얘기는 심심찮게 들을 수 있고, '''소프트웨어 취약점을 공격하는 바이러스'''로 국가전산망이 마비가 되었던 경우도 있었다. 

온라인 기반의 서비스도 마찬가지다. 네트워크 끊김, 서버 프로그램의 불안정, 다운, 롤백, 랙등으로 발생할 수 있는 손실에 대해서 보장하는 경우는 거의 없다. 대게의 경우 '''약관'''에도 '''개인 백업'''의 중요성을 강조하는 정도로 프로그램의 오류등에 의한 피해는 책임질 수 없음을 명백히 하고 있다.

돈벌기 좋아하는 보험회사는 왜 소프트웨어 관련된 보험은 만들지 않은 것일까.

=== 짧은 역사 ===
[[badsense]]우선은 소프트웨어 산업의 역사가 짧은 것에 이유가 있지 싶다. 보험이라는 것은 확률게임 같은거라고 생각된다. 확률적으로 이정도 선에서 보험료를 책정하면, 피보험자도 납득하면서 보험회사도 돈을 벌 수 있겠구나라는 식이다. 그렇다면, 해당 산업이 역사적으로 오래되어서 통계를 위한 많은 데이터가 수집될 필요가 있다. 그래야지만 믿을만한 정보를 얻어내고 거기에 근거해서 '''분명히 이익을 얻을 수 있다고''' 자신할 수 있을 것이기 때문이다. 

소프트웨어는 역사가 한 50년 되려나 ? 그나마 산업전반에 걸쳐서 널리 사용된 것으로 따지자면 이제 20년 정도 ? '''자신을 가지기'''에는 너무 역사가 짧은 걸로 생각된다.

=== 예측 불가능성 ===
다른 기계장치들과 비교해서 '''소프트웨어'''는 '''결과를 예측'''하기가 매우 힘들다는 특징을 가진다. 앞서 고도로 추상화 될 수록, 내부에 복잡성을 가지고 된다고 했었다. 복잡하다는 것은 문제가 발생할 확률이 높다는 것을 얘기한다. 지나치게 복잡할 경우 문제가 발생할 확률을 얻어내는 것 조차 쉽지가 않다.

소프트웨어는 현재까지 만들어진 그 어떤 것보다 높은 수준에서 추상화 되어 있다. '''인간이 일을 하고 생각하는 과정'''을 추상화해야 하기때문이다. 프로그래머들이 사용하는 C(:12), C++, Python 들과 같은 개발도구들을 이용해서 소프트웨어를 만들어 내는데, 이 도구들이 하는 일이란 것은 인간의 생각을 '''논리적''' 잘 표현해서 컴퓨터가 알아먹을 수 있는 소프트웨어를 만드는 걸 도와주는 것이다. 

인간의 생각은 불완전 하며, 예측불가능 하다. 인간이 생각해 내는 논리역시 마찬가지일 수 밖에 없다. 소프트웨어는 논리를 추상화해야 하는 것이니, 자연스럽게 복잡도와 예측불가능성이 증가할 수 밖에 없다. 코드길이가 100줄이상 넘어가면 '''버그'''를 의심해야 한다. ''' 버그(:12) 없는 프로그램은 존재하지 않는다'''라는 얘기가 '''진리'''로 통하는 이유다. 거기에 소프트웨어가 실행되는 환경인 컴퓨터(:12), 인터넷(:12) 네트워크(:12) 등도 비교적 최근에 등장한 추상화된 도구들이다. 이들 위에서 돌아가야 하니, 문제를 예측하기란 더욱더 힘들어질 수 밖에 없다.

=== 추상화의 재추상 ===
소프트웨어를 업무에 적용한다고 가정해 보자. 업무라는 것 자체가 추상을 내포하고 있다. 개인 용돈정리하는데 오라클(:12)을 사용할 수도 있고, 기업정보관리를 위해서 오라클을 사용할 수도 있다. 이것을 다시 오라클이라는 소프트웨어를 통해서 추상화 한다. 업무에 사용될건 분명하지만 어떤 업무에 사용될지 알 수 없으며, 얼마나 중요한 업무에 사용될지도 정의할 수가 없다. 사용자 맘이다. 

피카소의 추상화에 대한 의견이 '''보는 사람 맘'''인 것과 같은 이치다.

업무가 정의될 수 없으니, '''보험'''이 만들어질 수도 없다. 소프트웨어의 문제점과 예측 불가능성을 제외하더라도 업무에 차질이 발생했을 때 발생할 수 있는 피해를 정의할 수 없으니, 상품자체를 설계할 수 없다. 소프트웨어가 적용되는 업무분야를 완전히 분석하는 컨설팅 형식으로 보험상품을 설계할 수도 있겠지만.. 좀 규모가 되는 회사라면, 컨설팅 비용만 수십억 거뜬히 나오지 싶다. 오히려 배보다 배꼽이 더 큰 상황이다. 차라리 백업시스템을 두는게 낫지.. 

=== 비교적 저렴한 소프트웨어와 하드웨어 ===
바로 위에서 언급한바가 있다. 기업입장에서는 보험설계를 컨설팅 받느니, 차라리 이중화를 하는게 훨씬 이익이다. 컨설팅 받는 비용이면, 10중으로 안정장치를 만들 수 있지 싶다.

=== 아키텍쳐의 부재 ===
품질과 문제를 예측해서 '''설계'''를 해내기 위해서는 검증된 다양한 아키텍쳐(:12)가 존재해야 한다. 건축을 예로 들자면 몇층이상의 건물을 지을 때는 이러한 패턴과 요러요러한 시공기법을 사용해서 어쩌고 저쩌고 한 프로세스로 진행시키면 된다라는 식의 확립된 아키텍쳐가 존재한다. 이러한 아키텍쳐는 오랜시간동안 많은 경험을 거치면서 추가되고 수정되면서, 믿을 만한 수준으로까지 다듬어지게 된다. 

소프트웨어는 그 중요성과 다양성에 비해서, 아키텍쳐가 부족한 상황이다. 역사가 짧았기도 하거니와 소프트웨어가 가지는 독특한 성질 때문일 것이다.

=== wow ===
개인적으로 블리자드사의 온라인 게임인 wow를 즐겨한다. 오베때부터 했으니, 3년정도는 한듯 싶다. 커뮤니티 사이트도 가끔 들어가는데, 끊이지 않고 터져 나오는 이슈가 '''왜 다운되냐. 왠 랙이냐. 왠 버그냐. 뭔놈의 비정기 점검은 이리도 많냐. 기다린 시간을 보상해라'''이다. 다른 서비스에서는 말이 안되는 상황이니까. 다른 서비스 같으면, 당장에 무슨 소송이라도 들어갔을 것이고 이를 위해서 회사는 보험같은 거라도 들었놓았을 테니까. 

그러나 당분간 소프트웨어를 대상으로한 '''보험상품'''은 나오지 않을 것 같다. 소프트웨어의 문제로 발생한 책임 역시 '''백업을 하지 않은 소비자'''에게 넘어가는 지금의 상황이 계속될 것이다.
