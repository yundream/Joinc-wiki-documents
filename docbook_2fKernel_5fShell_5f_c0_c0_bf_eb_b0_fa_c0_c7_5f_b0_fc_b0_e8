#title Kernel Shell 응용과의 관계
[wiki:article_Kernel_Shell_응용과의_관계 HTML 변환문서]

{{{#!plain
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook V4.1//EN">
<article lang="ko">

<!--           -->
<!-- 문서 정보 -->
<!--           -->
<articleinfo>
	<title>Kernel, Shell, 응용과의 관계</title>

	<author>
		<surname>윤 상배</surname>

		<affiliation>
			<address>
				<email>dreamyun@yahoo.co.kr</email>
			</address>
		</affiliation>
	</author>
</articleinfo>

<section>
	<title>소개</title>
	<para>
		많은 시스템관리자 혹은 프로그래머들이 Kernl, Shell, 응용프로그램과의 
		관계에 대해서 혼동을하며, 꽤 많은 경험을 가지고 있다 할지라도 
		헷갈릴때가 있다. 
	</para>
	<para>
		특히 이들과의 관계를 제대로 이해하는 것은 프로그래밍시 어느 부분에 
		문제가 있는지 명확하게 판단할수 있도록 도와줌으로 
		좀더 안정된 환경에서 개발과 테스트를 할수 있도록 만들어준다. 
	</para>
	<para>
		이번 글은 Kernel 과 Shell 그리고 응용과의 관계에 대해서 
		알아보도록 하겠다. 
	</para>
	<para>
		모든 설명과 테스트는 Linux Kernel 2.4.x 에서 이루어질것이다. 
		그러나 다른 모든 유닉스에도 공통되는 사항임으로 다른 유닉스역시 
		같은 테스트결과를 보여줄것이라고 믿어도 된다. 	
	</para>
</section>

<section>
	<title>혼동하기 쉬운것들</title> 
	<section>
		<title>쉘은 커널과 응용프그램을 연결한다?</title>
		<para>
			유닉스에 대해서 약간의 관심을 가지고 있었다면, 아래와 같은 
			커널, 쉘, 응용과의 관계를 나타내는 그림을 본적이 있을것이다.   
			<title>
   +-----------------------+
   |      APPLICATION      |
   |   +---------------+   |
   |   |     SHELL     |   |
   |   |   +--------+  |   |
   |   |   | Kernel |  |   |
   |   |   +--------+  |   |
   |   +---------------+   | 
   +-----------------------+
			</title>
			이 그림을 언뜻 보고나서 혼동하는 점이 SHELL 이 Kernel 을 
			둘러 싸고 있고 그위에 응용이 있으니, 응용이 커널과 통신하기 
			위해서는 쉘을 통과하는걸로 착각할수 있다는 점이다. 
			게다가 기본적으로 모든 작업이 쉘위에서 이루어짐으로 이러한 
			착각에 쉽게 빠질수 있다. 
		</para>
		<para>
			그러나 쉘은 커널과 어플리케이션(프로세스)와의 중계를 위해 
			존재하는게 아니다. 쉘은 사용자와 커널간의 중계를 위해 
			존재하는 인터프리터 역활을 하는 프로그램일 뿐이다. 
			커널 입장에서는 쉘이나 어플리케이션이나 모두 동일한 
			응용 어플리케이션일 뿐으로 각각의 시스템콜을 이용해서 
			커널과 독립적으로 통신하게 된다. 
		</para>
		<para>
			쉘은 시스템관리자가 시스템 관리를 효율적으로 할수 있는 환경을 
			만들어주기 위한 약간 특이한 어플리케이션일 뿐이다. 
		</para>
		<section>
			<title>그럼 쉘과 어플리케이션과는 전혀 관계가 없나요?</title>
			<para>
				물론 쉘이 쉘위에서 실행하는 어플리케이션과 전혀 관계가 없지는 
				않다. 기본적으로 쉘은 어플리케이션을 실행시킬때 fork&amp;exec 
				기법을 이용해서 새로운 프로세스를 발생시킨다. 
				이때 프로세스 관계에 의해서 쉘은 부모프로세스가 되고 어플리
				케이션은 자식 프로세스가 되는데, 프로세스 관계상 
				자식 프로세스인 어플리케이션은 부모프로세번호(PPID), 
				세션아이디(SID), 프로세스그룹아이디(GID) 등을 공유하게 된다. 
			</para>
			<para>
				또한 환경변수와 열린파일이 있을경우 파일지시자 등을 
				상속받게 된다. 이러한 공유되는 자원들로 인하여 
				부모프로세스(SHELL)의 변화 가 자식프로세스에게 몇가지 영향을 
				미칠수 있다. 가장 먼저 생각해 볼수 있는게 signal 의 전달이다. 
				예를 들어 부모프로세스는 SIGHUP 와 같은 몇가지 신호를 받을 
				경우 죽기전에 자식프로세스에게 자신이 죽었음을 역시 시그널을 
				통해서 알려준다. 운영체제마다 약간씩 다를수 있는데 
				리눅스의 경우 자식프로세스에게 SIGHUP 가 전달된다. 
				SIGHUP 시그널에 대한 기본행동은 프로세스 종료가 되므로 
				SIGHUP 에대한 처리를 하지 않았을경우  부모프로세스가 종료되면 
				자식프로세스들도 SIGHUP 신호를 받고 종료한다.  
			</para>
			<para>
				<emphasis>예제: loop.c </emphasis>
				<screen>
int main()
{
    while(1)
    {
        sleep(1);
    }
}
				</screen>
				위의 예제를 쉘에서 실행시키고, 다른 터미널(한텀)을 하나 더 
				띄어서 프로세서 상태를 살펴보도록 하자. 
				<screen>
[root@localhost test]# ps -efjc | grep loop | grep -v grep
root       405   356   405   356     -  30 19:45 ttypd    00:00:00 ./loop
root       407 32490   406 32490     -  26 19:45 ttyq1    00:00:00 grep loop

[root@localhost test]# ps -efjc | grep 356 | grep -v grep
root       356   355   356   356     -  30 19:49 ttypd    00:00:00 -bash
				</screen>
				PID, PPID, PGID, SID 가 각각 405, 356, 405, 356 임을 
				알수 있다. 여기에서 PPID 가 356 인 프로세스가 loop 를 실행시킨 
				부모 프로세스로 bash 쉘임을 알수 있다.      
			</para>
			<para>
				자 이제 kill -HUP 355 를 이용해서 쉘을 죽이면 어떻게 될까. 
				ps 로 확인을 해보면 알겠지만 loop 프로세스까지 종료되었음을 
				확인할수 있을것이다.   
			</para>
			<para>
				그렇다면 부모프로세스가 시그널을 받았을때 무슨일인가 발생을 
				해서 자식프로세스가 죽었음을 알수 있다. 우리는 이미 
				부모프로세스가 죽을경우 SIGHUP 시그널을 발생시킨다는 점을 
				알고 있음으로 정말 자식프로세스에게 SIGHUP가 전달되는지 
				확인을 할수 있을것이다. 위의 loop 프로그램을 약간 개조해서 
				SIGHUP 시그널을 받아서 처리를 하도록 코드를 약간 수정해 
				보도록 하겠다.  
			</para>
			<para>
				<emphasis>예제 : loop_sig.c</emphasis>
				<screen>
#include &lt;signal.h&gt;
#include &lt;unistd.h&gt;

void sig_handler(int signo);

int main()
{
    int i = 0;

    printf("Program start\n");

    if (signal(SIGHUP, (void *)sig_handler) == SIG_ERR)
    {
        perror("signal set error ");
        exit(0) ;
    }

    while(1)
    {
        printf("%d\n", i);
        i++;
        sleep(1);
    }
    return 1;
}

void sig_handler(int signo)
{
    FILE *fp;
    printf("SIG HUP\n");

    fp=fopen("/tmp/otest", "w");
    fputs("SIGHUP\n", fp);
    fclose(fp);
}
				</screen>
				위의 프로그램은 SIGHUP를 받았을경우 시그널핸들러를 
				수행하도록 시그널 처리했다. 그러므로 SIGHUP 를 받더라도 
				죽지 않고 시그널 핸들러에 정의되어 있는 작업을 수행할 
				것이다.  
			</para>
			<para>
				위 프로그램을 컴파일후 실행시키고 부모쉘에 SIGHUP 신호를 
				보내고 결과를 확인해보자.  
				<screen>
[root@localhost test]# ps -efjc | grep loop_sig | grep -v grep
root       612     1   612   568     -  30 20:10 ?        00:00:00 ./loop_sig
				</screen>
				프로세스가 살아 있음을 확인할수 있다. PPID 가 1임을 눈여겨 
				보면 부모프로세스를 잃은 자식프로세스는 커널이 관리하고 
				있음을 알수 있다. /tmp/otest 를 확인해 보면 loop_sig 프로그램이 
				SIGHUP 를 받아서 핸들러를 제대로 작동시켰음을 알수 있다. 
				테스트 삼아서 부모쉘에 SIGKILL 도 한번 날려보고 결과를 
				확인해보도록 하자.
			</para>
			<para>
				테스트를 해본결과 쉘에서 실행시킨 프로그램은 부모프로세스의 
				영향을 받으며 그 영향은 SIGNAL 을 통해서 이루어진다는것을 
				확인할수 있었다. 하지만 그외에 부모프로세스로 부터 영향을 
				받는건 없다. 부모프로세스가 문제가 생겨서 커널로부터 
				시그널이 전달되는것을 제외하고는 프로세스는 독립적으로 
				커널과 시스템콜을 통해서 대화하며 작동하게 된다.  
			</para>
		</section>
		<section>
			<title>데몬 프로세스와 쉘과의 관계</title>
			<para>	
				데몬 프로세스는 자신의 PID 를 가지며, 
				자기 스스로가 프로세스 그룹과 세션의 리더가 되는 
				독립적인 프로세스이다. 데몬 프로그램을 관리하는 
				부모 PID 는 커널 (PID 1)이 된다. 
				다음은 가장 간단한 형태의 데몬 프로그램이다.    
			</para>	
			<para>
				<screen>
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;fcntl.h&gt;

int main()
{
    pid_t   pid;
    if (( pid = fork()) < 0)
    {
        printf("fork error\n");
        exit(0);
    }

    else if(pid != 0)
        exit(0);

    setsid();
    chdir("/");
    umask(0);

    while(1)
    {
        sleep(1);
    }
}
				</screen>
			</para>
			<para>
				위의 프로그램을 실행후 ps 를 이용해서 프로세스 상태를 확인 
				해보면 아래와 같다.  
				<screen>
[root@coco /root]# ps -efjc | grep daemon | grep -v grep
root       699     1   699   699     -  30 20:38 ?        00:00:00 ./daemon
				</screen>
				비록 쉘에서 위의 프로그램을 실행시켰다고 하더라도, 
				일단 실행이 된후에는 완전히 독립된 프로그램으로 작동하고 
				있음을 알수 있다. 이경우에는 단지 커널이 부모 PID 이므로 
				커널이 죽겄나 외부에서 시그널을 보내기 전에는 다른 영향을 
				받지 않고 스스로 작동함을 알수 있다.  
			</para>
		</section>
	</section>
	<section>
		<title>그렇지만 쉘의 환경변수를 읽어 오잖아요..!!</title>
		<para>
			결론적으로 말해서 환경변수는 프로그램시작 시점에서만 
			읽어들이며, 중간에 환경변수를 요청한다고 해서 
			쉘의 환경변수를 읽어오지 않는다. 
		</para>
		<para>
			프로세스는 시작시점에서 환경변수를 읽어들이고 읽어들인  
			내용은 자신의 stack 영역에 저장하고, 필요할때 stack 영역에서 
			읽어들이기 때문에 쉘과 통신할 필요가 없다.  
		</para>
		<para>
			음.. 굳이 이것까지 테스트해보진 않겟다. 
			<ulink url=http://www.joinc.co.kr/modules.php?name=News&file=article&sid=8>유닉스 환경변수 다루기</ulink> 의 내용을 이용해서 (테스트 프로그램을 
			만든후) 테스트 해보길 바란다.     
		</para>
	</section>
</section>

<section>
	<title>결론</title>
	<para>
		쉘은 어플리케이션에 어떤 영향을 미치지 않는다. 
		쉘이 시그널을 받고 죽을 때 자식프로세스에게 발생시키는 
		시그널이란 것도 쉘이 발생시키는게 아니고 프로세스그룹을 
		관리하는 커널에서 발생시키는 것이기 때문이다.    
	</para>
	<para>
		단지 프로세스 시작시점에서 환경변수등을 통한 프로세스의 시작 
		정보를 조정할수 있을 뿐이다.  
	</para>
	<para>
		그리고 이러한 환경변수와 시그널은 쉘과 어플리케이션의 관계이기 
		때문에 발생하는게 아닌, 모든 부모/자식 프로세스간에 공통적으로 
		해당되는 사항들이다. 이점을 확실히 알게 된다면 관련된 문제가 
		발생했을때 좀더 능동적으로 대처할수 있게 될것이다. 
  		- 이러한 상황이 과연 발생할까 라고 생각할수 있지만 종종 이러한 
		  상황을 만나게 될것이다. 이럴땐 비록 조그만 거라도 
		  "확실"하게 알고 있다는것 자체 만으로도 많은 시간과 노력을 
		  절약할수 있게된다. - 
	</para>
</section>
</article>
}}}
