#title AWS - RDS

[[TableOfContents]]
== RDS ==
RDS(Relation Database Service]는 AWS에서 제공하는 Saas로 on-deman하게 데이터베이스를 전개할 수 있다. 간단하게 데이터베이스를 전개할 수 있을 뿐만 아니라, AWS의 AWS console를 이용해서 데이터베이스 관리를 위해서 필요한 대부분의 일들을 할 수 있다. 또한 CloudWatch로 부터 메트릭을 수집하고, 이 정보를 이용해서 scale-out, scale-in 정책을 수립할 수 있다.

Multi AZ를 이용한 고가용성 서비스가 가능하며, Read only replica를 만들어서 read 요청에 대한 분산처리가 가능하다. Read only replica는 읽기 요청이 많은 서비스에 대해서 서비스 성능을 높이는 효과를 가질 수 있다. 

=== 지원 데이터 베이스 ===
Mysql, Oracle Database, SQL server를 지원한다. 왠일인지 postgresql은 빠져있다.

=== Multi-AZ ===
RDS의 가용성을 확보하기 위한 기능이다. Multi-AZ를 설정하고 RDS 인스턴스를 만들면, 현재 RDS 인스턴스와 다른 availability zone에 "standby" replica가 만들어진다. 만약 active 상태의 RDS에 문제가 생기면, 자동으로 failover된다. 

이 기능의 최대 장점은 "원 클릭"으로 설정 가능하다는 점이다.  

=== Read only replica ===
Read replicas는 mysql의 고유기능인 asynchronous replication을 이용해서 구현한다. RDS관리자는 원 클릭으로 read only replica를 만들 수 있다.   

{{{#!html
<img src="https://docs.google.com/drawings/d/1AU3VemBpyif-Nz19xcGbpxkniDdwYGA6Wi66Oj5Quug/pub?w=765&amp;h=512">
}}}

대략 위와 같은 구조다. Write가 Master RDS로 이루어지면, master는 replica로 데이터를 동기화 한다. Master와 replica가 모두 동일한 데이터를 가지게 되고 read를 분산할 수 있게 된다.  

=== IOPS ===
IOPS(Input/Output Operations Per Second - eys-ops 라고 읽는다.)는 스토리지장치의 읽기/쓰기 성능 벤치마킹을 위해서 HDD나 SSD, SAN 등에서 사용하는 기준정보다. 

읽기와 쓰기를 모두 높이기 원한다면 IOPS 설정을 할 수 있다. IOPS 설정을 하면, 설정 값만큼의 성능을 보장한다. 최소 값이 1000 IOPS로 10000 IOPS까지 설정할 수 있다. 그러데 1000 IOPS라고 하면 도대체 이게 어느정도의 성능인 건지 감이 오질 않는다. 

IOPS에 대한 정보는 [http://en.wikipedia.org/wiki/IOPS  wikipedia - IOPS]문서를 살펴보기 바란다. 

IOPS에 대한 것은 언젠가 테스트를 해봐야 겠다.
=== Parametar group ===
RDS는 AWS에서 제공하는 Saas 인스턴스로 ssh 등을 이용해서 운영체제에 접근할 수 없다. 유저는 단지 mysql 서비스만을 사용할 수 있다. 또한 유저에게는 mysql root 권한이 주어지지 않는다. 일반유저 보다는 강하고 root 유저 보다는 약한 admin 유저가 주어진다. 데이터베이스/테이블/유저 생성/삭제와 같은 중요한 일들을 할 수 있지만 데이터베이스 설정과 같은 root 권한이 필요한 일은 할 수가 없다.   

https://lh3.googleusercontent.com/-k1GsOpBHv5Q/UXAlEqvYu1I/AAAAAAAAC_A/GYhM2r0YjRg/s640/rds01.png

이러한 일들은 Parameter group을 이용해서 해야 한다. Paramter group은 Web UI 형태로 제공되므로 오히려 좀더 쉽게 mysql을 관리할 수 있다. Parameter group에서 조정가능한 paramter만 무려 194개다. 관리자로서 할 수 있는 모든 일을 할 수 있다고 보면된다. 

=== 모니터링 ===
== Mysql 운용 vs RDS 운용 ==
RDS를 사용할 경우 시스템에 대한 권한이 없으며, 데이터베이스에 대한 root 권한도 없기 때문에 어느정도 운영에 제한이 있을 수 있다. 예컨데, select한 결과를 csv 형태로 export 하려고 하면 애로사항이 꽃핀다. Export 정보는 "로컬 호스트"에 쌓이는데, 로컬 호스트에 대한 권한이 없기 때문에 export 자체를 할 수 없다. 뭔가 다른 툴들을 이용하면 가능하겠지만 다른 툴을 사용해야 한다는 것 자체가 관리성을 떨어트리는 요소다. 이외에도 숨어있는 관리상의 어려움이 있을 수 있겠다. 

하지만 왠만한건 다 할 수 있다. 데이터베이스 관리 조직이 이미 꾸려져 있어서, 전문가의 파워를 마음껏 활용할 수 있는 상황이 아니라면 그냥 RDS로 가는게 속편하다. 

== RDS 생성 ==
RDS를 만드는 과정을 정리한다. Mysql을 기준으로 정리한다.
=== RDS 생성 전 준비 사항들 ===
==== DB Parameter Groups ====
Mysql 데이터베이스의 값들을 설정할 수 있다. '''my.cnf'''설정을 위한 웹 인터페이스인 셈이다. 처음에는 default parameter group 하나만 있다. 데어테베이스를 생성할 때, db parameter groups에 있는 그룹을 적용할 수 있다. default paramter group은 파라미터를 변경할 수 없다. 

Parameter 변경 자체는 간단하다. 문제는 200여개에 달하는 parameter가 의미하는 바를 알고 있어야 한다는 점이다. 
==== DB Security group ====
Inbound와 outbound 구분이 가능하고 port까지 지정할 수 있는 EC2 security group과는 다르다. DB Security group에서는 CIDR/IP 기반의 접근제어만 가능하다. EC2 security group이 있는데, 굳이 db Security group을 사용할 필요가 있나라는 생각이든다. 나는 EC2 security group을 사용하고 있다. 

==== DB Subnet group ====
RDS를 만들기 위해서는 RDS가 위치할 subnet을 지정해야만 한다. Subnet은 일반 EC2 네트워크일 수도 있고 VPC 네트워크일 수도 있다. EC2 네트워크의 경우에는 '''Name'''과 '''Description''' 값만 입력하면 된다.


VPC일 경우에는 좀 복잡하다. 우선 VPC가 만들어져 있어야 한다. 만들어진 VPC 중 하나를 선택하고, Availability zone과 subnet을 최소한 하나 이상 선택해야 한다. 이제 이 VPC에서 RDS를 만들면, db subnet group에 입력한 av zone과 subnet을 선택해서 RDS를 배치할 수 있다.    

아래처럼 VPC 환경을 구성했다고 가정해 보자.

{{{#!plain
<img src="https://docs.google.com/drawings/d/1PAzdoVmptP3IJaSw3S1uHHKQ-UplPS5k2si7B39Gkh4/pub?w=577&amp;h=386">
}}}
  1. public subnet과 private subnet으로 나눈다. 
  1. prviate subnet 3, 4에 RDS를 배치한다. 
  1. subnet 3, 4는 서로 다른 availability zone으로 구성해서 가용성을 높인다. 

DB Subnet net 그룹은 
   1. availability zone 01 + subnet 03
   1. availability zone 02 + subnet 04
두 개를 만들 수 있을 거다. 

=== RDS 인스턴스 생성 ===
DB parameter groups와 DB subnet Groups를 만들었다면, 이제 RDS 인스턴스를 만들 수 있다.

데이터베이스를 선택한다. 

https://lh5.googleusercontent.com/-zfxL9d3oziE/UXGFjZZmz1I/AAAAAAAADBI/YsLTVc_o7qM/s640/rds05.jpg

데이터베이스 상세 설정 화면

https://lh3.googleusercontent.com/-ezCRWi8XaVk/UXGFjXucn7I/AAAAAAAADBM/KPm8kDRFQ64/s640/rds06.jpg
  * Multi-AZ Deployment : MultiAZ를 사용할 건지를 결정한다. 다른 availability zone에 인스턴스가 하나 더 생긴다. 덕분에 비용도 두배.
  * IOPS : 1000부터 10000까지다. 특이하게, (IOPS x 0.1)GB 만큼의 스토리지가 반드시 필요하게 돼 있다. 5000 IOPS를 사용하려면 500G의 스토리지를 신청해야 하는 구조다. 정확한 이유는 모르겠다. 분산 읽기/쓰기를 위해서 많은 디스크를 확보하는게 아닌가라고 추측할 뿐이다.    

추가적인 설정

https://lh4.googleusercontent.com/-kjBFacxJ8kE/UXGFkOQa-II/AAAAAAAADBU/01379sQT4ss/s640/rds08.jpg
  * Database Name : 기본으로 만들어질 데이터베이스. 옵션이다.
  * Choose a VPC : VPC를 사용할 경우 선택
  * Availability Zone : VPC를 선택할 경우, RDS가 배치될 availability zone을 선택할 수 있다.
  * Parameter Group : RDS에 적용할 설정 그룹 

관리 옵션
 
https://lh5.googleusercontent.com/-eA9E51lTqYE/UXGFkAHz6II/AAAAAAAADBY/xPqPmUIfK18/s640/rds09.jpg

백업관련 된 것들이다. 백업을 해주겠지..? 실제 어떻게 백업되고 어떻게 복원하는지 확인 해본적이 없어서 뭐라 할말이 없다. 언제 한번 시도해 봐야지.  

== RDS 관리 ==

=== CLI 툴 === 
RDS는 인스턴스이긴 하지만 사용자가 직접 운영체제에 접근할 수 없다. 따라서 AWS rds console을 사용하거나 혹은 rds-cli 툴을 이용해야 한다. 배치 혹은 자동화 작업을 원한다면 [http://docs.aws.amazon.com/AmazonRDS/latest/CommandLineReference/Welcome.html rds-cli]툴을 사용해야 한다. 

우분투 리눅스 13.04 에서 테스트 했다.
=== CLI 환경 설정 ===
먼저 Java 환경을 만들자.
{{{#!plain
# apt-get install default-jre
}}}
환경변수 '''JAVA_HOME'''의 값을 설정한다.
{{{#!plain
# export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64/
}}}

RDS 툴을 [http://aws.amazon.com/developertools/2928 다운로드]해서 압축을 푼다.  나는 /home/aws 디렉토리에 풀었다.
{{{#!plain
# unzip RDSClie.zip
}}}

환경변수 AWS_RDS_HOME을 설정해야 한다. 
{{{#!plain
# export AWS_RDS_HOME=/home/aws/RDSCli-1.14.001
}}}

이 것으로 RDS 툴을 실행하기 위한 환경 설정을 마쳤다. 제대로 실행되는지 확인해 보자. '''AWS_RDS_HOME/bin'''디렉토리에 rds 실행 스크립트들이 있다. 
{{{#!plain
# ./rds-version 
Relational Database Service CLI version 1.14.001 (API 2013-05-15)
}}}

=== RDS CLI 사용 예 ===
<!> 추가예정 

== 관련문서 ==
  * [http://aws.amazon.com/ko/rds/ AWS RDS]
  * [http://en.wikipedia.org/wiki/Amazon_Relational_Database_Service Wikipedia rds]
  * [http://dev.kthcorp.com/wp-content/uploads/2012/11/H3_2012_double_sided.pdf 2012 H3] 
  * [http://blog.jidolstar.com/865 RDS CLI 툴킷 설정 및 사용예시]

== 히스토리 ==
  * 작성일 : [[Date(2013-04-19T03:46:25)]]
