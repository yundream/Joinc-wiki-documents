#title epoll에 입출력 이벤트를 기다린다.
[wiki:docbook_epoll_wait(2) Docbook 원문]

{{{#!html
<HTML
><HEAD
><TITLE
>epoll_wait(2)</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.76b+
"><META
http-equiv="Content-Type"
content="text/html; charset=euc-kr"></HEAD
><BODY
CLASS="CHAPTER"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="CHAPTER"
><H1
><A
NAME="AEN1"
>1&#51109;. epoll_wait(2)</A
></H1
><DIV
CLASS="TOC"
><DL
><DT
><B
>&#52264;&#47168;</B
></DT
><DT
>1.1. <A
HREF="#AEN4"
>사용법</A
></DT
><DT
>1.2. <A
HREF="#AEN8"
>설명</A
></DT
><DT
>1.3. <A
HREF="#AEN20"
>반환값</A
></DT
><DT
>1.4. <A
HREF="#AEN23"
>에러</A
></DT
><DT
>1.5. <A
HREF="#AEN39"
>예제</A
></DT
><DT
>1.6. <A
HREF="#AEN43"
>참고문헌</A
></DT
></DL
></DIV
><P
>파일에서 이벤트의 발생을 기다린다.</P
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN4"
></A
>1.1. 사용법</H1
><P
>		<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;sys/epoll.h&#62;

int  epoll_wait(int  epfd,  struct epoll_event * events, int maxevents,
                int timeout);
		</PRE
></TD
></TR
></TABLE
>
	</P
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN8"
></A
>1.2. 설명</H1
><P
>		epoll_wait(2)는 <B
CLASS="EMPHASIS"
>timeout</B
>시간동안 epoll 지정자 
		<B
CLASS="EMPHASIS"
>epfd</B
>에 등록된 파일로 부터 입출력 이벤트가 
		발생하는지 검사한다. 만약 이벤트가 발생했다면 이벤트가 발생한 파일의 
		epoll 이벤트 구조체<B
CLASS="EMPHASIS"
>events</B
>를 되돌려준다. 
		다음은  정의된 <B
CLASS="EMPHASIS"
>events</B
>구조체이다. 
		<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>	
typedef union epoll_data {
     void *ptr;
     int fd;
     __uint32_t u32;
     __uint64_t u64;
} epoll_data_t;

struct epoll_event {
     __uint32_t events;  /* Epoll 이벤트 */
     epoll_data_t data;  /* 유저 설정 값 */
};
		</PRE
></TD
></TR
></TABLE
>	
	</P
><P
>		<B
CLASS="EMPHASIS"
>timeout</B
>는 밀리세컨드 단위이며, -1일 경우 영원히 
		기다리고, 0일 때는 바로 리턴, 0보다 클때는 timeout밀리초 만큼 이벤트의 
		발생을 기다린다. 이벤트가 발생하면 epoll_wait(2)는 리턴하며, 이벤트가 
		발생한 파일의 갯수를 리턴한다. 만약 timeout 시간내에 이벤트가 발생하지 
		않았다면 0을 리턴한다.
	</P
><P
>		epoll_wait(2)는 리턴할 때, epoll_ctl(2)에 의해서 설정된 유저 설정구조체인
		<B
CLASS="EMPHASIS"
>epoll_data.event</B
>가 그대로 넘어온다. 이를 이용해서 
		우리는 이벤트가 발생했을 때 여러가지 정보를 얻어올 수 있다. 	
	</P
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN20"
></A
>1.3. 반환값</H1
><P
>		성공했을 경우 이벤트가 발생한 파일 지정자의 갯수를 리턴한다. timeout시간
		동안 이벤트가 발생하지 않았을 경우 0을, 에러가 발생했을 경우에는 -1을 리턴
		한다.	
	</P
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN23"
></A
>1.4. 에러</H1
><P
>		<P
></P
><DIV
CLASS="VARIABLELIST"
><DL
><DT
>EBADF</DT
><DD
><P
>	
					epfd가 유요한 파일 지정자가 아니다.
				</P
></DD
><DT
>EBADF</DT
><DD
><P
>	
					epfd가 유요한 파일 지정자가 아니다.
				</P
></DD
><DT
>EFAULT</DT
><DD
><P
>	
					잘못된 메모리 영역을 가리키고 있다.
				</P
></DD
></DL
></DIV
>	
	</P
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN39"
></A
>1.5. 예제</H1
><P
>		<A
HREF="http://www.joinc.co.kr/modules/moniwiki/wiki.php/article_epoll"
TARGET="_top"
>epoll 연구 위키</A
>
		의 예제를 참고하기 바란다.
	</P
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN43"
></A
>1.6. 참고문헌</H1
><P
>		<P
></P
><OL
TYPE="1"
><LI
><P
>			<A
HREF="http://www.joinc.co.kr/modules/moniwiki/wiki.php/article_epoll"
TARGET="_top"
>epoll 연구 위키</A
>
			</P
></LI
><LI
><P
>			epoll_ctl(2)
			</P
></LI
><LI
><P
>			epoll_create(2)
			</P
></LI
><LI
><P
>			close(2)		
			</P
></LI
></OL
>
	</P
></DIV
></DIV
></BODY
></HTML
>
}}}
