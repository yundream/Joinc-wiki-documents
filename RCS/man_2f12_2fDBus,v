head	1.4;
access;
symbols;
locks
	root:1.4; strict;
comment	@# @;


1.4
date	2014.10.20.16.05.58;	author root;	state Exp;
branches;
next	1.3;

1.3
date	2014.10.20.04.49.52;	author root;	state Exp;
branches;
next	1.2;

1.2
date	2014.10.19.15.29.37;	author root;	state Exp;
branches;
next	1.1;

1.1
date	2014.10.19.04.10.13;	author root;	state Exp;
branches;
next	;


desc
@./data/text/man_2f12_2fDBus
@


1.4
log
@119.64.102.68;;yundream;;
@
text
@#title DBus

[[TableOfContents]]
== DBus ==
D-Bus는 message bus 시스템으로 애플리케이션관 통신 매커니짐을 지원한다. IPC(Inter process communication)툴이라고 할 수 있겠다. DBus는 IPC의 기능이외에 프로세스의 lifecycle를 관리하는 기능도 가지고 있다. Single instance 애플리케이션이나 데몬 프로세스를 관리하거나 서비스가 필요한 애플리케이션을 실행해 주는 등의 기능을 가지고 있다.    

DBus는 "새로운 하드웨어 추가"나 "프린터 큐 변경 확인"과 같은 이벤트 처리를 위한 시스템 데몬과 애플리케이션간 통신을 위한 전통적인 IPC 기능 모두를 지원한다.    

리눅스에서는 널리 사용하고 있으며, 특히 KDE와 Gnome같은 데스크탑 환경에서 중요하게 사용한다. 데스크탑 환경의 경우 다양한 컴포넌트들을 서로 통합할 수 있어야 하는데, DBus는 이런 역할을 수행하기에 적임이다. 

D-Bus는 C#, Java, Ruby, Python, Go와 같은 다양한 언어들의 구현체가 있다. 나는 Ruby 구현체를 이용해서 DBus를 테스트 할 계획이다. 

=== 최종 목적 ===
DBus를 이용해서 Avahi의 기능을 이용하는게 목적이다.

=== 테스트 및 개발 환경 ===
 * 우분투 리눅스 14.04
 * Ruby 2.1.2

== DBus 개요 ==
=== DBus 아케텍처 === 
http://dbus.freedesktop.org/doc/diagram.png

=== Object Path ===
DBus는 메시지 버스 시스템이기 때문에, 버스에 연결한 애플리케이션으로 경로를 설정하기 위한 '''경로 식별자(identified)'''가 필요하다. 이 경로 식별자를 '''object path'''라고 한다. Object path는 표준 유닉스 파일 시스템 경로 형식을 사용한다. 유닉스 파일 시스템 경로와 다른 점이라면 숫자, 문자, 밑줄, / 만 사용할 수 있다는 점이다.  

=== Interface ===
DBus 인터페이스는 DBus객체를 호출하기 위한 "메서드"와 "시그널"이다. 사용자는 "인터페이스"를 이용해서, 메서드와 시그널을 호출할 수 있다. 인터페이스는 하나 이상의 메서드와 시그널을 가질 수 있다. 예컨데, 인터페이스는 메서드와 시그널의 그룹 정도로 볼 수 있을 것이다. 

인터페이스는 충돌 가능성을 줄이기 위해서 DNS 도메인 형식을 (뒤집어서)사용한다. 예를들어 avahi의 경우 "org.freedestop.Avahi"와 같은 인터페이스 이름을 가진다. JMusic이라는 음악 애플리케이션을 만든다고 가정해보자. JMusic의 관리 기능을 위해셔서 "com.joinc.JMusic.Manager"이름을 가지는 인터페이스를 만들 수 있을 것이다. 이 인터페이스는 "목록보기", "목록추가", "삭제"와 같은 method들을 가지고 있을 것다. 이들은 대략 아래처럼 네이밍 할 수 있을 것이다.  
   * com.joinc.JMusic.Manager.GetAllList
   * com.joinc.JMusic.Manager.AddList 
   * com.joinc.JMusic.Manager.DelList
인터페이스는 시그널을 가질 수도 있는데, JMusic의 경우 "volume up/down", stop, start, pause 등의 시그널을 가진다. 제어와 관련된 시그널이니, 인터페이스의 이름은 Control로 하기로 했다. 
   * com.joinc.JMusic.Control.volume_up
   * com.joinc.JMusic.Control.volume_down
   * com.joinc.JMusic.Control.start
=== Signature Strings ===
메서드와 시그널은 "매개변수"를 필요로 하는 경우가 있다. 이 경우 매개변수의 타입을 정의를 해야 한다. DBus는 Signatures라고 부르는 string 기반의 인코딩 매커니즘을 지원하는데, 이걸 이용해서 매개변수의 타입을 설정할 수 있다. 아래는 Signature 인코딩에 사용하는 문자와 문자가 의미하는 데이터 타입을 정리한 표다.
||문자          ||데이터 타입                ||
||y             ||8-bit unsigned integer     ||
||b             ||불리언 타입                ||
||n             ||16-bit signed integer      ||
||q             ||16-bit unsigned integer    ||
||i             ||32-bit sined integer       ||
||u             ||32-bit unsined integer     ||
||x             ||64-bit sined integer       ||
||t             ||64-bit unsined integer     ||
||d             ||double-precision floating point      ||
||s             ||UTF-8 string               ||
||o             ||D-Bus Object Path string   ||
||g             ||D-Bus Signature string     ||
||a             ||array                      ||
||(             ||Strucure 시작              ||
||)             ||Structure 끝               ||
||v             ||Variant Type               ||
||{             ||Dictionary/Map 시작        ||
||}             ||Dictionary/Map 끝          ||
||h             ||Unix file descriptor       ||

=== DBus Client ===
DBus 클라이언트는 DBus에 연결하는 모든 프로세스다. 클라이언트들은 버스에 시그널과 메서드를 등록하거나 원격에 있는 메서드를 호출하고 (시그널)이벤트를 받는 식으로 클라이언트간 메시지를 교환한다.

=== 인터페이스 정의 ===
D-Bus의 인터페이스는 일반적으로 응용 프로그램이 제공하는 클래스의 API에 대응되며, XML 언어로 기술할 수 있다. 앞서 사용했던 JMusic을 DBus XML문서로 기술했다. 
{{{#!plain
<node>
  <interface name="com.joinc.JMusic.Manager">
    <method name="GetAllList">
    </method>
    <method name="AddList">
        <arg name="filename" type="s" direction="in"/>
    </method>
    <method name="DelList">
        <arg name="filename" type="s" direction="in"/>
    </method>
  </interface>
  <interface name="com.joinc.JMusic.Control">
    <signal name="start">
        <arg name="state" type="i"/>
        <arg name="error" type="s"/>
    </signal>
  </interface>
</node>
}}}
 * DBus 객체는 하나 이상의 인터페이스를 가질 수 있다. 
 * 인터페이스는 하나 이상의 메서드를 가질 수 있다.
 * 메서드는 매개변수를 가질 수 있다. 메서드는 옵션으로 "name"을 가질 수 있다. 
 * direction은 입출력을 결정하기 위해서 사용한다. in이면 입력, out이면 출력이다. AddList, delMethod의 경우는 삭제할 파일을 입력해야 하니, direction은 in이 된다. signal의 경우에는 입력이 없고 출력(out)만 있다. 즉 "start" 시그널의 경우에 실행 결과로 state와 error를 수신한다. 

== 예제 ==
음악 서비스 프로그램을 만들어 보려고 한다.

== DBus와 MQTT ==
@


1.3
log
@112.150.165.136;;yundream;;
@
text
@d3 1
d80 2
a81 2
		<arg name="state" type="i"/>
		<arg name="error" type="s"/>
d91 3
@


1.2
log
@119.64.102.68;;yundream;;
@
text
@d19 4
a22 1
== DBus 주요 컴포넌트들 ==
d60 4
a63 1
== 인터페이스 정의 ==
d71 1
a71 1
        <arg type="s" direction="out"/>
d74 1
a74 1
        <arg type="s" direction="out"/>
d79 2
d85 6
@


1.1
log
@119.64.102.68;;yundream;;
@
text
@d19 58
@
