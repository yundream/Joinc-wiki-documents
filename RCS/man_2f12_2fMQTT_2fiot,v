head	1.11;
access;
symbols;
locks
	root:1.11; strict;
comment	@# @;


1.11
date	2014.11.11.13.52.59;	author root;	state Exp;
branches;
next	1.10;

1.10
date	2014.11.11.03.34.59;	author root;	state Exp;
branches;
next	1.9;

1.9
date	2014.11.10.15.48.01;	author root;	state Exp;
branches;
next	1.8;

1.8
date	2014.11.10.15.44.35;	author root;	state Exp;
branches;
next	1.7;

1.7
date	2014.11.10.14.37.14;	author root;	state Exp;
branches;
next	1.6;

1.6
date	2014.11.05.07.47.38;	author root;	state Exp;
branches;
next	1.5;

1.5
date	2014.11.04.16.51.29;	author root;	state Exp;
branches;
next	1.4;

1.4
date	2014.11.03.16.26.12;	author root;	state Exp;
branches;
next	1.3;

1.3
date	2014.10.26.03.20.20;	author root;	state Exp;
branches;
next	1.2;

1.2
date	2014.10.26.01.23.16;	author root;	state Exp;
branches;
next	1.1;

1.1
date	2014.10.01.07.42.18;	author root;	state Exp;
branches;
next	;


desc
@./data/text/man_2f12_2fMQTT_2fiot
@


1.11
log
@119.64.102.68;;yundream;;
@
text
@#title IoT에서의 MQTT 

[[TableOfContents]]
== IoT와 MQTT ==
=== 네트워크 영역에 따른 분류 ===
네트워크 영역으로 볼때, IoT는 크게 로컬 네트워크와 광역 네트워크로 나눌 수 있을거다. 같은 로컬 네트워크에 있는 디바이스들은 중앙서버등에 연결할 필요 없이, 주변에 있는 디바이스들과 데이터를 주고 받을 수 있어야 한다. 만약 원격에서 디바이스를 제어하기 원한다면, (인증등의 과정을 거쳐서)중앙에 있는 IoT 인프라에 연결을 해야 할 것이다.  

{{{#!html
<img src="https://docs.google.com/drawings/d/1DEpTe1q2ZwRmpXqd68VMbr7Jp50HweRuupsjl4XZUCA/pub?w=1050&amp;h=481" width="735" height="336">
}}}
네트워크 영역별로 데이터 통신 특성이 다른 관계로, 각각의 경우에 MQTT를 어떻게 응용할 수 있을지를 고민해 보려 한다.

여기에서 다루려는 네트워크는 다음과 같다.
  1. PAN(Personal Area Network) : Personal Area Network. 개인의 몸을 중심으로 하는 근거리 네트워크다. BlueTooth를 주요 네트워크 프로토콜로 사용한다. 
  1. LAN(Local Area Network) : 가정, 소규모 사무실 등 하나의 인터넷 게이트웨이에 묶여있는 네트워크다. 
  1. BAN(Building Area Network) : 건물 네트워크다. 하나 이상의 인터넷 게이트웨이로 구성된다. 네트워크가 중앙에서 통제되는 경우로 가정한다. 중앙에서 통제하지 않을 경우는 LAN의 집합으로 봐야 한다. 
  1. MAN(Metropolitan Area Network) : WAN과의 구분이 모호해서, MAN을 고민할 필요가 있을지 모르으나 일단 분류는 해 놓는다.
  1. WAN(Wide Area Network) : 인터넷.

== LAN ==
로컬 네트워크는 멀니태스크 채널로 Discovery 가능한 영역 이다. 보통 멀티캐스트 채널을 이용해서, 주변에 있는 디바이스에 자신을 advertise 하거나 반대로 주변에 있는 디바이스를 찾을 수 있다. Discovery가 끝난 후, 데이터를 주고 받을 거다.   

로컬 네트워크에서 데이터 교환은 단순한 메시지 교환과 (멀티미디어 데이터와 같은)컨텐츠 교환으로 나눌 수 있을 거다. 기기 종류에 따라서 교환하는 데이터의 종류에 차이가 있을 수 있다. 조명이나 커피포트, 온도계, 에어컨 등은 단순 메시지를 교환할 테고, TV, 오디오, 스피커, CCTV등은 컨텐츠 교환이 필요하다. 기기에 따라서 데이터 통신 방법을 다르게 할 필요가 있다.  

=== 단순 메시지 교환 ===
제어 메시지를 보내고, 센서 정보를 받는 종류의 기기들은 MQTT 만으로 데이터 통신이 가능할 거다. 아마도 소형의 기기들일 수 있으므로 zigbee와 같은 non-TCP/IP기반의 프로토콜 사용도 고려해야 한다.MQTT-SN(MQTT for Sensor Networks)의 사용을 고려도 필요하다. 대부분의 MQTT 브로커들이 MQTT-SN을 지원하고 있으니, 구성에 문제는 없을 거다. 

MQTT(MQTT-SN)를 이용한 구성 시나리오다.  

{{{#!html
<img src="https://docs.google.com/drawings/d/1V8MyGdPstTY33xHRAX20Ke8iAyJAMOf7ix34_W4tDC4/pub?w=636&amp;h=266">
}}}
 * 온도계는 /sensor/temperature 에 온도를 Puslish 한다. 온도가 변할 때만 puslish 하면 될 거다. 
 * 스마트폰은 /sensor/temperature 를 subscribe 한다.  

=== LAN 에서의 구성 ===
로컬에서의 기기간 연결은 IoT 게이트웨이가 없는 한은 메쉬(mesh) 네트워크로 구성할 수 밖에 없다. 네트워크에 참여한 노드(디바이스가)스스로 주변 환경을 인식해서, 능동적으로 다른 기기와 연결을 하고 서비스를 제공할 수 있어야 한다. 

노드가 독립적으로 작동할 수 있어야 한다는 이야긴데, 모든 노드들이 MQTT Broker를 내장해야 한다. 크게 3개의 컴포넌트가 필요하다.

{{{#!html
<img src="https://docs.google.com/drawings/d/1c2Dr9bCnwRVt9y8PS0SS5f-yaScq5rv-87de2wYT8ts/pub?w=521&amp;h=229">
}}}

==== MQTT Proxy ====
LAN은 매우 취약하다. 예컨데, Home AP는 기본패스워드를 가지고 있거나 아예 패스워드 설정이 없을 수도 있다. 따라서 LAN은 누구나 접근가능한 걸로 봐야 한다. 로컬 네트워크이고 인증서버도 없기 때문에 oAuth와 같은 유저인증 수단을 사용할 수도 없다. 

결국 기기가 자체적인 인증 수단을 가져야만 하는데, MQTT Proxy에 인증 확인 기능을 구현하는게 가장 쉬운 방법이다.
  1. MQTT Client 가 연결 요청을 한다.
    1. PIN(하드웨어 비밀번호), 유저 이름등을 함께 넘긴다. 
  1. 연결요청을 받은 proxy는 PIN 번호가 맞는지 확인 한다.
  1. PIN 번호가 맞다면, session을 발급한다. 이 session을 key로 private topic를 만든다.

=== MQTT SSL ===
SSL을 이용하면 좀 더 깔끔하게 구성할 수 있다.

{{{#!html
<img src="https://docs.google.com/drawings/d/1Y0hxPqaKV80NliZr4wTm9_U_G5VCrF2cZG-8ZxV07aY/pub?w=552&amp;h=388">
}}}

앱에서 Public Key를 디바이스로 복사하면 된다. NDEF(NFC Data exchange format)를 이용하면 안전하게 복사할 수 있다.[[FootNote(NFC야 말로 LAN, PAN에서 기기를 인증하기 위한 가장 좋은 - 안전하면서도 편한 - 방법이라고 생각한다.)]] 

== WAN ==
기기는 최초에 폐쇠된 네트워크에서 사용한다. 홈 네트워크라면, "쌍방향 메시지 교환이 가능한 리모콘"용도 정도로 보면 될 것 같다. 그러다가 필요에 따라서 IoT 네트워크에 연결을 하게 된다. 연결을 하는 이유는 다양하다.  
  1. 인터넷을 이용해서, 원격에서 기기를 제어하고 메시지를 받아볼 수 있다.
  1. 다른 인터넷 서비스들과 연동할 수 있다. 예컨데 [https://ifttt.com IFTTT] 같은 서비스 혹은 Email, 메신저 서비스, 클라우드 스토리지와 연동할 수 있다.
  1. IoT 인프라 서비스를 활용할 수 있다. 아직은 초기 단계지만, 빅데이터 서비스를 사용할 수 있을 것이다. 여러 센서 정보들을 수집하고 분석해서, 유저에게 유용한 어떤 정보를 만들어 낼 수 있을 것이다.

=== 인증 수단 ===
LAN에서는 PIN, NFC와 같은 물리적인 수단을 이용해서 인증을 한다. 반면, WAN은 완전히 공개된 논리적인 영역이기 때문에 소프트웨어적인 인증 수단이 필요하다. 아마도 가장 좋은 인증 수단은 oAuth일 것이다. 모바일 기기를 사용하는 유저는 거의 반드시 하나 정도의 oAuth 인증 수단을 가지고 있다. 따라서 유저는 서비스 이용을 위해서 "가입"이라는 귀찮은 과정을 거칠 필요가 없다. 서비스 제공자 입장에서는 "사용자 기반"을 빌려쓸 수 있다는 장점이 있다.

oAuth를 이용한 기기 인증 방식은 원론적으로 "앱"의 인증 방식과 동일하다. 차이가 있다면, 입/출력 인터페이스가 없는 소형기기들을 위해서 인증이 끝난 모바일 앱을 이용해서 "oAuth 인증을 대신"수행 하다는 거다. 대략 아래와 같은 과정을 거칠거다. 
  1. 앱을 이용해서 IoT 인프라에 접근한다. 
  1. oAuth를 이용해서 인증을 받고, 이 인증정보를 이용해서 IoT 인프라에 유저등록을 한다.
  1. 앱은 IoT 인프라에게 받은 "인증 토큰"을 가지고 있다. 
  1. 유저는 LAN 영역에서 기기에게 "인증 토큰"을 전달한다. 
  1. 기기는 "인증 토큰"을 가지고 IoT 인프라에 접근한다.
  1. IoT 인프라는 "인증 토큰"을 체크해서 기기가 어느 유저의 인증을 받은 건지를 확인할 수 있다.
oAuth 프로세스에 대한 이해를 하고 있다면, 위의 과정이 이해가 될 것이다. 여기에서는 이정도만 다룬다. 원격에서의 기기 인증은 기회가 되면 자세히 다뤄보겠다.

=== MQTT를 이용한 메시지 교환 ===
원격에서 MQTT를 이용하는 목적을 먼저 정리해보자.
  1. 모바일기기의 전력사용량도 중요해지는 추세다. 가벼운 MQTT의 사용도 고려해볼 만하다.  
  1. LAN과 WAN의 데이터 Push 기술을 통일할 수 있다. 
{{{#!html
<img src="https://docs.google.com/drawings/d/1-JecLvVH-MFbHdT_L6mbKCAwenT5gHUFXfzXa5BH8NM/pub?w=509&amp;h=240">
}}}

단순화한 구성이다. 구성에서는 App과 Device를 구분하고 있지만, IoT 인프라 입장에서는 App과 Device간 차이가 전혀 없다. 이 둘은 MQTT Broerk에 붙어서 Push 서비스를 받는다. 모바일 앱의 경우에는 Request 채널과 Push 채널을 분리할 수 있을 것이다.(Request 채널은 HTTP로 Push 채널은 MQTT로). Device도 마찬가지로 MQTT로 요청과 응답을 모두 받거나 아니면 채널을 분리할 수 있을 것이다. 통신 채널을 어떻게 구성할지는 기기와 앱의 특성에 따라서 달라질 것이다.

IoT 인프라의 경우 MQTT Broker앞에 Proxy가 있어야 한다. Proxy는 User DB를 이용해서, 유저와 디바이스의 채널 권한등을 확인하는 일을 한다. IoT 인프라를 구성하는 MQTT 서버들은 다수의 연결을 처리해야 하기 때문에, 분산/클러스터 구성을 해야 할 것이다. 분산 클러스터 구성은 [wiki:man/12/MQTT/Cluster MQTT Cluster 구성]에서 자세히 다룰 계획이다.  

== PAN ==
PAN(personal area network)는 개인정보를 다루는 영역이다. 한 사람의 범위에서 다룰 수 있는 PDA, 스마트폰, 패드, 글라스, 헬스케어 장치.. 기타 웨어러블 디바이스들이 이 네트워크 영역을 구성한다. 대략 10m 정도의 거리를 커버하며, 블루투스나 UWB(Ultra-widebanc), ZigBee, Skinplex, Z-Wave등의 근거리 통신기술을 사용한다.

어떤 통신기술을 사용할지는 어떤 서비스를 사용하느냐에 따라 달라질건데, 아직은 잘 모르겠다. 안경, 시계, 밴드 등이 거의 대부분인데, 쓸만한 용도를 아직 찾지는 못한 느낌이다. 이것 저것 실험하는 단계인 걸로 보인다.

3-4개 정도의 기기로 제한된다면, 블루투스면 될 것 같다. 활동성을 보장해야 하는 웨어러블 기기의 특성상 자체적으로 인터넷 인프라에 연결하기는 힘들 것 같고. 비교적 무거운 기기인 스마트폰이나 스마트 시계를 통해서 인터넷으로 데이터를 전송하면 되지 않을 까 싶다.      

개인적으로 PAN에서의 IoT 기기는 의료정보 제공(진단, 진료, 모니터링)쪽으로 전문분야로 시장이 형성될 것 같다. 안경이나 시계류는 스마트폰의 확장이라고 생각한다. 얘들을 센서로 하는 건 가능은 하겠으나 별 의미는 없다고 보고, 인간의 몸에 센서를 붙인다면 건강/의료 목적말고는 딱히 생각나는게 없다.

센서 수집으로 방향을 잡는다면, Zigbee와 MQTT-SN이 좋은 선택이 될 거 같다.

{{{#!html
<img src="https://docs.google.com/drawings/d/1XykJpwfj_a93a_SGjDvnEBpUaJSXo_MD_-yphzGF3RM/pub?w=1230&amp;h=342">
}}}

== BAN ==
BAN(Building area network)는 산업정보를 다루는 영역이다. 대표적인 BAN은 빌딩을 구성하는 기기들이 연결되는 네트워크다. 상당히 많은 센서들이 있을 수 있다. 전기설비, 전력, 엘레베이터, 보일러, 냉동기, 공조, 시큐리티, 소방조, 급배수, 파킹, 통신, 조명, 온도, 습도. 이외에도 농업, 공업등의 분야의 건물(혹은 장소)도 BAN 네트워크 구성이 가능할 것이다.


@


1.10
log
@112.150.165.136;;yundream;;
@
text
@d94 13
a106 1
PAN(personal area network)는 개인정보를 다루는 영역이다. 한 사람의 범위에서 다룰 수 있는 PDA, 스마트폰, 패드, 글라스, 헬스케어 장치.. 기타 웨어러블 디바이스들이 이 네트워크 영역을 구성한다. 대략 10m 정도의 거리를 커버한다. 블루투스나 UWB(Ultra-widebanc)로 연결된다. 
d109 3
a111 1
BAN(Building area network)는 산업정보를 다루는 영역이다. 빌딩을 구성하는 기기들이 연결되는 네트워크다. 상당히 많은 센서들이 있을 수 있다. 전기설비, 전력, 엘레베이터, 보일러, 냉동기, 공조, 시큐리티, 소방조, 급배수, 파킹, 통신, 조명, 온도, 습도
@


1.9
log
@119.64.102.68;;yundream;;
@
text
@d94 4
a97 1
PAN(personal area network)는 개인정보를 다루는 영역이다. 한 사람의 범위에서 다룰 수 있는 PDA, 스마트폰, 패드, 글라스, 헬스케어 장치.. 기타 웨어러블 디바이스들이 이 네트워크 영역을 구성한다. 대략 10m 정도의 거리를 커버한다. 블루투스나 UWB(Ultra-widebanc)로 연결된다.  
@


1.8
log
@119.64.102.68;;yundream;;
@
text
@d92 3
@


1.7
log
@119.64.102.68;;yundream;;
@
text
@d62 30
@


1.6
log
@1.214.223.250;;yundream;;
@
text
@d39 1
a39 1
노드가 독립적으로 작동할 수 있어야 한다는 이야긴데, 모든 노드 MQTT Broker를 내장한 서버가 되야 한다. 크게 3개의 컴포넌트가 필요하다.
d45 2
a46 1
'''MQTT Proxy '''
d48 1
a48 3
LAN은 매우 취약하다. 예컨데, Home AP는 기본패스워드를 가지고 있거나 아예 패스워드 설정이 없을 수도 있다. 누구든 붙을 수 있다는 걸로 가정한다. 로컬 네트워크이고 인증서버도 없기 때문에 유저인증 수단을 사용할 수도 없다. oAuth와 같은 인터넷 인증수단을 사용할 수도 없다. LAN의 경우 인터넷과 단절된 상태일 수도 있고, 유저가 로컬에서만 사용하는 걸 원할 수도 있기 때문이다. 인터넷으로의 연동은 옵션이지 필수가 아니다.  

결국 기기가 자체적인 인증 수단을 가져야만 하는데, MQTT Proxy에 인증 확인 기능을 구현하는게 가장 쉬운 방법이다.   
d52 10
a61 1
  1. PIN 번호가 맞다면, session을 발급한다. 이 session을 key로 private topic를 만든다.   
@


1.5
log
@119.64.102.68;;yundream;;
@
text
@d5 2
a6 1
네트워크 영역으로 볼때, IoT는 크게 로컬 네트워크와 광역 네트워크로 나눌 수 있을거다. 로컬 네트워크는 예컨데, 홈 AP(access Point)에 묶여있는 네트워크가 되겠다. 같은 로컬 네트워크에 있는 디바이스들은 중앙서버등에 연결할 필요 없이, 주변에 있는 디바이스들과 데이터를 주고 받을 수 있다. 만약 원격에서 디바이스를 제어하기 원한다면, 중앙에 있는 IoT 인프라에 연결을 해야 할 것이다.  
d11 1
d13 6
a18 1
네트워크 영역별로 데이터 통신 특성이 다른 관계로, 각각의 경우에 MQTT를 어떻게 응용할 수 있을지를 고민해 보려 한다.
d20 2
a21 2
== 로컬 네트워크에서의 MQTT ==
로컬 네트워크는 "Discovery 가능한 영역"이다. 보통 멀티캐스트 채널을 이용해서, 주변에 있는 디바이스에 자신을 advertise 하거나 반대로 주변에 있는 디바이스를 찾을 수 있다. Discovery가 끝난 후, 데이터를 주고 받을 거다.   
d26 1
a26 1
제어 메시지를 보내고, 센서 정보를 받는 종류의 기기들은 MQTT 만으로 데이터 통신이 가능할 거다. 아마도 소형의 기기들일 수 있으므로 zigbee와 같은 non-TCP/IP기반의 프로토콜 사용도 고려해야 한다. 이 경우 MQTT-SN(MQTT for Sensor Networks)의 사용을 고려해야 할 것이다. 모스키토 같은 MQTT 브로커들이 MQTT-SN을 지원하고 있으니, 구성에 문제는 없을 거다. 
d36 2
a37 18
=== IoT Gateway를 이용한 구성 ===
{{{#!html
<img src="https://docs.google.com/drawings/d/15e7baZOojkROK-nAXm_MOFvlznd0L0JCiNh5JxEkm-M/pub?w=734&amp;h=296">
}}}

IoT Gateway가 있는 경우의 구성이다. IoT Gateway는 통신 Hub 역할을 하며, 대략 아래의 일들을 수행한다.
  1. Device & Service Discovery : LAN 영역에 있는 디바이스와 서비스를 검색한다. 
  1. Database 저장 : 검색한 디바이스들의 정보들을 저장한다. 디바이스의 이름, 타입, Room/Zone(층)등의 논리적인 구성. 유저와 디바이스간 소유 정보등.
  1. 보안 : 통신채널 보안, 디바이스 접근 제한, 유저 등록 및 권한 관리  
  1. IoT 인프라와의 연동 
IoT Gateway가 로컬 디바이스를 관리하기 위한 프로토콜, 툴, 기능들을 모두 제공 하기 때문에 구성이 깔끔해진다는 장점이 있다. 이는 Apple HomeKit의 방향이기도 하다. 이렇게 하려면 "자체 생태계"를 구성할 수 있어야 하는 문제점이 있다. 애플 처럼 독립적인 개발/사용자 환경을 구축할 수만 있다면 괜찮은 방법이다. 하지만 일반 제조업체로서는 이 방법을 선택하기가 어려울 수도 있다. 

==== IoT gateway의 기능 ====
IoT gateway는 아래의 기능들을 가지고 있어야 한다.
  1. Device & Service Discovery : Device와 Device에서 제공하는 서비스를 검색, 혹은 서비스 만으로 검색을 할 수 있어야 한다. IoT gateway는 검색한 정보들을 데이터베이스에 관리한다.
  1. 보안 : 홈 IoT환 경에서 Home AP는 뚫려 있다고 가정해야 한다. 옆집에 있는 사람이 자신의 IoT gateway를 내 Home AP에 연결한 다음, 내 가정의 기기를 등록해서 사용 할 수 있다. NFC를 이용한 Key 교환, PIN 번호 교환, 유저 관리를 용한 허가하지 않은 유저의 접근 확인 등, 다양한 보안 장치를 마련할 수 있다. IoT 보안에 대해서는 [wiki:Site/IOT/Security/local 여기]에 정리 중이다. 
  1. 유저 & 디바이스 관리 : 검색된 디바이스와 유저(앱)을 등록하고 관리할 수 있다. 
  1. 인터넷 게이트웨이 : 디바이스들은 인터넷 게이트웨이를 통해서 IoT인프라와 연결할 수 있다.
d39 1
a39 2
==== MQTT 연결 구성 ====
IoT gateway를 중심으로 기기들을 연결 할 경우, MQTT 브로커가 gateway만 있으면 되므로 연결 구조를 단순하게 가져갈 수 있다는 장점이 있다. 대략 다음과 같이 구성할 수 있을 것이다.    
d42 1
a42 1
<img src="https://docs.google.com/drawings/d/1yedbfesttjbEiit11dBNg0fcZttwY6spa51GjzXDCbU/pub?w=820&amp;h=315">
d45 1
a45 2
디바이스들은 MQTT 브로커를 가지고 있을 필요가 없다. IoT gateway에 PUB/SUB 토픽을 만들어서 sensor 혹은 시그널은 PUB Topic으로, 컨트롤 명령은 SUB 토픽으로 읽어서 처리하면 된다. 처리 결과는 PUB Topic으로 보내면 된다. 주고 받는 정보의 범주에 따라서, 두 개 이상의 Topic이 필요할 수 있겠다. Device와 IoT Gateway와의 데이터 통신은 RPC와 유사한 측면이 있다. 따라서 일반적으로는 1. Method, 2. Return, 3. Signal 3개의 값을 주고 받을 수 있는 토픽 정도면 충분할 것이다. XML-RPC 혹은 JSON-RPC등 RPC의 요구 기능을 포함한 도구를 사용하면 되겠다. 가벼운 JSON-RPC가 더 낫지 싶다.(직접 만들어도 상관없고) 

d47 1
a47 2
=== Home AP를 이용한 구성 ===
IoT gateway가 없다면, IoT 기기들은 Mesh 네트워크를 구성해야 할 것이다. 복잡할 것 같지만, IoT Gateway와 큰 차이는 없다. 
d49 5
@


1.4
log
@119.64.102.68;;yundream;;
@
text
@a2 1
<!> 미완성
d41 17
d59 2
@


1.3
log
@119.64.102.68;;yundream;;
@
text
@d40 1
a40 1

@


1.2
log
@119.64.102.68;;yundream;;
@
text
@d4 1
d14 1
a14 1
=== 로컬 네트워크에서의 MQTT ===
d19 1
a19 1
==== 단순 메시지 교환 ====
d30 11
d42 1
a42 1
=== 광역 네트워크 ===
@


1.1
log
@1.214.223.250;;yundream;;
@
text
@d24 1
a24 1
https://docs.google.com/drawings/d/1V8MyGdPstTY33xHRAX20Ke8iAyJAMOf7ix34_W4tDC4/pub?w=636&h=266
@
