#title linux man page : syscall -
[wiki:docbook/syscall(2) Docbook 원문]
{{{#!html
<HTML
><HEAD
><TITLE
>syscall(2)</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.76b+
"><META
http-equiv="Content-Type"
content="text/html; charset=euc-kr"></HEAD
><BODY
CLASS="CHAPTER"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="CHAPTER"
><H1
><A
NAME="AEN1"
>1&#51109;. syscall(2)</A
></H1
><DIV
CLASS="TOC"
><DL
><DT
><B
>&#52264;&#47168;</B
></DT
><DT
>1.1. <A
HREF="#AEN4"
>사용법</A
></DT
><DT
>1.2. <A
HREF="#AEN8"
>설명</A
></DT
><DT
>1.3. <A
HREF="#AEN14"
>반환값</A
></DT
><DT
>1.4. <A
HREF="#AEN18"
>예제</A
></DT
><DT
>1.5. <A
HREF="#AEN22"
>참고문헌</A
></DT
></DL
></DIV
><P
>	indirect 시스템 호출</P
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN4"
></A
>1.1. 사용법</H1
><P
>		<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;sys/syscall.h&#62;
#include &#60;unistd.h&#62;

int syscall(int number, ...); 
		</PRE
></TD
></TR
></TABLE
>
	</P
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN8"
></A
>1.2. 설명</H1
><P
>		syscall()은 시스템 호출의 어셈블리(:12) 인터페이스이다. 첫번째 인자는 
		시스템콜(:12) 번호이며, 그 다음으로 각 시스템콜의 인자가 입력된다.
		시스템 콜 번호는 <A
HREF=""
TARGET="_top"
>		Linux 시스템콜 레퍼런스</A
>를 참고하기 바란다. 
		syscall()을 사용할때 시스템 콜 번호를 직접입력하는 것은 귀찮은 
		작업인데, 각 시스템 콜에 대해서 sys/syscall.h 에 정의되어 있으니 
		참고하기 바란다. <B
CLASS="EMPHASIS"
>SYS_systemcall</B
>식으로 정의되어 
		있다. 예를들어 open()시스템 호출을 사용하기 원한다면 
		syscall(SYS_open,...)식으로 사용하면 된다.  
	</P
><P
>		역사적으로 syscall()은 BSD4.0에 의해서 사용되어졌다.
	</P
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN14"
></A
>1.3. 반환값</H1
><P
>		반환값은 시스템 콜의 리턴 정책에 따라서 달라진다. 일반적으로 
		성공했다면 0, 에러가 발생했다면 -1이 리턴된다. 에러 코드는 
		<B
CLASS="EMPHASIS"
>errno</B
>에 저장된다.
	</P
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN18"
></A
>1.4. 예제</H1
><P
>		<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;syscall.h&#62; 
#include &#60;unistd.h&#62;
#include &#60;stdio.h&#62;
#include &#60;sys/types.h&#62;
#include &#60;sys/stat.h&#62;
#include &#60;fcntl.h&#62;
#include &#60;string.h&#62;

#define BUF_SIZE 256
int main()
{
	int fd;
	int n;
	char buf[BUF_SIZE];
	// 시스템콜의 직접 사용  
	// 시스템콜 번호 : 20
	fd = syscall(SYS_open, "syscall.c", O_RDONLY);
	if (fd &#60; 0)
	{
		perror("Open Syscall Error ");
		exit(0);
	}
	while((n = syscall(SYS_read, fd, buf,BUF_SIZE - 1)) &#62; 0)
	{
		syscall(SYS_write, 1, buf, n);
		memset(buf, 0x00, BUF_SIZE);
	}

	syscall(SYS_close);
	return (0);
}
		</PRE
></TD
></TR
></TABLE
>
		위 프로그램은 파일의 내용을 읽어서 출력하는 일을한다. open(), read(), 
		write(), close()와 같은 주요 시스템 호출을 syscall()을 통해서 구현했다. 
	</P
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN22"
></A
>1.5. 참고문헌</H1
><P
>		<P
></P
><OL
TYPE="1"
><LI
><P
>			<A
HREF=""
TARGET="_top"
>			Linux 시스템콜 레퍼런스</A
>
			</P
></LI
></OL
>
	</P
></DIV
></DIV
></BODY
></HTML
>
}}}

----
 * 굳이 system()함수를 사용할 필요가 있냐라는 생각이 듭니다. 혹시 성능상의 잇점같은 것을 얻을 수 있는지 궁금하군요. 
