#title 소켓연결을 시도한다. 

[[tag(소켓,네트워크프로그래밍)]]

{{{#!html
<HTML
><HEAD
><TITLE
>connect(2)</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.76b+
"><META
http-equiv="Content-Type"
content="text/html; charset=euc-kr"></HEAD
><BODY
CLASS="CHAPTER"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="CHAPTER"
><H1
><A
NAME="AEN1"
>1&#51109;. connect(2)</A
></H1
><DIV
CLASS="TOC"
><DL
><DT
><B
>&#52264;&#47168;</B
></DT
><DT
>1.1. <A
HREF="#AEN4"
>사용법</A
></DT
><DT
>1.2. <A
HREF="#AEN8"
>설명</A
></DT
><DT
>1.3. <A
HREF="#AEN18"
>반환값</A
></DT
><DT
>1.4. <A
HREF="#AEN21"
>에러</A
></DT
><DT
>1.5. <A
HREF="#AEN65"
>예제</A
></DT
><DT
>1.6. <A
HREF="#AEN69"
>참고문헌</A
></DT
></DL
></DIV
><P
>	소켓에 연결을 시도한다.	</P
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN4"
></A
>1.1. 사용법</H1
><P
>		<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;sys/types.h&#62;
#include &#60;sys/socket.h&#62;

int  connect(int sockfd, const struct sockaddr *serv_addr,
         socklen_t addrlen);
		</PRE
></TD
></TR
></TABLE
>
	</P
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN8"
></A
>1.2. 설명</H1
><P
>		<B
CLASS="EMPHASIS"
>sockfd</B
>는 socket()함수에 의해서 만들어진 
		소켓지정자다. SOCK_DGRAM 타입의 소켓일 경우는 보통 connect()를 
		사용하지 않지만 만약에 사용했다면, <B
CLASS="EMPHASIS"
>serv_addr</B
>는 
		데이터그램을 받을 곳의 유일한 주소값이 된다. 그렇지 않고 
		SOCK_STREAM, SOCK_SEQPACKET라면 <B
CLASS="EMPHASIS"
>serv_addr</B
>에 
		대한 연결을 만든다. <B
CLASS="EMPHASIS"
>addrlen</B
>는 
		<B
CLASS="EMPHASIS"
>serv_addr</B
>구조체의 크기다.  
	</P
><P
>		보통 연결지향 프로토콜 소켓들은 한번에 connect를 한다. 비연결 지향 
		프로토콜들은 serv_addr타입과 관련된 사항을 바꾸기 위해 여러번 
		connect를 사용한다. 이러한 과정에서 비 연결 지향 소켓들은 
		<B
CLASS="EMPHASIS"
>sa_family</B
>멤버의 주소를 AF_UNSPEC로 설정하고 
		연결해서 연결과 관련된 필요없는 사항들을 없앤다.  
	</P
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN18"
></A
>1.3. 반환값</H1
><P
>		성공하면 0을 리턴한다. 실패했을 경우는 -1을 리턴하고 적당한 errno를 
		설정한다.
	</P
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN21"
></A
>1.4. 에러</H1
><P
>		<P
></P
><DIV
CLASS="VARIABLELIST"
><DL
><DT
>EBADF</DT
><DD
><P
>	
					파일지정자가 지정자테이블에 있는 유효한 인덱스가 아니다.
				</P
></DD
><DT
>EFAULT</DT
><DD
><P
>	
					소켓 구조체의 주소가 사용자 주소공간 바깥에 있다.	
				</P
></DD
><DT
>ENOSOCK</DT
><DD
><P
>	
					파일지정자가 소켓과 관련되어 있지 않다.	
				</P
></DD
><DT
>EISCONN</DT
><DD
><P
>	
					이미 연결된 소켓이다.
				</P
></DD
><DT
>ECONNREFUSE</DT
><DD
><P
>	
					원격서버에서 연결을 거부했다. 보통 listen대기열의 공간이
					더이상 남아 있지 않았을 때 발생한다.
				</P
></DD
><DT
>ETIMEOUT</DT
><DD
><P
>	
					연결 시도중 타임아웃이 발생했다. 서버가 너무 바쁜 상태이어서
					새 연결을 받아들일 수 없을 경우 발생한다.  
				</P
></DD
><DT
>ENETUNREACH</DT
><DD
><P
>	
					네트워크에 도달할 수 없다. 
				</P
></DD
><DT
>EALREADY</DT
><DD
><P
>	
					소켓이 비봉쇄이고 연결 시도가 아직 완전하지 않다.
				</P
></DD
><DT
>EAGAIN</DT
><DD
><P
>	
					사용 가능한 로컬 포트가 더이상 없거나 라우팅 캐싱에 
					공간이 충분하지 않다. PF_INET일 때 라우팅 캐싱테이블의 
					공간을 늘릴리면 ip(7)에 있는 
					net.ipv4.ip_local_port_range를 참고하라.    
				</P
></DD
><DT
>EACCES, EPERM</DT
><DD
><P
>	
					사용자가 소켓 브로드캐스트 플래그를 가능하게 하지 
					않고 주소를 브로드캐스트 주소에 연결하려고 했거나 
					방화벽 규칙 때문에 연결요구가 실패했다. 
				</P
></DD
></DL
></DIV
>	
	</P
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN65"
></A
>1.5. 예제</H1
><P
>		<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;sys/stat.h&#62;
#include &#60;arpa/inet.h&#62;
#include &#60;stdio.h&#62;
#include &#60;string.h&#62;

int main(int argc, char **argv)
{
    struct sockaddr_in serveraddr;
    int server_sockfd;
    int client_len;
    char buf[80];
    char rbuf[80];


    if ((server_sockfd = socket(AF_INET, SOCK_STREAM, 0)) &#60; 0)
    {
        perror("error :");
        exit(0);
    }

    server_sockfd = socket(AF_INET, SOCK_STREAM, 0);
    serveraddr.sin_family = AF_INET;
    serveraddr.sin_addr.s_addr = inet_addr("218.234.19.87");
    serveraddr.sin_port = htons(atoi(argv[1]));

    client_len = sizeof(serveraddr);

    if (connect(server_sockfd, (struct sockaddr *)&#38;serveraddr, client_len) &#60; 0)
    {
        perror("connect error :");
        exit(0);
    }

    memset(buf, 0x00, 80);
    read(0, buf, 80);
    if (write(server_sockfd, buf, 80) &#60;= 0)
    {
        perror("write error : ");
        exit(0);
    }
    memset(buf, 0x00, 80);
    if (read(server_sockfd, buf, 80) &#60;= 0)
    {
        perror("read error : ");
        exit(0);
    }
    close(server_sockfd);
    printf("read : %s", buf);
}
		</PRE
></TD
></TR
></TABLE
>
		서버에 연결해서 메시지를 주고 받는 간단한 echo서버다.   
	</P
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN69"
></A
>1.6. 참고문헌</H1
><P
>		<P
></P
><OL
TYPE="1"
><LI
><P
>					<A
HREF="http://www.joinc.co.kr/modules.php?name=News&file=article&sid=11"
TARGET="_top"
>셈플로 알아보는 소켓프로그래밍(1)</A
>
				</P
></LI
><LI
><P
>					<A
HREF="http://www.joinc.co.kr/modules.php?name=News&file=article&sid=57"
TARGET="_top"
>Socket Layer</A
>
				</P
></LI
><LI
><P
>					<A
HREF="http://www.joinc.co.kr/modules.php?name=News&file=article&sid=20"
TARGET="_top"
>다중연결 서버 만들기 (1)</A
>
				</P
></LI
><LI
><P
>					<A
HREF="http://www.joinc.co.kr/modules.php?name=News&file=article&sid=25"
TARGET="_top"
>다중연결 서버 만들기 (2)</A
>
				</P
></LI
><LI
><P
>					<A
HREF="http://www.joinc.co.kr/modules/moniwiki/wiki.php/function_socket(2)"
TARGET="_top"
>socket(2)</A
>
				</P
></LI
><LI
><P
>					<A
HREF="http://www.joinc.co.kr/modules/moniwiki/wiki.php/function_accept(2)"
TARGET="_top"
>accept(2)</A
>
				</P
></LI
><LI
><P
>					<A
HREF="http://www.joinc.co.kr/modules/moniwiki/wiki.php/function_listen(2)"
TARGET="_top"
>listen(2)</A
>
				</P
></LI
></OL
>
	</P
></DIV
></DIV
></BODY
></HTML
>

}}}

