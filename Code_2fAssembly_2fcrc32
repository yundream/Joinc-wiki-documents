----
 1. crc32
 1. crc32를 계산함
 1. minzken 
 1. Version 0.1
 1. 2004/03/28
----



== CRC32 ==
=== 개요 ===
 * 데이터의 검증을 위해서 사용하는 '''[wiki:Term_CRC32 CRC32]'''를 구현해봤습니다.
 * 속도 향상을 위해서 '''어셈블리'''를 사용했습니다.
 * '''x86계열'''의 gcc에서만 사용가능합니다.
=== 소스 ===
 {{{#!vim c
/*
 Code by JaeHyuk Cho <mailto:minzkn@infoeq.com> Made in KOREA
 http://minzkn.pe.ky
*/

#ifndef DEF_SOURCE_crc_c
#define DEF_SOURCE_crc_c "crc.c"

unsigned long MZ_CRC32(unsigned long s_Seed, const void *s_Data, int s_Length);

static unsigned long __g_CRC32_Table__[] = {
 /* 0x0000 */ 0x00000000lu, 0x77073096lu, 0xee0e612clu, 0x990951balu, 0x076dc419lu, 0x706af48flu, 0xe963a535lu, 0x9e6495a3lu,
 /* 0x0008 */ 0x0edb8832lu, 0x79dcb8a4lu, 0xe0d5e91elu, 0x97d2d988lu, 0x09b64c2blu, 0x7eb17cbdlu, 0xe7b82d07lu, 0x90bf1d91lu,
 /* 0x0010 */ 0x1db71064lu, 0x6ab020f2lu, 0xf3b97148lu, 0x84be41delu, 0x1adad47dlu, 0x6ddde4eblu, 0xf4d4b551lu, 0x83d385c7lu,
 /* 0x0018 */ 0x136c9856lu, 0x646ba8c0lu, 0xfd62f97alu, 0x8a65c9eclu, 0x14015c4flu, 0x63066cd9lu, 0xfa0f3d63lu, 0x8d080df5lu,
 /* 0x0020 */ 0x3b6e20c8lu, 0x4c69105elu, 0xd56041e4lu, 0xa2677172lu, 0x3c03e4d1lu, 0x4b04d447lu, 0xd20d85fdlu, 0xa50ab56blu,
 /* 0x0028 */ 0x35b5a8falu, 0x42b2986clu, 0xdbbbc9d6lu, 0xacbcf940lu, 0x32d86ce3lu, 0x45df5c75lu, 0xdcd60dcflu, 0xabd13d59lu,
 /* 0x0030 */ 0x26d930aclu, 0x51de003alu, 0xc8d75180lu, 0xbfd06116lu, 0x21b4f4b5lu, 0x56b3c423lu, 0xcfba9599lu, 0xb8bda50flu,
 /* 0x0038 */ 0x2802b89elu, 0x5f058808lu, 0xc60cd9b2lu, 0xb10be924lu, 0x2f6f7c87lu, 0x58684c11lu, 0xc1611dablu, 0xb6662d3dlu,
 /* 0x0040 */ 0x76dc4190lu, 0x01db7106lu, 0x98d220bclu, 0xefd5102alu, 0x71b18589lu, 0x06b6b51flu, 0x9fbfe4a5lu, 0xe8b8d433lu,
 /* 0x0048 */ 0x7807c9a2lu, 0x0f00f934lu, 0x9609a88elu, 0xe10e9818lu, 0x7f6a0dbblu, 0x086d3d2dlu, 0x91646c97lu, 0xe6635c01lu,
 /* 0x0050 */ 0x6b6b51f4lu, 0x1c6c6162lu, 0x856530d8lu, 0xf262004elu, 0x6c0695edlu, 0x1b01a57blu, 0x8208f4c1lu, 0xf50fc457lu,
 /* 0x0058 */ 0x65b0d9c6lu, 0x12b7e950lu, 0x8bbeb8ealu, 0xfcb9887clu, 0x62dd1ddflu, 0x15da2d49lu, 0x8cd37cf3lu, 0xfbd44c65lu,
 /* 0x0060 */ 0x4db26158lu, 0x3ab551celu, 0xa3bc0074lu, 0xd4bb30e2lu, 0x4adfa541lu, 0x3dd895d7lu, 0xa4d1c46dlu, 0xd3d6f4fblu,
 /* 0x0068 */ 0x4369e96alu, 0x346ed9fclu, 0xad678846lu, 0xda60b8d0lu, 0x44042d73lu, 0x33031de5lu, 0xaa0a4c5flu, 0xdd0d7cc9lu,
 /* 0x0070 */ 0x5005713clu, 0x270241aalu, 0xbe0b1010lu, 0xc90c2086lu, 0x5768b525lu, 0x206f85b3lu, 0xb966d409lu, 0xce61e49flu,
 /* 0x0078 */ 0x5edef90elu, 0x29d9c998lu, 0xb0d09822lu, 0xc7d7a8b4lu, 0x59b33d17lu, 0x2eb40d81lu, 0xb7bd5c3blu, 0xc0ba6cadlu,
 /* 0x0080 */ 0xedb88320lu, 0x9abfb3b6lu, 0x03b6e20clu, 0x74b1d29alu, 0xead54739lu, 0x9dd277aflu, 0x04db2615lu, 0x73dc1683lu,
 /* 0x0088 */ 0xe3630b12lu, 0x94643b84lu, 0x0d6d6a3elu, 0x7a6a5aa8lu, 0xe40ecf0blu, 0x9309ff9dlu, 0x0a00ae27lu, 0x7d079eb1lu,
 /* 0x0090 */ 0xf00f9344lu, 0x8708a3d2lu, 0x1e01f268lu, 0x6906c2felu, 0xf762575dlu, 0x806567cblu, 0x196c3671lu, 0x6e6b06e7lu,
 /* 0x0098 */ 0xfed41b76lu, 0x89d32be0lu, 0x10da7a5alu, 0x67dd4acclu, 0xf9b9df6flu, 0x8ebeeff9lu, 0x17b7be43lu, 0x60b08ed5lu,
 /* 0x00a0 */ 0xd6d6a3e8lu, 0xa1d1937elu, 0x38d8c2c4lu, 0x4fdff252lu, 0xd1bb67f1lu, 0xa6bc5767lu, 0x3fb506ddlu, 0x48b2364blu,
 /* 0x00a8 */ 0xd80d2bdalu, 0xaf0a1b4clu, 0x36034af6lu, 0x41047a60lu, 0xdf60efc3lu, 0xa867df55lu, 0x316e8eeflu, 0x4669be79lu,
 /* 0x00b0 */ 0xcb61b38clu, 0xbc66831alu, 0x256fd2a0lu, 0x5268e236lu, 0xcc0c7795lu, 0xbb0b4703lu, 0x220216b9lu, 0x5505262flu,
 /* 0x00b8 */ 0xc5ba3bbelu, 0xb2bd0b28lu, 0x2bb45a92lu, 0x5cb36a04lu, 0xc2d7ffa7lu, 0xb5d0cf31lu, 0x2cd99e8blu, 0x5bdeae1dlu,
 /* 0x00c0 */ 0x9b64c2b0lu, 0xec63f226lu, 0x756aa39clu, 0x026d930alu, 0x9c0906a9lu, 0xeb0e363flu, 0x72076785lu, 0x05005713lu,
 /* 0x00c8 */ 0x95bf4a82lu, 0xe2b87a14lu, 0x7bb12baelu, 0x0cb61b38lu, 0x92d28e9blu, 0xe5d5be0dlu, 0x7cdcefb7lu, 0x0bdbdf21lu,
 /* 0x00d0 */ 0x86d3d2d4lu, 0xf1d4e242lu, 0x68ddb3f8lu, 0x1fda836elu, 0x81be16cdlu, 0xf6b9265blu, 0x6fb077e1lu, 0x18b74777lu,
 /* 0x00d8 */ 0x88085ae6lu, 0xff0f6a70lu, 0x66063bcalu, 0x11010b5clu, 0x8f659efflu, 0xf862ae69lu, 0x616bffd3lu, 0x166ccf45lu,
 /* 0x00e0 */ 0xa00ae278lu, 0xd70dd2eelu, 0x4e048354lu, 0x3903b3c2lu, 0xa7672661lu, 0xd06016f7lu, 0x4969474dlu, 0x3e6e77dblu,
 /* 0x00e8 */ 0xaed16a4alu, 0xd9d65adclu, 0x40df0b66lu, 0x37d83bf0lu, 0xa9bcae53lu, 0xdebb9ec5lu, 0x47b2cf7flu, 0x30b5ffe9lu,
 /* 0x00f0 */ 0xbdbdf21clu, 0xcabac28alu, 0x53b39330lu, 0x24b4a3a6lu, 0xbad03605lu, 0xcdd70693lu, 0x54de5729lu, 0x23d967bflu,
 /* 0x00f8 */ 0xb3667a2elu, 0xc4614ab8lu, 0x5d681b02lu, 0x2a6f2b94lu, 0xb40bbe37lu, 0xc30c8ea1lu, 0x5a05df1blu, 0x2d02ef8dlu
};

unsigned long MZ_CRC32(unsigned long s_Seed, const void *s_Data, int s_Length)
{
 unsigned long s_Return;
 if(s_Data == (void *)0 && s_Length <= 0)return(~0);
 __asm__ volatile(
  "\n\t"
  "movl %2, %%edi\n\t"
  "movl %3, %%ecx\n\t"
  "movl %4, %%esi\n\t"
  "movl %1, %%eax\n\t"
  "1:\n\t"
  "movl %%eax, %%ebx\n\t"
  "xorb (%%edi), %%bl\n\t"
  "shrl $8, %%eax\n\t"
  "movzbl %%bl, %%ebx\n\t"
  "xorl (%%esi, %%ebx, 4), %%eax\n\t"
  "incl %%edi\n\t"
  "decl %%ecx\n\t"
  "orl %%ecx, %%ecx\n\t"
  "jnz 1b\n\t"
  "\n\t"
  : "=&a"(s_Return)
  : "m"(s_Seed), "m"(s_Data), "m"(s_Length), "m"(__g_CRC32_Table__)
  : "esi", "edi", "ebx"
 );
 return(s_Return);
}

#endif

/* End of source */

}}}

=== 참고문헌 ===
 1. [wiki:Code_C_crc32 crc32의 C버젼]
