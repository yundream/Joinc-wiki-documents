#title Pthread API Reference
[wiki:article_Pthread_API_Reference HTML 변환문서]

{{{#!plain
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook V4.1//EN">
<article lang="ko">

<!-- 문서 정보 -->
<!-- 참고문헌 : http://www-919.ibm.com/developer/threads/q_refer.html -->
<!-- http://www.jaist.ac.jp/~miyazaki/pthreads_man.html -->
<articleinfo>
	<title>Pthread API Reference</title>
	<author>
		<surname>윤 상배</surname>

		<affiliation>
			<address>
				<email>dreamyun@yahoo.co.kr</email>
			</address>
		</affiliation>
	</author>
	<revhistory>
		<revision>
			<revnumber>0.9</revnumber>
			<date>2004년 6월 30일 12시</date>
			<revremark>pthread 취소관련 api 추가</revremark>
		</revision>
		<revision>
			<revnumber>0.8</revnumber>
			<date>2003년 10월 9일 12시</date>
			<revremark>pthread 시그널 관련 api 추가</revremark>
		</revision>
	</revhistory>
</articleinfo>


<!--                                                                 -->
<!-- 섹션 시작                                                       -->
<!--                                                                 -->
<!-- 참고 사이트 :                                                   --> 
<!-- http://www-919.ibm.com/developer/threads/q_refer.html           -->
<section>
	<title>소개</title>
	<para>
		이 문서는 pthread 레퍼런스 문서이다. pthread 에서 제공하는 
		모든 함수의 레퍼런스를 제공하고 있지는 않지만, 
		자주 쓰일만한 대부분의 함수들은 정리되어 있음으로 
		참고할만한 가치가 있을것이다. 
	</para>
	<para>
		이 문서에 빠진 내용들은 계속 추가해 나갈 예정이다. 
	</para>
</section>

<section>
	<title>기본 쓰레드 함수</title>
	<para>
		주로 쓰레드 생성과 종료에 관련된 가장 기본적인 함수들이다.  
	</para>
	<section>
		<title>pthread_create</title>
		<para>
			<screen>
int pthread_create(pthread_t *thread, const pthread_attr_t *attr,
                   void *(*start_routine)(void *), void *arg);
			</screen>
			쓰레드 생성을 위해서 사용한다. 첫번째 아규먼트인 <emphasis>thread</emphasis> 는 
			쓰레드가 성공적으로 생성되었을때 생성된 쓰레드를 식별하기 위해서 사용되는 
			쓰레드 식별자이다. 두번째 아규먼트인 <emphasis>attr</emphasis> 은 쓰레드 특성을 
			지정하기 위해서 사용하며, 기본 쓰레드 특성을 이용하고자 할경우에 NULL 을 
			사용한다. 3번째 아규먼트인 <emphasis>start_routine</emphasis>는
			분기시켜서 실행할 쓰레드 함수이며, 4번째 아규먼는인 <emphasis>arg</emphasis>는 
			쓰레드 함수의 인자이다. 
		</para>
		<para>
			성공적으로 생성될경우 0을 리턴한다. 
		</para>
		<para>
			<emphasis>예제 : pthread_create.cc</emphasis>
			<screen>
#include &lt;pthread.h&gt;
#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;
#include &lt;stdlib.h&gt;

// 쓰레드 함수
void *t_function(void *data)
{
    int id;
    int i = 0;
    id = *((int *)data);

    while(1)
    {
        printf("%d : %d\n", id, i);
        i++;
        sleep(1);
    }
}

int main()
{
    pthread_t p_thread[2];
    int thr_id;
    int status;
    int a = 1;
    int b = 2;

    // 쓰레드 생성 아규먼트로 1 을 넘긴다.  
    thr_id = pthread_create(&amp;p_thread[0], NULL, t_function, (void *)&amp;a);
    if (thr_id &lt; 0)
    {
        perror("thread create error : ");
        exit(0);
    }

    // 쓰레드 생성 아규먼트로 2 를 넘긴다. 
    thr_id = pthread_create(&amp;p_thread[1], NULL, t_function, (void *)&amp;b);
    if (thr_id &lt; 0)
    {
        perror("thread create error : ");
        exit(0);
    }

    // 쓰레드 종료를 기다린다. 
    pthread_join(p_thread[0], (void **)&amp;status);
    pthread_join(p_thread[1], (void **)&amp;status);

    return 0;
}
			</screen>
			실행된 쓰레드에 대해서는 pthread_join 등의 함수를 이용해서 쓰레드 
			종료때까지 기다려줘야 한다. ptherad_join 은 일종의 fork 의 wait 와 
			비슷하게 작동하며, 쓰레드자원을 해제 시켜준다. 
		</para>
	</section>
	<section>
		<title>pthread_join</title>
		<para>
			<screen>
#include &lt;pthread.h&gt;
int pthread_join(pthread_t th, void **thread_return);
			</screen>
			첫번째 아규먼트 <emphasis>th</emphasis>는 기다릴(join)할 쓰레드 
			식별자이며, 두번째 아규먼트 <emphasis>thread_return</emphasis>은 
			쓰레드의 리턴(return) 값이다. thread_return 이 NULL 이 아닐경우 
			해다 포인터로 쓰레드 리턴 값을 받아올수 있다.  
		</para>
		<para>
			<emphasis>pthread_joinc.c</emphasis>
			<screen>
#include &lt;pthread.h&gt;
#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;
#include &lt;stdlib.h&gt;

// 쓰레드 함수 
// 1초를 기다린후 아규먼트^2 을 리턴한다. 
void *t_function(void *data)
{
    int num = *((int *)data);
    printf("num %d\n", num);
    sleep(1);
    return (void *)(num*num);
}

int main()
{
    pthread_t p_thread;
    int thr_id;
    int status;
    int a = 100;

    thr_id = pthread_create(&amp;p_thread, NULL, t_function, (void *)&amp;a);
    if (thr_id &lt; 0)
    {
        perror("thread create error : ");
        exit(0);
    }
    // 쓰레드 식별자 p_thread 가 종료되길 기다렸다가 
    // 종료리턴값을 가져온다. 
    pthread_join(p_thread, (void *)&amp;status);
    printf("thread join : %d\n", status);

    return 0;
}
			</screen>
		</para>
	</section>
	<section>
		<title>pthread_detach</title>
		<para>
			<screen>
int pthread_detach(pthread_t th);
			</screen>
			detach 는 "떼어내다" 라는 뜻을 가지며 main 쓰레드에서 
			pthread_create 를 이용해 생성된 쓰레드를 분리시킨다. 
			이 함수는 식별번호<emphasis>th</emphasis>인 쓰레드를 detach 시키는데, 
			detach 되었을경우 해당(detach 된) 쓰레드가 종료될경우 pthread_joinc 
			을 호출하지 않더라도 즉시 모든 자원이 해제(free) 된다.  
		</para>
		<para>
			여기에서는 pthread_create 호출후 detach 하는 방법을 설명하고 있는데, 
			pthread_create 호출시에 쓰레드가 detach 되도록 할수도 있다. 
			이에 대한 내용은 <emphasis>pthread_attr_setdetachstate</emphasis> 
			를 다루면서 설명하도록 하겠다.
		</para>
		<para>
			<emphasis>예제 : pthread_detach.c</emphasis>
			<screen>
#include &lt;pthread.h&gt;
#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;
#include &lt;stdlib.h&gt;

// 쓰레드 함수
// 1초를 기다린후 아규먼트^2 을 리턴한다.
void *t_function(void *data)
{
    char a[100000];
    int num = *((int *)data);
	printf("Thread Start\n");
    sleep(5);
	printf("Thread end\n");
}

int main()
{
    pthread_t p_thread;
    int thr_id;
    int status;
    int a = 100;

	printf("Before Thread\n"); 
    thr_id = pthread_create(&amp;p_thread, NULL, t_function, (void *)&amp;a);
    if (thr_id &lt; 0)
    {
        perror("thread create error : ");
        exit(0);
    }
    // 식별번호 p_thread 를 가지는 쓰레드를 detach 
    // 시켜준다. 
    pthread_detach(p_thread);
    pause();
    return 0;
}
			</screen>
			위의 쏘쓰 코드에서 detach 시켰을때와 그렇지 않았을때의 
			메모리 상황을 비교해보기 바란다. 
			detatach 를 했을경우 프로세스의 메모리 사용율과 detache 를 주석
			처리했을경우의 메모리 사용율의 변화를 서로 비교해보면 되는데, 
			detach 를 사용하지 않았을경우 t_function 이 종료가 되더라도 
			자원이 해제되지 않음을 볼수 있을것이다. 
			테스트는 간단한 스크립트를 이용하도록 한다.   
			<screen>
[root@localhost test]# while [ 1 ]; do ps -aux | grep pthread | grep -v grep | grep -v vim; sleep 1; done
root      2668  0.0  0.1  1436  292 pts/8    S    18:37   0:00 ./pthread_detach
root      2668  0.0  0.1  1436  292 pts/8    S    18:37   0:00 ./pthread_detach
			</screen>
			위의 ps 내용에서 5번째 필드의 변화를 확인하면 된다.  
		</para>
	</section>
	<section>
		<title>pthread_exit</title>
		<para>
			<screen>
void pthread_exit(void *retval);
			</screen>
			pthread_exit 는 현재 실행중인 쓰레드를 종료시키고자 할때 사용한다. 
			만약 <emphasis>pthread_cleanup_push</emphasis> 가 정의되어 있다면, 
			pthread_exit 가 호출될경우 cleanup handler 가 호출된다. 
			보통 이 cleanup handler 은 메모리를 정리하는 등의 일을 하게 된다.  
		</para>
		<para>
			<emphasis>예제 : pthread_exit.c</emphasis>
			<screen>
#include &lt;pthread.h&gt;
#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;
#include &lt;stdlib.h&gt;

// 쓰레드 함수
// 1초를 기다린후 아규먼트^2 을 리턴한다.
void *t_function(void *data)
{
    int num = *((int *)data);
    int i = 0;
    while(1)
    {
        if (i == 3)
            pthread_exit(0);
        printf("loop %d\n", i);
        i++;
        sleep(1);
    }
}

int main()
{
    pthread_t p_thread;
    int thr_id;
    int status;
    int a = 100;


    thr_id = pthread_create(&amp;p_thread, NULL, t_function, (void *)&amp;a);
    if (thr_id &lt; 0)
    {
        perror("thread create error : ");
        exit(0);
    }
    pthread_join(p_thread, (void **)&amp;status);
    return 0;
}
			</screen>
		</para>
	</section>
	<section id="cleanup">
		<title>pthread_cleanup_push</title>
		<para>
			<screen>
void pthrad_cleanup_push(void (*routine) (void *), void *arg);
			</screen>
			이것은 cleanup handlers 를 인스톨하기 위해서 
			사용된다. <emphasis>pthread_exit(3)</emphasis> 
			가 호출되어서 쓰레드가 종료될때 pthread_cleanup_push 에 
			의해서 인스톨된 함수가 호출된다. 
			<emphasis>routine</emphasis>이 쓰레드가 종료될때 호출되는 
			함수이다. <emphasis>arg</emphasis>는 아규먼트이다. 
		</para>
		<para>
			cleanup handlers 는 주로 자원을 되돌려주거나, mutex 잠금등의 
			해제를 위한 용도로 사용된다. 
			만약 mutex 영역에서 pthread_exit 가 호출되어 버릴경우 
			다른쓰레드에서 영원히 block 될수 있기 때문이다. 또한 
			malloc 으로 할당받은 메모리, 열린 파일지정자를 닫기 위해서도 
			사용한다.    
		</para>
		<para>
			<emphasis>예제 : pthread_cleanup.c</emphasis>
			<screen>
#include &lt;pthread.h&gt;
#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;sys/types.h&gt;

// 쓰레드 함수
// 1초를 기다린후 아규먼트^2 을 리턴한다.
//

char *mydata;
void cleanup(void *);
void *t_function(void *data)
{
    int num = *((int *)data);
    int i = 0;
    int a = 1;
    // cleanup handler 로 cleanup 함수를 
    // 지정한다. 
    pthread_cleanup_push(cleanup, (void *)&amp;a);
    mydata = (char *)malloc(1000);
    while(1)
    {
        if (i == 3)
        {
            // pthread_exit 가 호출되면서 
            // cleanup 을 호출하게 된다. 
            pthread_exit(0);
            return 1;
        }
        printf("loop %d\n", i);
        i++;
        sleep(1);
    }
    pthread_cleanup_pop(0);
}


int main()
{
    pthread_t p_thread;
    int thr_id;
    int status;
    int a = 100;


    thr_id = pthread_create(&amp;p_thread, NULL, t_function, (void *)&amp;a);
    if (thr_id &lt; 0)
    {
        perror("thread create error : ");
        exit(0);
    }
    pthread_join(p_thread, (void **)&amp;status);
    printf("Join finish\n");
}

// cleanup handler
void cleanup(void *myarg)
{
    printf("thread is clean up\n");
    printf("resource free\n");
    free(mydata);
}
			</screen>
		</para>
	</section>
	<section>
		<title>pthread_cleanup_pop</title>
		<para>
			<emphasis>pthread_cleanup_push</emphasis> 와 함께 사용되며, 
			install 된 cleanup handler 을 제거하기 위해서 사용된다. 
			<screen>
void pthread_cleanup_pop(int execute);
			</screen>
			만약 execute 가 0 이라면, pthread_cleanup_push 에 의해 
			인스톨된 cleanup handler 를 (실행시키지 않고)삭제만 시킨다. 
			0 이 아닌 숫자라면 cleanup handler 을 실행시키고 삭제 된다. 
			사용예제는 <xref linkend="cleanup">을 참고하라. 
		</para>
		<para>
			그리고 pthread_cleanup_push 와 pthread_cleanup_pop 은 
			반드시 같은 함수내의 같은 레벨의 블럭에서 
			한쌍으로 사용해야 한다. 
		</para>
	</section>
	<section>
		<title>pthread_self</title>
		<para>
			<screen>
pthread_t pthread_self(void);
			</screen>
			<emphasis>pthread_self</emphasis>를 호출하는 현재 
			쓰래드의 쓰레드식별자를 되돌려준다. 
		</para>
		<para>
			<emphasis>예제 : pthread_self.c</emphasis>
			<screen>
#include &lt;pthread.h&gt;
#include &lt;stdio.h&gt;

void *func(void *a)
{
    pthread_t id;
    id = pthread_self();
    printf("->%d\n", id);
}

int main(int argc, char **argv)
{
    pthread_t p_thread;
    pthread_create(&amp;p_thread, NULL, func, (void *)NULL);
    printf("%d\n", p_thread);
    pthread_create(&amp;p_thread, NULL, func, (void *)NULL);
    printf("%d\n", p_thread);

	return 1;
}
			</screen>
		</para>
	</section>
</section>
<section>
	<title>쓰레드 동기화 함수</title>
	<para>
		쓰레드 동기화와 관련된 함수들이다.
	</para>
	<section>
		<title>pthread_mutex_init</title>
		<para>
			<screen>
int pthread_mutex_init(pthread_mutex_t * mutex, 
           const pthread_mutex_attr *attr); 
			</screen>
			mutex 는 여러개의 쓰레드가 공유하는 데이타를 보호하기 
			위해서 사용되는 도구로써, 보호하고자 하는 데이타를 
			다루는 코드영역을 단지 한번에 하나의 쓰레드만 실행가능 
			하도록 하는 방법으로 공유되는 데이타를 보호한다. 
			이러한 코드영역(하나의 쓰레드만 점유가능한)을 critical section 
			이라고 하며, mutex 관련 API 를 이용해서 관리할수 있다. 
		</para>
		<para>
			<emphasis>pthread_mutex_init</emphasis> 는 mutex 객체를 초기화 
			시키기 위해서 사용한다. 첫번째 인자로 주어지는 mutex 객체 
			<emphasis>mutex</emphasis>를 초기화시키며, 두번째 인자인 
			<emphasis>attr</emphasis> 를 이용해서 mutex 특성을 변경할수 
			있다. 기본 mutex 특성을 이용하기 원한다면 NULL 을 사용하면 된다.  
		</para>
		<para>
			mutex 특성(종류) 에는 "fast", "recurisev", "error checking" 의 종류가 
			있으며, 기본으로 "fast" 가 사용된다.  
			<screen>
// 뮤텍스 객체 선언
pthread_mutex_t mutex_lock;
...
void *t_function()
{
    pthread_mutex_lock(&amp;mutex_lock);
    // critical section
    pthread_mutex_unlock(&amp;mutex_lock);
}
int main()
{
    pthread_t p_thread;
    int state;
    // 뮤텍스 객체 초기화, 기본 특성으로 초기화 했음
    pthread_mutex_init(&amp;mutex_lock, NULL);
    pthread_create(&amp;p_thread, NULL, t_function, (void *)&amp;a);
    ...
    pthread_joinc(&amp;p_thread, (void **)&amp;status);
}
			</screen>
		</para>
	</section>
	<section>
		<title>pthread_mutex_destory</title>
		<para>
			<screen>
int pthread_mutex_destory(pthread_mutex_t *mutex);
			</screen>
			인자로 주어진 뮤텍스 객체 <emphasis>mutex</emphasis> 를 
			제거하기 위해서 사용된다. <emphasis>mutex</emphasis> 는 
			pthread_mutex_init()함수를 이용해서 생성된 뮤텍스 객체이다.  
		</para>
		<para>
			pthread_mutex_destory 를 이용해서 제대로 mutex 를 삭제하려면 
			이 mutex 는 반드시 unlock 상태이여야 한다. 
		</para>
	</section>
	<section>
		<title>pthread_mutex_lock</title>
		<para>
			<screen>
int pthread_mutex_lock(pthread_mutex_t *mutex);
			</screen>
			pthread_mutex_lock 는 critcal section 에 들어가기 위해서 mutex lock 
			을 요청한다. 만약 이미 다른 쓰레드에서 mutex lock 를 얻어서 사용하고 
			있다면 다른 쓰레드에서 mutex lock(뮤텍스 잠금) 을 
			해제할때까지(사용할수 있을때까지) 블럭 된다.    
		</para>
		<para>
			만약 다른 어떤 쓰레드에서도 mutex lock 을 사용하고 있지 않다면, 
			즉시 mutex lock 을 얻을수 있게 되고 critcal section 에 진입하게 
			된다. critcal section 에서의 모든 작업을 마쳐서 
			사용하고 있는 mutex lock 이 더이상 필요 없다면 pthread_mutex_unlock 를 
			호출해서 mtuex lock 를 되돌려준다.   
		</para>
	</section>
	<section>
		<title>pthread_mutex_unlock</title>
		<para>
			<screen>
int pthread_mutex_unlock(pthread_mutex_t *mutex); 
			</screen>
			critical section 에서의 모든 작업을 마치고 mutex lock 을 돌려주기 
			위해서 사용한다. pthread_mutex_unlock 를 이용해서 mutex lock 를 
			되돌려주면 다른 쓰레드에서 mutex lock 를 얻을수 있는 상태가 된다.  
		</para>
	</section>
	<section>
		<title>pthread_cond_init</title>
		<para>
			<screen>
int pthread_cond_init(pthread_cond_t *cond, 
                    const pthread_cond_attr *attr);
			</screen>
			<emphasis>pthread_cond_init</emphasis>는 조견변수
			(condition variable)<emphasis>cond</emphasis>를 
			초기화하기 위해서 사용한다. <emphasis>attr</emphasis> 를 
			이용해서 조건변수의 특성을 변경할수 있으며, NULL 을 
			줄경우 기본특성으로 초기화된다. 
		</para>
		<para>
			조건변수 <emphasis>cond</emphasis>는 상수 
			<emphasis>PTHREAD_COND_INITIALIZER</emphasis> 을 이용해서도 
			초기화 할수 있다. 즉 다음과 같은 2가지 초기화 방법이 
			존재한다.   
			<screen>
pthread_cond_t cond = PTHREAD_COND_INITIALIZER;
or
pthread_cond_init(&amp;cond, NULL);
			</screen>
		</para>
	</section>
	<section>
		<title>pthread_cond_signal</title>
		<para>
			<screen>
int pthread_cond_signal(pthread_cond_t *cond);
			</screen>
			조건변수 <emphasis>cond</emphasis>에 시그날을 보낸다. 
			시그날을 보낼경우 <emphasis>cond</emphasis>에서 기다리는(wait)
			쓰레드가 있다면 쓰레드를 깨우게 된다(봉쇄가 풀림). 
			만약 조건변수 <emphasis>cond</emphasis>를 기다리는 쓰레드가 
			없다면, 아무런 일도 일어나지 않게되며, 
			여러개의 쓰레드가 기다리고 있다면 그중 하나의 쓰레드에게만 
			전달된다. 이때 어떤 쓰레드에게 신호가 전달될지는 알수 없다.   
		</para>
	</section>
	<section>
		<title>pthread_cond_boradcast</title>
		<para>
			<screen>
int pthread_cond_broadcast(pthread_cond_t *cond);
			</screen>
			조건변수 <emphasis>cond</emphasis>에서 기다리는(wait) 모든 
			쓰레드에게 신호를 보내서, 깨운다는 점을 제외하고는 
			<emphasis>pthread_cond_signal</emphasis>과 동일하게 작동한다. 
		</para>
	</section>
	<section>
		<title>pthread_cond_wait</title>
		<para>
			<screen>
int pthread_cond_wait(pthread_cond_t cond, pthread_mutex_t *mutex); 
			</screen>
			조건변수 <emphasis>cond</emphasis>를 통해서 신호가 전달될때까지 
			블럭된다. 만약 신호가 전달되지 않는다면 영원히 블럭될수도 있다. 
			<emphasis>pthread_cond_wait</emphasis>는 블럭되기 전에 
			<emphasis>mutex</emphasis> 잠금을 자동으로 되돌려준다. 
		</para>
	</section>
	<section>
		<title>pthread_cond_timewait</title>
		<para>
			<screen>
int pthread_cond_timedwait(pthread_cont_t *cond, pthread_mutex_t *mutex, 
                           const struct timespec *abstime);
			</screen>
			조건변수 <emphasis>cond</emphasis>를 통해서 신호가 전달될때까지 
			블럭되며 자동으로 <emphasis>mutex</emphasis>을 돌려주는 점에서는  
			<emphasis>pthread_cond_wait</emphasis>와 동일하다. 
			그러나 시간체크가 가능해서 <emphasis>abstime</emphasis>시간동안 
			신호가 도착하지 않는다면 error 를 발생하면서 리턴한다. 
			이때 리턴값은 ETIMEDOUT 이다. errno 가 세팅되는게 아닌, 리턴값으로 
			에러가 넘어오는것에 주의해야 한다.  
		</para>
		<para>
			또한 <emphasis>pthread_cond_timedwait</emphasis>함수는 
			다른 signal 에 의해서 interrupted 될수 있으며 
			이때 EINTR 을 리턴한다. 이 함수를 쓸때는 interrupted 상황에 
			대한 처리를 해주어야 한다.  
		</para>
	</section>
	<section>
		<title>pthread_cond_destroy</title>
		<para>
			<screen>
int pthread_cond_destroy(pthread_cond_t *cond);
			</screen>
			<emphasis>pthread_cond_init</emphasis>를 통해서 생성한 
			조건변수<emphasis>cond</emphasis>에 대한 자원을 해제한다. 
			<emphasis>destroy</emphasis> 함수를 호출하기 전에 
			어떤 쓰레드도 <emphasis>cond</emphasis>에서의 시그널을 
			기다리지 않는걸 확인해야 한다. 만약 
			<emphasis>cond</emphasis> 시그널을 기다리는 쓰레드가 존재한다면 
			이 함수는 실패하고 <emphasis>EBUSY</emphasis> 를 리턴한다.  
		</para>
	</section>
	<section>
		<title>예제코드</title>
		<para>
			이번장에서 설명한 쓰레드 동기화 관련 함수의 이해를 돕기 위해서 
			간단한 예제를 준비했다. 설명은 주석으로 대신한다.  
		</para>
		<para>
			<emphasis>예제 : pthrad_sync_api.c</emphasis>
			<screen>
#include &lt;pthread.h&gt;
#include &lt;unistd.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;vector&gt;
#include &lt;iostream&gt;

using namespace std;

void *ping(void *);
void *pong(void *);

pthread_mutex_t sync_mutex;
pthread_cond_t  sync_cond;

pthread_mutex_t gmutex = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t  gcond  = PTHREAD_COND_INITIALIZER;

int main()
{
    vector&lt;void *(*)(void *)&gt; thread_list;
    vector&lt;pthread_t&gt; tident(10); 
    int thresult;
    int status;
    int i;

    pthread_mutex_init(&amp;sync_mutex, NULL);
    pthread_cond_init(&amp;sync_cond, NULL);

    thread_list.push_back(pong);
    thread_list.push_back(ping);

    for(i = 0; i &lt; thread_list.size(); i++ )
    {
        pthread_mutex_lock(&amp;sync_mutex);
        if (pthread_create(&amp;tident[i], NULL, thread_list[i], (void *)NULL) &lt;0)
        {
            perror("error:");
            exit(0);
        }
        pthread_cond_wait(&amp;sync_cond, &amp;sync_mutex);
        pthread_mutex_unlock(&amp;sync_mutex);
    }
    for (i = 0; i < tident.size(); i++)
    {
        pthread_join(tident[i], (void **)&amp;status);
    }
}

void *ping(void *data)
{
    int i=0;
    pthread_mutex_lock(&amp;sync_mutex);
    pthread_cond_signal(&amp;sync_cond);
    pthread_mutex_unlock(&amp;sync_mutex);
    while(1)
    {
        pthread_mutex_lock(&amp;gmutex);
        printf("%d : ping\n", i);
        pthread_cond_signal(&amp;gcond);
        pthread_cond_wait(&amp;gcond, &amp;gmutex);
        pthread_mutex_unlock(&amp;gmutex);
        usleep(random()%100);
        i++;
    }
}

void *pong(void *data)
{
    int i = 0;
    pthread_mutex_lock(&amp;sync_mutex);
    sleep(1);
    pthread_cond_signal(&amp;sync_cond);
    pthread_mutex_unlock(&amp;sync_mutex);
    while(1)
    {
        pthread_mutex_lock(&amp;gmutex);
        pthread_cond_wait(&amp;gcond, &amp;gmutex);
        printf("%d : pong\n", i);
        pthread_cond_signal(&amp;gcond);
        pthread_mutex_unlock(&amp;gmutex);
        i++;
    }
}
			</screen>
		</para>
		<para>
			위의 예제는 ping&amp;pong 프로그램으로 ping 쓰레드와 pong 쓰레드가 
			각각 번갈아가면서 "ping", "pong" 을 날리는 프로그램이다. 	
			2개의 영역에 걸쳐서 크리티컬섹션이 
			지정되어 있으며 각 크리티컬섹션안에는 쓰레드 동기화를 위해서 
			ptread_cond_signal 이 쓰여지고 있다.  	
		</para>
		<para>
			위의 코드는 기본적으로 pong 쓰레드가 먼저 시그널을 대기하고 
			있다가 그 후 ping 쓰레드가 진입해서 "ping"을 날리고 시그널을 
			발생시키면 "pong" 메시지를 발생시키도록 되어 있다. 그렇다면 
			while 문에 있는 크리티컬 섹션에 반드시 pong 쓰레드가 먼저 
			진입할수 있도록 만들어줘야 할것이다. 
			그래서 위의 코드에서는 pong 쓰레드를 먼저 생성시켰다. 
			그러나 이것만으로는 충분하지 않다. 예를들어서 
			pong 쓰레드에서 크리티컬섹션에 들어가기 위해서 어떤 
			부가적인 작업이 있다고 했을때(메모리초기화, 기타 다른 함수 
			호출과 같은, 위에서는 sleep 으로 대신했다), 우리가 
			의도했던 바와는 다르게 ping 가 먼저 크리티컬섹션에 
			진입할수도 있다. 이럴경우 2개의 쓰레드는 교착상태에 
			빠지게 된다.    
		</para>
		<para>
			ping 쓰레드가 크리티컬섹션에 먼저 진입했을경우 
			ping 쓰레드는 "ping" 출력시키고 시그널을 발생시킬 
			것이고 pong 쓰레드가 "pong"를 출력시키고 시그널을 
			발생시킬때까지 시그널대기 하게 된다. 
			ping 쓰레드가 시그널대기 하게 되면, 크리티컬섹션에 대한 
			뮤텍스 잠금이 해제됨으로 뒤늦게 크리티컬섹셔네 진입을 
			시도하던 pong 가 크리티컬섹션에 진입하고 ping 쓰레드에서부터 
			신호가 있는지 기다리게 될것이다. 그러나 ping 쓰레드는 이미 
			신호를 날려버렸음으로, pong 쓰레드는 결코 도착하지 않을 
			신호를 기다리며 영원히 시그널대기 하게 될것이다. 
			이런식으로 2개의 쓰레드는 교착상태에 빠져 버린다.   	  
		</para>
		<para>
			이 문제는 쓰레드간 동기화를 이용해서 해결할수 있으며, 
			위 코드에서는 mutex 잠금과, 조건변수를 이용해서 
			해결하고 있다. 물론 쓰레드간 동기화를 위해서 
			사용할수 있는 원시?적인 방법으로 sleep 나 usleep 같은 
			함수를 호출하는 방법도 있긴 하지만, ping 쓰레드에서 
			크리티컬 섹션에 진입하기전 1초 정도 sleep 을 주는 식으로 
			사용가능하지만 추천할만하진 않다. 
			(간혹 간단하게 사용할수는 으며, 가장 확실한 방법을 제공해 
			주기도 한다) 
		</para>
	</section>
</section>
<section>
	<title>Thread Attribute 함수</title>
	<section>	
		<title>pthread_attr_init</title>
		<para>
			<screen>
int pthread_attr_init(pthread_attr_t *attr);
			</screen>
			<emphasis>pthread_attr_init</emphasis>는 thread attribute 객체인 
			<emphasis>attr</emphasis>을 디폴트 값으로 초기화 시킨다.  
		</para>
		<para>
			성공할경우 0을 돌려주고 실패할경우 -1 을 되돌려준다. 
		</para>
	</section>	
	<section>	
		<title>pthread_attr_distroy</title>
		<para>
			<screen>
int pthread_attr_destroy(pthread_attr_t *attr);
			</screen>
			<emphasis>pthread_attr_init</emphasis>에 의해 생성된 thread attribute 객체인 
			<emphasis>attr</emphasis>을 제거한다. 제거된 attr 을 다시 사용하기 위해서는 
			<emphasis>pthread_attr_init</emphasis>를 이용해서 다시 초기화 해주어야 한다.  
		</para>
	</section>	
	<section>	
		<title>pthread_attr_getscope</title>
		<para>	
			<screen>
int pthread_attr_getscope(const pthread_attr_t *attr, 
             int *scope);
			</screen>
			쓰레드가 어떤 영역(scope)에서 다루어지고 있는지를 얻어오기 위해서 사용된다. 
			PTHREAD_SCOPE_SYSTEM과 PTHREAD_SCOPE_PROCESS 의 2가지 
			영역중에 선택할수 있다. SYSTEM 영역 쓰레드는 user 모드 쓰레드라고 
			불리우며, PROCESS 쓰레드는 커널모드 쓰레드라고 불리운다. 
			리눅스의 경우 유저모드 쓰레드인데, 즉 커널에서 쓰레드를 스케쥴링하는 
			방식이 아닌 쓰레드 라이브러리를 통해서 쓰레드를 스케쥴링 하는 방식을 
			사용한다.     
		</para>	
		<para>	
			<screen>
#include &lt;pthread.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;


int main()
{
    pthread_attr_t pattr;
    int scope;

    pthread_attr_init(&amp;pattr);

    pthread_attr_getscope(&amp;pattr, &amp;scope);
    if (scope == PTHREAD_SCOPE_SYSTEM)
    {
        printf("user mode thread\n");
    }
    else if (scope ==  PTHREAD_SCOPE_PROCESS)
    {
        printf("Kernel mode thread\n");
    }

    return 1;
}
			</screen>
			위 프로그램을 컴파일한후 Linux 에서 실행시키면 "user mode thread"를 
			출력하고 솔라리스 상에서 실행시키면 "kernel mode thread"를 출력한다. 
		</para>	
	</section>	
	<section>
		<title>pthread_attr_setscope</title>
		<para>
			<screen>
int pthread_attr_setscope(pthread_attr_t *attr, int scope);
			</screen>
			쓰레드가 어떤 영역(scope)에서 작동하게 할것인지 결정하기 위해서 사용한다. 
			리눅스의 경우 Kernel mode 쓰레드를 지원하지 않음으로 오직 PTHREAD_SCOPE_SYSTEM 
			만을 선택할수 있다. 반면 솔라리스는 유저모드와 커널모드중 선택이 가능하다.  
		</para>
		<para>
			<emphasis>pthread_attr_setscope.c</emphasis>
			<screen>
#include &lt;pthread.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;


int main()
{
    pthread_attr_t pattr;
    int scope;

    pthread_attr_init(&amp;pattr);

    pthread_attr_setscope(&amp;pattr, PTHREAD_SCOPE_PROCESS);
    pthread_attr_getscope(&amp;pattr, &amp;scope);
    if (scope == PTHREAD_SCOPE_SYSTEM)
    {
        printf("user mode thread\n");
    }
    else if (scope ==  PTHREAD_SCOPE_PROCESS)
    {
        printf("Kernel mode thread\n");
    }

    return 1;
}
			</screen>
			위코드에서 쓰레드가 커널 모드에서 작동하도록 지정을 했다. 
			리눅스에서 실행시킬경우에는 비록 커널모드로 지정을 했다고 하더라도 
			유저모드 쓰레드로 작동하게 된다. 솔라리스의 경우에는 
			setscope 로 지정한대로 커널모드에서 작동하게 된다.   
		</para>
	</section>
	<section>
		<title>pthread_attr_getdetachstate</title>
		<para>
			<screen>
int pthread_attr_getdetachstate(pthread_attr_t *attr,
           int detachstate);
			</screen>
			쓰레드가 join 가능한 상태(PTHREAD_CREATE_JOINABLE) 인지 
			detached 상태인지 (PTHREAD_CREATE_DETACHED) 인지를 
			알아낸다. 알아낸 값은 아규먼트 <emphasis>detachstate</emphasis> 
			에 저장된다.  
		</para>
		<para>
			기본은 PTHREAD_CREATE_JOINABLE 이며, 
			<emphasis>pthread_detach</emphasis>를 이용해서 
			생성된 쓰레드를 detach 상태로 만들었을경우 
			또는 <emphasis>pthread_attr_setdetachstate</emphasis>함수를 
			이용해서 쓰레드를 detache 상태로 변경시켰을경우 
			PTHREAD_CREATE_DETACHED 상태가 된다.  
		</para>
		<para>
			<emphasis>예제 : pthread_attr_getdetachstate.c</emphasis>
			<screen>
#include &lt;pthread.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;

pthread_attr_t attr;
void *test(void *a)
{
    int policy;
    printf("Thread Create\n");
    pthread_attr_getdetachstate(&amp;attr, &amp;policy);
    if (policy == PTHREAD_CREATE_JOINABLE)
    {
        printf ("Join able\n");
    }
    else if (policy == PTHREAD_CREATE_DETACHED)
    {
        printf ("Detache\n");
    }
}
int main()
{
    int status;
    pthread_t p_thread;
    pthread_attr_init(&amp;attr);
    if (pthread_create(&amp;p_thread, NULL, test, (void *)NULL) &lt; 0)
    {
        exit(0);
    }

    pthread_join(p_thread, (void **)&amp;status);
}
			</screen>
			위의 프로그램을 실행시키면 분명 "Join able"를 출력할것이다. 
		</para>
	</section>
	<section>
		<title>pthread_attr_setdetachstate</title>
		<para>
			<screen>
int  pthread_attr_setdetachstate(pthread_attr_t *attr, 
             int detachstate);
			</screen>
			쓰레드의 상태를 PTHREAD_CREATE_JOINABLE 혹은 
			PTHREAD_CREATE_DETACHED 상태로 변경시키기 위해서 사용된다. 
			아래와 같은 방법으로 사용하면 된다. 
			<screen>
pthread_attr_t attr;
...
// JOINABLE 상태로 변경하고자 할때 
pthread_attr_setdetachstate(&amp;attr, PTHREAD_CREATE_JOINABLE);
// DETACHED 상태로 변경하고자 할때
pthread_attr_setdetachstate(&amp;attr, PTHREAD_CREATE_DETACHED);
			</screen>
		</para>
	</section>
</section>
<section>
	<title>쓰레드 시그널 관련</title>
	<para>
		쓰레드간 프로세스와 쓰레드간 시그널 전달관련 API들이다.  
		자세한 내용은 <ulink url="http://www.joinc.co.kr/modules/moniwiki/wiki.php/article_쓰레드와_시그널">쓰레드와 시그널</ulink>을 참고하기 바란다.
	</para>
	<section>
		<title>pthread_sigmask</title>
		<para>	
			<screen>
#include &lt;pthread.h&gt;
#include &lt;signal.h&gt;

int pthread_sigmask(int how, const sigset_t *newmask, sigset_t *oldmask);
			</screen>
			쓰레드에서 시그널은 서로 공유된다. 그런이유로 만약 프로세스에 
			시그널이 전달되면 프로세스가 생성된 모든 쓰레드로 시그널이 전달된다.
			그러나 특정 쓰레드만 시그널을 받도록 하고 싶을 때가 있을 것이다.  
			이경우 이 함수를 이용하면 된다. 
		</para>	
	</section>
	<section>
		<title>pthread_kill</title>
		<para>
			<screen>
#include &lt;pthread.h&gt;
#include &lt;signal.h&gt;

int pthread_kill(pthread_t thread, int signo);
			</screen>
			쓰레드 식별번호 <emphasis>thread</emphasis>로 <emphasis>signo</emphasis>
			번호의 시그널을 전달한다.	
		</para>
	</section>
	<section>
		<title>sigwait</title>
		<para>
			<screen>
#include &lt;pthread.h&gt;
#include &gt;signal.h&gt;

int sigwait(const sigset_t *set, int *sig);
			</screen>
			시그널 전달을 동기적으로 기다린다.
		</para>
	</section>
</section>
<section>
	<title>쓰레드 취소</title>
	<para>
		자세한 내용은 <ulink url="http://www.joinc.co.kr/modules/moniwiki/wiki.php/article_thread_cancellation">쓰레드 취소와 종료</ulink>와 
		pthread_cancel(3)을 참고하기 바란다.
		여기에서는 인덱스만 제공한다.
	</para>
	<section>
		<title>pthread_cancel</title>
		<para>
			<screen>
#include &lt;pthread.h&gt;

int pthread_cancel(pthread_t thread);
			</screen>
		</para>
	</section>
	<section>
		<title>pthread_setcancelstate</title>
		<para>
			<screen>
#include &lt;pthread.h&gt;

int pthread_setcancelstate(int state, int *oldstate);
			</screen>
		</para>
	</section>
	<section>
		<title>pthread_setcancelstate</title>
		<para>
			<screen>
#include &lt;pthread.h&gt;

int pthread_setcancelstate(int state, int *oldstate);
			</screen>
		</para>
	</section>
	<section>
		<title>pthread_setcanceltype</title>
		<para>
			<screen>
#include &lt;pthread.h&gt;

int pthread_setcanceltype(int type, int *oldtype);
			</screen>
		</para>
	</section>
	<section>
		<title>pthread_testcancel</title>
		<para>
			<screen>
#include &lt;pthread.h&gt;

void pthread_testcancel(void);
			</screen>
		</para>
	</section>
</section>
</article>
}}}
