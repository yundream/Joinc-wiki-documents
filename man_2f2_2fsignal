#title linux man page : signal - 시그널을 처리한다.

{{{#!html
<HTML
><HEAD
><TITLE
><a href="/modules/moniwiki/wiki.php/manSearch?google=none&name=signal">signal</a>(2)</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.59"><META
http-equiv="Content-Type"
content="text/html; charset=euc-kr"></HEAD
><BODY
CLASS="CHAPTER"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="CHAPTER"
><H1
><A
NAME="AEN1"
>1&#51109;. signal(2)</A
></H1
><DIV
CLASS="TOC"
><DL
><DT
><B
>&#52264;&#47168;</B
></DT
><DT
>1.1&#51208;. <A
HREF="#AEN4"
>사용법</A
></DT
><DT
>1.2&#51208;. <A
HREF="#AEN8"
>설명</A
></DT
><DT
>1.3&#51208;. <A
HREF="#AEN22"
>반환값</A
></DT
><DT
>1.4&#51208;. <A
HREF="#AEN25"
>예제</A
></DT
></DL
></DIV
><P
>	시그널(:12)을 처리한다. - ANSI C</P
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN4"
>1.1&#51208;. 사용법</A
></H1
><P
>		<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;signal.h&#62;

void (*signal(int signum, void  (*handler) (int))) (int);
		</PRE
></TD
></TR
></TABLE
>
	</P
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN8"
>1.2&#51208;. 설명</A
></H1
><P
>		성공할경우 0을 실패했을경우에는 -1을 반환하며, 적당한 errno(:12) 값을 
		설정한다. 
		<P
></P
><DIV
CLASS="VARIABLELIST"
><DL
><DT
>SIG_IGN</DT
><DD
><P
>	
					시그널을 무시한다.
				</P
><P
>	
					그러나 SIGKILL(:12), SIGSTOP(:12) 는 무시할수 없다. 
				</P
></DD
><DT
>SIG_DFL</DT
><DD
><P
>	
					시그널의 기본동작을 하도록 한다. 
				</P
></DD
></DL
></DIV
>	
		시그널:::핸들러(:12) 함수에 넘겨지는 정수 인자는 시그널의 
		번호이다. 시그널:::번호(:12)를 넘겨줌으로 인해서 여러개의 
		시그널에 대해서 하나의 시그널 핸들러를 사용할수 있도록 한다.  
	</P
><P
>		SIGKILL, SIGSTOP 시그널에 대해서는 핸들러를 지정할수 없다. 
		이들 시그널은 무시할수도 없고 핸들러를 지정할수도 없이 
		단지 기본동작으로만 작동한다.  	
	</P
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN22"
>1.3&#51208;. 반환값</A
></H1
><P
>		signal 은 이전의 시그널 핸들러의 포인터를 반환하며, 
		에러시 SIG_ERR 을 리턴한다. 
	</P
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN25"
>1.4&#51208;. 예제</A
></H1
><P
>		<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;signal.h&#62;

#include &#60;unistd.h&#62;

void sig_handler(int signo); // 비프음 발생 함수

int main()
{
    int i = 0;
    signal(SIGINT, (void *)sig_handler);

    while(1)
    {
        printf("%d&#92;n", i);
        i++;
        sleep(1);
    }
    return 1;
}


void sig_handler(int signo)
{
    printf("SIGINT 발생&#92;n");
}
		</PRE
></TD
></TR
></TABLE
>

		SIGINT(:12) 를 발생시키는 가장간단한 방법은 키보드의 Ctrl+C 를 
		입력하는 방법이다. 위 프로그램을 실행시킨후 Ctrl+C 를 실행시키면 
		SIGINT 시그널이 전달되고 어플리케이션은 해당 시그널 핸들러인
		sig_handler() 함수를 실행시키는걸 볼수 있을것이다.   	 
	</P
></DIV
></DIV
></BODY
></HTML
>
}}}

=== 관련글 ===
  * [wiki:Site/system_programing/Signal/SignalHow 시그널 사용하기 1]
  * [wiki:Site/system_programing/Signal/SignalHow2 시그널 사용하기 2]
  * [wiki:Site/system_programing/Book_LSP/ch06_Signal 리눅스 시스템 프로그래밍 6장 시그널]
