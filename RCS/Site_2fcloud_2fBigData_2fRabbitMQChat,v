head	1.1;
access;
symbols;
locks
	root:1.1; strict;
comment	@# @;


1.1
date	2013.11.11.14.20.31;	author root;	state Exp;
branches;
next	;


desc
@./data/text/Site_2fcloud_2fBigData_2fRabbitMQChat
@


1.1
log
@128.134.217.152;;yundream;;
@
text
@#title RabbitMQ를 이용한 채팅 서비스 개발

== 구조 ==
RabbitMQ를 이용해서 채팅 서비스를 개발해보려 한다. 채팅서버의 구조는 다음과 같다.

{{{#!html
<img src="https://docs.google.com/drawings/d/1XDaW6ev3Del15KdKAuY00xThvcoLU_MeLXB-LruyItQ/pub?w=910&amp;h=378">
}}}
  1. WebSocket : 웹소켓을 이용해서 양방향 통신을 지원할 거다. 왜 웹소켓을 사용하기로 했냐면, 최근 웹소켓을 공부한적이 있어서다. 한 마디로 배운김에 써먹어 볼려고. 
  1. jquery : 웹소켓 제어를 위해서 jquery를 사용한다.  
  1. Receive Queue : 입력 메시지는 Receive Queue로 들어간다.
  1. Message Processor : 메시지를 처리하는 핵심 부 
     1. Receive Queue로 부터 메시지를 읽는다. 
     1. 메시지가 누구에게 향하는지 확인한다.
     1. Session Table을 읽어서 메시지 수신자가 접속해있는지 확인한다.
     1. 없으면 송신자에게 에러메시지를 보내고 나서 폐기한다.
     1. 수신자가 접속해 있다면, Send Queue로 메시지를 보낸다.
  1. Message Server는 자신이 Send Queue로 부터 메시지를 꺼낸다. 여러개의 Message Server가 있을테고, 메시지를 수신할 클라이언트가 붙어있는 Message server가 메시지를 꺼내야 할거다. Message Server별로 message channel을 만들면 되겠다. 

== Session table 구조 ==
@
