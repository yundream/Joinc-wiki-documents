#title GCC와 C99

 * 원문 : http://gcc.gnu.org/c99status.html
{{{#!html
<h1 align="center">
Status of C99 features in GCC
</h1>

<p>This table is based on the list in the foreword to the printed
standard ISO/IEC 9899:1999 (E), as amended by ISO/IEC
9899:1999/Cor.1:2001 (E) and ISO/IEC 9899:1999/Cor.2:2004 (E).</p>

<p>Where "Library Issue" is listed in conjunction with some other
status, this means that some compiler support is needed for the
library support, or desirable in conjunction with it.  Note that the
headers required of conforming freestanding implementations (clause 4
paragraph 6) do not count as library issues.</p>

<p>This page describes the C99 support in mainline GCC CVS, not in any
particular release.  Information is also available on <a
href="gcc-4.1/c99status.html">C99 support in GCC 4.1</a>, <a
href="gcc-4.0/c99status.html">C99 support in GCC 4.0</a>, <a
href="gcc-3.4/c99status.html">C99 support in GCC 3.4</a>, <a
href="gcc-3.3/c99status.html">C99 support in GCC 3.3</a>, <a
href="gcc-3.1/c99status.html">C99 support in GCC 3.1 and 3.2</a> and on <a
href="gcc-3.0/c99status.html">C99 support in GCC 3.0</a>, but not on
the much more limited support in GCC 2.95.</p>

<p>See below the table for further notes on some issues.</p>

<table border="1">
<tr><th>Feature</th>
    <th>Library Issue</th>
    <th>Done</th>
    <th>Broken</th>
    <th>Missing</th>
</tr>

<tr><td><em>restricted character set support via digraphs and
    <br /><code>&lt;iso646.h&gt;</code> (originally specified in AMD1)</em></td>
    <td></td>
    <td>Done</td><td></td><td></td>
</tr>

<tr><td><em>wide character library support in
    <code>&lt;wchar.h&gt;</code><br />and <code>&lt;wctype.h&gt;</code>
    (originally specified in AMD1)</em></td>
    <td>Library Issue</td>
    <td></td><td></td><td>Missing</td>
</tr>

<tr><td><em>more precise aliasing rules via effective type</em></td>
    <td></td><td>Done</td>
    <td></td><td></td>
</tr>

<tr><td><em>restricted pointers</em></td>
    <td></td><td>Done</td>
    <td></td><td></td>
</tr>

<tr><td><em>variable-length arrays</em></td>
    <td></td><td></td><td>Broken</td>
    <td></td>
</tr>

<tr><td><em>flexible array members</em></td>
    <td></td><td>Done</td><td></td><td></td>
</tr>

<tr><td><em><code>static</code> and type qualifiers<br />in parameter array declarators</em></td>
    <td></td><td>Done</td><td></td><td></td>
</tr>

<tr><td><em>complex (and imaginary) support in <code>&lt;complex.h&gt;</code></em></td>
    <td></td><td></td><td>Broken</td>
    <td></td>
</tr>

<tr><td><em>type-generic math macros in <code>&lt;tgmath.h&gt;</code></em></td>
    <td>Library Issue</td>
    <td>Done</td><td></td><td></td>
</tr>

<tr><td><em>the <code>long long int</code> type and library functions</em></td>
    <td></td><td>Done</td>
    <td></td><td></td>
</tr>

<tr><td><em>increased minimum translation limits</em></td>
    <td></td><td>Done</td>
    <td></td><td></td>
</tr>

<tr><td><em>additional floating-point characteristics<br />in <code>&lt;float.h&gt;</code></em></td>
    <td></td><td>Done</td>
    <td></td><td></td>
</tr>

<tr><td><em>remove implicit <code>int</code></em></td>
    <td></td><td>Done</td>
    <td></td><td></td>
</tr>

<tr><td><em>reliable integer division</em></td>
    <td></td><td>Done</td><td></td><td></td>
</tr>

<tr><td><em>universal character names (<code>\u</code> and <code>\U</code>)</em></td>
    <td></td><td>Done</td><td></td><td></td>
</tr>

<tr><td><em>extended identifiers</em></td>
    <td></td><td></td><td></td><td>Missing</td>
</tr>

<tr><td><em>hexadecimal floating-point constants and
    <code>%a</code><br /> and <code>%A</code>
    <code>printf</code>/<code>scanf</code> conversion specifiers</em></td>
    <td>Library Issue</td><td>Done</td>
    <td></td><td></td>
</tr>

<tr><td><em>compound literals</em></td>
    <td></td><td>Done</td><td></td>
    <td></td>
</tr>

<tr><td><em>designated initializers</em></td>
    <td></td><td>Done</td><td></td>
    <td></td>
</tr>

<tr><td><em><code>//</code> comments</em></td>
    <td></td><td>Done</td>
    <td></td><td></td>
</tr>

<tr><td><em>library functions in <code>&lt;inttypes.h&gt;</code></em></td>
    <td>Library Issue</td>
    <td></td><td></td><td></td>
</tr>

<tr><td><em>extended integer types in <code>&lt;stdint.h&gt;</code></em></td>
    <td></td>
    <td></td><td></td><td>Missing</td>
</tr>

<tr><td><em>remove implicit function declaration</em></td>
    <td></td><td>Done</td>
    <td></td><td></td>
</tr>

<tr><td><em>preprocessor arithmetic<br />done in <code>intmax_t</code>/<code>uintmax_t</code></em></td>
    <td></td><td>Done</td><td></td><td></td>
</tr>

<tr><td><em>mixed declarations and code</em></td>
    <td></td><td>Done</td><td></td><td></td>
</tr>

<tr><td><em>new block scopes for selection<br />and iteration statements</em></td>
    <td></td><td>Done</td><td></td><td></td>
</tr>

<tr><td><em>integer constant type rules</em></td>
    <td></td><td>Done</td><td></td><td></td>
</tr>

<tr><td><em>integer promotion rules</em></td>
    <td></td><td>Done</td><td></td><td></td>
</tr>

<tr><td><em>macros with a variable number of arguments</em></td>
    <td></td><td>Done</td>
    <td></td><td></td>
</tr>

<tr><td><em>the <code>vscanf</code> family of functions
    in<br /><code>&lt;stdio.h&gt;</code> and <code>&lt;wchar.h&gt;</code></em></td>
    <td>Library Issue</td>
    <td>Done</td><td></td><td></td>
</tr>

<tr><td><em>additional math library functions in <code>&lt;math.h&gt;</code></em></td>
    <td>Library Issue</td>
    <td></td><td></td><td>Missing</td>
</tr>

<tr><td><em>floating-point environment access<br />in <code>&lt;fenv.h&gt;</code></em></td>
    <td>Library Issue</td>
    <td></td><td></td><td></td>
</tr>

<tr><td><em>IEC 60559 (also known as<br />IEC 559 or IEEE arithmetic) support</em></td>
    <td></td><td></td><td>Broken</td><td></td>
</tr>

<tr><td><em>trailing comma allowed in <code>enum</code> declaration</em></td>
    <td></td><td>Done</td>
    <td></td><td></td>
</tr>

<tr><td><em><code>%lf</code> conversion specifier<br />allowed in <code>printf</code></em></td>
    <td>Library Issue</td><td>Done</td><td></td><td></td>
</tr>

<tr><td><em>inline functions</em></td>
    <td></td><td></td><td>Broken</td>
    <td></td>
</tr>

<tr><td><em>the <code>snprintf</code> family of functions in <code>&lt;stdio.h&gt;</code></em></td>
    <td>Library Issue</td>
    <td>Done</td><td></td><td></td>
</tr>

<tr><td><em>boolean type in <code>&lt;stdbool.h&gt;</code></em></td>
    <td></td>
    <td>Done</td><td></td><td></td>
</tr>

<tr><td><em>idempotent type qualifiers</em></td>
    <td></td><td>Done</td><td></td><td></td>
</tr>

<tr><td><em>empty macro arguments</em></td>
    <td></td><td>Done</td><td></td><td></td>
</tr>

<tr><td><em>new struct type compatibility<br />rules (tag compatibility)</em></td>
    <td></td><td>Done</td><td></td><td></td>
</tr>

<tr><td><em>additional predefined macro names</em></td>
    <td></td><td></td><td></td><td>Missing</td>
</tr>

<tr><td><em><code>_Pragma</code> preprocessing operator</em></td>
    <td></td><td>Done</td><td></td><td></td>
</tr>

<tr><td><em>standard pragmas</em></td>
    <td></td><td></td><td></td><td>Missing</td>
</tr>

<tr><td><em><code>__func__</code> predefined identifier</em></td>
    <td></td><td>Done</td>
    <td></td><td></td>
</tr>

<tr><td><em><code>va_copy</code> macro</em></td>
    <td></td><td>Done</td><td></td><td></td>
</tr>

<tr><td><em>additional <code>strftime</code> conversion specifiers</em></td>
    <td>Library Issue</td><td>Done</td><td></td><td></td>
</tr>

<tr><td><em>deprecate <code>ungetc</code> at the<br />beginning of a binary file</em></td>
    <td>Library Issue</td>
    <td></td><td></td><td></td>
</tr>

<tr><td><em>remove deprecation of<br />aliased array parameters</em></td>
    <td></td><td>Done</td>
    <td></td><td></td>
</tr>

<tr><td><em>conversion of array to pointer not limited to lvalues</em></td>
    <td></td><td>Done</td>
    <td></td><td></td>
</tr>

<tr><td><em>relaxed constraints on aggregate<br />and union initialization</em></td>
    <td></td><td>Done</td>
    <td></td><td></td>
</tr>

<tr><td><em>relaxed restrictions on portable header names</em></td>
    <td></td><td>Done</td>
    <td></td><td></td>
</tr>

<tr><td><em><code>return</code> without expression not permitted
    in<br />function that returns a value (and vice versa)</em></td>
    <td></td><td>Done</td>
    <td></td><td></td>
</tr>

<tr><th>Feature</th>
    <th>Library Issue</th>
    <th>Done</th>
    <th>Broken</th>
    <th>Missing</th>
</tr>
</table>

<h2>Further notes</h2>

<ul>

<li>cpp has limited support for multibyte character sets.</li>

<li>IEC 60559 is IEEE 754 floating point.  This works if and only if
the hardware is perfectly compliant, but GCC does not define
<code>__STDC_IEC_559__</code> or implement the associated standard
pragmas.</li>

<li>Compiler support is needed for <code>math_errhandling</code>; see
messages <a
href="http://sources.redhat.com/ml/libc-hacker/2000-06/msg00008.html">1</a>,
<a
href="http://sources.redhat.com/ml/libc-hacker/2000-06/msg00014.html">2</a>,
<a
href="http://sources.redhat.com/ml/libc-hacker/2000-06/msg00015.html">3</a>
on this subject to libc-hacker.</li>

<li>In some places, <code>-pedantic</code> warnings don't take proper
account of the standard version selected.</li>

<li>GCC doesn't have <code>wprintf</code>, <code>wscanf</code> and
<code>wcsftime</code> format checking support.</li>

<li>Complex numbers support may be broken (some problems with
passing/returning complex values on 64-bit targets, and not checked
against the requirements of the C99 standard).  However, the
<code>_Complex</code> keyword now works.</li>

<li>C99 <code>inline</code> functions do not generate an external
definition if declared without <code>extern</code>, but do if declared
with <code>extern</code>, the opposite of GCC's handling of
<code>inline</code> and <code>extern inline</code>.  This will
probably require existing glibc headers to be fixincluded.</li>

<li>The C99 semantics of variable length arrays (VLAs) are not fully
implemented by the existing GCC extension: the concept of variably
modified (VM) types, and the rules for what identifiers can be
declared with VLA or VM types, are not implemented (for example, GCC
allows elements of VM type in a structure with block scope); while the
syntax for arrays to be declared with <code>[*]</code> in parameter
declarations is present, the semantics are not; and in general the
implementation of VLAs has not been checked against C99 requirements.</li>

<li><code>const</code>-qualified compound literals could share storage
with each other and with string literals, but currently don't.</li>

<li>The information provided by <code>static</code> in parameter array
declarators is not used for optimization.  It might make sense to use
it in future in conjunction with <a href="projects/prefetch.html">work
on prefetching</a>.</li>

<li>The list above differs from that in the C99 standard (as amended
by TC1) as follows:
"LIA compatibility annex" is removed, since it refers to C99's
conformance to another standard rather than something for C
implementations to do.  The <code>&lt;stdint.h&gt;</code> and
<code>&lt;inttypes.h&gt;</code> entries have been separated, but are a
single entry in C99.</li>

</ul>




<hr />

<p>Please send FSF &amp; GNU inquiries &amp; questions to
<a href="mailto:gnu@gnu.org">gnu@gnu.org</a>.
There are also <a href="http://www.gnu.org/home.html#ContactInfo">other ways
to contact</a> the FSF.</p>

<p>These pages are maintained by
<a href="http://gcc.gnu.org/about.html">the GCC team</a>.</p>

<address>For questions related to the use of GCC, please consult these web
pages and the <a href="http://gcc.gnu.org/onlinedocs/">GCC manuals</a>. If
that fails, the <a href="mailto:gcc-help@gcc.gnu.org">gcc-help@gcc.gnu.org</a>
mailing list might help.<br />
Please send comments on these web pages and the development of GCC to our
developer mailing list at <a href="mailto:gcc@gnu.org">gcc@gnu.org</a>
or <a href="mailto:gcc@gcc.gnu.org">gcc@gcc.gnu.org</a>.  All of our lists
have <a href="http://gcc.gnu.org/lists.html">public archives</a>.
</address>

<p>Copyright (C) Free Software Foundation, Inc.,
51 Franklin St, Fifth Floor, Boston, MA 02110, USA.</p>
<p>Verbatim copying and distribution of this entire article is
permitted in any medium, provided this notice is preserved.</p>

<table width="100%" border="0"><tr><td>
  <!-- IGNORE DIFF -->Last modified 2005-12-04
</td><td align="right" valign="bottom">
  <a href="http://validator.w3.org/check/referer">
      <img src="http://www.w3.org/Icons/valid-xhtml10"
     alt="Valid XHTML 1.0" border="0" width="88" height="31" />
   
  </a>
</td></tr></table>
}}}
----
CategoryLanguage CategoryC
