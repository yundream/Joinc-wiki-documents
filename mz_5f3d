= 3D programming =
[[TableOfContents]]
 * 작성자 : 조재혁 ([mailto:minzkn@infoeq.com])
 == 개요 ==
  3D기법에 대한 간략한 기반지식이 어떤것이 있을까?
  보다 자세한것은 묻지말고 해봅시다. 만들어보면 다 알게됨.
 == 3D 기법 ==
  === 스프라이트 ===
   * 뒷 배경에 영향을 주지 않으면서 빠른 배치를 처리할수 있는 방법이지만 각 객체간의 충돌에 관련된 처리가 복잡하며 입체적인 시각효과를 구현하기는 어렵다.
  === 렌더링 (Rendering) ===
   * 3D를 제작할때는 반드시 거쳐야 하는 작업이지만 사용자가 보는 시점이 바뀌면 다시 계산하여 객체를 표현해야 하는 계산 과정이 뒤따른다.
   * 반복적인 계산을 줄이기 위해서 초기에 아예 미리 각 주요 객체의 시점을 계산하여 만들어 두는 것이 유용할때도 있다.
  === 래이 트레이싱 ===
   * 빛이 광원에서 출발하여 물체에 닿고 그 반사광이 카메라(혹은 눈)에 들어오는 과정을 거꾸로 추적한다. 즉 카메라 -> 물체 -> 광원으로 빛의  궤적을 추적하여 이미지 생성
   * 매우 세밀하게 처리할수 있으며 특히 거울,금속 같은 반사이미지가 매우 정확하고, 이미지 생성에 많은 시간이 든다.
   * 그림을 빛에 따라서 움직이는 동작을 모두 묘사하여 저장하고 있어야 한다는 점으로 크기면에서 장점이 없다.
  === 래이 캐스팅 ===
   * "스프라이트", "렌더링", "래이 트레이싱" 의 내용을 골고루 수용한 형태의 기법을 말한다.
   * 빛의 색보다는 빛의 위치에 따른 객체의 높이를 처리하는 것이 이 방법의 주요 내용이다.
 == 래이 캐스팅 기법 ==
  * 큐브 (Cubes) : Map을 구분지어서 하나의 구역으로 잘라서 사용하는 방법을 선호한다.
  * 시점 : 사용자가 보는 시점의 각도는 구현하기 나름이지만 필자의 경험상 좌<->우, 상<->하간의 각도는 60도로 구현하는것이 사용자의 눈이 어지럽지 않을듯 하다.
  * 객체크기 : 당연한 내용이지만 가까울수록 객체의 크기는 커진다. (가까울수록 실제 모델링의 크기와 같아진다.)
                여기서 모델링의 크기는 너무 크게 하면 별로 속도면에서 이로울수 없으므로 약 1/2정도의 크기로 모델링하고 최고로 가까운 시점에서는 2배크기로 확대하여 그리면 속도면에서 이로운 점이 많다.
  * 빛의 방향 계산 및 반사각도에 관한 수학적 기초지식 (머리속으로 세부적인 사항은 그려보자. 그냥 따라만 하지 말고)
   {{{
     ------------------------------------------------------------ (벽:Wall)
                              /|
                             / |
                        (c) /  | (b)
                           /   |
                          /    |
                  <User> +-----+ <Object> ------------------------ (연장선 : degree)
                           (a)
}}}
  * 위와 같이 사용자시점(User) 과 벽(Wall) 그리고 해당 기준 객체(목표물: Object)에 대한 관계는 삼각함수를 적용할수 있다.
  * tan = b/a, cos = a/c, sin = b/c
  * c^2 = a^2 + b^2
  * X 반경 = X의 중심점 + cos(각도) * Radian
      Y 반경 = Y의 중심점 + sin(각도) * radian
  * 모든 객체는 빛의 근원으로 표현될수 있고 해당 물체에 대한 표현은 사용자 관점의 빛과 실제 햇볕을 나타내는 빛의 조합으로 나타낼수 있을것이다.
      모든 빛은 반사 및 감쇄작용을 하며 이를 구현하는 것은 필자가 설명하지 않아도 이 글을 읽는 독자라면 이미 알고 있을것이다.
  * 3D를 구현하는데 있어서 부동소수점의 연산은 정말로 속도에 큰 영향을 받는다.
      이를 회파하기 위해서는 공통점을 많이 찾아야 하고 자주 계산되는 작업은 미리 계산하여 만들어둔 테이블로 만들어 두는것이 당연한 예기가 될것이다.
      특히 삼각함수는 소수점 2자리까지만 만들어두면 정말로 좋을것이다. 미세하지 않아도 된다면 정수로만 테이블을 만들어 두어도 큰 영향이 없다.
  * CPU를 사용하는 계산은 되도록이면 피해야 한다. 그렇지 않으면 실제 객체를 운영하는 묘를 살리기 어렵다. 
      때문에 FPU를 최대한 활용해야 하고 어셈블리로 구현하는것이 실보다 득이 많다. 
      그리고 그래픽 가속기능에 대해서 보다 폭 넓은 지식이 필요하다. 간단히는 Blit함수를 최우선으로 최적화 해야 한다. 여기서 MMX에 대한 이용도 고려해보면 좋을듯 하다. 어쩌면 필수일지도...
 == 문서를 마치면서 ==
  * 이 문서에서 틀린 부분이나 고쳐야 할부분이 있으면 꼭 알려주십시요.
 == 저작권 ==
  * 본 문서는 [http://www.gnu.org/licenses/fdl.html GFDL]의 라이센스를 기반으로 작성되었고 유지됩니다.
