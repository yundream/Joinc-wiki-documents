#title linux man page : mmap - 파일이나 장치를 메모리에 대응시킨다. 

{{{#!html
<HTML
><HEAD
><TITLE
>mmap(2)</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.76b+
"><META
http-equiv="Content-Type"
content="text/html; charset=euc-kr"></HEAD
><BODY
CLASS="CHAPTER"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="CHAPTER"
><H1
><A
NAME="AEN1"
>1&#51109;. mmap(2)</A
></H1
><DIV
CLASS="TOC"
><DL
><DT
><B
>&#52264;&#47168;</B
></DT
><DT
>1.1. <A
HREF="#AEN4"
>사용법</A
></DT
><DT
>1.2. <A
HREF="#AEN8"
>설명</A
></DT
><DT
>1.3. <A
HREF="#AEN54"
>반환값</A
></DT
><DT
>1.4. <A
HREF="#AEN57"
>에러</A
></DT
><DT
>1.5. <A
HREF="#AEN86"
>예제</A
></DT
><DT
>1.6. <A
HREF="#AEN90"
>참고문헌</A
></DT
></DL
></DIV
><P
>	파일이나 장치를 메모리에 대응시키거나 푼다.</P
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN4"
></A
>1.1. 사용법</H1
><P
>		<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;unistd.h&#62;
#include &#60;sys/mman.h&#62;

#ifdef _POSIX_MAPPED_FILES
void * mmap(void *start, size_t length, int prot, int
        flags, int fd, off_t offset);
int munmap(void *start, size_t length);

#endif
		</PRE
></TD
></TR
></TABLE
>
	</P
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN8"
></A
>1.2. 설명</H1
><P
>		mmap() 함수는 <B
CLASS="EMPHASIS"
>fd</B
>로 지정된 파일(혹은 다른 객체)에서
		<B
CLASS="EMPHASIS"
>offset</B
>을 시작으로 <B
CLASS="EMPHASIS"
>length</B
>바이트
		만큼을 <B
CLASS="EMPHASIS"
>start</B
>주소로 대응시키도록 한다. start주소는 
		단지 그 주소를 사용했으면 좋겠다는 정도로 보통 0을 지정한다. mmap는
 		지정된 영역이 대응된 실제 시작위치를 반환한다. 
		<B
CLASS="EMPHASIS"
>prot</B
>인자는 원하는 메모리:::보호모드(:12)를 설정한다. 
		사용할 수 있는 비트는 다음과 같다. 
		<P
></P
><DIV
CLASS="VARIABLELIST"
><DL
><DT
>PROT_EXEC</DT
><DD
><P
>					페이지는 실행가능하다.
				</P
></DD
><DT
>PROT_READ</DT
><DD
><P
>					페이지는 읽을 수 있다. 
				</P
></DD
><DT
>PROT_WRITE</DT
><DD
><P
>					페이지는 쓰여질 수 있다. 
				</P
></DD
><DT
>PROT_NONE</DT
><DD
><P
>					페이지는 접근할 수 없다. 
				</P
></DD
></DL
></DIV
>	
		<B
CLASS="EMPHASIS"
>flags</B
>는 대응된 객체의 타입, 대응 옵션, 대응된 
		페이지 복사본에 대한 수정이 그 프로세스(:12)에서만 보일 것인지 아니면, 
		다른 참조하는 프로세스와 공유할 것인지를 설정한다. 다음과 같은 비트들을
		사용할 수 있다. 
		<P
></P
><DIV
CLASS="VARIABLELIST"
><DL
><DT
>MAP_FIXED</DT
><DD
><P
>					지정된 주소 이외의 다른 주소를 선택하지 않는다.
					지정된 주소가 사용될 수 없다면 mmap()는 실패한다. 
					만일 MAP_FIXED가 지정되면, <B
CLASS="EMPHASIS"
>start</B
>는
					페이지 크기의 배수이어야 한다. 이 옵션은 사용하지 않는 것이
					좋다.
				</P
></DD
><DT
>MAP_FIXED</DT
><DD
><P
>					지정된 주소 이외의 다른 주소를 선택하지 않는다.
					지정된 주소가 사용될 수 없다면 mmap()는 실패한다. 
					만일 MAP_FIXED가 지정되면, <B
CLASS="EMPHASIS"
>start</B
>는
					페이지 크기의 배수이어야 한다. 이 옵션은 사용하지 않는 것이
					좋다.
				</P
></DD
><DT
>MAP_SHARED</DT
><DD
><P
>					대응된 객체를 다른 모든 프로세스와 공유한다.
				</P
></DD
><DT
>MAP_PRIVATE</DT
><DD
><P
>					개별적인 copy-on-write(:12) 대응을 만든다.(다른 프로세스와 
					대응 영역을 공유하지 않는다).
				</P
></DD
></DL
></DIV
>	
		위의 3개의 플래그는 POSIX.1b에 규정되어 있다. 리눅스는 MAP_DENYWRITE,
		MAP_EXECUTABLE, MAP_ANON(YMOUS)도 지원한다. 
	</P
><P
>		munmap() 는 지정된 주소 공간에 대한 대응을 푼다. 범위내의 주소에 대한
		참조 계수를 늘려서 유효하지 않은 메모리 참조로 만든다. 
	</P
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN54"
></A
>1.3. 반환값</H1
><P
>		성공시, mmap()는 내응된 영역의 포인터(:12)를 반환한다. 
		에러시에는 -1(MAP_FAILED)이 리턴되며, errno는 적당한 값으로 
		설정된다. munmap()는 0을 리턴하며, 실패시 -1이 리턴되며, errno가 
		설정된다. 
	</P
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN57"
></A
>1.4. 에러</H1
><P
>		<P
></P
><DIV
CLASS="VARIABLELIST"
><DL
><DT
>EBADF</DT
><DD
><P
>	
					<B
CLASS="EMPHASIS"
>fd</B
>가 유효한 파일 기술자가 아니다.
				</P
></DD
><DT
>EACCES</DT
><DD
><P
>	
					MAP_PRIVATE가 설정되어 있지만 fd가 읽을 수 있도록 열려
					있지 않다. 또는 MAP_SHARED와 RPOT_WRITE가 설정되어 있지만
					fd가 쓸 수 있도록 열려있지 않다. 
				</P
></DD
><DT
>EINVAL</DT
><DD
><P
>	
					start나 length나 offset이 적당하지 않다. 보통 너무 크거나
					PAGESIZE 경계로 정렬되어 있지 않을 경우.
				</P
></DD
><DT
>ETXTBUSY</DT
><DD
><P
>	
					MAP_DENYWRITE가 설정되어 있으나 fd로 지정된 객체가 
					쓰기 위해 열려있다.
				</P
></DD
><DT
>EAGAIN</DT
><DD
><P
>	
					파일이 잠겨 있다.
				</P
></DD
><DT
>ENOMEM</DT
><DD
><P
>	
					사용할 수 있는 메모리가 없다.
				</P
></DD
></DL
></DIV
>	
	</P
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN86"
></A
>1.5. 예제</H1
><P
>		<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;stdio.h&#62;
#include &#60;string.h&#62;
#include &#60;errno.h&#62;
#include &#60;sys/types.h&#62;
#include &#60;sys/stat.h&#62;
#include &#60;sys/mman.h&#62;
#include &#60;unistd.h&#62;
#include &#60;fcntl.h&#62;

int main(int argc, char **argv)
{
    int fd;
    char *file = NULL;
    struct stat sb;
    char buf[80] ={0x00,};
    int flag = PROT_WRITE | PROT_READ;

    if (argc &#60; 2)
    {
        fprintf(stderr, "Usage: input\n");
        exit(1);
    }

    if ((fd = open(argv[1], O_RDWR|O_CREAT)) &#60; 0)
    {
        perror("File Open Error");
        exit(1);
    }

    if (fstat(fd, &#38;sb) &#60; 0)
    {
        perror("fstat error");
        exit(1);
    }

    file = (char *)malloc(40);

    // mmap를 이용해서 열린 파일을 메모리에 대응시킨다.
    // file은 대응된 주소를 가리키고, file을 이용해서 필요한 작업을
    // 하면 된다.
    if ((file =
        (char *) mmap(0, 40, flag, MAP_SHARED, fd, 0)) == -1)
    {
        perror("mmap error");
        exit(1);
    }
    printf("%s\n", file);
    memset(file, 0x00, 40);
    mnumap(file);
    close(fd);
}
		</PRE
></TD
></TR
></TABLE
>
	</P
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN90"
></A
>1.6. 참고문헌</H1
><P
>		<P
></P
><OL
TYPE="1"
><LI
><P
>			<A
HREF="http://www.joinc.co.kr/modules/moniwiki/wiki.php/Site/system_programing/IPC/memory_map"
TARGET="_top"
>메모리맵의 사용</A
><LI
><P
>			<A
HREF="http://www.joinc.co.kr/modules/moniwiki/wiki.php/Site/system_programing/Book_LSP/ch08_IPC"
TARGET="_top"
>리눅스 시스템 프로그래밍 8장 IPC</A
>

			</P
></LI
></OL
>
	</P
></DIV
></DIV
></BODY
></HTML
>
}}}
