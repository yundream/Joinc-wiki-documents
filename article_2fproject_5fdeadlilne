'''프로젝트 데드라인'''

[[TableOfContents]]

=== 1부. 사람, 조직 그리고 체계 ===

====  1장. 훌륭한 사람과 그들을 찾아내는 방법 ====


'''훌륭한'의 정의'''

  * 전문 지식
      특정 분야의 기술 적인 전문 지식이 있어야 한다. 기술 문서 작성자가 필요하다면, 교육적인 소재를 창작할 수 있는 전문 지식이 있는 사람이어야 한다. 품질 보증 엔지니어를 고용하고 싶다면, 자동 테스트 및 테스트 기술에 대한 경험이 있는 사람이어야 한다.
  * 헌신
  * 태도
  * 행동
  * 팀워크
  * 지식에 대한 탐구욕
  * 훌륭한 사람과 완벽한 사람: 완벽한 사람은 없으므로 지원자의 성장 가능성도 검토해봐야 한다.
  * 잘못된 선택의 영향
    1. 업무를 확실히 끝내지 못하는 무능력
    1. 팀 내의 고립
    1. 떨어지는 팀의 사기와 활력
    1. 기술 변화에 의한 도태
  * 재정적 영향
  * 잘못된 채용을 했을 때 생기는 장기적 영향
    1. 낮은 생산성
    1. 품질과 세부적인 사항에 대한 부주의
    1. 제품의 늦은 출시
      대부분 팀원의 능력 때문에 발생

'''훌륭한 지원자를 찾아내고 발굴하기'''

  * 채용 웹사이트
    인터넷은 가장 중요한 채용 방법으로 부각
  * 회사 홈페이지
    기업 광고외 유망한 인재를 끌어 모으는 데 사용
  * 지원자들을 끌어 모으기
  * 채용 정보 전달
  * 추천
    소규모 기업이나 벤처 기업에 특히 필요한 채용 방법, 비용이 적게 들며, 능력 있는 사람을 채용하는 데 가장 확실한 방법
  * 채용 전문 기업
    가장 고전적인 방법 요구 조건을 만족시키는 사람을 찾기 위해 누군가(채용 전문가)에게 비용을 지불해야 한다.
  * 대학
    학교에서는 능력 있는 졸업 예정자를 정규 직원으로 자주 추천 아르바이트와 인턴 사원에 대한 학교의 추천 받기
  * 광고와 취업 박람회
    가장 오래된 방법 신문 광고는 비용이 매우 많이 든다. 많은 지원자들의 이력서를 모집할 수 있는 반면에, 자격 미달의 지원들이 많이 모일 수 있다는 단점이 있다.
  * 전시회
  * 스카우트
    어떤 기업은 스카우트를 하는 채용 담당자를 고용하기도 한다.
  * 특별한 경우
    회사 휴업이나 정리 해고등으로 이직을 원하는 사람을 뽑는 경우    

'''어떤 방법이 최고의 방법인가'''

소규모의 벤처 기업은 인터넷이나 추천을 주로 이용하면 비교적 저렴하고 간편하며, 가장 효율적이다. 중요한 건 중요 채용 방법들에 대해 지속적이고 헌신적인 노력을 기울여야 한다는 것이다.

==== 2장. 이력서, 면접 그리고 유지 ====

이력서를 검토하고 좋은 지원자들을 찾아낼 수 있는 능력을 키워야 한다.

'''이력서 검토하기'''

  * 경험(전문 지식)의 정도
  * 헌신도
  * 과거에 일했던 화사에 대한 정보(태도, 팀워크)
  * 강한 동사와 약한 동사(행동)
  * 책임영역(행동, 팀워크)
  * 문서 작성 능력(팀워크)
  * 경험의 폭(탐구욕)

이력서는 단지 면접 대상자를 고르는 데 필요한 정보만을 줄 뿐이다. 지원자에 대해 더 알고 싶은 경우와 만나고 싶지만 그럴 수 없을 경우에 전화 심사를 한다.

'''지원자 면접하기'''

  * 면접 팀
    함께 일할 사람을 면접에 참여시킨다.
  * 중요 주제
  * 전문 시작 평가
    기술 주임이나 기술 전문가를 면접에 참여시킨다
  * 중요 질문
    지원자의 경험에 초점이 맞춰진 내용(완벽하지는 않지만 1장에서 얘기한 '훌륭한' 사람의 조건들), 지원자가 실제 상황에서 어떻게 일하는 사람인지를 파악한다.
  * 피드백과 면접을 종료하기
    면접에 맞지 않는 지원자라는 확신이 든다면 과감히 면접을 종료시켜야 한다. 여러분이나 지원자의 시간을 낭비시키는 일은 서로에게 아무런 도움이 안되기 때문이다.
  * 지원자 테스트
    지원자가 어려운 문제들을 어떻게 해결해 나가는지 확인하기 위해 충분히 복잡한 문제를 제시해야 한다. 테스트에 대한 지원자의 반응을 살펴야 하지 테스트 자체가 중요한게 아니다.          
  * 작업 샘플
  * 홍보
    회사와 업무 그리고 작업 환경이 지원자에게 얼마나 잘 맞는지 조리 있게 설명해줘야 한다. 연봉과 복지에 관한 내용은 홍보 문구에 포함되지 않는다는 것을 주의하라.(이것은 보상제도에 해당)
  * 결정
    모든 사람의 의견을 수렴해야 한다.
  * 협상 담당자
    지원자의 마음에 남아 있는 의문점이나 망설임을 해소시켜주어, 채용 협상을 능숙하게 마무리하는 사람
  * 입사 제의
    항상 최고만을 채용한다는 사실을 명심하라. 합리적인 기본 연봉과 성과에 대한 인센티브를 제공하는 보상 제도를 제시하라.
  * 추가 연락
    능력 있는 사람은 많은 구직 기화가 있으므로 입사 제의를 성사시키기 위해 노력해야 한다. 지원자와 연락이 단절되어서는 안 되며, 입사 제의 후 며칠 안에 상대방으로부터 연락이 없다면, 반드시 추가 연락을 해야 한다.
  * 지원자가 입사 제의를 거절할 때 해야 할 일
    지원자가 왜 제의를 거절했는지 확실히 이해해야 한다. 하지만 고민 없이 지원자가 바라는 대로 더 나은 제의를 해서도 안된다.

'''인재 유지하기'''

최고의 인재를 채용하는 것 이상으로 유지하는 것이 역쉬 중요하다.
  * 직업 의식 만족
    시간이 지날수록 새로운 일에 참여할 수 있는 환경을 만들어야 한다. 즉, 직원들에게 새로운 도전과 사람 그리고 새로운 기술을 접할 수 있는 기회를 주어야 한다. 팀원들의 경력 목표를 파악하고, 그에 맞게 경력을 쌓을 수 있는 기회를 줘야한다.
  * 재정적 보상
    보수는 사람들이 이직하는 주요 이유가 아니라는 산업 연구 결과가 있으나 능력 잇는 사람에게 높은 보수를 주어야 하는 것 역쉬 부정할 수 없는 사실이다. 보상 제도: 기본 연봉(동종 업계 최고의 대우), 특별 보너스, 장기적인 옵션(스톡 옵션) 다양한 보상 방법들로 직원들을 소중히 다룬다면, 돈 때문에 사람을 잃을 가능성은 휠씬 낮아진다.
  * 사회적 지원
    훌륭한 사회적 환경을 갖춘 근무 공간은 사람들을 유지하는 데 놀라운 효과를 발휘

    예) 사외 활동

실제적인 효과를 얻으러면 위의 세 가지 조건 중 하나라도 소홀히 해서는 안 된다.
            
==== 3장. 프로젝트 조직 ====
'''누메가의 조직'''
팀이 수행할 업무 분야 리스트

  * 핵심 개발 팀
    1. 프로젝트 관리
    1. 소프트웨어 개발
    1. 품질 보증
    1. 사용자 교육
    1. 인지 공학
    1. 릴리즈 엔지니어링
    
  * 지원 팀
    1. 제품 관리와 마케팅
    1. 소프트웨어 지원
    1. 베타 관리

  * 관리: 촉박한 기한 내에 부족한 자원으로 많은 업무를 해갈 수 있도록 효율적인 조직을 구성해야 했다. 모든 인재들은 프로젝트를 관리하는 한 사람이 관리하였다.
    1. 유연한 자원 이용
    1. 자원의 소유권
    1. 중앙집권적인 결정
    1. 더 명확안 대화 방법들
    1. 비지니스적 책임

  * 주임
    각 업무 분야에 지정했고, 각자의 방식으로 리더쉽을 발휘 그림) 프로젝트 관리자와 각 업무 분야 주임과의 관계 프로젝트 관리자: 개발 주임, 품질 보증 주임, 사용자 교육 주임, 인지 공학 주임, 릴리즈 엔지니어링 주임
        
'''역할과 책임'''

   * 프로젝트 관리자: 프로젝트의 핵심적인 역할을 수행
    1. 채용과 인사 관리
     팀을 구성하고 관리
    1. 프로젝트 계획을 정의하고 실행하기
     제품의 기능을 구현하는 책임, 스케줄 전체를 관리
    1. 팀을 리드하기
     성공을 위해 장애물을 제거, 팀에 필요한 모든 것을 제공하는 파수꾼
     문제점을 빨리 파악하여 해결책을 신속하게 제시
    1. 팀 간의 대화 창구
    1. 제품 출시 보장
   
   * 개발 엔지니어링

    1. 개발 주임
     소프트웨어 개발 과정에 직접적인 역할을 담당
     충분한 경험과 연륜이 반드시 있어야 한다.
    1. 기능 주임
     제품의 특정 기능 개발을 책임을 진다.
     특정 기술을 주로 사용하거나 그 기술을 바탕으로 작업하게 된다.
    1. 소프트웨어 엔지니어
     한 사란의 기능 주임의 지도 아래 기능을 개발

    그림) 개발 주임, 기능 주임 그리고 소프트웨어 엔지니어와의 관계

   * 품질 보증(QA)
    프로젝트의 테스트 계획을 정의하고 실행하는 책임을 진다.
    개발 팀과 함께 작업을 병행해야 한다.
    소프트웨어의 품질에 독립적인 권한을 행사할 수 있다.

    그림) QA와 개발의 관계

    1. QA 주임
     개발 과정 내내 품질 보증 계획을 정의하고 실행하는 책임을 지며,
     수준 높은 QA 기술과 QA 팀을 관리하고 지도할 수 있는 능력이 있어야 한다.
     * 제품의 테스트 계획을 정의하고 유지하기
     * 테스트 계획을 실행하기
     * 테스트 프로그램(test beds)을 자동화시키기
     * 회귀테스트(regression test)를 수행하기
     * 테스트 도구와 측정 기준 그리고 표준들
    1. 자동화 엔지니어 
     테스트 계획에 정의된 대로 테스트 프로그램을 자동화시키는 역학을 한다.
    1. QA 전문가
     QA 주임이 정해준 대로 테스트 계획을 실행할 책임이 있다.

   * 사용자 교육
    사용자에게 온라인 자료를 제공한다.
    교육 자료: 하드 카피 문서, 온라인 도움말, 튜토리얼, 퀵 레퍼런스 카드 

    1. 사용자 교육 주임
     제품에 대한 전체적인 문서 작성 계획을 만들 책임이 있다.
     문서 작성 기준을 정의하고, 제품이 최신의 문서 작성 규칙이나 문서 작성 기술에 뒤져치지 않도록 만들어야 한다.
    1. 사용자 교육 전문가
     제품의 기능이나 완성물이 가지고 있는 사용성 문제와 불일치 문제를 다른 사람보다 먼저 발견해내기도 한다.
     문제가 발견되면 그에 대한 해결책을 피드백으로 제공하는 역할을 한다.
     새로 구현된 기능을 문서로 정확히 작성
     거의 매일 제품을 사용해야 한다.
     소프트웨어의 품질에 대한 매우 실제적인 조언을 제공한다.

   * 인지 공학
    'Out of the Box' 경험
    제품의 요구 사항을 사용자가 실행해야 하는 기본적인 작업들로 변형시키는 책임을 졌다.
    그리고 이런 작업들을 사용자 인터페이스 모델로 다시 변형시켰다.

   * 릴리즈 엔지니어링
    개발 모델을 실제로 작동할 수 있도록 만드는 데 필요한 기본적인 서비스들을 제공한다.
    1. 제품 전용 빌드 환경을 구축하고 유지하기
    1. 설치 과정을 구축하기 유지하기
    1. 소스 코드 관리 시스템을 유지하고 관리하기

   * 제품 관리와 마케팅
    엔지니어링 팀의 입장에서 볼 때, 제품 관리 팀과 마케팅 팀은 '입력'과 '출력'의 두가지 역할을 수행한다.
    
    입력의 측면: 시장 요소와 비지니스 요구사항, 그리고 제품 요구 사항을 정의한다.
    출력의 측면: 엔지니어링 팀은 제품 관리 팀과 마케팅 팀으로부터 지원을 받아 제품을 외부에 선보인다.
   
   * 기술 지원
    제품 출시 이후에 가장 빈번하게 소비자와 부딪히는 업무를 한다.
    그리고 개발 팀을 대표하여 매일 소비자와 접촉한다.

   * 베타 프로그램 관리자 
    베타 프로그램에 대한 계획과 관리 그리고 실행을 수행할 책임이 있다.
   
==== 4장. 서열과 문화 ====
기여도에 따라 팀원들을 평가하는 서열 제도는 조직에 매우 중요한 역할을 한다.
기술적인 능력이나 근무 연수보다는 기여도에 따른 직원의 서열이 중요하다.

'''서 열'''

   * 서열을 정하는 방법
    간단하게 운영되어야 한다.

    * 핵심 그룹
     회사에 가장 중요한 사람들
     가장 상급자이고, 가장 능력이 있으며, 가장 믿을 만한 팀원
    * 중간 그룹
     주목받는 신예들로 구성된다.
     프로젝트의 성공에 매우 중요한 역할
     기대 이상의 성과를 올리는 사람들은 아니다.
    * 외부 그룹
     대다수의 사람들로 구성된다.
     핵심 인재가 되기 위한 준비 기간과 자신의 능력을 다른 사람에게 입증할 수 있는 시간을 필요로 한다.

   * 서열을 사용하는 이유
    1. 지속적인 기여도 인식
    1. 혜택 제공 또는 한정된 자원
    1. 보상 관리
    1. 인재 관리
     이직이 핵심 그룹이나 중간 그룹에서 발생한다면, 심각한 문제에 직면하게 된다.
    
   * 서열을 부적절하게 사용하는 경우
    서열로 인해 팀들이 서로 떨어지거나 적대적인 분위기가 생겨서는 안된다.
    또한 자기과시 분위기가 팀 내에 만연해서도 안된다.
    우월감이 팀워크를 깨뜨릴 수 있다.

   * 투자한 만큼 얻는다.
    불어난 해택은 그만큼의 책임을 불러오지만 혜택과 책임은 동일한 수준으로 유지되어야 한다.
   
   * 행동이 변할 때
    * 핵심 그룹 멤버의 행동이 외부 그룹처럼 변하기 시작하면
     토론을 하여 성능 저하에 대한 구체적인 세부 정소블 제시하여 해결해야 한다.
    * 새로운 직원이 모든 사람을 능가할 정도의 능력을 발휘한다면
     그 능력을 확실히 검증하는 것이 중요하다.

   * 지향점  
    최종적인 목표는 모든 사람을 핵심 그룹으로 만드는 것이다.
    하지만 현실적인 최선의 상황은 핵심 그룹 멤버를 모자라지 않게 지속적으로 유지하는 것이다.

'''문 화'''

   소프트웨어 개발에서의 문화는 소프트웨어 개발 과정을 이끄는 행동 및 신념과 관련이 있다.
   문화는 먼저 규범과 조직의 경영과 리더십의 실행에 의해 형성된다.

   * 문화가 왜 중요한가
    문화는 팀이나 개인이 자신의 목적, 중요성, 재능, 업무 수행 능력 등을 스스로 인식하고 있는 것과 같다. 문화는 팀의 전반적인 수행 능력의 촉매제가 될 수도 있고, 방해물이 될 수도 있다.
   * 어떻게 여러분만의 문화를 만들 수 있는가
    문화를 만들기 위한 최선의 방법은 정해진 규칙들과 그에 따라 앞으로 하게 될 행동들을 충실히 수행하겠다는 약속을 확실히 하는 것이다.

   * 문화와 프로세스들
    신생 회사들은 때때로 프로세스를 도입하는 것을 매우 싫어하는 반면에, 큰 규모의 회사들은 어떤 일을 끝내기 위한 목적으로 프로세스를 사용한다. 조직이 커질수록, 새로운 프로세스를 어떻게 도입할 것인지에 대해 고민해야 한다.

    1. 비용 대 이익을 분석하라
     투자 비용만틈의 가치가 있는지 확실히 할 필요가 있다.
    1. 새로운 프로세스를 추가하기 이전에 현재 가지고 있는 것부터 잘 지켜라
     관리자와 주임은 팀이 현재의 프로세스를 잘 지키게 만들 책임이 있다.
    1. 다수의 요구와 소수 또는 한 사람의 요구를 저울질하라
     비용/이익을 신중하게 분석해야 한다.

==== 5장. 소프트웨어 도구 ====
도구들을 상황에 맞게 바꿔 적절히 사용함으로써 개발 과정의 효율을 높일 수 있다. 저자가 뉴메가에서 근무하면서 프로젝트 실행시 사용했던 소프트웨어 도구 및 그 사례를 설명하였다.

'''소스 코드 관리'''

소스 코드는 프로젝트에서 두 번째로 중요한 자원이다(물론 가장 중요한 것은 팀이다). 개발 과정 내내 소스 코드의 변경 사항을 제어하고 확인하며, 반영하고 검토하는 일을 해야 한다.
  
   * 소스 코드 관리란 무엇인가
    1. 파일과 버전별 내용을 각각 정의하기
    1. 각 파일의 변경 사항 히스토리를 유지하기
     예) ChangeLog, History
    1. 관련 파일을 분류하기
    1. 특정 소프트웨어의 릴리즈와 관련된 파일에 라벨 달기
    1. 파일에 대한 접근을 차단하고 허용하기
     예) CVS

   * 내부적으로 어떤 일을 하는가
    소프트웨어 개발에서 가장 골치 아픈 일 중 하나는 프로젝트와 관련된 모든 파일과 정보를 어디에 저장할 지 고민하는 것이다.
    문서 관리 솔류션의 사용이나 소스 코드 관리 시스템을 이용한다.

    모든 파일과 정보 리스트
     1. 소스 파일
     1. 헤더 파일
     1. 라이브러리 파일
     1. 빌드 스크립트
     1. 컴파일러 이미지
     1. 링커 이미지
     1. 설치 도구와 파일
     1. 테스트 도구와 파일
     1. 프로젝트 스펙
     1. 프로젝트 계획(소프트웨어, 문서 그리고 테스트)
     1. 사용자 문서
     1. QA 테스트 스크립트와 테스트 프로그램
     1. 개발자 단위 테스트

    소스 코드 외에 다른 모든 것들도 소스 관리 시스템에 둘 수 있다.

   * 왜 하는가
    장점
     1. 원하는 파일을 쉽게 찾을 수 있다.
     1. 소스 코드 관리의 이릭을 극대화 시킨다.
     1. 프로젝트의 빌드 환경을 견고하게 유지할 수 있다.
     1. 프로젝트의 개발 환경을 동일하게 유지할 수 있다.
     1. 프로젝트의 백업이 용이해진다.

   * 개발 처리 능력은 어떠한가

   * 어떻게 관리하는가
    소프트웨어 개발 프로젝트를 관리하면서 생기는 가장 큰 어려움 중 하나는 프로젝트의 복잡성을 제어하는 것이다.
    그 중 소스 코드와 설정 관리는 가장 다루기 어려운 요소다.

    예) MS사의 VSS(Visual Source Safe)
 
    * 구조 개념
     파트와 제품
     파트: 소프트웨어 '제품'을 빌드하기 위해 사용되는 컴포넌트
     제품: 소비자에게 판매되는 최종 패키지(특정 파트와 파일이 모여 제품을 구성)

    * 소스 풀 구조와 사용법
     1. 제품명: 제품 관련 파일
      제품을 빌드하고, 테스트하고, 문서를 작성하는 데 필요한 모든 자체 제작 파일들을 저장
     1. 환경: 개발 환경 파일
      제품 개발을 지원하는 파일을 저장
     1. 외부: 써드 파티 파일
      써드 파티 제품인 도구와 파일을 저장

    * 빌드 시스템
     제품을 빌드하는 스크립트를 작성
     제품의 컴파일에는 대중적인 빌드 관리 도구인 nmake를 사용했다.
     빌드 스크립트
      소프트웨어의 특정 비전을 빌드하는 역할을 하기 위해 빌드 라벨을 입력 값으로 받았다.
      공통 환경 변수와 매크로 사용
      빌드 환경의 자동화 및 안정적으로 유지
      예) Makefile로 빌드 및 설치 자동화 

'''이슈 및 문제 관리'''

소프트웨어 개발은 동적이고 커뮤니케이션 집약적인 프로세스다. 프로젝트에 투입되는 팀은 발생하는 문제와 이슈, 버그들을 관리하고 해결하기 위한 공식적인 방법이 필요하다.

   * 이슈 및 문제 관리란 무엇인가
    팀원들이 프로젝트 개발 과정 동안 입수한 모든 정보를 기록하고, 수정하고, 지정하고, 우선 순위를 정하고, 분류하고, 그리고 검토할 수 있도록 만들어준다.
    해결해야 하는 모든 이슈와 문제들은 완벽하게 자세히 기억할 수 있는 사람은 아무도 없다.
   * 내부적으로 어떤 일을 하는가
    프로젝트의 모든 데이터를 저장하기 위해 이슈 및 문제 관리 시스템을 사용
    이메일을 보내는것이 잘못된 일은 아니지만, 시스템에 기록하지 않는 것은 잘못된 일이다.
   * 어떻게 작동하는가
    팀원들 간에 발생하는 기본적인 정보 교류를 어떻게 자동화시킬지 이해해야 한다.
    기본 프로젝트 데이터를 수집하도록 시스템을 설정하라.
    1. 버그와 이슈에 대한 하나의 소스
     윈칙: '모든 버그와 이슈들은 버그 추적 시스템에 기록되어야 한다'
     따라서 시스템에 기록되지 않는 버그는 존재하지 않는 것이라 가정한다.
     문제를 기록함으로써 얻을 수 있는 또 다른 장점은 문제를 보고하는 능력을 가지는 것이다.
    1. 변경 사항 관리
    1. 시간 기준 우선 순위 사용
    1. 버그 확인 및 수정
     QA가 하는 일 중 가장 중요한 작업 중 하나는 소프트웨어의 버그가 실제로 고쳐졌는지 검증하는 일이다.  
     QA가 버그를 검증한 후에는 QA 엔지니어가 버그의 상태를 '종결'로 설정해야 한다.
    1. 릴리즈 노트 포함
     예) ReadMe
     공식적인 문서에 작성되지 않은 알려진 문제나 개선점, 최신 정보들을 포함시켰다.
    1. 일반적인 질의 사용
   
   * 고급 활용
    이슈 및 문제 데이터베이스에 저장된 정보를 다른 중요한 목적으로 사용하는 방법
    시간에 따라 어떤 일이 발생하고 있는지 파악하는 능력이 있어야 한다.

    1. 발생률과 완료율
     발생률: 일정 기간 동안 얼마나 많은 버그와 이슈들이 기록되었는지를 측정하는 수단이다.
     완료율: 얼마나 많은 버그와 이슈들이 해결되었는지를 측정하는 수단이다.
    1. 변경률
     동일한 문제를 얼마나 많이 수정되었는지 측정하는 수단으로 사용한다.
    1. 수정 실패 횟수

  '''고급 도구들'''

   * 디버거
    예) SoftICE: 매우 강력한 윈도우 디버거
   * 성능 분석과 연산 범위 분석 도구
    예) TrueTime, TrueCoverage
    코드에 숨겨져 있는 설계 문제를 발견해 낼 수 있다.
   * 스크립팅과 테스트 자동화 도구
    예) 펄(Perl), DOS 배치 파일, Visual Test
    대부분의 자동화 작업에는 스크립팅 도구가 사용되었다.

==== 6장. 품질 보증의 기초 ====
제품의 품질과 제품을 출시하는 데 걸리는 시간과의 균형을 효과적으로 유지하는 것이 필요하다. 오늘날 대부분의 소프트웨어 프로젝트는 시간과 자원이 부족한 환경에 처해 있으므로 시간과 자원이 부족한 환경에서 갖추어야 할 QA의 필수 요소를 설명한다.

'''원 리'''

핵심 내용은 제품을 개발하면서 품질을 함께 완성해 가는 것이다. 품질을 나중에 해결할 수 있는 문제가 아니다. 나중에 해결할려면 그에 따른 많은 비용과 노력, 시간 지연이 필요하다.

   * 테스트를 병행하기
    문제를 일찍 알아낼수록, 더 빨리 해결할 수 있다. 개발자들은 코딩과 단위 테스트를 담당하지만, QA 팀은 시간이 허락하는 한 최대한 철저하게 기능 테스트를 수행한다. 개발자와 QA 엔지니어 모두 기능을 완성시키기 위해 서로 협력해야 한다는 사실을 확실히 인식하고 있어야 한다. 현재의 기능이 완성되고, 안정화될 때까지 다음 스케줄의 기능을 개발해서는 안된다. 또한 기능 팀의 역량보다 많은 기능의 개발을 시도해서는 안 된다.
   * 안정화와 통합
    작은 버그나 지나치게 상세한 문제에 집작해서는 안 된다. 안정화와 통합 기간은 현재 스케줄의 진척도를 측정할 수 있는 기회를 제공한다.
   * 자동화
    테스트를 개발과 함께 병행하기 위한 핵심적인 방법 중에 하나는 테스트를 최대한 자동화시키는 것이다.
    1. 내부 테스트 과정 감소
     자동화는 테스트를 개발과 함께 병행할 수 있는 유일한 최선의 방법이다.
    1. 노동 비용 감소
    1. 개발 과정에서 뒤늦게 변경된 사항 검증
    1. 릴리즈에 대한 테스트 범위를 지속적으로 제공
     새롭게 릴리즈를 할 때는 이전 릴리즈가 가지고 있던 기능이 여전히 잘 작동하는지 반드시 확인해야 한다.
   
    단점
     1. 유용한 테스트 프로그램을 만들려면 많은 시간을 할애해야 한다.
      시간과 노동 비용이 들더라도 자동화 엔지니어를 보유하여 자동화된 테스트 프로그램 작성을 전담시킨다.
     1. 자동화를 다음 릴리즈, 즉 여러 릴리즈에 적용할 수 있도록 지원하는 비용
      UI 테스트는 테스트 스크립트로 테스트 하기 힘드므로 자동화는 제품의 UI가 아닌 기능에 초점이 맞춰져야 한다.
      즉, 핵심 기능 테스트의 자동화에 집중해야 한다. UI 테스트를 자동화하고 싶다면, 터치 테스트로 시작하는 것이 좋다.

   * 팀 프로세스 그리고 문화
    QA 프로셋스는 제품의 개선 없이 시간과 비용만을 낭비시킨다는 인식을 가지고 있다. 최고의 제품을 출시하는 데 필요한 실용적인 QA 프로세스들을 정의해야 한다.

'''무엇을, 언제, 어떻게 테스트하는가'''

   제품의 네 가지 핵심 영역을 집중적으로 테스트
    * 설치과정
    * 기능
    * 기능 통합
    * 성능

   개발 과정 내내 지속적으로 실행되어야 한다.

   위의 네 가지 핵심 영역을 테스트 하기 위한 프로세스와 과정들

    * 체크인 테스트: 코도의 변경 사항이 기록되기 전에 소프트웨어를 테스트
    * 일별 스모크 테스트: 매 빌드마다 소프트웨어를 테스트
    * 기능 완성 테스트: 기능이 완성되자마자 테스트
     1. 핵심 기능
      QA 팀은 주로 핵심 기능을 테스트한다. 기능 테스트는 특정 기능이 제기능을 수행하는지 확인하는 과정이다. QA 엔지니어는 기능에 대한 문제를 찾기 위해 항상 노력해야 한다.
     1. 설 치
      제품에서 가장 무시되는 부분 중 하나다.
      설치 절차 테스트의 리스트에 따라 설치 테스트를 수행한다.

      설치 절차 테스트 리스트
       * 운영 체제
       * 서비스 팩
       * 깨끗한 설치
       * 지저분한 설치
       * 제품 설정
       * 설치 기능 군
       * 설치 제거 테스트

      안정적이며 쉽게 사용 가능한 설치 절차는 QA 외에 팀 내의 모든 사람에게 이롭다.
      즉, 각 팀원들은 스스로 필요할 때 제품을 설치할 수 있어야 한다.
 
    * 안정화와 통합 테스트: 미리 정의한 시기에 기능 통합을 테스트
     통합 테스트의 핵심은 현재의 제품이 기능적으로 이상이 없도록 만드는 것이다.

     1. 기능 테스트 완수
     1. 통합 테스트
     1. 성능과 부하 테스트
      개발 진척도를 파악하기 위해 지속적인 감시와 예비 측정을 실행해야 한다.
      예) 벤치마킹, 스트레스 테스트
      [툴 소개]
     1. 테스트 후 수정
      안정화와 통합 기간은 다음 기능을 개발하기 전에 중요 버그를 수정할 수 있는 기회를 제공한다.
     1. 테스트 후 판단과 평가
     1. 테스트 사례
      예) 웹어플리케이션 개발 통합 테스트 프로세스

    * 베타 및 릴리즈 캔디데이트 테스트: 미리 정의한 시기에 외부적으로 제품을 테스트
     프로젝트의 핵심 중요 시점
     베타 테스트: 제품을 본격적으로 생산하기 전에 소비자에게 소프트웨어를 테스트하고 평가할 기회를 준다.
     릴리즈 캔디데이트: 최종 제품이 될 가능성이 있는 빌드로서 베타보다 훨씬 더 중요한 가치를 지니고 있다.
     작업 내용
      1. 자동화된 통합 테스트 또는 프로그램을 실행
      1. 미리 정의된 수동 테스트들을 실행
       * 설치/라이센스 테스트
       * 핵심 제품 기능 테스트
       * 성능과 부하 한계 테스트
       * 모든 지원 플랫폼 테스트
       * 프로젝트와 특별히 관련이 있는 다른 영역 테스트

       위의 각 주제를 테스트 시나리오로 자세하게 구체화시켜야 한다.

'''누가 테스트하는가'''

프로젝트와 관련된 모든 사람이 테스트할 책임을 가져야 한다. 안정화와 통합 기간에는 모든 개발 팀이 테스트를 한다. 모든 개발 팀이 개발 과정 동안 제품을 꾸준히 테스트하는 것보다 홀륭한 테스트 방법은 없다.

    예) 소프트웨어를 내부적으로 사용해본다.

어떤 면에서 팀원들의 테스트 책임(특히 개발자)과 QA 팀의 테스트 책임을 명확하게 구분하는 것이 중요한 문제가 될 수 있다. 사람들이 각각의 책임을 충실히 수행하기 위해서는 업무 영역을 명확히 구분해야 한다. QA 엔지니어에게는 개발자들이 몇 분만 투자하면 찾을 수 있는 문제를 힘들게 찾아야 할 때가 가장 최악의 상황일 것이다.

개발자는 제품 품질에 매우 중요한 역할을 하므로 테스트 측면에서 책임이 있다.
개발자들의 책임
      * 테스트 계획 검토
      * 단위 수준 테스트
      * 시스템 통합 예비 테스트
      * 소프트웨어를 내부적으로 사용하여 찾아낸 모든 버그의 기록 및 수정

QA 팀은 위와 같은 기본적인 검증을 바탕으로 일하며 더 높은 수준의 기능 테스트를 수행한다.

     QA 팀의 책임
      * 테스트 계획
      * 개발 자동화
      * 실행 자동화
      * 기능 조합 테스트
      * 설치 테스트
      * 통합 및 시스템 테스트
      * 성능 및 부하 테스트
      * 수동 테스트
      * 문제 분석 보고
      * 수정 사상 검증 및 버그 종결(예외일 수 있다)

'''다른 중요한 QA 문제'''

    * 테스트 기반 구조 설정
     QA 역할에서 가장 시간을 많이 소비하는 작업 중 하나는 광범위한 소프트웨어 설정과 함께 제품을 테스트하는 일이다.
     제품에 대한 모든 설정을 테스트하기 위해 자동화된 안정적인 테스트 프로그램을 갖춰어야 한다.

    * 수동 테스트
     다음과 같은 상황일 때 사용
     1. 자동화가 지연되거나 존재하지 않을 때 핵심 기능을 테스트 
     1. 고정적이고, 위험성이 적은 기능을 테스트
     1. 위기에 빠졌을 때 테스트 

    * 테스트 장비
     시간이 부족한 프로젝트에서 기본적인 하드웨어나 소프트웨어의 부족으로 인해 팀의 업무 진행 속도가 저하되어서는 안된다.

     테스트를 위해 기본적인 요구 사항
 '     1. 각 QA 엔지니어링당 2~3대의 컴퓨터
       테스트 컴퓨터는 언제든지 쉽게 설정을 재현하도록 해야하며, 촤종 사용자의 컴퓨터처럼 가상으로 구현하는 것도 좋은 아이디어이다.
       예) 고스트
      1. 각 개발자당 두 대의 컴퓨터
       컴퓨터 중 한대를 최종 사용자의 컴퓨터처럼 구현하는 것도 좋은 아이디어이다.
      1. 온라인 소프트웨어 라이브러리
      1. 테스트 시험
       다양한 운영 체제나 언어 서비스 팩으로 설정된 테스트용 컴퓨터들을 구축한다.

==== 7장. 릴리즈 엔지니어링의 기초 ====
조직은 크든 작든 간에, 제품을 규칙적으로 빌드하고, 설치하는 능력을 반드시 가지고 있어야 한다.

'''릴리즈 엔지니어'''

소프트웨어를 빌드하고 설치하는 과정과 방법에 숙력된 프로젝트 팀원을 말한다. 전문적인 릴리즈 엔지니어나 조직의 필요성이 대두되고 있다.

   릴리즈 엔지니어의 책임
     * 제품의 빌드 환경을 정의, 생성, 유지
     * 제품의 설치 과정을 정의, 생성, 유지
     * 패치와 서비스 팩을 정의, 생성, 유지
     * 설치 과정의 기본적인 품질 보증과 단위 테스트를 지휘
     * 릴리즈 엔지니어링 과정에 필요한 도구, 스크립트, 자동화를 개발
     * 빌드 환경에 대한 계획(빌드 시험실)

   * 빌드
    제품의 모든 소스 코드를 컴파일한 결과
    소프트웨어를 정확하게 필드하기 위해서는 소스 코드의 통합성을 일정 수준 유지해야 한다. 그리고 소스 코드는 컴파일 에러나 링크 에러 문제 없이 완벽한 상태를 유지해야 한다.
    
    1. 빌드가 중요한 이유
     소프트웨어를 제시간에 출시하려면 소프트웨어를 빌드하는 능력이 반드시 필요하다.

    1. 빌드를 수행하는 방법
     * make 유틸리티
      소프트웨어 빌드에 가장 필수적인 도구 중 하나
      예) nmake(Microsoft Visual Studio에 내장됨)    
      빌드 법칙을 make 파일에 기술하여 빌드되는 이미지와 컴파일, 링크되어야 하는 소스 파일을 정의한다.

     * 빌드 번호
      
      개발자는 제품을 식별하기 위해 빌드 번호를 사용한다.
      애플리케이션의 생명 주기 안에서 절대 반복된 번호가 나와서는 안된다.
      빌드가 끝난 시점마다 일정하게 증가하는 숫자이다.
      사용자가 빌드를 확인할 수 있도록 애플리케이션의 '도움말' 메뉴에 '정보' 명령어를 내용으로 추가한다.
      예) 윈도우즈 정보창의 빌드 번호
 
    * 빌드 시스템과 시험실
     빌드 환경: 소프트웨어를 컴파일하고 링크하는 데 필요한 소프트웨어 애플리케이션과 도구, 라이브러리, 컴파일러의 집합을 말한다.
     빌드 전용 시스템(시험실)을 만드는 것이 제일 바람직하지만 시스템의 주기적인 백업이나 바이러스 감염등을 예방하기 위한 조치를 취해야 한다.
     빌드 전용 시스템은 큰 규모의 애플리케이션들을 동시에 빌드할 때나 여러 가지 제품을 동시에 빌드할 때 매유 유용하게 사용된다.

    * 통보와 실패
     
    * 평가와 관리
     빌드를 평가하기 위한 최선의 방법 중 하나는 제품을 설치하고, 자동화된 스모크 테스트를 실행시키는 것이다.

     다음과 같은 두가지 빌드 디렉토리를 가져야 한다.

     1. 가장 최근의 빌드(MRB: Most Recent Build)
      소프트웨어의 가장 최근의 빌드를 저장한다.
     1. 마지막으로 공인된 빌드(LKGB: Last Known Good Build) 
      공인된 빌드를 저장한다.
      현재의 빌드가 제대로 수행된다는 확신이 들 때 MRB 디렉토리의 내용을 LKGB 디렉토리로 복사한다.
    
    * 책임과 벌칙 그리고 측정 기준
     빌드를 손상시키는 사람은 벌칙을 받는다(빌드 손상 문제에 주의해야 한다).
     빌드 과정의 성과도 측정해야한다.
     
     * 체크인 횟수와 빌드 검증
       빌드 손상 문제 외의 다음 두 가지 의문점
       1. 코드를 언제 체크인해야 하는가
       1. 빌드를 손상시키지 않을지 어떻게 확신할 수 있는가

'''설치 절차'''

    * 설치 절차가 왜 중요한가
     설치 절차의 역할
      1. 팀이 제품에 필요한 설치 환경을 미미 고민하도록 만들어주는 역할을 한다.
      1. 설치 절차가 공유되면, 팀원들이 가장 최근에 완성된 소프트웨어 빌드를 쉽게 접근한다.

    * 어떻게 설치 절차를 구현하는가
     프로젝트 초창기부터 설치 절차 개발을 시작하여 시간에 따라 추가해 나가는 것이다.

     1. 골격
      하부 구조를 생성하는 것이 중요하다.
     1. 구체화
      생성한 기본 구조를 바탕으로 프로젝트 진도에 따라 정교함과 세밀함을 추가시켜야 한다.
     1. 키트(kit)
      키트: 사용자에게 전달될 파일 집합
      키트 구성 프로그램은 설치에 필요한 파일과 함께 설치 절차에 포함된다.
      키팅 과정의 내부 흐름과 그 결과를 정의하는 것이 바람직하다.

'''통합하기'''

    빌드 과정의 기본적인 단계 리스트
     1. 이미지 빌드
     1. 키드 생성
     1. 키트 테스트
     1. 빌드 성공 또는 실패 메시지 전송
     1. 빌드를 검증하기 위한 스모크 테스트 실행
     1. 성공적이라면, 빌드를 LKGB 디렉토리에 복사
     1. 스모크 테스트 성공 또는 실패 메시지 전송

    * 일별 빌드, 일별 키트, 일별 테스트
     빌드와 키트 그리고 테스트를 매일 실행하는 과정은 프로젝트의 핵심이다.

    * 홍보
     팀에게 릴리즈 엔지니어링에 관한 아이디어의 장점을 홍보하고, 단계적으로 실행하는 것이 바람직하다.

