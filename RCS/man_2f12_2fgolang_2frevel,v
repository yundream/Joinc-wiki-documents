head	1.21;
access;
symbols;
locks
	root:1.21; strict;
comment	@# @;


1.21
date	2014.11.19.01.35.06;	author root;	state Exp;
branches;
next	1.20;

1.20
date	2014.11.19.01.28.30;	author root;	state Exp;
branches;
next	1.19;

1.19
date	2014.11.18.14.09.30;	author root;	state Exp;
branches;
next	1.18;

1.18
date	2014.11.18.14.09.09;	author root;	state Exp;
branches;
next	1.17;

1.17
date	2014.11.18.14.02.15;	author root;	state Exp;
branches;
next	1.16;

1.16
date	2014.11.18.13.21.13;	author root;	state Exp;
branches;
next	1.15;

1.15
date	2014.11.18.13.18.32;	author root;	state Exp;
branches;
next	1.14;

1.14
date	2014.11.18.13.17.23;	author root;	state Exp;
branches;
next	1.13;

1.13
date	2014.11.17.16.26.00;	author root;	state Exp;
branches;
next	1.12;

1.12
date	2014.11.17.16.24.17;	author root;	state Exp;
branches;
next	1.11;

1.11
date	2014.11.17.16.23.03;	author root;	state Exp;
branches;
next	1.10;

1.10
date	2014.11.17.16.15.39;	author root;	state Exp;
branches;
next	1.9;

1.9
date	2014.11.17.16.14.32;	author root;	state Exp;
branches;
next	1.8;

1.8
date	2014.11.17.16.14.03;	author root;	state Exp;
branches;
next	1.7;

1.7
date	2014.11.17.16.02.58;	author root;	state Exp;
branches;
next	1.6;

1.6
date	2014.11.17.16.02.35;	author root;	state Exp;
branches;
next	1.5;

1.5
date	2014.11.17.15.59.02;	author root;	state Exp;
branches;
next	1.4;

1.4
date	2014.11.17.15.58.29;	author root;	state Exp;
branches;
next	1.3;

1.3
date	2014.11.17.15.54.46;	author root;	state Exp;
branches;
next	1.2;

1.2
date	2014.11.17.15.46.34;	author root;	state Exp;
branches;
next	1.1;

1.1
date	2014.10.14.12.28.45;	author root;	state Exp;
branches;
next	;


desc
@./data/text/man_2f12_2fgolang_2frevel
@


1.21
log
@112.150.165.136;;yundream;;
@
text
@#title revel - Go 기반의 웹 프레임워크
== 소개 ==
요즘 go 언어를 공부 중이다. 딱히 어디에 써 먹어야 겠다는 목적없이 재미삼아 한번 건드려 봤는데, 정말 재미있어서 공부 중이다. "단순하다"라는 점에 끌린 것 같다. 음.. 너무 기능이 없는데다가 너무 구닥다리다 라는 평가가 있기는 하다. 예컨데 go는 1. 클래스도 없다. 2. 예외처리도 없다 3. 그렇다고 요즘 유행하는 함수형 언어도 아니다. 4. Generic 타입도 없다  5. assertion도 없다 뭐 이렇다. 없는게 엄청 많다. 하지만 (go 개발자의 말대로) 개인의 머리 하나에 언어의 모든 스펙을 넣을 수 있을 정도로 '''단순하다'''. 이것 만으로도 사용할 이유가 있다. 게다가 충분히 빠르다. 

이렇게 go 언어를 공부하는 중에, 웹 애플리케이션 서버 쪽에 괌심이 있어서 웹 애플리케이션 성능 지표를 찾아봤더랬다. 그랬더니, go 언어를 기반으로 하고 있는 [http://www.techempower.com/benchmarks/#section=data-r9&hw=ec2&test=json revel의 성능이 상당히 좋게] 나왔다. 이렇게 된거 revel을 해보기로 했다.

== 기능 ==
{{{#!html
<div class="row">
	<div class="large-4 columns">
	<h3>Hot Code Reload</h3>
	편집하고, 저장하고, 리플레쉬 하면 된다. 수정한 코드와 템플릿은 즉시 적용되서 확인할 수 있다. 코드가 컴파일 되지 않는다면 <a href="#" data-reveal-id="myModal">helpful description</a>으로 문제점을 짚어준다. 런타임 코드 <a href="#" data-reveal-id="panic">패닉</a>이 발생해도 즉시 찾을 수 있다. 
	</div>
	<div class="large-4 columns">
	<h3>편리한</h3>
	Revel은 라우팅, 매개변수 parsing, validation, 세션/flash, 템플릿, 캐쉬, Job running, 프레임워크 테스트, 국제화 등 웹 애플리케이션 개발을 필요한 주요한 기능들을 갖추고 있다. 
	</div>
	<div class="large-4 columns">
	<h3>고성능</h3>
	Go는 매우 성능이 좋은 언어며, Go를 기반으로 한 Revel 역시 <a href="#" data-reveal-id="perf">뛰어난 성능</a>을 보장한다. 성능이 중요한 요소라면 Revel을 고려해보자. 
	</div>
</div>
<div id="myModal" class="reveal-modal" data-reveal>
<img src="https://lh5.googleusercontent.com/-q05XtmWVPd0/VGtHqPpbJiI/AAAAAAAAEf8/Yc0GdB5Ri7s/w778-h601-no/CompilationError.png">
<a class="close-reveal-modal">&#215;</a>
</div>
<div id="panic" class="reveal-modal" data-reveal>
<img src="https://lh4.googleusercontent.com/-fe0WXsrMvXg/VGtIr-OxpMI/AAAAAAAAEgs/MSHXfChejaU/w799-h600-no/Panic.png">
<a class="close-reveal-modal">&#215;</a>
</div>
<div id="perf" class="reveal-modal" data-reveal>
<img src="https://lh4.googleusercontent.com/--oIxdOhYG9M/VGtKwLqnSaI/AAAAAAAAEhI/Z1hz1OojG_0/w852-h483-no/go_revel_04.png">
<a class="close-reveal-modal">&#215;</a>
</div>
}}}

== 프레임워크 디자인 ==
{{{#!html
<div class="row">
	<div class="large-4 columns">
	<h3>Synchronous</h3>
	Revel은 Go HTTP 서버를 기반으로 만들어졌으며, 클라이언트 요청마다 goroutine를 실행한다. Goroutine은 간단하게 사용할 수 있으며, callback 때문에 골치아파 할 필요도 없다.    
	</div>
	<div class="large-4 columns">
	<h3>Stateless</h3>
	Revel은 stateless로 작동한다. Stateless는 상태를 서로 공유할 필요가 없기 때문에 확장에 유리한 구조다. 세션데이터, 유저 쿠키, 캐쉬와 같은 데이터 공유가 필요하다면, memcached 클러스터나 redis data structure store를 사용할 수 있다. 
	</div>
	<div class="large-4 columns">
	<h3>Modular</h3>
	Revel is built around composable middleware called filters, which implement nearly all request-processing functionality. Developers have the freedom to replace the default filters with custom implementations (e.g. a custom router).
	</div>
</div>
}}}

== 문서 ==
  * [wiki:man/12/golang/revel/tutorial revel tutorial] : Revel 설치에서 기본적인 응용까지
@


1.20
log
@112.150.165.136;;yundream;;
@
text
@d3 1
a3 1
요즘 go 언어를 공부 중이다. 딱히 어디에 반드시 써먹어야 겠다는 그런 이유는 없다. 재미삼아 한번 건드려 봤는데, 내 성향하고 맞아 떨어져서 공부 중이다. "단순하다"라는 점에 끌린 것 같다. 너무 기능이 없는데다가 너무 구닥다리다 라는 평가가 있기는 하다. 예컨데 go는 1. 클래스도 없다. !? 2. 예외처리도 없다 !? 3. 그렇다고 요즘 유행하는 함수형 언어도 아니다. 4. Generic 타입도 없다 !? 5. assertion도 없다 !? 뭐 이렇다. 하지만 (go 개발자의 말대로) 개인의 머리 하나에 언어의 모든 스펙을 넣을 수 있을 정도로 '''단순하다'''. 이것 만으로도 사용할 이유가 있다. 게다가 충분히 빠르다. 
d5 1
a5 1
이렇게 go 언어를 공부하는 중에, 이래 저래 웹 애플리케이션 서버 쪽에 괌심이 있어서 웹 애플리케이션 성능 지표를 찾아봤더랬다. 그랬더니, go 언어를 기반으로 하고 있는 [http://www.techempower.com/benchmarks/#section=data-r9&hw=ec2&test=json revel의 성능이 상당히 좋게] 나왔다. 그래 이왕 한 김에 revel을 해보기로 했다.
d16 1
a16 1
	Revel은 루우팅, 매개변수 parsing, validation, 세션/flash, 템플릿, 캐쉬, Job running, 프레임워크 테스트, 국제화 등 웹 애플리케이션 개발을 필요한 주요한 기능들을 갖추고 있다. 
@


1.19
log
@119.64.102.68;;yundream;;
@
text
@d56 1
a56 1
  * [wiki:man/12/golang/revel/tutorial revel tutorial]
@


1.18
log
@119.64.102.68;;yundream;;
@
text
@d53 1
@


1.17
log
@119.64.102.68;;yundream;;
@
text
@d38 16
@


1.16
log
@119.64.102.68;;yundream;;
@
text
@d15 2
a16 2
	<h3>Comprehensive</h3>
	Revel provides routing, parameter parsing, validation, session/flash, templating, caching, job running, a testing framework, and even internationalization. 
d19 2
a20 2
	<h3>High Performance</h3>
	Revel builds on top of the Go HTTP server, which was recently benchmarked to serve three to ten times as many requests as Rails across a variety of loads. 
d31 4
@


1.15
log
@119.64.102.68;;yundream;;
@
text
@d12 1
a12 1
	편집하고, 저장하고, 리플레쉬 하면 된다. 수정한 코드와 템플릿은 즉시 적용되서 확인할 수 있다. 코드가 컴파일 되지 않는다면 <a href="#" data-reveal-id="myModal">helpful description</a>으로 문제점을 짚어준다. 런타임 코드 패닉이 발생해도 즉시 찾을 수 있다. 
d27 4
@


1.14
log
@119.64.102.68;;yundream;;
@
text
@d25 1
@


1.13
log
@119.64.102.68;;yundream;;
@
text
@d12 1
a12 1
	Edit, save, and refresh. Revel compiles your code and templates for you, so you don't miss a beat. Code doesn't compile? It gives you a helpful description. Run-time code panic? Revel has you covered. 
d23 3
@


1.12
log
@119.64.102.68;;yundream;;
@
text
@d7 1
d24 2
@


1.11
log
@119.64.102.68;;yundream;;
@
text
@d9 1
a9 1
	<div class="large-3 columns">
d13 8
@


1.10
log
@119.64.102.68;;yundream;;
@
text
@d7 8
@


1.9
log
@119.64.102.68;;yundream;;
@
text
@d3 1
a3 1
요즘 go 언어를 공부 중이다. 딱히 어디에 반드시 써먹어야 겠다는 그런 이유는 없다. 재미삼아 한번 건드려 봤는데, 내 성향하고 맞아 떨어져서 공부 중이다. "단순하다"라는 점에 끌린 것 같다. 너무 기능이 없는데다가 너무 구닥다리다 라는 평가가 있기는 하다. 예컨데 go는 1. 클래스도 없다. !? 2. 예외처리도 없다 !? 3. 그렇다고 요즘 유행하는 함수형 언어도 아니다. 4. Generic 타입도 없다 !? 5. assertion도 없다 !? 뭐 이렇다. 하지만 (go 개발자의 말대로) 개인의 머리 하나에 언어의 모든 스펙을 넣을 수 있을 정도로 '''단순하다'''다. 이것 만으로도 사용할 이유가 있다. 게다가 빠르기도 하다.
d5 1
a5 1
이래 저래 웹 애플리케이션 서버 쪽에 관심이 많아서, 웹 애플리케이션 성능 지표를 찾아봤더랬다. 그랬더니, go 언어를 기반으로 하고 있는 [http://www.techempower.com/benchmarks/#section=data-r9&hw=ec2&test=json revel의 성능이 상당히 좋게] 나왔다. 그래 이왕 한 김에 revel을 해보기로 했다.  
@


1.8
log
@119.64.102.68;;yundream;;
@
text
@d3 1
a3 1
요즘 go 언어를 공부 중이다. 딱히 어디에 반드시 써먹어야 겠다는 그런 이유는 없다. 재미삼아 한번 건드려 봤는데, 내 성향하고 맞아 떨어져서 공부 중이다. "단순하다"라는 점에 끌린 것 같다. 너무 기능이 없는데다가 너무 구닥다리다 라는 평가가 있는 것도 있기는 하다. 예컨데 go는 1. 클래스도 없다. !? 2. 예외처리도 없다 !? 3. 그렇다고 요즘 유행하는 함수형 언어도 아니다. 4. Generic 타입도 없다 !? 5. assertion도 없다 !? 뭐 이렇다. 하지만 (go 개발자의 말대로) 개인의 머리 하나에 언어의 모든 스펙을 넣을 수 있을 정도로 '''단순하다'''다. 이것 만으로도 사용할 이유가 있다. 게다가 빠르기도 하다.
@


1.7
log
@119.64.102.68;;yundream;;
@
text
@d2 4
a5 5
{{{#!html
<div style="background-color:#222"> 
<img width="350" height="500" src="http://revel.github.io/img/RevelWhiteLines.png"></img>
</div>
}}}
@


1.6
log
@119.64.102.68;;yundream;;
@
text
@a1 1

@


1.5
log
@119.64.102.68;;yundream;;
@
text
@d3 5
a7 1
http://revel.github.io/img/RevelWhiteLines.png
@


1.4
log
@119.64.102.68;;yundream;;
@
text
@d3 1
@


1.3
log
@119.64.102.68;;yundream;;
@
text
@a2 226
== 환경 == 
이미 [wiki:man/12/golang/Start go 개발 환경]을 만든 것으로 가정한다. 
  * 우분투 리눅스 14.04
  * go 1.3.1 

== 설치 ==
{{{#!plain
# go get github.com/revel/revel
}}}

revel cli 툴이 설치된다.
{{{#!plain
# revel help
~
~ revel! http://revel.github.io
~
usage: revel command [arguments]

The commands are:

    new         create a skeleton Revel application
    run         run a Revel application
    build       build a Revel application (e.g. for deployment)
    package     package a Revel application (e.g. for deployment)
    clean       clean a Revel application's temp files
    test        run all tests from the command-line

Use "revel help [command]" for more information.
}}}

== revel 웹 애플리케이션 생성 ==
run 명령을 이용해서 web 애플리케이션을 만들 수 있다. 
{{{#!plain
# echo $GOPATH
/home/yundream/golang
# revel new hello_go
~
~ revel! http://revel.github.io
~
Your application is ready:
   /home/yundream/golang/src/hello_go

You can run it with:
   revel run hello_go
}}}

만들어진 web 애플리케이션을 실행해 보자.
{{{#!plain
# revel run hello_go
~
~ revel! http://revel.github.io
~
INFO  2014/10/14 21:27:55 revel.go:320: Loaded module static
INFO  2014/10/14 21:27:55 revel.go:320: Loaded module testrunner
INFO  2014/10/14 21:27:55 run.go:57: Running hello_go (hello_go) in dev mode
INFO  2014/10/14 21:27:55 harness.go:165: Listening on :9000
}}}
웹 브라우저를 이용해서 localhost:9000에 접근했다. 

https://lh3.googleusercontent.com/-Guq4-WEhF0E/VGoHjeXv6EI/AAAAAAAAEdo/O8C02u7Q59c/w729-h470-no/go_revel_01.png

이렇게 뜨면 성공
=== revel 웹 애플리케이션 구조 ===
본격적으로 웹 애플리케이션을 개발하기 전에 구조를 살펴보기로 했다.
{{{#!plain
.
├── app
│   ├── controllers
│   │   └── app.go
│   ├── init.go
│   ├── routes
│   │   └── routes.go
│   ├── tmp
│   │   └── main.go
│   └── views
│       ├── App
│       │   └── Index.html
│       ├── debug.html
│       ├── errors
│       │   ├── 404.html
│       │   └── 500.html
│       ├── flash.html
│       ├── footer.html
│       └── header.html
├── conf
│   ├── app.conf
│   └── routes
├── messages                                                                                                           
│   └── sample.en                                                                                                      
├── public                                                                                                             
│   ├── css                                                                                                            
│   │   └── bootstrap.css                                                                                              
│   ├── img                                                                                                            
│   │   ├── favicon.png                                                                                                
│   │   ├── glyphicons-halflings-white.png                                                                             
│   │   └── glyphicons-halflings.png
│   └── js
│       └── jquery-1.9.1.min.js
└── tests
    └── apptest.go
}}}
==== app/ 디렉토리 ====
'''app''' 디렉토리는 웹 애플리케이션의 소스코드와 템플릿 파일들을 가지고 있다.
  * app/controllers : 컨트롤러 코드가 위치한다.
  * app/models
  * app/views : 템플릿 파일들이 위치한다.
revel은 '''app/'''밑에 있는 파일들이 변경되는 지를 검사한다. 만약 파일이 변경된다면, 애플리케이션을 리빌드 한다. 반면 '''app/'''바깥쪽에 있는 파일들은 변경여부를 검사하지 않는다. 만약 웹 애플리케이션이 app/ 바깥쪽에 있는 파일의 영향을 받는다면, 개발자가 직접 recompile를 해야 한다. 

== revel web 애플리케이션 개발 ==
앞서 hello_go 라는 간단한 웹 애플리케이션을 만들었다. 여기에서는 어떻게 유저의 요청을 제어할 수 있는지를 알아볼 것이다. 
=== Routes ===
Ruby on Rails, Django등의 웹 애플리케이션 프레임워크를 다뤄본 경험이 있다면, routes는 익숙한 개념일 거다. Routes는 유저의 요청을 어느 방향(파일)로 보낼지를 결정하기 위해서 사용한다. 이 파일은 '''conf/routes'''에 있다. Root(localhost:9000/) 요청에 대한 라우트 값을 살펴보자.
{{{#!plain
GET     /                                       App.Index
}}}
이 설정은 유저가 루트를 요청하면, '''App''' 컨트롤러의 '''Index''' 메서드를 호출하라는 의미다.

=== Acions ===
유저가 "/"를 호출하면 revel은 conf/routes의 정보를 읽어서 "app/controllers/app.go"에 있는 Index() 메서드를 호출한다. 코드를 보자. 
{{{#!plain
package controllers

import "github.com/revel/revel"

type App struct {
    *revel.Controller
}

func (c App) Index() revel.Result {
    return c.Render()
}
}}}
모든 컨트롤러들은 반드시 '''*revel.Controller''' 구조체를 포함하고 있어야 한다. 그리고 처리 결과로 '''revel.Result'''를 반환한다. 

Revel 컨트롤러는 요청을 처리하기 위한 유용한 메서드들을 제공한다. 예를들어서 '''Render()'''메서드는 템플릿 파일을 찾아서 응답코드(200 OK)와 함께 HTML 파일을 만들어서 출력한다. 

=== Template ===
모든 템플릿은 '''app/views''' 디렉토리에 있다. 템플릿 이름을 명시하지 않을 경우, revel은 action의 이름과 일치하는 템플릿을 찾는다. hello_go의 경우에는 app/views/App/Index.html파일을 찾아서 렌더링 한다. 템플릿 파일은 [wiki:man/12/golang/networkProgramming/template GO Template 포맷]으로 작성한다.  
{{{#!plain
{{set . "title" "Home"}}
{{template "header.html" .}}

<header class="hero-unit" style="background-color:#A9F16C">
  <div class="container">
    <div class="row">
      <div class="hero-text">
        <h1>Hello go</h1>
        <p></p>
      </div>
    </div>
  </div>
</header>

<div class="container">
  <div class="row">
    <div class="span6">
      {{template "flash.html" .}}
    </div>
  </div>
</div>

{{template "footer.html" .}}
}}}
  1. title 변수를 설정했다. 
  1. '''header.html'''템플릿을 호출했다. title 변수는 이 템플릿에서 사용한다. 
  1. 환영 메시지를 출력한다.
  1. flash.html 템플릿을 출력한다. Flashed 메시지를 보여주기 위해서 사용한다. 
  1. footer.html 템플릿을 출력한다.
header.html 파일을 열어보면, 대략 아래와 같은 코드를 확인할 수 있을 거다.
{{{#!plain
<!DOCTYPE html>

<html>
  <head>
    <title>{{.title}}</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <link rel="stylesheet" type="text/css" href="/public/css/bootstrap.css">
    <link rel="shortcut icon" type="image/png" href="/public/img/favicon.png">
    <script src="/public/js/jquery-1.9.1.min.js" type="text/javascript" charset="utf-8"></script>
    {{range .moreStyles}}
      <link rel="stylesheet" type="text/css" href="/public/{{.}}">
    {{end}}
    {{range .moreScripts}}
      <script src="/public/{{.}}" type="text/javascript" charset="utf-8"></script>
    {{end}}
  </head>
  <body>
}}}
'''title''' 변수가 설정되는 코드가 보인다. 그 밖에 웹 디자인을 도와주기 위한 bootstrap css와 jquery 등을 include하고 있는 걸 확인할 수 있다.   

=== Hot-reload ===
웹 애플리케이션 서버를 띄운 후 '''Index.html'''파일을 수정해 보자. 
{{{#!plain
<h1>Hello go</h1>
}}}
을
{{{#!plain
<h1>Hello World!!</h1>
}}}
으로 변경해 보자.

브라우저를 리플레쉬(refresh)하면, 변경된 내용이 즉시 반영되는 걸 확인할 수 잇을 것이다. Revel은 template 파일이 변경되는 걸 검사해서 리플레쉬하는 기능을 가지고 있다. 

템플릿파일은 동적으로 갱신이 된다고 치고, 코드의 변경내용도 갱신되는지 확인해 보자. '''app/controllers/app.go'''의 코드를 (에러가 발생하도록)바꿨다.
{{{#!plain
return c.Render()
}}}
을 
{{{#!plain
return c.Renderx()
}}}
이제 브라우저를 다시 리프레쉬 해보자. 아래와 같은 디버깅 메시지를 확인할 수 있을 거다.

https://lh6.googleusercontent.com/-nUcBU1YGQhQ/VGoW9T9UWrI/AAAAAAAAEe0/_hutn5W6GcE/w729-h388-no/go_revel_02.png

이제 템플릿을 수정해 보자. '''app/controllers/app.go'''를 아래와 같이 수정한다.
{{{#!plain
greeting := "Aloha World"
return c.Render(greeting)
}}}
Index.html도 수정했다.
{{{#!plain
<h1>{{.greeting}}</h1>
}}}
https://lh4.googleusercontent.com/-MaFs1EeqKLs/VGoZTeqmb_I/AAAAAAAAEfQ/LhDbc9yz2UE/w729-h544-no/go_revel_03.png

d4 2
@


1.2
log
@119.64.102.68;;yundream;;
@
text
@d109 1
@


1.1
log
@119.64.102.68;;yundream;;
@
text
@d33 2
a34 1
== Hello go 개발 ==
a37 1

d49 1
d60 5
d66 1
d104 125
@
