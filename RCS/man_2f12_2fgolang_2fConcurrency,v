head	1.1;
access;
symbols;
locks
	root:1.1; strict;
comment	@# @;


1.1
date	2014.10.19.09.11.46;	author root;	state Exp;
branches;
next	;


desc
@./data/text/man_2f12_2fgolang_2fConcurrency
@


1.1
log
@119.64.102.68;;yundream;;
@
text
@#title Concurrency

== 동시성 ==
=== Goroutines ===
개념적으로 고루틴(Gorutines)은 thread, coroutines, processes 등과 혼동될 수 있다. 용어에 따른 개념의 혼란을 피하기 위해서 "고루틴"이라는 새로운 용어를 만들었다고 한다. 실제 사용하다보면, 멀티 스레드, 멀티 프로세스 등과 비슷하면서도 해석과 사용에 미묘한 차이가 있음을 알 수 있다. 

고루틴은 동일한 주소공간의 코드를 동시에 실행하는 기능이다. 아래의 코드를 보자.    
{{{#!plain
package main

import (
    "fmt"
    "time"
)

func loop(num int) {
    for i := 0; i < 10; i++ {
        fmt.Println(num, ":", i)
        time.Sleep(1)
    }
}

func main() {
    for i := 0; i < 10; i++ {
        go loop(i)
    }
    var input string
    fmt.Scanln(&input)
}
}}}

loop라는 하나의 주소공간에 있는 코드를 go(고루틴 생성 키워드)를 이용해서 10개를 동시에 실행했다. 코드를 실행해보면, 고루틴은 "결과를 기다리지 않고" 동시에(concurrently) 실행되는 걸 확인할 수 있다. 하나의 주소공간에 있는 코드를 결과를 기다리지 않고 동시에 수행한다는 점에서 "thread"와 유사함을 알 수 있다. 

=== Channels ===
위의 예제에서 고루틴은 서로 독립적으로 계산을 수행했다.  
@
