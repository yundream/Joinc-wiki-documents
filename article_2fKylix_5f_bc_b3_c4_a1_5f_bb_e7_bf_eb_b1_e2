#title Kylix3 설치 및 사용기

{{{#!html
<HTML
><HEAD
><TITLE
>Kylix 3 설치/사용기</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.64
"><META
http-equiv="Content-Type"
content="text/html; charset=euc-kr"></HEAD
><BODY
CLASS="ARTICLE"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="ARTICLE"
><DIV
CLASS="TITLEPAGE"
><H1
CLASS="TITLE"
><A
NAME="AEN2"
>Kylix 3 설치/사용기</A
></H1
><H3
CLASS="AUTHOR"
><A
NAME="AEN4"
>윤 상배</A
></H3
><DIV
CLASS="AFFILIATION"
><DIV
CLASS="ADDRESS"
><P
CLASS="ADDRESS"
>				dreamyun@yahoo.co.kr<br>
			</P
></DIV
></DIV
><HR></DIV
><DIV
CLASS="TOC"
><DL
><DT
><B
>&#52264;&#47168;</B
></DT
><DT
>1&#51208;. <A
HREF="#AEN9"
>소개</A
></DT
><DD
><DL
><DT
>1.1&#51208;. <A
HREF="#AEN11"
>결국 kylix 3 출시되다</A
></DT
></DL
></DD
><DT
>2&#51208;. <A
HREF="#AEN18"
>kylix 3 둘러보기</A
></DT
><DD
><DL
><DT
>2.1&#51208;. <A
HREF="#AEN20"
>일단은 다운 받아야지</A
></DT
><DT
>2.2&#51208;. <A
HREF="#AEN26"
>설치해야지</A
></DT
><DT
>2.3&#51208;. <A
HREF="#AEN30"
>실행시켜보자</A
></DT
></DL
></DD
><DT
>3&#51208;. <A
HREF="#AEN37"
>기념 어플리케이션 제작</A
></DT
><DD
><DL
><DT
>3.1&#51208;. <A
HREF="#AEN42"
>만들고자 하는 어플리케이션은 ?</A
></DT
><DT
>3.2&#51208;. <A
HREF="#AEN45"
>테스트를 위한 DB 설정</A
></DT
><DT
>3.3&#51208;. <A
HREF="#AEN53"
>어플리케이션 제작</A
></DT
><DD
><DL
><DT
>3.3.1&#51208;. <A
HREF="#AEN56"
>데이타 베이스 연결을 위한 구조</A
></DT
><DT
>3.3.2&#51208;. <A
HREF="#AEN59"
>데이타 베이스 연결</A
></DT
><DT
>3.3.3&#51208;. <A
HREF="#AEN70"
>DB 내용 읽기 정보 세팅</A
></DT
><DT
>3.3.4&#51208;. <A
HREF="#AEN82"
>DB 내용을 직접 가져오기</A
></DT
></DL
></DD
><DT
>3.4&#51208;. <A
HREF="#AEN98"
>UI 만들기</A
></DT
><DD
><DL
><DT
>3.4.1&#51208;. <A
HREF="#AEN102"
>Grid 화면 만들기</A
></DT
><DT
>3.4.2&#51208;. <A
HREF="#AEN125"
>DB Naviation 툴바를 추가하기</A
></DT
><DT
>3.4.3&#51208;. <A
HREF="#AEN132"
>메뉴바 추가하기</A
></DT
><DT
>3.4.4&#51208;. <A
HREF="#AEN142"
>액선 이벤트 추가하기</A
></DT
></DL
></DD
><DT
>3.5&#51208;. <A
HREF="#AEN162"
>최종 테스트</A
></DT
></DL
></DD
><DT
>4&#51208;. <A
HREF="#AEN166"
>결론</A
></DT
></DL
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN9"
>1&#51208;. 소개</A
></H1
><DIV
CLASS="SECTION"
><H2
CLASS="SECTION"
><A
NAME="AEN11"
>1.1&#51208;. 결국 kylix 3 출시되다</A
></H2
><P
>	
			필자는 상당히 오래전부터 리눅스에서 쓸만한 RAD 도구가 나오기를 
			고대하고 있었고, 그런이유로 kylix 3 가 어서 빨리 발표되기를 
			손꼽아 기다리고 있었다.
		</P
><P
>	
			물론 그전에 kylix 2 라는 RAD 도구 나오기는 했었지만, 
			파스칼 기반이였고, 솔직히 Linux 환경에서 개발하는데 파스칼을 
			사용하기에는 왠지 거부감(거리감)이 느껴져서, 몇번 사용해보고 
			사용 포기해버렸다. 
		</P
><P
>	
			kylix 2 발표회에 가서 관심이 갔던것은 kylix 2 의 기능이 아니라 
			kylix 3 의 출시일이 언제인지 였다. 이유는 kylix 3 가 c++ 컴파일러 
			를 기본적으로 포함할 것이라는것 때문이였다. 당시 아마 2002년 3월? 
			이였던것 같은데 borland 관계자가 말하기를 8월쯤 kylix 3 가 출시 
			될거라고 얘기 해주었다. 그리고 8월 중순쯤 되어서 kylix 3 가 
			발표되었고, 30 일 사용가능한 trial 버젼을 다운받을수 있게 되었다.  
		</P
><P
>	
			물론 당연히 trial 제품 발표 즉시 borland 홈페이지에서 30일 
			trial 버젼을 다운로드 받아서 설치해보고 몇가지 간단한 어플리케이션 
			작성 테스트를 해보았다. 
		</P
><P
>	
			이 문서는 필자가 kylix 3(이하 카이릭스)를 다운받아서 간단한 
			어플리케이션을 작성하기 까지의 과정을 담고 있다. 
		</P
></DIV
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN18"
>2&#51208;. kylix 3 둘러보기</A
></H1
><DIV
CLASS="SECTION"
><H2
CLASS="SECTION"
><A
NAME="AEN20"
>2.1&#51208;. 일단은 다운 받아야지</A
></H2
><P
>			우선은 카이릭스를 다운받아야 한다. <A
HREF="http://www.borland.com/products/downloads/download_kylix.html"
TARGET="_top"
>www.borland.com</A
> 사이트에서 
			30일 trial 버젼을 다운로드 받아서 사용할수 있다. 
			Enterprise Trial 버젼이라고 되어 있는것으로 봐서 날짜 제한만 
			있을뿐 카이릭스의 모든 기능을 사용해 볼수 있는것 같다. 
			기쁜 마음으로 다운로드 받도록 하자. 
		</P
><P
>			trial 버젼의 카이릭스는 <B
CLASS="EMPHASIS"
>register 키</B
>를 
			필요로 한다. 이 등록키를 
			받으려면 Borland developer Network 에 회원 가입을 해야 한다. 
			물론 몇가지 귀찮게 물어오지만 등록키를 받아야 하니, 기쁜맘? 으로 
			등록해 주도록 하자. 그러면 등록할때 기재한 Email 주소로 
			reg89.txt 란 파일이 전송된다. 이 reg89.txt 파일을 자신의 HOME 
			디렉토리에 복사해주면 된다. 그러면 나중에 카이릭스가 실행될때 
			자동적으로 reg89.txt 를 검사해서 정상 작동되게 된다. 
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN26"
>2.2&#51208;. 설치해야지</A
></H2
><P
>			설치는 너무너무 간단하다. kylix3_trial.tar.gz 파일을 적당한 
			디렉토리에 옮긴다음에 압축을 풀고 kylix3_trial 디렉토리에 
			들어가면 setup.sh 파일이 보일것이다. 그냥 이거 실행시켜주고 
			버튼 한 2번정도 클릭시켜주고 보니터만 지켜보고 있음된다. 
			꽤 시간이 걸리므로 기다리면서 
			<A
HREF="http://www.joinc.co.kr/modules.php?op=modload&name=Forum&file=viewtopic&topic=290&forum=2&0"
TARGET="_top"
>과학기술인으로 살기</A
>를 읽어보면서 
			무료함을 달래기로 하자.
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN30"
>2.3&#51208;. 실행시켜보자</A
></H2
><P
>			카이릭스는 기본 설치디렉토리가 /usr/local/kylix3 이며, 
			실행파일이 위치한 디렉토리는 bin/ 이다. 카이릭스를 
			설치하게 되면 delphi, bcb(borland c++ builder), kylix 가 설치된다. 
			이중 관심있는건 bcb 이다. bcb 의 실행파일 이름은 startbcb 이다. 
			쉘에서 실행시켜도 되고, 바로가기 아이콘을 만들어서 좀더 편하게 
			실행시킬수도 있다. 만약 그놈이나 kde 를 사용하고 있다면, 
			메뉴에 추가될것이다. 
		</P
><P
>			여러분의 홈디렉토리에 등록키파일이 존재한다면, 정상적으로 
			bcb 가 실행될것이다(좀 시간이 걸린다). 그러면 다음과 같이 
			bcb IDE 화면이 뜰것이다. 	
			<DIV
CLASS="FIGURE"
><A
NAME="AEN34"
></A
><P
><B
>&#44536;&#47548; 1. bcb IDE 화면</B
></P
><P
><a href="/images/articles/81/ide.gif"><IMG
SRC="/images/articles/81/ide.gif" border=0 width=600 height=400></a></P
></DIV
>
			윈도우 환경에서 델파이나, 볼랜드 C++ 빌더를 사용해본적이 있다면 
			대단히 반가운? 화면일 것이다. 크게 5개의 창으로 나뉜다. 
			메뉴바와 여러가지 컴포넌트를 포함하고 있는 Main 창과 
			Object Tree 구조를 보여주는 Object Tree view 창, 
			컴포넌트의 Property 설정을 위해 주로 사용되는 Object Inspector, 
			그리고 From 창과 실제 코딩을 위한 창이다. 
		</P
></DIV
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN37"
>3&#51208;. 기념 어플리케이션 제작</A
></H1
><P
>		이제 설치도 완료되었고, 실행도 시켰으니 이게 과연 제대로 작동하는지 
		기능 테스트겸해서 어플리케이션을 하나 제작해 봐야 할것 같다. 
	</P
><P
>		머가 좋을까 고민을 해보았다. 보통 GUI 어플리케이션 제작할때 
		가장 먼저하는게 간단한 에디터 인데, 솔직히 이건 너무 일반적인 
		것 같았다. 이런건 qt 로 손코딩해서도 어렵잖게 만들수 있으니, 
		RAD 툴의 강점을 테스트 해보기엔 좀 부족한것 같았다. 
	</P
><P
>		흠.. Borland 제품 하면 역시 Database 와의 연동이지.. 라는 생각이 
		들면서, db 와 연동하는 간단한 어플리케이션을 하나 만들어 보기로 
		결심했다. 
	</P
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN42"
>3.1&#51208;. 만들고자 하는 어플리케이션은 ?</A
></H2
><P
>			위에서 설명했다 시피 DB 와 연동되는 간단한 어플리케이션이다. 
			그렇다면 연동될 DB 를 선택해야 하는데, postgresql 을 선택하기로 
			했다. 비록 필자가 postgresql 을 선택하긴 했지만, 다른 DB 를 
			선택하더라도 거의 동일한 방법으로 코딩이 가능할것이다. 
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN45"
>3.2&#51208;. 테스트를 위한 DB 설정</A
></H2
><P
>			이글에서는 postgresql 의 설치방법까지 설명하진 않을것이다. 
			단지 테스트를 위한 db 와 table 을 만들고 만들어진 table 을 
			접근가능하도록 권한설정하는 것까지 설명할것이다. 
		</P
><P
>			테스트를 위해서 우편번호 db 를 만들기로 했다. 
			우편번호 데이타는 <A
HREF="http://www.phpschool.com/bbs2/down2/zipcode20020531.zip"
TARGET="_top"
>zipcode20020531.zip</A
> 을 사용하기로 했다. 
			먼저 우편번호 데이타를 저장할 테이블을 만들고
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>psql=# create table zipcode(no int primary key, 
zipcode varchar(7), sido varchar(12), 
gugun varchar(14), dong varchar(44), 
bunji varchar(18));
			</PRE
></TD
></TR
></TABLE
>
			우편번호 데이타를 테이블에 적재하도록 한다. 
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>[postgres@localhost test]$ /usr/local/pgsql/bin/psql psql &#60; postcode1.sql
			</PRE
></TD
></TR
></TABLE
>
			데이타 적재 까지 모두 마쳤다면, 테스트를 위한 postgres 의 유저를 
			만들고 만들어진 테이블 zipcode 에 접근할수 있는 권한을 
			주도록한다. 유저이름은 yundream 패스워드는 1234 로 하겠다.  
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>psql=# create user yundream with password '1234';
CREATE USER
psql=# grant all on zipcode to yundream;
GRANT
			</PRE
></TD
></TR
></TABLE
>
			이걸로 테스트를 위한 DB 설정은 끝이다. 
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN53"
>3.3&#51208;. 어플리케이션 제작</A
></H2
><P
>			어플리케이션은 크게 2가지 부분으로 나뉜다. 
			하나는 db 에 연결해서 필요한 데이타를 가져오는 부분이고 
			다른 하나는 데이타를 유저에게 보여주기 위한 
			유저 interface 부분이다. 
		</P
><DIV
CLASS="SECTION"
><HR><H3
CLASS="SECTION"
><A
NAME="AEN56"
>3.3.1&#51208;. 데이타 베이스 연결을 위한 구조</A
></H3
><P
>				보통 DB 관련 어플리케이션을 짠다라고 보면 꽤복잡한 여러가지 
				과정을 거쳐야 한다고 생각되어질수 있다. 거기에 UI 까지 붙이려고 
				한다면 더욱더 복잡해 질것이다. 그러나 카이릭스는 RAD 툴 답게 
				단지 몇개의 컴포넌트(components)의 값을 변경하는 것만으로 
				간단하게 DB 에 연결하고 데이타를 가져오는 
				과정을 해결할수 있다.  
			</P
></DIV
><DIV
CLASS="SECTION"
><HR><H3
CLASS="SECTION"
><A
NAME="AEN59"
>3.3.2&#51208;. 데이타 베이스 연결</A
></H3
><P
>				일단 카일릭스 bcb 를 띄우도록 하자. 그다음엔 데이타 베이스 
				연결을 해야 한다. 이것은 dbExpress page 의 SQL connection 
				컴포넌트를 이용해서 해결가능하다. SQL connection 컴포넌트를 
				더블클릭 하도록 하자. 그러면 Form 중간에 
				SQL connection 컴포넌트 아이콘이 생성될것이다.  
				<DIV
CLASS="FIGURE"
><A
NAME="AEN62"
></A
><P
><B
>&#44536;&#47548; 2. SQL connection 컴포넌트</B
></P
><P
><IMG
SRC="/images/articles/81/sql_com.gif"></P
></DIV
>
				이 컴포넌트를 더블클릭 하면 DB 연결과 관련된 다양한 설정을 
				할수 있다. 
				<DIV
CLASS="FIGURE"
><A
NAME="AEN65"
></A
><P
><B
>&#44536;&#47548; 3. SQL connection 설정화면</B
></P
><P
><IMG
SRC="/images/articles/81/dbexpress.gif"></P
></DIV
>
				여기에는 다영한 종류의 연결가능한 DB 목록들이 있다. 
				우리는 Postgresql 을 이용하기로 했으니 PostreSQL Connection 을 
				선택하기로 하자. 그리고 서버에 연결하기위해서 HostName, Database
				User Name, Password 등을 자신의 postgresql 서버에 맞도록 
				설정하도록 한다. 
			</P
><P
>				설정을 마쳤다면, postgresql 로 연결이 제대로 되는지 
				확인을 해보도록 하자. PostreSQL Connection 에서 마우스 오른쪽 
				버튼을 클릭후 Test Connection 을 선택하면, 연결이 제대로 
				되는지 테스트 해볼수 있다. "Successfully Connected"가 
				출력된다면 OK. 그렇지 않고 에러가 발생한다면, 에러메시지를 
				잘읽어 보고 이를 해결해주면 된다. 보통 에러는  
				libpq.so 라이브러리를 찾지 못해서 발생한다. libpq 가 
				있는 디렉토리를 찾아서 해당 디렉토리를 라이브러리 찾기 경로에 
				등록 시켜주자. 보통 /etc/ld.so.conf 에 추가 시켜준 ldconfig 를
				한번 실행시켜 주면 된다. 필자의 경우 postgres 관련 라이브러리의 
				위치는 /usr/local/pgsql/lib 였다. 이 디렉토리는 시스템마다 
				다를수 있다.
			</P
><P
>				이제 Object Inspector 의 Properties 의 값을 
				변경해주면 된다. Name 를 적당한 
				이름으로 설정해주기 바란다. 앞으로 이 Name 은 다른 DB 컴포넌트 
				에서 DB 설정정보를 참조하기 위해서 사용된다. 필자는 
				SQLConnection1 으로 이름을 정했다. 
			</P
></DIV
><DIV
CLASS="SECTION"
><HR><H3
CLASS="SECTION"
><A
NAME="AEN70"
>3.3.3&#51208;. DB 내용 읽기 정보 세팅</A
></H3
><P
>				데이타 베이스에 연결했으니 zipcode 테이블에서 데이타를 
				읽어들이기 위한 각종 설정을 해주어야 한다. 
				dbExpress page 에서 SQL DataSet 컴포넌트를 
				더블 클릭하면 된다. 
				<DIV
CLASS="FIGURE"
><A
NAME="AEN73"
></A
><P
><B
>&#44536;&#47548; 4. SQLDataSet 컴포넌트</B
></P
><P
><IMG
SRC="/images/articles/81/sqldataset.gif"></P
></DIV
>
			</P
><P
>				그다음 property 에서 CommandText 에 쿼리를 입력해주면 된다. 
				필자는 "select * from zipcode" 를 입력했다. 그리고
				Name property 를 선택해서 역시 적당한 이름을 입력하도록 
				한다. 필자는 SQLDataSet1 으로 이름을 정했다. 
			</P
><P
>				이제 SQLConnection 을 설정해주어야 한다. 어떤 DB 에 연결할건지 
				를 결정하기 위해서 사용된다. 우리는 이전에 Postgresql 서버에 
				연결하기 위한 Name 을 SQLConnection1 으로 정했었다. 
				그러므로 SQLConnection1 을 선택해주기만 하면 된다. 
				<DIV
CLASS="FIGURE"
><A
NAME="AEN78"
></A
><P
><B
>&#44536;&#47548; 5. SQL DataSet 설정화면</B
></P
><P
><IMG
SRC="/images/articles/81/dataset.gif"></P
></DIV
>
			</P
><P
>				마지막으로 Active 를 true 로 만들어주자.
			</P
></DIV
><DIV
CLASS="SECTION"
><HR><H3
CLASS="SECTION"
><A
NAME="AEN82"
>3.3.4&#51208;. DB 내용을 직접 가져오기</A
></H3
><P
>				연결할 서버와 데이타를 읽어올 Table 등에 대한 설정이 
				끝났으면 직접 데이타를 Access 하기위한 작업을 해야 한다. 
			</P
><P
>				이들과 관련된 컴포넌트는 Data Access Page 에 존재한다.
			</P
><P
>				우선 어떤 DataSet 을 읽어와야 하는지 결정해야 한다. 
				이 설정은 DataSetProvider 컴포넌트를 이용하면 된다.
				우리가 읽어올 DataSet은 SQLDataSet1 이다. 
				그러므로 DataSet property
				의 값을 SQLDataSet1 으로 선택해주면된다. 역시 Name property
				에 적당한 이름을 적어주면 된다. 필자는 DataSetProvider1 으로 
				이름을 정했다. 마지막으로 Constraints 를 true 로 해준다. 
				<DIV
CLASS="FIGURE"
><A
NAME="AEN87"
></A
><P
><B
>&#44536;&#47548; 6. DataSetProvider 컴포넌트</B
></P
><P
><IMG
SRC="/images/articles/81/dataset_pro.gif"></P
></DIV
>
			</P
><P
>				이제 ClientDataSet 컴포넌트를 선택한다. 사용할 Provider 
				이름을 지정해줘야 하는데 위에서 DataSetProvider1 으로 이름을 
				만들어 둔게 있음으로 Provider property 의 값을 DataSetProvider1
				을 선택하면 된다. Name property 의 값은 ClientDataSet1 으로 
				정했다. Active 는 true 로 하도록 하자. 
				<DIV
CLASS="FIGURE"
><A
NAME="AEN91"
></A
><P
><B
>&#44536;&#47548; 7. ClientDataSet 컴포넌트</B
></P
><P
><IMG
SRC="/images/articles/81/clientdataset.gif"></P
></DIV
>
			</P
><P
>				이제 DB 와 관련되어서 설정해야될 마지막 컴포넌트인 DataSource 
				만 설정해 주면 된다. 여기에서는 사용해야될 DataSet 만 지정해 
				주면 된다. ClientDataSet1 을 선택하도록 하자. 이름은 
				DataSource1 으로 하도록하자. 이 이름은 나중에 다른 컴포넌트에서 
				Data 에 접근하기 위한 인터페이스 이름으로 사용된다. 
				<DIV
CLASS="FIGURE"
><A
NAME="AEN95"
></A
><P
><B
>&#44536;&#47548; 8. ClientDataSet 컴포넌트</B
></P
><P
><IMG
SRC="/images/articles/81/datasource.gif"></P
></DIV
>
			</P
></DIV
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN98"
>3.4&#51208;. UI 만들기</A
></H2
><P
>			이로써 DB 에 연결해서 원하는 테이블에서 DB 내용을 가져오기 위한 
			모든 설정을 마쳤다. 이제 가져온 내용을 화면에 뿌려주는 일이 
			남았다. 
		</P
><P
>			카이릭스에서는 이러한 가져온 DB 내용을 화면에 효과적으로 
			출력시키고 제어할수있도록 하기 위한 여러개의 컴포넌트들을 제공한다. 
			이러한 컴포넌트들은 Data Controls Page 에 존재한다. 
		</P
><DIV
CLASS="SECTION"
><HR><H3
CLASS="SECTION"
><A
NAME="AEN102"
>3.4.1&#51208;. Grid 화면 만들기</A
></H3
><P
>				가장 먼저 해야할일은 쿼리를 통해서 읽어온 데이타를 
				화면에 뿌려주기 위한 UI 를 만드는 것이다.
				이것은 아마 스프레드쉬트와 
				비슷한 화면을 보여줄건데, DBGrid 컴포넌트를 이용하면 된다. 
				<DIV
CLASS="FIGURE"
><A
NAME="AEN105"
></A
><P
><B
>&#44536;&#47548; 9. DBGrid 컴포넌트</B
></P
><P
><IMG
SRC="/images/articles/81/dbgrid.gif"></P
></DIV
>

				컴포넌트를 더블클릭하면 다음과 같은 화면이 만들어진다. 
				<DIV
CLASS="FIGURE"
><A
NAME="AEN108"
></A
><P
><B
>&#44536;&#47548; 10. DBGrid 화면</B
></P
><P
><IMG
SRC="/images/articles/81/datagrid.gif"></P
></DIV
>
				아직 아무런 내용을 보여주고 있지는 않다. 아직 화면에 뿌려줄 
				Data Source 를 지정하지 않았기 때문이다. 
				DataSource 컴포넌트에서 
				만든 DataSource1 으로 DataSet property 값을 조정하자. 그러면 
				DBGrid 화면에 데이타가 들어가는걸 볼수 있을것이다. 
			</P
><P
>				이제 DBGrid 를 화면에 맞게 재배치를 시켜야 한다. 
				Align 을 통해서 
				위치를 지정시켜주고 Anchors 를 이용해서 창에 고정시키면 된다. 
				Align 을 Bottom 으로 해주고, 
				Anchors 의 Left, Top, Right, Bottom 
				을 모두 true 로 해주자. 그러면 DBGrid 화면이 창의 크기 변화등에 
				맞추어서 자동적으로 크기나 위치가 재배치됨을 알수 있을것이다. 
			</P
><P
>				이제 지금까지 작업했던 내용을 저장하도록 하자. 
				<SPAN
CLASS="GUIMENU"
>FIle</SPAN
>+<SPAN
CLASS="GUIMENU"
>Save all</SPAN
> (<B
CLASS="SHORTCUT"
><B
CLASS="KEYCAP"
>Ctrl</B
>-<B
CLASS="KEYCAP"
>Shift</B
>-<B
CLASS="KEYCAP"
>S</B
></B
>)
				을 이용하면 된다. 프로젝트를 편하게 관리하기 위해서 
				별도의 디렉토리를 만든다음에 저장하는게 좋을것이다. 
			</P
><P
>				이쯤되면 실행가능한 프로그램이 만들어진셈이다. 
				테스트를 해보기 위해서 Run(F9) 버튼을 클릭해서 실행시켜보도록 
				하자. Run 버튼을 누르면 컴파일후 프로그램을 실행시킨다.  
				아마 아래와 같은 화면을 보여줄 것이다.
				<DIV
CLASS="FIGURE"
><A
NAME="AEN122"
></A
><P
><B
>&#44536;&#47548; 11. 실행화면 1</B
></P
><P
><IMG
SRC="/images/articles/81/run_1.gif"></P
></DIV
>
			</P
></DIV
><DIV
CLASS="SECTION"
><HR><H3
CLASS="SECTION"
><A
NAME="AEN125"
>3.4.2&#51208;. DB Naviation 툴바를 추가하기</A
></H3
><P
>				그럭저럭 작동하긴 하지만 응용 어플리케이션이라고 부르기엔 
				뭔가 좀 부족한듯하다. GUI 응용 어플리케이션이라면 메뉴바는 
				기본적으로 포함하고 있어야 할것이며, DB 응용 프로그램이니만큼 
				레코드 제어를 위한 툴바같은것을 제공해 주면 좀더 그럴듯한 
				프로그램이 될것이다. 
				<DIV
CLASS="FIGURE"
><A
NAME="AEN128"
></A
><P
><B
>&#44536;&#47548; 12. Navigation 컴포넌트</B
></P
><P
><IMG
SRC="/images/articles/81/navigation.gif"></P
></DIV
>
			</P
><P
>				Data Controls Page 의 DBNavigator 컴포넌트를 이용하면 
				간단하게 레코드 제어및 이동등을 위한 DB 
				네비게이션 툴바를 만들수 
				있다. DBNavigator 컴포넌트를 더블릭하면 화면에 툴바가 만들어 
				질것이다. 만들어진 DBNavigator 을 DataSource1 과 
				연결시켜야 함으로 DataSource Property 의 값을 DataSource1 으로 
				설정을 하도록 하자. 그뒤 Align 과 Anchors 는 화면배치에 
				맞게 적당히 배치시키도록 하자. 
			</P
></DIV
><DIV
CLASS="SECTION"
><HR><H3
CLASS="SECTION"
><A
NAME="AEN132"
>3.4.3&#51208;. 메뉴바 추가하기</A
></H3
><P
>				이제 메뉴바를 추가하고 메뉴바에 메뉴와 
				메뉴 아이템를 추가하면 된다.
			</P
><P
>				Standard Page 에 보면 MainMenu 컴포넌트가 있다. 이걸 클릭하면 
				From 화면의 상단에 메뉴가 추가될 메뉴바가 생성되며, 
				화면가운데에는 MainMenu 컴포넌트 아이콘이 위치하게 된다. 
				<DIV
CLASS="FIGURE"
><A
NAME="AEN136"
></A
><P
><B
>&#44536;&#47548; 13. MainMenu 컴포넌트</B
></P
><P
><IMG
SRC="/images/articles/81/main_com.gif"></P
></DIV
>
				ManinMenu 컴포넌트 아이콘을 더블클릭 하면 아래와 같이 
				네뷰바를 편집할수 있는 From 이 만들어진다. 
				<DIV
CLASS="FIGURE"
><A
NAME="AEN139"
></A
><P
><B
>&#44536;&#47548; 14. MainMenu 에디트 화면</B
></P
><P
><IMG
SRC="/images/articles/81/mainmenu.gif"></P
></DIV
>
				에디트에서 메뉴를 클릭하고 Caption Property 에 &#38;File 를 
				입력하면 File 메뉴가 생성됨을 볼수 있다. 메뉴 아이템 역시 
				클릭한다음에 Caption 에 정보를 입력해 줌으로서 생성시킬수 
				있다. 여기에서는 Exit 만을 추가시키도록 하겠다. Caption 
				Property 에 &#38;Exit 를 입력하도록 하자.
			</P
></DIV
><DIV
CLASS="SECTION"
><HR><H3
CLASS="SECTION"
><A
NAME="AEN142"
>3.4.4&#51208;. 액선 이벤트 추가하기</A
></H3
><P
>				메뉴바를 생성하고 메뉴아이템인 Exit 까지 만들었는데, 
				아직 Exit 를 클릭하는 이벤트가 발생했을때 어떠한 행동을 
				취해야 하는지에 대해서는 결정해주지 않았다. 
			</P
><P
>				이러한 이벤트에 대한 액션정의를 위한 컴포넌트역시 존재한다. 
				Standard Page 에 보면 ActionList 라는 컴포넌트가 있다. 
				<DIV
CLASS="FIGURE"
><A
NAME="AEN146"
></A
><P
><B
>&#44536;&#47548; 15. ActionList 컴포넌트</B
></P
><P
><IMG
SRC="/images/articles/81/actionlist.gif"></P
></DIV
>
				이것을 더블클릭하면 다른 콤퍼넌트들과 마찬가지로 Form 화면에 
				컴포넌트 아이콘이 생성된다. 이걸 더블클릭하면 아래와 같이
				Action List 를 편집할수 있는 창이 뜬다.  
				<DIV
CLASS="FIGURE"
><A
NAME="AEN149"
></A
><P
><B
>&#44536;&#47548; 16. MainMenu 에디트 화면</B
></P
><P
><IMG
SRC="/images/articles/81/action_list_1.gif"></P
></DIV
>
				이제 Exit 라는 새로운 액션을 추가시켜 보자. 
				먼저 Categories 의 No Category를 클릭하고 마우스 오른쪽 버튼을 
				클릭해서 New Action 을 클릭하도록 하자. 그러면 Actions 
				박스에 Action1 이라는 세로운 액션이 생성될것이다. 
				이걸 클릭한다음에 Caption Property 의 이름을 Exit 로 바꾸고 
				Name은 A_Exit 로 바꾸자. 
			</P
><P
>				이제 중요한건 Exit 에 대한 액션(행동) 정의를 하는 일이다. 
				이건 직접 코딩을 해주어야 한다. 
				Actions: 에서 Exit 를 더블클릭하면, 유저가 직접 코딩가능하도록 
				아래와 같은 편집창이 뜬다. 이제 코딩을 해주어야 하는데, 
				Exit 를 클릭했을경우 취할 행동은 응용프로그램 종료이므로 
				Close(); 만 추가시켜주면 된다. 
				<DIV
CLASS="FIGURE"
><A
NAME="AEN153"
></A
><P
><B
>&#44536;&#47548; 17. Exit 액션에 대한 코딩</B
></P
><P
><IMG
SRC="/images/articles/81/action_list_2.gif"></P
></DIV
>
			</P
><P
>				이제 아까 추가시켜놓은 메뉴바의 Exit 메뉴 아이템에 대해서 
				Action 리스트의 액션을 연결시켜 주면 된다.  
			</P
><P
>				MainMenu 컴포넌트 아이콘을 더블클릭 해서 Exit 메뉴 아이템을 
				선택한후 Action Properties 에서 A_Exit 를 지정하면 된다. 
				그러면 Exit 메뉴 아이템을 클릭했을때의 액션으로 Close(); 
				가 실행되게 된다. 
			</P
><P
>				이렇게 해서 모든 작업을 완료했다. 완료한 화면은 
				대충 아래와 같이 보일것이다. 
				<DIV
CLASS="FIGURE"
><A
NAME="AEN159"
></A
><P
><B
>&#44536;&#47548; 18. 최종 화면</B
></P
><P
><IMG
SRC="/images/articles/81/last.gif"></P
></DIV
>
			</P
></DIV
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN162"
>3.5&#51208;. 최종 테스트</A
></H2
><P
>			만들어진 응용 프로그램을 Run 버튼을 눌러서 테스트 해보도록 
			하자. DB Naviation 을 이용해서 각 레코드 이동과 삭제, 추가 등이 
			가능함을 알수 있을것이다. 또한 File 메뉴의 Exit 메뉴 아이템을 
			선택해서 프로그램을 종료 시킬수도 있을 것이다. 
		</P
><P
>			테스트까지 완료되었다면 Save all 하고 프로그램을 종료하자. 
			그리고 Save all 로 지정한 디렉토리에 가면 Project1 이라는 
			실행파일이 있을것이다. 이걸 실행시켜 보면 우리가 지금까지 
			만들어본 프로그램이 실행됨을 볼수 있을것이다. 물론 
			kylix3 라이브러리를 찾기 경로에 지정시켜주어야 한다. 
			ld.so.conf 에 /usr/local/kylix3/lib 와 /usr/local/kylix3/bin 을 
			추가시키도록 하자. 
		</P
></DIV
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN166"
>4&#51208;. 결론</A
></H1
><P
>		이상 간단하게 카이릭스 3를 이용한 어플리케이션 제작방법에 대한 
		설명을 해보았다. 이 문서는 카이릭스 3를 이용하면 이처럼 간단하게 
		리눅스에서도 GUI 어플리케이션을 작성할수 있음을 보여주기 위한 
		목적으로 작성되었다. 단순한 맛보기 이상의 목적을 가지고 있지 
		않음으로 용어의 선택등에 있어서 신중하지 않았음을 이해해주길 
		바란다. 
	</P
><P
>		어쨌든 Linux 에서 사용할수 있는 훌륭한 RAD 툴이 나와서 대단히 기쁘다. 
		프로페셔널 버젼의 가격이 30만원? 정도 되는것 같던데, 한달동안 
		사용해 보고 별문제가 없다면 구입해볼 생각이다. 
	</P
><P
>		또한 앞으로도 틈틈히 카이릭스 3를 공부한 결과물을 문서로 만들어서 
		올릴생각이다. 기대하시라(--;) 
	</P
></DIV
></DIV
></BODY
></HTML
>
}}}
