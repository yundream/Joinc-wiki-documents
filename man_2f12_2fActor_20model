#title Actor model
=== Actor Model ===
다루어야 하는 데이터의 양이 많아지고 이들 데이터를 처리해야 하는 수치모델이 복잡해 짐에 따라서, 단일의 컴퓨터와 단일의 프로세스만으로는 원하는 시간내에 정보를 얻기가 힘들어지고 있다. 요구되는 정보의 질이 컴퓨터 자체의 능력을 뛰어넘은 결과라고 볼 수 있을 것 같다.

이러한 문제를 해결하기 위해서, 분산/병렬 컴퓨팅환경을 구축한다거나 멀티프로세스/멀티쓰레딩 기술이 사용되게 된다. 이러한 분산/병렬 프로그래밍에서는 '''동시성'''제어가 중요한 문제로 떠오르게 된다. '''actor model'''은 동시성문제를 해결하기 위해 제시한 여러가지 방법 중 하나이다. 

Actor model은 기본단위를 '''actor'''로 한다. 각 actor들은 마치 무대의 '''actor'''들이 서로 '''대사'''를 주고 받는 것 처럼 서로 '''message'''를 주고 받는 것으로 '''주어진 일을''' 동시에 수행한다. 최소단위인 '''actor'''들은 단지 메시지만을 주고 받기 때문에, 경쟁조건 혹은 데드락(deadlocK)와 같은 문제를 고민하지 않고 문제를 풀어나갈 수 있다. 경쟁조건과 데드락을 부르는 공유되는 자원이 없기 때문이다.

=== 기본 개념 ===
Actor model은 모두가 '''actor'''이라는 철학을 바탕으로 하고 있다. 모든게 객체다라는 OOP(:12)와 비슷하다고 볼 수 있겠다. 그러나 OOP가 '''순차적'''인 반면, Actor model은 근본적으로 '''동시적''이라는 차이점을 가진다. 

actor model은 다음과 같이 '''message'''를 주고 받음으로써 동시성을 달성한다. 
  1. 즉 다른 배우에게 몇개의 메시지를 보내면
  1. 몇개의 배우가 생성이 된다.
  1. 메시지에는 메시지를 받은 배우가 처리해야할 내용이 담겨져 있다.
각 배우들간의 통신은 비동기적으로 이루어지며, 메시지를 전부받기 위해서 기다릴 필요도 없다. 

메시지를 원하는 배우에게 보내기 위해서, '''우편'''시스템을 사용한다. 즉 메시지는 배달되어야될 배우의 주소를 가진다. 이를 '''mail address'''라고 한다. 그러므로 배우는 자신의 주소로 배달된 메시들을 가지고 통신을 할 수 있게 된다.

=== 관련글 ===
 * http://en.wikipedia.org/wiki/Actor_model
 * http://www.ibm.com/developerworks/kr/library/s_issue/20070718/
 * http://thinkr.egloos.com/1878511
