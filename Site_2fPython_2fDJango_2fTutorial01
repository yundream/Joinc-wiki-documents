#title Python 기반 웹 프레임워크 - django 

[[TableOfContents]]
== 웹 프레임워크 ==
웹 프레임워크는 웹 개발에 필요한 라이브러리 혹은 클래스의 모음입니다. 웹 기반의 응용 프로그램을 개발하기 위한 하부구조라고 보면 되겠네요. 웹 프레임워크는 자주 사용하는 라이브러리, 기능을 내장하고 있으므로 웹 개발자는 아주 쉽게 원하는 웹 애플리케이션을 개발할 수 있습니다. 

프레임워크를 사용하면, 협업하기 편하다는 장점도 가질 수 있습니다. 프레임워크는 널리 알려진 패턴(:12)으로 개발되는 경우가 많습니다. 패턴에 따라서 개발 스타일이 고정되는 측면도 있죠. 패턴을 이해하고 있다면 비교적 적은 정보만으로도 상대방이 만들고자 하는 것을 쉽게 이해할 수 있고 나의 의도도 코드로 쉽게 전달할 수가 있습니다. 

== Django를 선택한 이유 ==
웹 프로그램을 만들 때, 저는 전적으로 php(:12)만을 이용해 왔습니다. 프레임워크도 따로 사용하지 않았습니다. 개인적으로 편한 개발을 위해서 [wiki:Site/Web/Dev_framework/php_framework 만들어서] 사용한 적은 있지만 본격적으로 웹 프레임워크를 개발했다고 보긴 좀 힘들지 싶습니다. 

그러다가 분산 데이터 수집을 HTTP(:12) 기반으로 만들면 어떨까라는 생각을 하게 됐습니다. 여기에 대한 자세한 생각은 [wiki:Site/QA/DistributeMoniter 분산 모니터링 시스템]을 살펴보시면 되겠습니다. 요약하자면, REST(:12) 방식으로 데이터를 처리할 수 있는 웹 애플리케이션 서버를 만들자 뭐 이런 겁니다. 모니터링 대상 장비에 설치돼서 작동하기 때문에 '''가볍고''', '''쉽게 확장할 수 있는''' 그런 웹 애플리케이션 서버를 원했습니다. 

대략 이 웹 서버는 다음과 같이 작동할 겁니다.
{{{#!plain
// 요청별로 처리할 프로그램을 등록합니다. 
RegisterFunc["getcpu"] = "cpu.pl";  // 프로세스 CPU 정보를 얻는 프로그램
RegisterFunc["getmem"] = "mem.pl";  // 메모리 정보를 얻는 프로그램

클라이언트 요청을 분석해서 "요청 Method"와 "URI"를 가져온다.
Method가 GET이고 URI가 "getcpu", 프로세스 ID가 1234 라면
switch(요청 Method)
{
  case 'GET':
    // "cpu.pl 1234" 가 실행되겠죠.
    RunProg["getcpu"](1234); 
  case 'POST':
  case 'PUT':
  case 'OPTIONS':
  ...
}
}}}

요청은 아래와 같을 겁니다.
{{{#!plain
GET /getcpu/1234 HTTP/1.1
HOST: myhost.com
}}}
등록 처리 프로그램 목록은 설정파일로 관리할 수 있을테고, 기능 추가가 필요하면 스크립트 만들어서 설정에 내용만 추가하면 되니 간단하게 기능을 확장할 수 있습니다.

처음엔 C++로 만들었는데, Perl(:12)과 Python(:12)을 고민하게 됐습니다. 이런 시스템은 용이한 배포가 중요한데, 컴파일된 코드는 배포성이 떨어지기 때문입니다. 그래서 스크립트 언어를 생각하게 된거죠.

'''그러다가 그럴바엔 그냥 만들어놓은 프레임워크를 쓰는게 어떠겠냐'''라는 생각에서 프레임워크를 찾게 됐습죠. 그 중 Python 기반의 Django를 선택하게 됐구요. 유명한 RoR이나 펄 기반의 Catalyst가 있겠고, PHP(:12)기반의 프레임워크도 몇개 있겠는데요. 순전히 Python을 공부하고 있다는 이유하나로 Django를 선택하게 됐습니다.

== Django 웹 애플리케이션 구조 ==
Django는 MVC(:12) 모델을 따르는 웹 프레임워크라고 소개하고 있더군요. 프레임워크는 어떤 패턴을 사용했는지, 그 패턴으로 어떻게 시스템을 구성했는지를 이해하는게 중요하죠. 그것만 이해한다면 절반은 이해한 거라고 할 수 있으니까요. 그래서 Django의 구성을 좀 살펴봤습니다. 

{{{#!html
<img src="https://docs.google.com/drawings/pub?id=1YpXFtHNmZHcf67MknMxEPBy1fKAqboKhrZ37OIhf4PQ&amp;w=603&amp;h=346">
}}}

일반적으로 생각했던 구조군요. Project를 만들고, 웹 애플리케이션을 만듭니다. 이때 웹 애플리케이션은 자신의 model과 view를 가지게 되구요. 그러니 Project는 일종의 컨테이너쯤으로 봐도 되겠네요. Project는 데이터 베이스, 사용할 웹 애플리케이션 정보등의 설정 정보를 가지고 있으며 이들 설정 정보를 이용 등록된 웹 애플리케이션을 실행합니다.

예를 들어 webnews 사이트를 만들려고 한다면, 대략 다음과 같은 구성을 가지게 될 겁니다.
  1. 먼저 '''webnews project'''를 만듭니다.
      * webnews project에서 사용할 데이터베이스를 만들어야 겠죠 ?
      * 애플리케이션을 등록하구요. 게시판, news 화면, news 등록 등을 웹 애플리케이션으로 등록하면 되겠죠 ?
      * url 스타일도 지정할 수 있습니다. 요즘에는 URI(:12)만으로 사이트 URL 구조를 만들기도 하죠. 
  1. 이제 webnews 사이트를 위한 애플리케이션을 개발해야 겠죠. 뉴스등록, 보여주기, 사용자 게시판 등등이 되겠죠. 이들은 각각 model과 view를 가지게 되겠네요.

== Django로 웹 서비스 만들기 ==
대략 구조도 확인했으니, 간단 웹 서비스를 만들어봐야 겠습니다. 물론 python(:12)언어에 대한 기본적인 이해는 필요하겠는데요. http://docs.python.org/tutorial/ 로 공부를 했습니다. 문법을 이해하는 수준에서 대충 읽었습니다. 뭐 사용하다 보면 익혀지겠지라는 안이한 생각으로.

=== 개발 환경 ===
개발 환경은 다음과 같습니다.
  * Ubuntu Linux(:12) 10.04
  * 데이터 베이스로 SQLite(:12)를 이용하기로 했다는

=== Django 설치 ===
우분투 리눅스를 기준으로 설명합니다.
  1. python이 설치돼 있는지 확인해야 겠죠. 아마 설치돼 있을 겁니다.
  1. django를 설치합니다.
     {{{#!plain
# apt-get install python-django
}}}

=== 프로젝트 만들기 ===
이제 프로젝트를 만들어야 겠군요. django-admin 을 이용해서 프로젝트를 만들 수 있습니다. 프로젝트의 이름은 webnews로 했습니다. 인터넷 뉴스 시스템입니다.
{{{#!plain
# django-admin startproject webnews
}}}

=== 프로젝트 환경 만들기 ===
이제 webnews 디렉토리가 만들어진 걸 확인할 수 있을건데요. 디렉토리와 함께, 웹 서비스 환경을 위한 설정파일이 생깁니다.
{{{#!plain
# cd webnews
# ls -al 
__init__.py   manage.py  settings.py   templates  urls.pyc
__init__.pyc  news      settings.pyc  urls.py  
}}}
  * manage.py : Django 프로젝트를 다루기 위한 유틸리티 프로그램입니다. 
  * settings.py : Django 프로젝트의 설정 파일입니다.
  * urls.py : Django의 URL 형식을 설계하기 위해서 사용합니다. 

먼저 설정을 해야 겠죠. settings.py 파일을 수정해서 환경을 설정할 수 있습니다. 가장 중요한건 데이터 베이스의 선택인데요. 저는 sqlite(:12)를 선택하기로 했습니다. 다음은 settings.py의 수정 내용입니다.
{{{#!plain
DATABASE_ENGINE = 'sqlite3'          
DATABASE_NAME = 'webnews.db'  
DATABASE_USER = ''             # Not used with sqlite3.
DATABASE_PASSWORD = ''         # Not used with sqlite3.
DATABASE_HOST = ''             # Set to empty string for localhost. Not used with sqlite3.
DATABASE_PORT = ''             # Set to empty string for default. Not used with sqlite3.
}}}

이제 newbnews가 사용할 애플리케이션을 만들겠습니다. 애플리케이션의 이름은 news로 하겠습니다. 
{{{#!plain
webnews # django-admin.py startapp news 
}}}
이제 news 디렉토리가 만들어질건데요. 4개의 파일이 만들어진걸 확인할 수 있을 겁니다. 
{{{#!plain
# ls  news/
__init__.py  models.py  tests.py  views.py
}}}
모델과 뷰를 조작하기 위한 파일이 보이는 군요.

여기에서 만들 프로그램은 웹으로 서비스가 될 겁니다. 그럴려면 HTML(:12)로 구성된 view를 위한 파일이 있어야 겠죠. 저는 templates 디렉토리를 만들고, 이 아래에 애플리케이션 별 HTML 파일을 두기로 했습니다. 
{{{#!plain
# mkdir templates
}}}

그리고 이 정보를 settings.py에 기록했습니다.   
{{{#!plain
import os
PROJECT_ROOT = os.path.realpath(os.path.dirname(__file__))

TEMPLATE_DIRS = (
    os.path.join(PROJECT_ROOT, 'templates')
)
}}}

지금까지의 디렉토리 구성을 정리해 보자면 대략 다음과 같습니다.
{{{#!plain
---+--- webnews ----+--- templates ---+--- news
                    |
                    +--- news
}}}

이 것으로 프로젝트를 위한 기본적인 환경을 설정했습니다. 정리하자면
  1. 프로젝트를 만들고
  1. 프로젝트에서 사용할 웹 애플리케이션을 만들고 
  1. view에서 사용할 HTML 문서 디렉토리를 만들었습니다. 

이제 모델과 view를 조작해서 실제 작동하는 웹 애플리케이션을 개발하면 되겠네요.

=== model 개발 ===
webnews 프로젝트는 news 라는 웹 애플리케이션을 가지고 있습니다. 이제 모델과 view를 만들어야 겠죠. 먼저 모델을 만들어 볼까 합니다. 모델은 '''model.py'''을 수정하면 됩니다. 모델은 말 그대로 웹 애플리케이션에서 사용할 데이터 구조를 모델링하기 위해서 사용하는데요. 이 모델로 부터 sql을 자동으로 만듭니다. news를 구성하는 데이터 요소들을 생각하면서 코드를 만들어야 겠죠.
{{{#!plain
from django.db import models

# Create your models here.
class News(models.Model):
    # news title 
    title   = models.CharField(max_length=255)
    # news contents 
    content = models.TextField()
    # news create date 
    create_date = models.DateTimeField(auto_now_add=True)  
    # news last update time 
    last_update = models.DateTimeField(auto_now=True) 
    # new owner 
    owner = models.CharField(max_length=64)
}}}

=== view 개발 ===
view를 개발합니다. view는 웹 브라우저로 전송될 페이지로 news 웹 애플리케이션의 기능별 페이지를 만들면 되겠죠. 즉 뉴스 목록을 보여주기. 클릭하면 전체내용 보여주기. 추가/수정/삭제 관련 페이지입니다. 
{{{#!plain
from django.views.generic.list_detail import object_list
from django.views.generic.list_detail import object_detail
from django.views.generic.create_update import create_object
from django.views.generic.create_update import update_object
from django.views.generic.create_update import delete_object
from django.core.urlresolvers import reverse
 
from models import News
 
def news_list(request):
    return object_list(request, 
        queryset=News.objects.all(),
        template_name='news/list.html',
        template_object_name='news'
    )
 
def news_detail(request, id):
    return object_detail(request,
        queryset=News.objects.all(),
        object_id=id,
        template_name='news/detail.html',
        template_object_name='news'
    )
 
def news_create(request):
 
    return create_object(request,
        model=News,
        template_name='news/create.html',
        post_save_redirect=reverse("news_list")
    )            
 
def news_update(request, id):
 
    return update_object(request,
        model=News,
        object_id=id,
        template_name='news/update.html',
        post_save_redirect=reverse("news_list")
    )            
 
def news_delete(request, id):
 
    return delete_object(request,
        model=News,
        object_id=id,
        template_name='news/delete.html',
        post_delete_redirect=reverse("news_list")
    )
}}}

=== URL 정책 정하기 ===
Django는 정규표현을 이용해서 URL 정책을 서비스에 맞게 짤 수 있습니다. url.py를 수정하면 되는데요. 정규표현식으로 URL을 표현하고 해당 URL요청이 들어왔을 때, 호출할 view를 짝지워 주는 형식으로 작성합니다.

URL은 애플리케이션 이름을 기준삼아서 계층적으로 구성하는게 좋겠죠. 관리하기도 편하고. 지금은 news 애플리케이션 하나만 있으니까. webnews/urls.py를 다음과 같이 구성했습니다.
{{{#!plain
from django.conf.urls.defaults import *

urlpatterns = patterns('',
    (r'^news/', include('news.urls')),
)
}}}

news/로 시작되는 URL에 대해서 news 애플리케이션의 url 정책을 사용하겠다는 얘기입니다. news/urls.py를 수정했습니다.
{{{#!plain
from django.conf.urls.defaults import *
 
import views
 
urlpatterns = patterns('', 
    url(r'^list/$', views.news_list, name='news_list'),  
    url(r'^detail/(?P<id>\d+)/$', views.news_detail, name='news_detail'),  
    url(r'^new/$', views.news_create, name='news_create'),  
    url(r'^update/(?P<id>\d+)/$', views.news_update, name='news_update'),  
    url(r'^delete/(?P<id>\d+)/$', views.news_delete, name='news_delete'),  
)
}}}

=== 웹 애플리케이션 등록 ===
웹 애플리케이션의 대략적인 틀을 만들었으니 Project에 news를 등록합니다. setting.py에 추가하면 됩니다.
{{{#!plain
INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'news',  # News application 
)
}}}
=== 모델에서 데이터 베이스 만들기 ===
모델에서 데이터 베이스 만들어야 겠는데, 이건 Django 툴이 알아서 해줍니다. 앞서 news 애플리케이션을 등록했기 때문에 news의 model을 읽어서 news 테이블을 만들어 줍니다. news_news 테이블이 보이네요.
{{{#!plain
# ./manage.py syncdb
Creating table auth_permission
Creating table auth_group_permissions
Creating table auth_group
Creating table auth_user_user_permissions
Creating table auth_user_groups
Creating table auth_user
Creating table auth_message
Creating table django_content_type
Creating table django_session
Creating table django_site
Creating table news_news
...
...
}}}

=== view Page 만들기 ===
음 view.py를 다시 한번 봐야 겠네요. news_list를 중심으로 살펴보겠습니다. 
{{{#!plain
def news_list(request):
    return object_list(request,
        queryset=News.objects.all(),
        template_name='news/list.html',
        template_object_name='news'
    )
}}}
목록을 보여주는 view입니다. 호출할 페이지 이름은 news/list.html 이구요. 여기에서 object_list 함수의 용도가 궁금 했습니다. 살펴봤더니, Django에서 제공하는 '''Generic View 함수'''들 중 하나더군요. Generic View 함수에 대한 내용은 https://docs.djangoproject.com/en/dev/ref/generic-views/?from=olddocs 을 참고하시면 되겠습니다.

news/list.html 을 만들었습니다. 
{{{#!plain
<h2>뉴스 목록</h2>
{% block content %}
    {% if news_list %}
    <ul>
    {% for news in news_list %}
        <li><a href="{% url news_detail news.id %}">{{ news.title }}</a> <small>[last edited {{news.last_update|timesince}} ago]</small></li>
    {% endfor %}
    </ul>
    {% else %}
    등록된 뉴스가 없습니다.
    {% endif %}
{% endblock %}
}}}
PHP와 마찬가지로 문서 중에 코드를 삽입해서 view 페이지를 만드는 군요.

=== 개발용 독립 웹 서버 실행 ===
개발한 내용을 빠르게 확인하기 위해서 manage.py로 서비스를 실행할 수 있습니다.
{{{#!plain
# ./manage.py runserver
}}}
문서를 봤더니 runserver는 어디까지나 개발자를 위한 실행 방법이지, 정식 서비스를 위한 실행방법은 아니라고 합니다. 아니 그럼 Apache(:12)와 함께 사용해야 하는 건가 ? 라는 생각이 들더군요. 애초 APM 조합이 무거워서 가벼운 웹서버를 찾은건데.. Apache와 함께 묶어야 한다니.

하긴 Tomcat도 Apache와 함께 작동할때 HTTP의 기능을 제대로 활용할 수 있는 것으로 알고 있기는 하지만, 부담이 되는건 사실입니다. lighttpd 같은 경량 웹서버와 함께 사용할 수 있는지 알아봐야 겠네요.

== 후기 ==
간단히 Django 프레임워크를 살펴 봤는데요. 대충이지만 웹 프레임워크를 만들어본 경험이 있어서인지, 비교적 쉽게 이해가 됐습니다. 사람의 생각이란 것은 역시 비슷비슷 한건가 봅니다.

Python을 본격적으로 공부하기로 마음 먹었으니 그리고 웹 프레임워크를 하나 가져가야 하니, 앞으로는 Django로 웹 애플리케이션을 만들어 볼까 합니다. 일단 Django(:12)로 분산 모니터링 시스템 구축하는 것 부터 해봐야 겠네요.

{{{#!comment
문서 작성일 : 2011년 7월 하고도 19일
}}}

[[Tag(Django,python)]]
