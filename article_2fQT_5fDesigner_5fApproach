#title QT Designer Approach

이문서는 [wiki:Site_QT QT 미니사이트]프로젝트의 일환으로 작성되는 문서다.

=== 소개 ===
''QT Designer''은 QT 2.x버젼부터 포함된 비쥬얼 폼 디자인 프로그램이다. 이 프로그램은 디자인된 폼의 내용을 '''.ui'''파일 포맷으로 저장한다. QT Designer은 소위 말하는 GUI노가다로 부터 개발자를 해방시키기 위한 목적으로 만들어 졌다. QT Designer는 .ui파일을 읽고 쓰는 것으로 GUI를 디자인한다. .ui 파일은 XML을 이용해서 dialog form을 기술한다. 각 다이얼로그는 공통된 요소들 즉 이름, 크기, 위치, 배열, 아이템, 색깔과 같은 요소들을 가지고 있는데, 이는 XML(12)을 이용해서 효율적으로 기술할 수 있는 정보들이다. 이렇게 해서 GUI를 XML로 기술하고 나면, User Inter Compiler인 uic를 이용해서 XML의 분석결과를 토대로 C++코드로 만들어낸다.  

XML에 대한 자세한 내용은 [wiki:article_xml XML 사용하기]를 참고하기 바란다.

QT3.0에 포함된 QT Designer은 기존 버젼에 비해서 많은 진보된 기능들을 포함하게 된다. 
 * 애플리케이션에 포함되는 유저 인터페이스를 위한 프로젝트 관리 
 * Signal/Slot를 위한 코드 에디터의 지원
 * dynamic form loading의 지원. .ui파일은 실행시간에 해석되어서 인터페이스로 변활할 수 있다. 이는 코드의 수정이나 재 컴파일 과정을 거치지 않고 유저 인터페이스를 변경할 수 있음을 의미한다.

이글의 목적은 위의 기능들이 어떠한 방법을 통해서 구현되는지에 대한 내용을 다룬다. 이는 QT Designer를 이해하고 사용하는데 많은 도움을 줄 것이다. 

QT Designer은 비쥬얼 '''디자인'''툴 임을 기억하기 바란다. 이것은 완전히 통합된 개발환경이 아니다. QT Designer는 다른 어떤 외부적인 툴의 도움없이 쉽고 강력하게 GUI를 만들어주기 위한 목적으로 작성된 툴이다. 이런 이유로 보통은 Kdevelop와 같은 통합개발툴과 함께 사용하거나, 유저 인터페이스만 만든후 실제 코드는 vi등과 같은 외부 에디터를 통해서 작성하는 등 다른 툴들과 같이 사용하게 된다.     

=== 프로젝트 관리 ===
QT2.x 시절의 designer은 프로젝트 관리의 개념이 없었다. 각각의 UI는 별개의 파일로 씌여졌으며, 이들 .ui간의 연결이 이루어지지 않았다. 한마디로 순수하게 UI만드는 데에만 충실했다고 볼 수 있다. 그러던게 3.X로 넘어오면서 아래와 같은 기능을 포함하게 되고 UI를 프로젝트 수준에서 관리 할 수 있게 되었다. 
 * 연관된 폼끼리 그룹지울 수 있다.
 * 다른 폼들간에 이미지를 공유할 수 있다.
 * 다른 폼들간에 데이터베이스 정보를 공유할 수 있다.  

위의 각 특징들에 대해서 세부적으로 알아보도록 하겠다.

==== 폼의 그룹화 ====
폼을 그룹화 한다는 뜻은 QT Designer이 같은 프로젝트에 있는 .ui파일의 목록을 관리할 수 있음을 말한다. 각 폼들간의 이동은 마우스 클릭으로 간단하게 이루어진다. 

==== 이미지의 공유 ====
QT 2.x의 QT Designer은 폼에 포함된 이미지를 다른 폼과 공유할 수 없었다. 보통 프로그램을 만들다 보면 동일한 이미지를 여러개의 다른 폼에서 사용해야 되는 경우가 많은데 이를 공유할 수 없다는 것은 자원의 낭비를 의미한다.   

QT 3.x 에서는 project image collection라는 개념을 이용해서 이 문제를 해결하고 있다. 만약에 당신이 project image collection에 프로젝트에서 사용될 이미지를 추가시키기만 하면 된다. 이들 이미지는 프로젝트의 images/ 디렉토리에 PNGs (portable network graphics)형태로 저장되고 공유해서 사용할 수 있다. 

==== 데이터베이스 설정 공유 ====
QT 3.0에서는 QT SQL이라는 새로운 모듈을 제공하고 있다. QT Designer은 SQL 모듈과 완전히 통합되어 있으며 데이터베이스 연결에서 부터 쿼리 결과를 보여주는 것까지 한번에 해결할 수 있다.  

당신은 프로젝트를 생성할 때 프로젝트를 위한 데이터베이스 연결을 설정할 수 있다 (Project > Database). 이렇게 해서 만들어진 데이터베이스 연결정보는 .db파일로 저장되며 프로젝트 전역적으로 이용할 수 있다. .db파일에는 여러개의 데이터베이스 관련 정보를 포함할 수 있으며 개발자는 원하는 DB설정정보를 선택할 수 있다.  

==== .pro 파일 ====
QT Designer은 프로젝트의 정보를 저장하기 위한 파일을 필요로 한다. 이 파일에는 폼의 목록, 이미지들 그리고 사용할 수 있는 데이터베이스 정보등이 저장된다. QT Designer은 이들 정보를 .pro에 저장해 두는데 이들 정보는 tmake나 qmake를 이용해서 Makefile을 만드는데 사용한다. 

일단 qmake를 이용해서 .pro로 부터 Makefile을 만들었다면 폼의 모양변경등이 일어 났을 때 이를 신경쓰지 않고 작업할 수 았다. 예를들어 만약 당신이 폼의 모양이나 내용을 약간 바꿨다면 변경된 내용은 .ui로 자동적으로 적용되고 다른거 신경쓸 필요 없이그냥 '''make''' 명령만 한번 내려주면 원하는 프로그램이 만들어진다. 

=== 폼이 코드로 만들어 지는 과정 ===
다음은 QT Designer로 만들어지는 .ui 파일과 애플리케이션 코드와의 관계를 나타낸 그림이다.

{{{#!html
<img src=http://doc.trolltech.com/3.3/designer1.jpg>
}}}

QT Designer은 .ui 파일에서 폼의 내용을 읽거나 쓴다. 만들어진 .ui파일은 XML파일인데 user interface compiler (uic)에 의해서 form.h와 form.cpp와 같은 헤더파일과 소스코드파일로 만들어진다. 그리고 form.h를 인클루드 시키는 main.cpp 파일을 생성한다. main.cpp에는 main함수가 포함되어 있으며 QApplication 객체를 포함한다.  
