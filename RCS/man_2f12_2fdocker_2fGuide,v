head	1.14;
access;
symbols;
locks
	root:1.14; strict;
comment	@# @;


1.14
date	2015.05.16.18.14.17;	author root;	state Exp;
branches;
next	1.13;

1.13
date	2015.05.16.17.37.54;	author root;	state Exp;
branches;
next	1.12;

1.12
date	2015.05.16.17.37.12;	author root;	state Exp;
branches;
next	1.11;

1.11
date	2015.05.16.16.58.11;	author root;	state Exp;
branches;
next	1.10;

1.10
date	2015.05.16.15.52.40;	author root;	state Exp;
branches;
next	1.9;

1.9
date	2015.05.16.08.10.18;	author root;	state Exp;
branches;
next	1.8;

1.8
date	2015.05.13.08.44.47;	author root;	state Exp;
branches;
next	1.7;

1.7
date	2015.05.13.06.57.30;	author root;	state Exp;
branches;
next	1.6;

1.6
date	2015.05.13.06.47.56;	author root;	state Exp;
branches;
next	1.5;

1.5
date	2015.05.13.05.30.17;	author root;	state Exp;
branches;
next	1.4;

1.4
date	2015.05.13.03.38.12;	author root;	state Exp;
branches;
next	1.3;

1.3
date	2015.05.13.03.23.35;	author root;	state Exp;
branches;
next	1.2;

1.2
date	2015.05.13.02.06.23;	author root;	state Exp;
branches;
next	1.1;

1.1
date	2015.05.12.07.46.10;	author root;	state Exp;
branches;
next	;


desc
@./data/text/man_2f12_2fdocker_2fGuide
@


1.14
log
@119.64.102.68;;yundream;;
@
text
@#title Docker User Guide 

== 도커 유저 가이드 ==
[https://docs.docker.com/userguide/ Docker User Guid]의 번역 문서다.

=== 도커 애플리케이션 개발 : Hello world ===
도커 컨테이너의 애플리케이션을 실행하는 방법을 살펴본다. 도커는 컨테이너 기반(container-based)의 가상화 플랫폼으로, 애플리케이션을 쉽게 개발/배포 할 수 있도록 도와준다. 도커 애플리케이션을 실행하는 방법을 살펴보자.

[wiki:man/12/docker/Guide/HelloWorld 문서 보기]
=== 컨테이너 작업하기  ===
컨테이너를 관리하는 방법을 살펴보자. 컨테이너의 실행, 중단, 삭제, 목록확인 등 컨테이너를 관리하는 방법을 살펴본다. 

[wiki:man/12/docker/Guide/WorkingWithContainer 문서 보기]
=== 컨테이너 데이터 관리 ===
컨테이너는 '''[wiki:man/12/docker/aufs AUFS]'''파일 시스템을 기본으로 작동한다. 읽기 전용의 이미지를 이용해서 컨테이너를 실행하고, 컨테이너에서 작성된 데이터는 쓰기 전용의 볼륨에 기록 한다. 데이터를 저장하기 위한 볼륨을 만들고, 컨테이너에서 이용 할 수 있도록 마운트하는 방법을 알아보자. 

[wiki:man/12/docker/Guide/DataWithContainer 문서 보기]
=== 도커 이미지 작업 ===
[wiki:man/12/docker/Guide/dockerimages 문서 보기]
@


1.13
log
@119.64.102.68;;yundream;;
@
text
@d19 1
@


1.12
log
@119.64.102.68;;yundream;;
@
text
@d7 1
a7 3
도커 컨테이너의 애플리케이션을 실행하는 방법을 살펴본다.

도커는 컨테이너 기반(container-based)의 가상화 플랫폼으로, 애플리케이션을 쉽게 개발/배포 할 수 있도록 도와준다. 도커 애플리케이션을 실행하는 방법을 살펴보자.
a9 1

d11 1
a11 3
컨테이너를 관리하는 방법을 살펴보자.

컨테이너의 실행, 중단, 삭제, 목록확인 등 컨테이너를 관리하는 방법을 살펴본다. 
a13 1

a17 1

@


1.11
log
@119.64.102.68;;yundream;;
@
text
@d2 24
a25 1
[[subindex]]
@


1.10
log
@119.64.102.68;;yundream;;
@
text
@d2 1
a2 358
<!> 미완성
[[TableOfContents]]
== Docker User Guide ==
일단 하나의 페이지에서 작업하고, 나중에 분리
== Docking Application : "Hello World" ==
'''docker run'''으로 도커 컨테이너를 만들 때, 애플리케이션을 실행 할 수 있다. 
=== Hello World ===
{{{#!plain
# docker run ubuntu /bin/echo "hello World"
hello World
}}}
  1. '''docker'''가 실행 되면 '''run'''명령을 수행한다. '''docker run'''은 다음에 오는 도커이미지를 실행한다.  
  1. '''ubuntu'''는 실행할 도커 이미지 이름이다. 
  1. 이미지 이름을 설정하면, 먼저 도커는 로컬 도커 호스트로 부터 이미지를 찾는다. 만약 찾을 수 없다면, '''public image registry'''(Docker Hub)에 있는 이미지를 이용한다. 
  1. 실행된 컨테이너에서 다음 명령을 실행한다. 
   {{{#!plain
/bin/echo "Hello world" 
}}}
컨테이너는 자신의 시스템 경로에 있는 "/bin/echo" 명령을 찾아서 실행한다. 그 결과 "Hello World"메시지를 출력한다. 메시지를 출력한 컨테이너는 종료한다.

=== Interactive Container ===
도커에서 작업을 하고 싶다면 '''docker run'''시 /bin/bash를 띄우면 된다. 그러면 bash 쉘을 빠져나가기 전까지, 컨테이너에서 작업을 수행 할 수 있다.
{{{#!plain
# docker run -t -i ubuntu /bin/bash
root@@327568642c19:/# 
}}}
  * -t : 새로운 컨테이너에 터미널을 할당한다. 
  * -i : 표준입력을 컨테이너에 전달한다.
컨테이너는 /bin/bash를 실행하는 데, 실행 결과는 터미널에 출력되며, 표준입력을 이용해서 /bin/bash와 상호작용 할 수 있다. 그 결과 마치 컨테이너에 접속한 것과 같은 환경에서 작업을 할 수 있다.
{{{#!plain
root@@327568642c19:/# pwd
/
root@@327568642c19:/# ls
bin   dev  home  lib64  mnt  proc  run   srv  tmp  var
boot  etc  lib   media  opt  root  sbin  sys  usr
}}}
exit 혹은 '''Ctrl+D'''를 입력해서 쉘을 빠져나오면, 컨테이너도 종료된다.

=== 데몬 ===
애플리케이션 실행이 끝난 후 컨테이너가 종료되는 것도 유용하게 사용 할 수 있기는 하지만 터미널을 점유해 버려서 사용이 귀찮다. '''-d'''를 이용하면 데몬 형태로 백그라운드에서 작동하도록 할 수 있다.
{{{#!plain
# docker run -d ubuntu /bin/sh -c "while true; do echo hello world; sleep 1; done"
aa26447cd5cbd26bcc850447ddaf43a9b1b8e61ea83e3076c2e0a302b722ca6e
}}}
출력하는 값은 '''컨테이너 아이디(container ID)'''다. 아무리 기달려도 '''hello world'''가 출력되지는 않을 거다.

'''docker ps'''명령으로 컨테이너 목록을 확인해 보자. 앞서 실행한 컨테이너가 여전히 작동 중인 걸 확인 할 수 있다.
{{{#!plain
# docker ps
CONTAINER ID   IMAGE          COMMAND                CREATED          STATUS          PORTS      NAMES
aa26447cd5cb   ubuntu:14.04   "/bin/sh -c 'while t   10 minutes ago   Up 10 minutes              nostalgic_hoover    
}}}

돌아가는 것 같기는 한데, 화면에 출력되는 정보가 없어서 제대로 돌아가는지 알 수가 없다. '''docker logs''' 명령을 실행해서 컨테이너 내부에서 실행 중인 명령의 결과를 표준출력 할 수 있다. 이 경우 '''hello world'''를 출력할 거다. 
{{{#!plain
# docker logs aa26447cd5cb
hello world
hello world
....
}}}
이 것으로 컨테이너를 이용해서 "hello world" 애플리케이션을 실행했다. 

데몬 형태로 실행 중인 컨테이너는 '''docker stop'''으로 종료할 수 있다.
{{{#!plain
# docker stop aa26447cd5cb
}}}

== 컨테이너 데이터 관리 ==
=== 데이터 볼륨 ===
데이터 볼륨은 '''Union File System''' 형식을 따른다. 따라서 하나 이상의 컨테이너가 사용 할 수 있다. 데이터 볼륨은 데이터 공유와 영구적 데이터 보관을 위한 유용한 기능을 제공한다.  
  * 볼륨은 컨테이너가 만들어 질 때, 초기화 된다. 컨테이너가 실행될 때, 데이터 볼륨이 포함되는 경우 새로운 볼륨으로 복사된다. 
  * 데이터 볼륨은 재사용 가능하며, 컨테이너들 간에 공유 할 수 있다.
  * 데이터 볼륨은 직접 수정할 수 있다.  
  * 데이터 볼륨은 컨테이너가 삭제되도 계속 유지된다.
데이터 볼륨은 컨테이너의 주기와는 독립적으로 작동하며, 데이터를 유지(persist data)하기 위해서 사용한다. 도커는 컨테이너를 삭제 할 때, 자동으로 볼륨을 삭제하지 않는다. 더 이상 사용하지 않는 볼륨은 '''gargabe collect''' 해줘야 한다. 
=== 데이터 볼륨 추가 ===
도커 컨테이너를 만들 때(docker run), '''-v'''옵션을 이용해서 컨테이너에 데이터 볼륨을 추가 할 수 있다. '''-v''' 뒤에 마운트할 볼륨을 나열하면 된다. 하나의 데이터 볼륨을 포함하는 컨테이너를 만들어보자. 
{{{#!plain
# docker run -i -t -v /webapp ubuntu /bin/bash
}}}
컨테이너에 '''/webapp''' 디렉토리가 만들어진 걸 확인 할 수 있다. 이제 호스트에 마운트 포인터를 만들고, '''/webapp'''와 마운트하면 호스트와 연결되는 컨테이너 볼륨을 만들 수 있다. '''/webapp'''에 데이터를 쓰면, 호스트에 저장되기 때문에 persistent 한 데이터 사용이 가능하다.

=== 데이터 볼륨의 마운트 디렉토리 설정 ===
볼륨을 마운트 할 때, 컨테이너의 특정 디렉토리로 마운트 포인트를 설정 할 수 있다.
{{{#!plain
# docker run -i -t -v /webapp:/opt/webapp ubuntu /bin/bash
root@@2db13a7152ea:/# cd /opt/
root@@2db13a7152ea:/opt# ls
webapp
}}}
이제 /opt/webapp아래서 작업한 내용은 /webapp에 저장이 되며, 컨테이너를 종료하더라도 데이터를 계속 유지 할 수 있다.

=== 단일 파일 마운트 ===

=== 데이터 볼륨 컨테이너 ===
컨테이너가 가지고 있는 persistent 데이터를 다른 컨테이너와 공유 할 수도 있다. 다른 컨테이너와 공유하려면 이름(Name)이 있어야한다. 도커에서 제공하는 네임드 데이터 볼륨 컨테이너(Named data volume container)를 이용해서 공유 할 수 있다. 

'''joincapp'''라는 이름의 볼륨을 만들어서 공유하기로 했다.  
{{{#!plain
# docker create -v /joincapp --name joincapp ubuntu /bin/true
8103966e331a20c707708cd70f62698fb6335f8baaf5881457a754686210e1b4
}}}
반환 하는 값은 볼륨 컨테이너의 ID로 /var/lib/docker/containers/<conainer_id>에서 확인 할 수 있다. 컨테이너의 설정 정보는 config.json 이 가지고 있다. 
{{{#!plain
# cat config.json | json_pp 
{
   "State" : {
      "Restarting" : false,
      "OOMKilled" : false,
      "Running" : false,
      "ExitCode" : 0,
      "StartedAt" : "0001-01-01T00:00:00Z",
      "FinishedAt" : "0001-01-01T00:00:00Z",
      "Pid" : 0,
      "Paused" : false,
      "Error" : ""
   },
   "AppArmorProfile" : "",
   "ResolvConfPath" : "",
   "HostsPath" : "",
   "Image" : "07f8e8c5e66084bef8f848877857537ffe1c47edd01a93af27e7161672ad0e95",
   "Created" : "2015-05-13T07:24:32.524168199Z",
   "Volumes" : {
      "/joincapp" : "/var/lib/docker/vfs/dir/1d709224a3642c60b0a2c3ec3842357065461185797c6c14daad939846648635"
   },
....
}}}
주요 값들을 살펴보자.
  * Volumes : 컨테이너가 사용하는 볼륨의 목록을 가지고 있다. 앞서 만든 /joincapp 볼륨을 확인할 수 있다. /joincapp 에서 작업한 내용들은 이 경로에 저장된다.   
  * ID : 컨테이너의 아이디  
  * Name : 컨테이너 이름
  * VolumesRW : 읽기/쓰기가 가능한 볼륨의 목록을 가지고 있다. /joincapp은 true로 설정된다.

이렇게 만든 볼륨 컨테이너는 '''--volumes-from'''을 이용해서 공유할 수 있다.
{{{#!plain
# docker run -it --volumes-from joincapp ubuntu /bin/bash
}}}
/joincapp 디렉토리 밑에서 작업을 해보자. Volumes 설정의 디렉토리에 작업내용이 반영되는 걸 확인할 수 있을 거다. 사실상 Volumes 설정된 디렉토리를 컨테이너들이 공유하는 거라고 보면 된다.    

도커는 사용하지 않는 볼륨컨테이너에 대한 가비지 컬랙션 기능을 제공하지 않는다. 메뉴얼하게 직접 삭제해야 한다. 관리 애플리케이션을 만들어야 한다는 이야기. 

도커의 볼륨 컨테이너는 좋은 기능이긴 하지만 호스트에 종속적이다. 개인이 사용할 때는 문제가 없지만, 도커 기반의 클라우드 인프라를 구축 할 경우 문제가 될 수 있다. 원격에 볼륨을 만들어서 마운트 후 사용하는 등의 방법을 사용해야 한다. NFS나 iSCSI등을 활용 하면 되겠다. 서비스 하기에는 iSCSI가 더 적당할 것 같다.
=== 백업, 복구, 마이그레이션 ===
또 다른 유용한 기능으로 백업,복구,마이그레이션이 있다. --volumes-from 옵션을 이용해서 마운트된 볼륨을 백업할 수 있다.
{{{#!plain
# docker run --volumes-from dbdata -v /backup:/backup \
  ubuntu tar cvzf /backup/backup.tar.gz /dbdata
}}}
  * --volumes-from 으로 dbdata를 컨테이너에 
  * 로컬의 /backup을 컨테이너의 /backup으로 마운트 한다.
  * tar 명령을 이용해서 /dbdata 볼륨을 /backup/backup.tar.gz으로 백업한다. 
복구하는 방법이다. 
{{{#!plain
# docker run --volumes-from dbdata2 -v /backup:/backup ubuntu \
  tar xvzf /backup/backup.tar.gz
}}}
  * dbdata2 볼륨으로 컨테이너를 실행한다. 복구한 파일의 정보는 dbdata2 볼륨에 저장돼서 다른 컨테이너에서 사용 할 수 있다.
  * 로컬의 /backup을 컨테이너의 /backup으로 마운트 한다. 
  * tar 명령을 이용해서 backup.tar.gz의 압축을 푼다. 
복구한 데이터 볼륨으로 컨테이너를 실행했다.
{{{#!plain
# docker run --volumes-from dbdata2 -it ubuntu /bin/bash
}}}

== 컨테이너로 작업하기 ==
컨테이너는 '''docker run''' 명령으로 실행할 수 있다. 이 때 두 종류의 컨테이너를 실행 할 수 있다.
   * 포그라운드(forground)로 실행되며, 키보드와 모니터를 이용해서 유저와 상호작용 할 수 있다. 
   * 백그라운드로 실행 할 수 있다.
그 밖에 아래와 같은 도커 명령들을 살펴볼 것이다.
  * docker ps : 컨테이너의 목록 확인
  * docker logs : 컨테이너의 표준출력을 확인할 수 있다.
  * docker stop : 실행중인 컨테이너 종료
도커 컨테이너를 실행해 보자.
{{{#!plain
# sudo docker run -i -t ubuntu /bin/bash
}}}

'''docker version'''명령으로 도커 클라이언트와 도커 데몬의 버전을 확인 할 수 있다.
{{{#!plain
# docker version
Client version: 1.2.0
Client API version: 1.14
Go version (client): go1.2.1
Git commit (client): fa7b24f
OS/Arch (client): linux/amd64
Server version: 1.2.0
Server API version: 1.14
Go version (server): go1.2.1
Git commit (server): fa7b24f
}}}
도커의 버전과 함께, 도커의 기동을 위해서 필요한 git, go에 대한 버전정보도 함께 출력한다.

=== 도커 클라이언트 명령어 확인 ===
아무런 명령없이 실행하면, 도커에서 사용 할 수 있는 명령들을 출력한다. 
{{{#!plain
# docker

Commands:
  attach    Attach to a running container
  build     Build an image from a Dockerfile
  commit    Create a new image from a container's changes
  cp        Copy files/folders from a container's filesystem to the host path
  diff      Inspect changes on a container's filesystem
  events    Get real time events from the server
...
}}}

=== 명령어별 도움말 보기 ===
도커 명령어를 입력하고 엔터를 입력하면 자세한 사용법을 출력한다.
{{{#!plain
# docker attach
Usage: docker attach [OPTIONS] CONTAINER

Attach to a running container

  --no-stdin=false    Do not attach STDIN
...
}}}
명령 다음에 '''--help'''를 이용해도 동일한 도움말 화면을 볼 수 있다.
{{{#!plain
# docker attach --help
Usage: docker attach [OPTIONS] CONTAINER

Attach to a running container
}}}

=== 도커로 웹 애플리케이션 실행하기 ===
도커 클라이언트를 이용하면 하나 이상의 도커 컨테이너를 만들 수 있다. 특히 유용한 기능은 컨테이너에게 실행할 명령을 전달할 수 있다는 점이다. 컨테이너에서 '''hello world'''를 실행하는 예제다.
{{{#!plain
# docker run ubuntu echo /bin/echo "hello world"
hello world
}}}
ubuntu 이미지로 부터 컨테이너가 실행되고, /bin/echo "hello world"를 실행한다. 실행결과를 표준출력 하고, 컨테이너는 종료된다. '''Django'''와 '''node.js'''와 같은 애플리케이션 이미지로 부터, 웹 서비스 컨테이너를 실행 하는 식으로 확장할 수 있다. Python Flask 애플리케이션을 포함한 '''training/webapp'''이미지로 테스트를 했다.
{{{#!plain
# docker run -d -P training/webapp python app.py
}}}
로컬에 '''training/webapp'''이 없다면, 자동으로 다운로드 한다.
  * '''-d''' : 데몬모드로 실행한다. 
  * '''-P''' : 도커 데몬이 로컬의 적당한 포트를 선택해서, 애플리케이션 포트로 포트포워딩 한다.  

컨테이너가 실행되면서, '''python app.py'''를 실행하고, 플라스크 애플리케이션이 실행된다. 


=== 컨테이너 정보 확인 ===
앞서 실행한 컨테이너의 정보를 '''docker ps'''로 확인해 보자.(중요한 정보만 출력하게 편집했다.)
{{{#!plain
# docker ps
CONTAINER ID  IMAGE           COMMAND           PORTS                     NAMES
fdd0e7eb3dc0  training/webapp "python app.py"   0.0.0.0:49154->5000/tcp   sick_davinci 
}}}
여기에서 가장 중요한 정보는 웹 애플리케이션의 포트포워딩 정보다.
{{{#!plain
0.0.0.0:49154->5000/tcp
}}}
49154 포트를 컨테이너의 5000번 포트로 포워딩하고 있다. 로컬의 포트는 도커가 적당한 걸 선택하는데, 애플리케이션의 포트를 어떻게 선택했는지  궁금할 수 있겠다. 이미지를 만들 때, 포워딩에 사용할 포트를 설정 할 수 있다. 이 정보는 [https://docs.docker.com/userguide/dockerimages Working with Docker Images]를 참고하자. 

curl로 테스트해보자.
{{{#!plain
# curl -v localhost:49154
* Rebuilt URL to: localhost:49154/
* Hostname was NOT found in DNS cache
*   Trying ::1...
* Connected to localhost (::1) port 49154 (#0)
> GET / HTTP/1.1
> User-Agent: curl/7.37.1
> Host: localhost:49154
> Accept: */*
> 
* HTTP 1.0, assume close after body
< HTTP/1.0 200 OK
< Content-Type: text/html; charset=utf-8
< Content-Length: 12
< Server: Werkzeug/0.10.4 Python/2.7.6
< Date: Sat, 16 May 2015 07:22:26 GMT
< 
* Closing connection 0
}}}

'''-P'''옵션을 사용하면 32768 ~ 61000 사이의 포트를 선택한다. '''-p'''(소문자다)옵션을 이용해서 아래와 같이 포트를 특정 할 수 있다.
{{{#!plain
# docker run -d -p 5000:5000 training/webapp python app.py
}}}
이제 호스트의 5000번 포트로 애플리케이션 서버에 연결할 수 있다.

=== 네트워크 포트정보 확인 ===
'''docker ps'''명령으로 포트정보를 확인 할 수 있기는 하지만, 다른 정보들이 많아서 화면이 좀 지저분하다. '''docker port'''를 이용하면, 애플리케이션 포트가 로컬의 어떤 포트에서 포워딩되는지를 쉽게 확인 할 수 있다. 
{{{#!plain
# docker port my_docker_app 5000
0.0.0.0:49155
}}}

=== 웹 애플리케이션 로그 확인 ===
'''docker logs''' 명령으로 애플리케이션에서 (굳이 로그인 하지 않고도)어떤일이 일어나는지 확인할 수 있다.
{{{#!plain
# docker logs -f my_docker_app
 * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)
192.168.200.1 - - [16/May/2015 12:36:06] "GET / HTTP/1.1" 200 -
192.168.200.1 - - [16/May/2015 12:36:11] "GET / HTTP/1.1" 200 -
192.168.200.1 - - [16/May/2015 12:36:26] "GET /login HTTP/1.1" 404 -
}}}
'''-f''' 옵션을 이용하면 컨테이너의 정보를 '''tail -f'''처럼 표준출력한다.

=== 컨테이너의 프로세스 정보 확인 ===
'''top'''명령으로 프로세스의 정보를 확인할 수 있다.
{{{#!plain
# docker top my_docker_app
UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD
root                1746                605                 0                   May16               ?                   00:00:00            python app.py
}}}

=== 컨테이너의 상세 정보 ===
'''docker inspect'''명령으로 컨테이너의 상세정보를 확인 할 수 있다. 정보는 json으로 출력된다.
{{{#!plain
# docker inspect !$
docker inspect my_docker_app
[{
    "Args": [
        "app.py"
    ],
    "Config": {
        "AttachStderr": false,
        "AttachStdin": false,
        "AttachStdout": false,
        "Cmd": [
            "python",
            "app.py"
        ],

    }
}]
......
}}}
원하는 데이터만 따로 뽑아낼 수도있다. 예를 들어 컨테이너의 IP주소를 확인하고 싶다면 아래와 같이 하면된다.
{{{#!plain
# docker inspect -f '{{ .NetworkSettings.IPAddress }}' my_docker_app
172.17.0.2
}}}

=== 컨테이너 종료 ===
'''docker stop'''으로 컨테이너를 종료 할 수 있다.
{{{#!plain
# docker stop my_docker_app
my_docker_app
}}}
'''dokcer ps'''로 컨테이너가 stop 된걸 확인 할 수 있다. 

=== 컨테이너 재 시작 ===
컨테이너를 재 시작하는 방법은 두 가지가 있다. 
  * 이미지로 부터 새로운 컨테이너를 시작한다.
  * 이전의 컨테이너를 다시 시작한다. 이전 컨테이너 아이디 혹은 컨테이너 이름으로 '''docker start'''하면 된다.
'''docker restart'''를 이용할 수도 있다. 해당 컨테이너에 대해 '''docker stop'''과 '''docker start'''를 수행한다. 

=== 컨테이너 삭제 ===
'''docker start'''로 stop된 컨테이너를 다시 실행 할 수 있는 이유는, stop이 도커를 삭제하지 않고 중지만 하기 때문이다. '''docker rm'''명령을 이용해서 컨테이너를 삭제할 수 있다. 삭제하기 전에 먼저 stop 해야 한다. 
{{{#!plain
# docker stop my_docker_app
# docker rm my_docker_app
}}}
@


1.9
log
@119.64.102.68;;yundream;;
@
text
@d284 76
@


1.8
log
@1.214.223.250;;yundream;;
@
text
@d165 119
@


1.7
log
@1.214.223.250;;yundream;;
@
text
@d82 1
a82 1
컨테이너에 '''/webapp''' 디렉토리가 만들어진 걸 확인 할 수 있다.
d92 1
a92 1
이제 /opt/webapp아래서 작업한 내용은 persistent 하게 유지된다.
d97 1
a97 1
컨테이너가 가지고 있는 persistent 데이터를 다른 컨테이너와 공유 할 수도 있다. Named 데이터 볼륨 컨테이너를 만들어서 공유하면 된다.  
d99 1
a99 1
'''dbdata'''라는 이름의 볼륨을 만들어서 공유하기로 했다.  
d101 2
a102 1
# docker create -v /dbdata --name dbdata training/postgres /bin/true
d104 32
a135 2

공유하는 측에서는 '''--volumes-from'''을 이용해서 공유할 수 있다.
d137 1
a137 2
# docker run -i -t --volumes-from dbdata --name db1 ubuntu /bin/bash
# docker run -i -t --volumes-from dbdata --name db2 ubuntu /bin/bash
d139 3
a141 1
이제 db1과 db2 컨테이너는 dbdata 볼륨을 공유한다. 이 볼륨은 persistent 하다. db1, db2 컨테이너를 모두 삭제해도 데이터는 여전히 남는다. 디스크로 부터 볼륨을 제거하려면 반드시 '''docker rm -v'''로 삭제해줘야 한다. 그렇지 않으면 쓰레기 데이터로 디스크 공간을 낭비하게 된다. 
d143 1
@


1.6
log
@1.214.223.250;;yundream;;
@
text
@d130 1
a130 1
# docker run --volumes-from dbdata2 -v /dbdata -it ubuntu /bin/bash
@


1.5
log
@1.214.223.250;;yundream;;
@
text
@d2 1
d96 1
a96 1
=== 데이터 볼륨 공유 ===
d112 20
a131 1
또 다른 유용한 기능으로 백업,복구,마이그레이션이 있다.
@


1.4
log
@1.214.223.250;;yundream;;
@
text
@d96 13
d111 1
@


1.3
log
@1.214.223.250;;yundream;;
@
text
@a82 1

d93 5
@


1.2
log
@1.214.223.250;;yundream;;
@
text
@d67 27
@


1.1
log
@1.214.223.250;;yundream;;
@
text
@d5 1
a5 1
=== Docking Application : "Hello World" ===
a6 1

@
