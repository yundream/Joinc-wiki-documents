#title designer를 이용한 text editor 작성
[[TableOfContents]]

=== 소개 ===
보통 GUI 툴킷을 학습할 때 가장 좋은 예로 사용하는게 에디터 이다. GUI의 일반적인 화면 구성을 모두 가지고 있으면서, 파일 읽기/저장, 메뉴제어등의 주요한 스킬을 익힐 수 있기 때문이다. 


=== Editor 작성 ===
이번에는 designer를 이용해서 간단한 GUI 에디터 프로그램을 만들어 보도록 하겠다. 만들어진 프로그램은 대략 다음과 같은 모습을 보여줄 것이다. 

http://www.joinc.co.kr/albums/album01/akg.png

==== GUI 만들기 ====
사실 위의 그림에서와 같이 메뉴바, 툴바, 텍스트 에디터창, 상태바와 같은 기본적인 위젯과 파일열기/저장, 복사/붙이기/자르기/되돌리기 등의 기능을 구현하려면 상당한 시간에 걸쳐서 단순 노가다 작업을 해야 할것이다. 

그러나 Designer를 이용하면 간단하게 구현할 수 있다. 

일단 designer를 실행시키고 '''File > New > C++ Project'''를 선택해서 프로젝트 파일을 생성한다. 프로젝트 파일의 이름은 Editor.pro로 하겠다. 

프로젝트를 생성했으니 기본 화면을 만들어야 한다. '''File > New > Main Windows'''를 선택하도록 한다. Main Windows는 메뉴바, 툴바, main 창, 상태바등을 가진 일반적인 위젯을 가진 창을 생성한다. 

Main Windows를 클릭하면 Main Window Wizard가 실행된다. 여기에서는 Main Window에 어떤 위젯 구성요소를 가지게 할건지를 결정할 수 있다. 

http://www.joinc.co.kr/albums/album01/akh.sized.png

여기에서는 모든 위젯 요소를 선택하도록 하겠다. Next를 클릭해서 다음으로 넘어간다. 

이제 툴바 메뉴에 들어갈 아이템 종류와 위치등을 편집하게 된다. 편집은 매우 직관적임으로 할 수 있다. 선택한후 finish 버튼을 누르면 그림과 같은 GUI 화면과 Action 편집화면이 뜬다.

http://www.joinc.co.kr/albums/album01/aki.sized.png

Action 에디터를 보면 알겠지만 모든 메뉴 아이템의 선택히 발생하는 이벤트에 대한 슬롯함수의 이름이 정의되어 있는 것을 알 수 있다. 프로그래머는 단지 각 슬롯 함수에 대한 실제 내용을 써넣기만 하면 된다.

이제 Main Window 중앙에 텍스트 에디터가 위치하도록 만들어 보자. Common Widgets에서 TextEdit를 선택한후 Main Windows에 위치하도록 한다. TextEdit는 Main Window의 크기 변화에 맞추어서 변화 해야 함으로 Ctrl+H, Ctrl+J를 이용해서 레이아웃을 결정하도록 한다.  이제 Main Windows의 이름을 Edit로 TextEdit위젯의 이름을 textEdit로 변경한후 Ctrl+s로 저장하도록 한다. 지금까지 작업을 제대로 진행했다면 다음과 같은 GUI 디자인 화면이 만들어 졌을 것이다. 

http://www.joinc.co.kr/albums/album01/akj.png

GUI 화면이 만들어 졌다면, 이것을 edit.ui이름으로 저장하도록 한다.  

==== main함수와 gui include 파일 만들기 ====
edit.ui 파일이 만들어졌다면 이 정보를 토대로 main함수를 포함한 코드를 만들도록 한다. '''File > New > C++ Main File'''을 클릭하면 자동으로 만들어준다. 이제 헤더파일을 생성해야 하는데 designer의 오른쪽에 있는 Project Overview에서 edit.ui를 클릭해 보면 하위 요소로 edit.ui.h가 비활성화 된 상태로 보일 것이다. 그냥 더블클릭하면 edit.ui.h 파일이 생성된다. 여기에는 실제 GUI에서 사용할 각종 슬롯함수들에 대한 정의가 들어간다. 물론 함수 정의는 프로그래머가 직접해주어야 한다.  

Ctr+S를 이용해서 main.cpp와 edit.ui.h를 모두 저장하도록 한다.

==== qmake를 이용한 Makefile 생성 ====
이제 qmake를 이용해서 프로젝트 파일 edit.pro로 부터 make파일을 생성하도록 하자.  
{{{#!plain
# qmake -o Makefile edit.pro
}}}

이렇게 하면 Makefile가 만들어 지는데, 즉시 make를 이용해서 현재까지 만들어진 코드를 테스트 할 수 있다. 물론 슬롯함수들은 아직 정의가 되어 있지 않기 때문에 단지 GUI형태만 보여주는 프로그램이 실행 될것이다.  

===== designer의 파일 관리 구조 =====
여기에서 궁금한 점이 있을 건데, main.cpp파일은 10줄 내외의 간단한 main함수만을 포함하고 있으며 edit.ui.h에는 함수 정의만 들어 있다. 그렇다면 함수 선언부등이 어디에 존재하는지 궁금해 질 것 같다.  

다음은 designer에 의해서 관리되는 파일 구성도다.

http://www.joinc.co.kr/albums/album01/akk.png

designer는 .pro파일을 이용해서 프로젝트를 관리하며 디자인된 GUI 정보는 '''.ui'''파일에 저장된다. 그후 qmake를 실행시키면 qmake는 '''uic'''를 이용해서 .ui 파일로 부터 C++ 코드를 생성해 낸다. 위 그림에서 파란색으로 묶여있는 파일들은 순수하게 designer에 의해서 생성되는 파일들로 프로그래머가 수정해서는 안되는 파일들이다. 오로지 designer에 의해서만 수정해야 하는 파일들이다. .ui디렉토리와 .moc디렉토리에 있는 파일들은 .ui파일에 의해서 자동 생성되는 것들이기 때문에 수정한다고 해도 make를 통해서 다시 빌드 할경우 개발자가 수정한 정보는 모두 사라져 버리기 때문이다.

실제로 개발자가 수정할 수 있는 파일은 확장자가 .ui.h인 파일과 main.cpp이다.

===== 생성자와 소멸자의 사용 =====
앞서 설명했듯이 UI 정보를 담고 있는 클래스의 헤더파일과 .cpp파일은 .ui 파일로부터 자동으로 생성되며, 이때 생성자와 소멸자의 경우 .ui디렉토리 밑의 .cpp파일에 위치한다. 이들은 직접 수정하면 안되는 파일로 만약 프로그래머가 수동으로 생성자나 소멸자의 내용을 수정할 경우 당장 컴파일하는데에는 문제 없겠지만 ui가 바뀐다거나 make clean을 했을경우 기존 생성자나 소멸자에 추가했던 내용은 몽땅 날라간다.

생성자와 소멸자를 사용하고 싶다면 designer에서 클레스에 init()와 destory() 함수를 등록 시켜야 한다. 그러면 생성자에서 init()함수를 소멸자에서 destory()함수를 불러서 사용하게 된다.  

==== 슬롯함수 작성 ==== 
이제 슬롯함수를 작성하기만 하면 된다. 슬롯함수들은 edit.ui.h에 위치하고 있으니, designer의 내장 에디터를 이용해서 편집하면 된다. 만약 edsigner의 내장 에디터 기능이 맘에 들지 않는다면 vi등의 외부 편집기를 이용할 수도 있다. 이럴경우 designer과 vi를 왔다 갔다 해야하는 불편함이 발생할 수 있다.

이제 함수를 코딩하도록 하겠다. 여기에서는 '''fileNew''', '''fileOpen''', '''fileSave''', '''helpAbout''','''fileExit''' 슬롯함수들만을 정의하도록 하겠다. 다른 슬롯함수들에 대한 정의는 각자 해보기 바란다.  

===== 생성자 호출 함수 : init =====
이 함수는 생성자에서 호출하는 함수다. 여기에는 textEdit 위젯에 대한 textChanged 시그널을 등록 시킬 것이다. 이 textChaged() 시그널 함수는 어떤 문자의 입력등으로 인하여 내용이 바뀌었을 때 신호를 보내도록 되어있다.   

이게 필요한 이유는 사용자가 내용을 수정했는데, 저장하지 않고 "close"버튼을 눌렀을 때, 경고 메시지를 뿌려주기 위함이다.
{{{#!plain
void init()
{
	Flag = 0; 
	connect( textEdit, SIGNAL( textChanged() ), this, SLOT( changedFlag() ) );
}
}}}

textEdit위젯에서 내용의 변화가 있으면, 슬롯 함수인 chagedFlag()가 호출된다. changedFlag()슬롯함수는 플래그를 TRUE로 변경한다. 물론 chagedFlag함수는 designer를 이용해서 슬롯함수로 등록시켜줘야 한다. changedFlag함수는 다음과 같은 간단한 코드만을 가지게 될 것이다. 
{{{#!plain
void Edit::changedFlag()
{
	Flag = 1;	
	// 이건 시그널 전달을 확인하기 위한 디버깅용	
    // QMessageBox::warning(this, "changed Flag", "Changed Flag");
}
}}}
fileOpen을 호출해서 새로운 파일이 생성된다면 Flag는 0으로 설정된다.

===== fileNew =====
새로운 에디터창을 생성한다.
{{{#!plain
void Edit::fileNew()
{
    Edit *ed = new Edit;
    ed->show();
}}}

===== fileOpen =====
파일을 여는 함수다. 이 함수의 작성을 위해서 4개의 클래스가 사용될 것이다. 
 1. '''QFile''' : 파일의 열기, 쓰기, 읽기등 파일 제어관련 
 1. '''QFileDialog''' : 파일 선택 대화창 인터페이스를 제공
 1. '''QTextStream''' : 문자열 스트림 제어를 위한 클래스로 파일로 부터 읽어들인 문자열을 위해서 사용한다.
 1. '''QMessageBox''' : 문제가 발생했을 때 정보를 출력하기 위한 메세지창  

위의 클래스를 사용하기 위해서 다음과 같은 헤더파일을 추가시키도록 하자.
{{{#!plain
#include <qfile.h>
#include <qfiledialog.h>
#include <qtextstream.h>
#include <qmessagebox.h>
#include <qstatusbar.h>
}}}

다음은 fileOpen 함수다. 설명은 주석으로 대신하겠다. 
{{{#!plain
void Edit::fileOpen()
{
    // 파일 선택 대화상자를 연다.
    QString filename = QFileDialog::getOpenFileName(QString::null, QString::null, this);
    // 만약 파일이름이 NULL이 아니라면 파일을 읽기 전용으로 생성한다.
    // 이미 파일이 존재한다면 존재하는 파일을 연다. 
    if (!filename.isEmpty())
    {
        QFile file(filename);
        if(!file.open(IO_ReadOnly))
            return;

        // 파일이 열렸다면 파일의 내용을 스트림에 붙인다.
        QTextStream stream(&file);

        // 스트림으로 부터 내용을 읽어와서 textEdit에 출력한다. 
        textEdit->setText(stream.read());
        file.close();

        Flag = 0;
        setCaption(filename);
        statusBar()->message("File open success!!", 4000);
    }
}
}}}

===== fileSave =====
{{{#!plain
void Edit::fileSave()
{
    // 파일 선택 대화창을 띄운다.
    int quest;
    QString filename = QFileDialog::getSaveFileName(QString::null, QString::null, this);
    if (!filename.isEmpty())
    {
        QFile file(filename);
        // 만약 같은 이름의 파일이 이미 존재한다면      
        // 덮어쓸건지를 물어보도록 한다.        if (file.exists())
        {
            quest = QMessageBox::question(this, "WARNING",
                filename+" File exist\nOverwrite ?","Yes", "No", "Cancel", 1, 1);
            if (quest != 0)
            {
                return ;
            }
        }
        if (!file.open(IO_WriteOnly))
        {
            QMessageBox::warning(this, "file Open Error\n\n", filename);
        }
        QTextStream stream(&file);

        stream << textEdit->text();
        setCaption(filename);
        file.close();
        Flag = 0;
        statusBar()->message("File save success!!", 4000);
    }
}
}}}

===== fileExit =====
종료 함수다. close를 호출해서 종료한다. 종료전에 현제 textEdit위젯의 내용이 변경되었는지 확인해서 변경되었다면 변경된 내용을 어떻게 할것인지 물어보도록한다. 
{{{#!plain
    int ch;

    // 종료할때 파일의 내용이 변경되었는지 확인한다.  
    // 파일의 내용이 변경되었다면 저장할 것인지를 물어 본다. 
    if (Flag)
    {
        ch = QMessageBox::warning(this, "Changed File", "SAVE FILE?", "Yes", "No", "Cancel", 1,1);
        if (ch == 0)
        {
            fileSave();
        }
        if (ch == 2)
            return;
    }
    this->close();
}}}

===== helpAbout =====
대하여 대화상자를 띄운다.
{{{#!plain
void Edit::helpAbout()
{
    // 대하여. 
    QMessageBox::about(this,  "About", "Edit Sample Program");
}
}}}

===== changedFlag =====
사용자 정의 슬롯으로 텍스트의 내용이 변경될 경우 플래그를 1로 설정한다. 
{{{#!plain
void Edit::changedFlag()
{
    Flag = 1;
}
}}}

==== 결론 ====
이상 간단하게 알아보았다. 프린트, 문자열 찾기, 기타 이런저런 사소한 구현이 많이 바져있는데, 이는 공부하면서 차차 붙여가기로 하겠다. 

===== 해야할일 =====
 1. kdevelop와 designer를 통한 개발
