#title inheritance Copy 패턴

=== inheritance 패턴 ===
이 패턴은 원본 템플릿 wiki 페이지에서 상속된 사용자 정의 페이지를 만들고자 할때 유용하다. 

대문페이지를 만든다고 가정해보자. 대문페이지는 로그인 하기전에 누구에게나 동일하게 보여질 것이다. 그러나 로그인을 했을 경우 공통의 대문페이지 대신에 자신의 컨텐츠로 채워진 대문페이지를 만들기를 원할 수 있을 것이다.

그렇다면, 원본대문페이지로 부터 복사되어서 상속된 새로운 페이지를 만들어서 사용자가 로그인 했을때, 이 페이지로 이동하도록 하면 될것이다. 일종의 개인화기능이라고 볼 수 있을 것 같다.
{{{#!plain
 -- FrontPage ---+--- User1
                 |
                 +--- User2
                 |
                 +--- User3
}}}

이것은 위키페이지를 디렉토리 구조로 하면 간단하게 구현할 수 있다. 즉 다음과 같이 사용자 페이지를 생성한다.
{{{#!plain
 FrontPage/User1
 FrontPage/User2
 FrontPage/User3
}}}
이제 유저가 로그인하면, 유저페이지가 있는지 확인해서 FrontPage를 보여주거나 아니면 유저페이지를 보여주게 된다.

=== 응용 ===
이 위키패턴은 '''시스템정보관리시스템'''을 만드는데 사용을 했다.

유저가 로그인을 하면, 유저가 포함된 그룹의 시스템정보들을 얻을 수 있는 '''DashBoard'''를 만들었다. 이 DashBoard는 다음과 같은 정보들을 출력하도록 했다.
   1. 관리하는 장비들의 모든 목록과 '''가용율''','''CPU/Memory/Disk/Network'''사용율 
   1. 각 장비에서 발생한 Event 목록들
   1. 유저에게 할당된 업무들과 이들에 대한 처리상황들 
일반적인 유저는 자신의 그룹에 포함된 시스템정보만 확인하면 되므로 큰 문제 없이 사용할 수 있을 것이다. 그러나 SE나 QA와 같은 지원팀이라면 모든 그룹을 봐야될 필요가 있다. 특히 SE의 경우에는 Dashboard에 다른 여러가지 통계정보들을 보여줘야 하므로 Dashboard 자체를 다르게 구성해야될 필요가 있다. SE나 QA와 같은 지원팀이 아니더라도, 사용자 요구에 따라서 기본 DashBoard와는 다른 페이지를 구성해야될 수도 있다. 이 문제를 해결하기 위해서 '''inheritance Copy 패턴'''을 사용했다.

즉 다음과 같이 페이지를 구성했다.
{{{#!plain
DashBoard
DashBoard/yundream
DashBoard/se_user
}}}
이제 사용자가 로그인하면, 자신의 DashBoard에 상속받은 페이지가 있는지 확인해서, 해당페이지를 띄우면 된다.  또한 이 패턴은 DashBoard 뿐만 아니라 '''업무지원''', '''문서관리'''에도 적용되므로, 사용자별 wiki환경을 만들 수 있게 되었다. 이 방식의 또다른 장점이라면 카테고리별로 체계적으로 관리가 가능하다는 점과 위키페이지만으로 이 패턴을 구현할 수 있다는 점이다. 

다음과 같은 일을 하는 매크로를 만들어서, 사용자 정의 페이지가 필요한 곳에서 사용하면 된다. 간단하지만 유용하게 사용할 수 있다.
{{{#!plain
function macro_sendUser
{
  현재 페이지는 FrontPage이다.
  유저의 ID는 yundream이다.
  readdir()계열의 함수를 이용해서 FrontPage/yundream 페이지가 있는지 검사한다.
  만약 존재한다면
  {
      FrontPage/yundream을 읽어들인다.
  }
  존재하지 않는다면
  {
      FrontPage를 그대로 읽어들인다.
  }
}
}}}
