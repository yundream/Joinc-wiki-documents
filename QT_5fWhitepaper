#title QT Whitepaper
 * [wiki:Site_QT QT 미니사이트로]

이 문서는 [http://www.trolltech.com/products/qt/whitepaper/qt-whitepaper-1.html qt whitepaper]의 번역 문서다.


[[TableOfContents]]

=== 소개 ===
QT는 멀티 플랫폼 GUI와 애플리케이션 제작을 위해 개발되어진 툴킷 라이브러리로 [http://www.troll.no trolltech]에서 개발중인 라이브러리다. QT는 C++ 클래스 라이브러리 형태로 제작되어 있으며, 빠르고 직관적인 애플리케이션 제작이 가능하도록 도와준다. 또한 QT는 멀티 플랫폼을 지원하는 것 외에도 국제화를 지원하고 있으며 이를 이용해서 넓은 시장에서 사용가능한 애플리케이션의 제작이 가능해 진다.     

QT C++ 툴킷은 1995년 부터 여러가지 상용 애플리케이션의 제작위해 사용되어졌다. AT&A, IBM, NASA, Xerox와 같은 커다란 규모의 회사와 연구소에서 부터 다른 많은 작은 회사와 기관들에서도 사용되어지고 있다. QT는 3.1버젼이 이르러서 더욱더 쉽워지고 강력해 졌다. QT의 클래스는 개발자로 하여금 빠른시간에 학습가능한 견고한 인터페이스를 지원하며 개발시간을 단축 시켜준다. QT는 완전히 객체지향적으로 개발되어 지고 있다.      

이 whitepaper은 QT함수와 기술에 대한 개략저인 소개를 위해서 작성되어졌다. 처음 몇개의 장은 기술적이지 않은 소개에 관련된 내용을 담고 있으며, 장이 더해질 수록 깊은 기술적인 내용들에 대해서 설명하고 있다.   

=== Executive Summary ===
QT는 표준적인 GUI환경의 지원을 위한 완전한 위젯(Widget)을 포하고 있다. QT는 signal과 slots라는 혁신적인 내부 객체간 통신을 위한 도구를 지원하고 있으며, 이것은 기존의 오래되고 불안전한 callback 기술을 대체하고 있다. QT는 마우스클릭과 키입력등을 제어하기 위해서 conventional Event 모델을 제공하고 있다. QT는 멀티 플랫폼 GUI 애플리케이션을 위한 표준적인 유저 인터페이스 즉 메뉴, 드래그 앤 드롭, 툴바, 풍선 도움말등을 거의 완벽하게 지원한다.  

QT는 QT Designer이라는 강력한 유저 인터페이스 디자인 프로그램을 제공한다. 이 프로그램을 이용해서 사용자는 시각적으로 유저 인터페이스를 빠르게 디자인할 수 있다.  이외에도  강력한 IDE인 [wiki:kdevelop Kdevelop]를 이용해서 안정적인 통합개발환경을 구축할 수도 있다.

QT는 2D와 3D그래픽을 지원한다. 또한 OpenGL을 지원하는데 이를 이용해서 플랫폼 독립저인 그래픽 개발화경의 구축이 가능하다.     

QT는 여러가지 표준 데이터베이스들을 지원하며, 이를 이용해서 플랫폼 독립적인 데이터 베이스애플리케이션을 제작할 수 있다. QT는 Oracle, Microsoft SQL Server, Sybase Adaptive Server, PostgreSQL, MySQL, ODBC등의 다양한 데이터베이스 드라이버를 제공한다. 이러한 QT의 데이터베이스 함수들은 QT Designer에 완벽하게 결합되어서 사용할 수 있다. 데이터베이스 애플리케이션의 개발을 위해서 데이터베이스 관련 위젯을 지원한다

최신의 툴킷이 그러하듯이 QT역시 style가 테마를 지원하고 이를 통해서 플랫폼에 관계없이 동일한 느낌의 애플리케이션 실행환경을 만들 수 있다. 하나의 소스 트리가 만들어 진다면 다시 코딩할 필요 없이 재컴파일 하는 정도로 Windows, Mac OS X, Linux, Solaris, HP-UX와 같은 운영체제에서 작동하는 코드를 생성할 수 있다. 또한 임베디드 환경 역시 지원하고 있다. QT는 qmak를 제공하는데 이것을 이용하면 목표 플렛폼을 지원하는 makefile과 .dsp 파일을 쉽게 생성할 수 있다.

QT는 유니코드를 지원하는데 이는 국제화를 충실히 지원하는 애플리케이션의 개발이 가능해짐을 의미한다. 이러한 국제화를 위해서 QT는 Qt Linguist와 같은 번역도구를 제공한다. QT로 작성한 애플리케이션은 중국, 영어, 일본어, 러시아어, 한국어와 같은 언어를 쉽게 적용할 수 있다. 
QT는 다양한 domain-specific 클래스를 지원한다. SAX와 DOM 파서를 포함하는 XML 모듈이 그것이다. 객체들은 QT에서 제공하는 STL포환 클래스들을 통해서 쉽게 메모리에 저장될 수 있다. 로컬와 리모트파일 제어 역시 QT의 Input/Output 과 네트워킹 클래스에 의해서 이루어진다. 이는 코드의 일관성을 유지할 수 있도록 도와준다.  

QT 애플리케이션은 플러그인과 [wiki:article_library_만들기 동적 라이브러리]를 통해서 확장가능하도록 작성될 수 있다. 플러그인은 부가적인 코덱, 데이터베이스 드라이버, 이미지 포맷, 스타일, 위젯등을 제공한다.

QT는 신중하게 계획되어서 만들어진 C++툴킷으로 세계의 많은 지역에서 사용되어지고 있다. QT는 KDE와 같은 리눅스 데스크탑환경의 핵심으로 사용되고 있으며, 이외에도 많은 상용 애플리케이션의 제작을 위해서도 사용되고 있다.

=== Widgets ===
QT는 모든 위젯의 완전한 세트를 제공한다. 위젯은 유저 인터페이스를 만들기 위한 시각적 요소들이다. 버튼, 메뉴, 스크롤 바, 메시지 박스, 애플리케이션 윈도우등이 모두 위젯의 요소가 된다. 이러한 위젯들은 컨트롤(Controls)과 컨테이너(containers)이 분리되지 않은 상태로 설계되어 있다. 또한 이미 존재하는 QT위젯의 서브 클래스들로 부터 쉽게 유저 정의 위젯을 생성할 수 있다.  

http://www.trolltech.com/products/qt/whitepaper/qwidget-diag.png

위젯은 '''QWidget'''과 이것의 서브클래스의 상속들로 이루어지며 사용자 정의 위젯은 서브클래스에 의해서 생성된다. 어떤 위젯들은 몇개의 자식 위젯을 가지게 된다. 자식 위젯은 부모 위젯의 부분을 보여주는 것을 담당한다. 부모가 없는 위젯은 top-level 위젯이라고 하며, 그 자신이 윈도우가 될 수 있다. QT는 위젯의 사용에 있어서 제한을 가하지 않는다. 위젯은 top-level 위젯이 될 수 있으며 동시에 다른 위젯의 일부로 참여하는 자식 위젯이 될 수도 있다. 부모위젯에 존재하는 자식 위젯의 위치는 layout managers에 의해서 자동적으로 결정된다.   

라벨, 메시지 박스, 툴팁등은 색, 폰트, 언어의 사용등에 있어서 제한이 없다. QT의 텍스트 렌더링 위젯은 HTML의 서브셋을 이용하므로써 멀티바이트 언어역시 완벽하게 표현할 수 있다. 여기에 대해서는 Text Entry and Rendering를 참고하기 바란다.  

==== 안녕 QT ====
http://www.joinc.co.kr/albums/album01/agw.png

다음은 "안녕 QT"를 출력하는 프로그램의 완전한 소스코드다.
{{{#!plain
#include <qapplication.h>
#include <qlabel.h>
#include <qstring.h>

int main(int argc, char **argv)
{
    QApplication app (argc, argv);
    QString Label = "<font color=blue><h1>안녕 QT</h1></font>";
    QLabel *hello = new QLabel(QString::fromLocal8Bit(Label), 0);
    app.setMainWidget(hello);
    hello->show();
    return app.exec();
}
}}}
QT에서 제공하는 tmake를 이용해서 makefile을 생성시키면 간단하게 컴파일 할 수 있다. tmake에 대한 내용은[wiki:article_make_use2 TMake 사용하기]를 참고하기 바란다. 

==== 내장 위젯들 ====
다음 스크린 샷은 QT에서 제공하는 내장 위젯들의 스크린샷이다. QT에서 지원하는 위젯들의 스타일을 볼 수 있다.  

{{{#!html
<img src=http://www.trolltech.com/products/qt/whitepaper/qlabel-etc.png><br>
QHBox에 함께 쓰인 QLabel과 QPushButton<br> 

<img src=http://www.trolltech.com/products/qt/whitepaper/qradiobutton-etc.png><br>
QButtonGroup와 QCheckBox를 이용해서 레이아웃을 잡고 거기에 QRadioButtons위젯을 사용한 모습 <br>

<img src=http://www.trolltech.com/products/qt/whitepaper/qdatetimeedit-etc.png><br>
QGroupBox로 레이아웃을 잡고 여기에 QDateTimeEdit, QLineEdit, QTextEdit, QComboBox를 배치한 모습<br> 

<img src=http://www.trolltech.com/products/qt/whitepaper/qdial-etc.png><br>
QGrid로 레이아웃을 잡고 QDial, QProgressBar, QSpinBox, QScrollBar, QLCDNumber, QSlider을 배치한 모습<br>


<img src=http://www.trolltech.com/products/qt/whitepaper/qiconview-etc.png><br>
QGrid로 레이아웃을 잡고 QIconView, QListView, QListBox, QTable를 배치한 모습<br>
}}}

많은 데이터를 보여줘야 하는 QTable, QListView, QTextEdit의 경우 자동적으로 스크롤을 지원한다.  
QMainWindow, QMenuBar, QToolBar은 GUI 애플리케이션의 기본적인 틀을 만들어 주기 위해서 사용한다. QMessageBox, QFileDialog, QTabDialob, QWizard등의 위젯은 애플리케이션 상에서 각종 대화상자들을 지원한다. 또한 2D 와 3D 그래픽의 지원을 위한 QCanvas와 QGLWidget도 지원한다.  

위의 스크릿샷에서 볼 수 있는 QRadioButtons와 QCheckBox는 다음과 같은 간단한 코드로 만들어 낼 수 있다.
{{{#!plain
parent = new QButtonGroup( 2, Qt::Vertical, "QButtonGroup" );
radio1 = new QRadioButton( "&Radio 1", parent );
radio2 = new QRadioButton( "R&adio 2", parent );
radio1->setChecked( true );
check1 = new QCheckBox( "&Check 1", parent );
check2 = new QCheckBox( "C&heck 2", parent );
check2->setChecked( true );
}}}

==== 사용자 정의 위젯 ====
QT가 GUI 환경에서 필요한 모든 위젯을 제공하긴 하지만 프로그램을 작성하다 보면 표준 위젯만으로는 부족할 때가 있다. QT는 QWiget과 이 위젯의 서브클래스 등을 이용해서 간단하게 사용자 정의 위젯을 만들 도록 지원하고 있다. 다음은 clock위젯을 만들기 위한 코드다.    

http://www.joinc.co.kr/albums/album01/agx.png

다음은 clock.h 파일이다.
{{{#!plain
#include <qlcdnumber.h>

class Clock : public QLCDNumber
{
public:
    Clock( QWidget *parent = 0, const char *name = 0 );

protected:
    void timerEvent( QTimerEvent *event );

private:
    void showTime();

    bool showingColon;
};
}}}
Clock는 LCD를 지원하는 QLCDNumber위젯으로 부터 상속된다. timerEvent()함수는 '''QOjbect'''로 부터 상속된다. 

다음은 clock.cpp 파일이다.
{{{#!plain
#include <qdatetime.h>

#include "clock.h"

Clock::Clock( QWidget *parent, const char *name )
    : QLCDNumber( parent, name ), showingColon( true )
{
    showTime();
    startTimer( 1000 );
}

void Clock::timerEvent( QTimerEvent * )
{
    showTime();
}

void Clock::showTime()
{
    QString time = QTime::currentTime().toString().left( 5 );
    if ( !showingColon )
        time[2] = ' ';
    display( time );
    showingColon = !showingColon;
}
}}}
생성자는 swhoTime()을 호출한다. 이 함수는 현재 시간으로 clock를 초기화 하고 매 1000 milliseconds마다 timerEvent()를 호출해서 LCD를 리프레쉬 한다.

showTime()을 보면 QLCDNumber::display를 이용해서 현재시간을 가져온다. 시간이 흐르고 있다는 것을 시각적으로 보여주기 위해서 콜론(:)과 공백을 번갈아 가면서 출력한다. 

이것으로 완전한 위젯이 하나 만들어 졌다. 아래의 코드로 테스트할 수 있다.
{{{#!plain
#include <qapplication.h>
#include "clock.h"

int main( int argc, char **argv )
{
    QApplication app( argc, argv );
    Clock *clock = new Clock;
    app.setMainWidget( clock );
    clock->show();
    return app.exec();
}
}}}
아 프로그램은 하나의 (clock)위젯만을 포함하고 있으며 다른 어떤 자식 위젯도 포함하고 있지 않다.  

사용자 정의 위젯을 만들때 scratch위젯을 이용해서 만들 수도 있다. 예를 들어 아날로그 시계를 만들려고 한다면 초침, 분침등을 그려낼 수 있으야 할것이다. 여기에 대한 내용은 2D graphics를 참고하기 바란다. 

=== 시그널과 슬롯 ===
GUI 애플리케이션은 유저의 행동에 반응해야 한다. 메뉴 아이템으 클릭, 툴바 버턴클릭등의 행동을 했을 때 적당한 코드를 실행 시켜야한다. troll은 각 객체간 통신할 수 있는 좀더 진보적인 방법을 사용하길 원했다. 이러기 위해서 프로그래머는 이벤트와 이벤트를 받아서 처리할 코드를 서로 연결시켜줄 수 있어야만 한다. 오래된 툴킷들이 사용하는 매커니즘은 안전하지 않았고, 확장이 용이 하지 않았으며, 객체지향적이지 않았다. Trolltech는 이문제의 해결을 위해서 시그널과 슬롯(Signals and Slot)라는 매커니짐을 도입했다. 시그널 슬롯은 콜백과 매시지 맵(message maps)을 완전히 대체하며 강력한 내부 객체간 통신 방법을 제공한다. 또한 확장이 용이하며 완전히 객체지향이다. 

오래된 콜백 매커니즘은 버튼을 클릭했을 때 실행시킬 함수의 포인터를 넘기는 방식으로 버튼에 대한 코드를 실행한다.

http://www.trolltech.com/products/qt/whitepaper/abstract-connections.png

시그널 슬롯을 통한 객체 연결에 대한 개략적인 그림

QT의 시그널 슬롯은 콜백과는 다른 매커니즘을 사용한다. QT위젯은 이벤트를 감지하면 시그널을 발생시킨다. 버튼을 클릭했을 때 클릭 시그널을 발생시키는 원리다. 프로그래머는 해당 시그널과 시그널에 연결될 슬롯 함수를 connect()를 통해 연결시킬 수 있다. QT의 시그널 슬롯 매커니즘은 클래스에 대한 정보를 필요로 하지 않으며 때문에 개발자는 매우 쉽게 재사용가능한 클래스의 생성이 가능해 진다. 시그널 슬롯은 type-safe하며 콜백에서 발생할 수 있는 충돌들에 대해서 안전하다. 

예를 들어서 '''Quit'''버튼을 클릭할경우 clicked()시그널을 애플리케이션의 quit()슬롯에 연결하도록 한다. 그럼 유저가 버튼을 클릭했을 때 quit()가 호출되고 애플리케이션은 종료된다. 이것은 다음과 같은 간단한 코드로 구현가능하다. 
{{{#!plain
connect(button, SIGNAL(clicked()), qApp, SLOT(quit()));
}}}
{{{#!html
<a href=http://www.trolltech.com/products/qt/whitepaper/concrete-connections.png>
<img src=http://www.joinc.co.kr/albums/album01/agy.sized.png border=0></a>
}}}

시그널과 슬롯을 통한 객체 연결의 예

시그널 슬롯 도구는 C++의 문법을 따르며 C++객체지향의 모든 잇점을 이용할 수 있다. 또한 type-safe이며 오버로딩할 수 있으며, 재구현 가능하다. 또한 클래스의 public, private, protected중 어느 섹션에라도 올 수 있다.

==== 시그널 슬롯 예제 ====
시그널 슬롯을 이용하고자 한다면 클래스는 반드시 '''QObject'''나 이것의 서브클래스중 하나로 부터 상속되어야 한다. 그리고 클래스 정의에 Q_OBJECT매크로를 포함시켜야 한다. 시그널은 signals 섹션에 선언하고 슬롯의 경우에는 public slots, protected slots, private slots 섹션중 하나에 선언하면 된다. 

다음은 '''QObject''' 서브 클래스 예제다.
{{{#!plain
class BankAccount : public QObject
{
Q_OBJECT
public:
    BankAccount() { curBalance = 0; }
    int balance() const { return curBalance; }
public slots:
    void setBalance( int newBalance );

signals:
    void balanceChanged( int newBalance );

private:
    int curBalance;
}
}}}

C++ 클래스의 형식이 그렇듯이 '''BankAccount''도 생성자를 가진다. balnace()를 통해서 값을 얻어오고 setBalance()를 통해서 값을 변경한다. 

클래스는 balanceChanged()라는 시그널을 가진다. 이것은 값이 바뀌어싸는것을 알려주기 위해서 사용한다. 시그널을 통해서 값이 바뀐것을 전송하면 연결된 슬롯이 실행된다.    

슬롯함수는 public slots 섹션에 선언되어 있다. 슬롯은 다른 함수들과 마찬가지로 그냥 호출될 수도 있으며 연결된 시그널에 의해서 호출될 수도 있다.     

다음은 setBalance()슬롯의 정의다.
{{{#!plain
void BankAccount::setBalance( int newBalance )
{
    if ( newBalance != curBalance ) {
        curBalance = newBalance;
        emit balanceChanged( curBalance );
    }
}
}}}
causes the balanceChanged() signal to be emitted with the new current balance as its argument. The keyword emit, like signals and slots, is provided by Qt and is transformed into standard C++ by the C++ preprocessor.

Here's an example of how to connect two BankAccounts:

    BankAccount x, y;
    connect( &x, SIGNAL(balanceChanged(int)), &y, SLOT(setBalance(int)) );
    x.setBalance( 2450 );

When the balance in x is set to 2450, the balanceChanged() signal is emitted. The signal is received by y's setBalance() slot, which sets y's balance to 2450.

One object's signal can be connected to many different slots, and many signals can be connected to one slot in a particular object. Connections are made between signals and slots whose parameters have the same types. A slot can have fewer parameters than the signal and ignore the extra parameters.

==== Meta Object Compiler ====
시그널 슬롯 매커니즘은 표준 C++의 기능들을 이용한다. 이것을 이요하기 위해서 C++ 프리프로세서와 QT 툴킷에 포함된 Meta Object Compiler(moc)을 사용한다. 

moc는 애플리케이션의 헤더파일을 읽어서 시그널 슬롯 매커니즘의 지원이 가능한 코드를 생성시켜준다. 상당히 생소할지 모르겠지만 [wiki:article_make_use2 qmake]가 자동적으로 생성을 해주니 개발자는 코드작성에만 신경쓰면 된다. 

moc는 시그널 슬롯을 제어하도록 코드를 만들어주는 일 외에도 QT의 번역 매커니즘을 지원한다. moc는 시스템의 특성과 시스템의 특성에 의해서 확장되는 run-time type 정보들을 이용해서 시스템에 맞는 코드를 생성할 수 있도록 지원한다. 이러한 매커니즘은 하나의 QT코드를 수정없이 다른 플렛폼에 쉽게 이식가능하도록 도와준다.   

=== GUI 애플리케이션 제작 ===
QT를 이용하면 세련된 GUI애플리케이션을 제작할 수 있다. 게다가 GUI화면 제작을 도와주는 QT Designer도 있는데, 이것을 이용하면 비쥬얼한 환경에서 애플리케이션을 제작할 수 있다.

QT는 최신의 GUI애플리케이션을 작성하기 위한 모든 클래스와 함수들을 지원하고 있다. QT는 메뉴바, 툴바, 상태바와 중간영역(문자 입력창이 위치하는)을 가지는 "main window" 스타일의 애플리케이션의 제작을 지원하며, 버튼과 옵션, 도움말, 탭등으로 구성된 "dialog"스타일 애플리케이션 역시 지원한다. 최신의 툴킷이 그러하듯이 SDI와 MDI역시 드래그 앤 드롭, 클립보드역시 지원한다.

툴바는 드래그 시켜서 위치를 변경하거나 동립적인 창형식으로 띄울 수 있다. 이러한 기능들을 구현하기 위해서 프로그래머는 어떠한 부가적인 코드를 작성할 필요가 없다. QT에서 알아서 처리해준다.  

QT는 메시지 박스와 유저의 질문, 파일,폰트,색의 선택을 위한 표준 대화상자를 지원하며, 몇줄 정도로 간편하게 이들 기능을 이용할 수 있다. 

==== Main Window ====
'''QMainWindow'''는 메인 윈도우를 가지는 일반적인 애플리케이션 제작을 위한 프레임워크를 제공한다.  

{{{#!html
<img src=http://www.trolltech.com/products/qt/whitepaper/mainwindow.png>
}}}

메인 윈도우는 표준적인 위젯의 세트를 제공한다. 메인윈도우의 윗부분에는 메뉴바, 툴바와 같은 위젯이 위치하고, 아랫부분은 상태바가 위치한다.  

좀더 편리한 유저 환경을 지원하기 위해서 툴팁과 풍선도움말등도 지원한다. 

SDI 애플리케이션의 경우 '''QMainWindow''' 위젯에 위치하고 MDI 애플리케이션의 경우 '''QWorkspace'''에 포함된다.

==== 메뉴 ====
'''QPopupMenu'''위젯은 수직방향으로 메뉴아이템의 목록을 표시하는 위젯이다. 팝업메뉴는 자체로 사용되거나 메뉴바에 위치할 수 있으며 다른 팝업메뉴의 서브메뉴로도 사용될수 있다.     

팝업메뉴에 있는 각각의 메뉴 아이템은 아이콘과, 체크박스 그리고 (단축키)accelerator)를 가지고 있다. 이외에도 아이템 목록들을 그룹별로 나누어서 관리하기 위한 separator 도 제공한다. 이것은 아이템 그룹들 사이를 구분하는 수평의 선형태로 존재해서 시각적으로 쉽게 그룹사이를 구분할 수 있도록 도와 준다.   

다음은 '''N'''ew, '''O'''pen, '''E'''xit 메뉴 아이템을 포함하는 파일메뉴를 생성하는 예제코드다. 
{{{#!plain
QPopupMenu *fileMenu = new QPopupMenu(this);
fileMenu->insertItem("&New", this, SLOT(newFile()), CTRL+Key_N);
fileMenu->insertItem("&Open...", this, SLOT(open()), CTRL+Key_O);
fileMenu->insertSeparator();
fileMenu->insertItem("E&xit", qApp, SLOT(quit()), CTRL+Key_Q);
}}}
메뉴 아이템을 선택(클릭)하면 슬롯에 등록된 함수가 실행된다. 

'''QMenuBar''' 클래스는 메뉴바를 구성하기 위해서 사용한다. 이 위젯은 생성되면 자동적으로 부모위젯(보통 '''QMainWindow''')의 가장위에 자리를 잡게 된다. 만약 부모 윈도우가 메뉴바의 모든 내용을 담기에 충분히 크지 않다면 메뉴바는 자동적으로 여러개의 라인으로 분리되어서 표시된다. QT는 내장 레이아웃 관리자를 가지고 있는데, 알아서 메뉴바를 다른 위젯들과 조화되도록 만들어준다.   

다음은 File, Edit, Help 메뉴를 포함하는 메뉴바의 코드다. 
{{{#!plain
QMenuBar *bar = new QMenuBar(this); 
bar->insertItem("&File", fileMenu);
bar->insertItem("&Edit", editMenu);
bar->insertItem("&Help", helpMenu);
}}}

QT의 메뉴시스템은 매우 유연하다. 메뉴 아이템은 활성화,비활성화, 추가, 삭제가 동적으로 가능하도록 되어 있다. 또한 '''QCustomMenuItem''' 서브클래스를 이용해서 사용자 정의 가능한 메뉴 아이템들을 만들어 낼 수 있다.   

==== 툴바 ====
'''QToolButton'''클래스는 아이콘, 3D프레임, 라벨을 가지는 툴바를 지원한다. 토글(Toggle)툴바 버튼을 이용해서 어떤 기능을 on,off 시키거나, 명령을 실행시키는 등의 일을한다. 상태에 따라서 아이콘을 활성화, 비활성화, on, off시킬 수 있다.  

'''QTollButtons'''는 일반적으로 '''QTollBar'''과 함께 사용된다. 툴바는 QComboBox 와 '''QSpinBox'''을 비롯한 모든 위젯을 포함시킬 수 있다. 

==== 풍선 도움말 ====
최근의 애플리케이션은 풍선 도움말을 거의 필수적으로 지원한다. 이것은 사용자가 툴바의 아이콘등에 마우스를 대고 있거나 특정한 문자에 마우스를 대면 간단한 도움말을 출력해준다. QT는 툴팁(tooltips)과 "What's this?" 두가지 형태로 풍선 도움말을 지원한다.     

툴팁은 마우스를 위젯위에 올려 놓으면 자동적으로 관련 도움말을 출력한다. 이러한 도움말은 노란색 바탕의 사각형 라벨위에 출력된다. 이외에도 툴바에 위치하는 아이콘의 설명등을 위해서 사용한다. 툴팁은 아래와 같이 간단하게 만들 수 있다.   
{{{#!plain
QToolTip::add(saveButton, "Save File");
}}}
또한 툴팁은 상태바(status bar)에 보이도록 할 수 있다. 

"What's this?"는 툴팁과는 달리 사용자가 요청을 해야만 도움말을 출력한다는 것을 제외하고는 툴팁과 비슷하다. 예를 들어 Shift+F1을 누르고 위젯이나 아이콘을 클릭하면 거기에 대한 도움말이 출력되는 형식이다. 다음은 "Save"툴바 버튼에 대한 "What's this?"도움말을 작성하는 코드다.  
{{{#!plain
QWhatsThis::add( saveButton, "Saves the current file." );
}}}
'''QToolTip'''과 '''QWhatsThis''' 클래스는 가상함수를 지원하며, 이를 이용해서 사용자 정의 가능한 특수한 행동이 가능하도록 재작성할 수 있다. 

==== 행동 (Actions) ====
일반적으로 애플리케이션은 특별한 행동에 대해서 여러가지 수행방법을 제공한다. 파일을 저장하는 행동을 예로 들어보자. 대부분의 애플리케이션은 파일 저장의 수행을 위해서 메뉴로부터 '''Save'''를 선택하는 방법과, 툴바로 부터 수행하는(플로피 디스크 모양의 아이콘을 클릭)방식과 Ctrl+S과 같은 단축키를 이용하는 방법을 제공한다. '''QAction'''클래스는 위의 것들을 캡슐화 해서 지원한다. 프로그래머는 한번의 코딩으로 간단하게 사용자에게 여러가지 행동방식을 지원할 수 있다.  

다음은 '''Save'''행동에 대해서 메뉴아이템, 툴바버튼, 단축키, 풍선도움말을 모두 지원하도록 만든 코드다. 
{{{#!plain
QAction *saveAct = new QAction( "Save", saveIcon, "&Save",
                                    CTRL+Key_S, this );
connect( saveAct, SIGNAL(activated()), this, SLOT(save()) );
saveAct->setWhatsThis( "Saves the current file." );
saveAct->addTo( fileMenu );
saveAct->addTo( toolbar );
}}}
여러개의 행동들을 정의하다보면 프로그래머의 실수로 중복되는 결과가 생길수 있는데, QAction은 메뉴아이템과 툴바 상태의 동기화를 통해서 이러한 실수를 예방한다.   

==== 중앙 위젯(Central Widget) ====
'''QMainWindow'''의 중앙에는 어떠한 위젯이라도 올 수 있다. 에디터 프로그램을 만들기 원한다면 텍스트 입출력이 가능한 QTextEdit가 중앙 위젯으로 사용될 것이다. 
{{{#!plain
QTextEdit *editor = new QTextEdit( mainWindow );
mainWindow->setCentralWidget( editor );
}}}

==== Multiple Document Interface ====
MDI는 '''QWorkspace'''클래스에 의해서 지원된다. 이 위젯은 보통 '''QMainWindow'''의 중앙 위젯으로 이용된다.

QWorkspace의 자식 위젯으로는 어떠한 것이라도 올 수 있다. show(), hide(), showMaximized(), setCaption()등과 같은 메서드를 이용해서 MDI의 위젯을 제어할 수 있다.   

'''QWorkspace'''는 cascade와 tile방식의 정렬을 지원한다. 만약 자식 위젯이 MID 영역을 벗어나면 자동적으로 스크롤바가 나타난다. 자식 위젯이 최대화 되었다면 자동적으로 메뉴바에 최소화 버튼이 나타난다. 

==== 대화상자(Dialogs) ====
모든 GUI애플리케이션은 사용자와의 상호작용을 위해서 대화상자를 지원한다. QT는 모든 일반적인 대화상자를 제공한다. 

다음은 QT에서 지원하는 표준 대화상자들의 스크린샷이다. 아래에는 나와있지 않지만 QT는 색선택, 프린트 옵션 설정을 위한 대화상자들도 제공한다.    

http://www.trolltech.com/products/qt/whitepaper/qmessagebox.png border=0

'''QMessageBox'''

'''QMessageBox'''는 선택에 관한 간단한 물음을 사용자에게 보여주고 선택할 수 있도록 한다. 

http://www.trolltech.com/products/qt/whitepaper/qfiledialog.png

'''QFileDialog'''

'''QFileDialog'''는 파일선택 대화상자다. 스크린샷에서 볼 수 있는 것처럼 다중의 파일을 선택할 수 있으며, 로컬뿐만 아니라 (FTP 같은)원격파일도 지원한다. 파일의 선택외에도 이름변경, 디렉토리 생성과 같은 간단한 파일관련 작업도 할 수 있다. 대부분의 QT대화상자들이 그렇듯이 '''QFileDialog'''도 크기의 조절이 가능하다. 애플리케이션은 각 운영체제에 맞는 적당한 대화상자를 출력한다. 

http://www.trolltech.com/products/qt/whitepaper/qprogressdialog.png

'''QProgressDialog'''

진행정도를 표시하기 위해서 사용한다.

http://www.trolltech.com/products/qt/whitepaper/qwizard.png

'''QWizard'''

마법사툴

http://www.trolltech.com/products/qt/whitepaper/qfontdialog.png

'''QFontDialog'''

폰트 선택을 위한 대화상자다. 

프로그래머는 QT에서 기본적으로 제공하는 대화상자외에도 사용자 정의 대화상자의 제작이 가능하다. 사용자 정의 대화상자는 '''QWidget''', '''QDialog'''등의 상속에 의해서 제작할 수 있다. 

==== Dock Windows ====
Dock windows are windows that the user can move inside a toolbar area or from one toolbar area to another. The user can undock a dock window and make it float on top of the application or minimize it. Dock windows and toolbar areas are provided by the QDockWindow and QDockArea classes.


Qt provides one QDockWindow subclass, QToolBar. QMainWindow automatically provides four toolbar areas, one on each side of the central widget.


Developers can create custom dock windows by instantiating a QDockWindow object and by adding widgets to it. The widgets are laid out side by side if the toolbar area is horizontal (e.g. at the top of the main window) and above each other if the area is vertical (e.g. at the left of the main window).


Dock areas are not bound to QMainWindow; developers can use QDockArea in any custom widget. Toolbars and other dock windows can be used with any toolbar area.


Some applications, including Qt Designer and Qt Linguist, use dock windows extensively. QDockArea provides operators to save and restore the position of dock windows, so that applications can easily restore the user's preferred positions.

==== Settings ====
애플리케이션을 작성하다 보면 유저의 설정값등을 변경해야 되는 경우가 있다. 이럴경우 간혹 DB를 사용하기도 하지만 보통은 일반 파일에 저장하는 경우가 대부분이다. 이러한 설정작업을 위해서 QSettings 클래스가 사용된다. 플랫폼에 따라서 저장할 장소로 레지스터리와 일반 파일을 선택할 수 있다. 

일반적인 설정 저장은 키를 이용하는 방법이다. 예를들어 SoftwareInc/RecentFiles등을 키로 하고 여기에 적당한 값을 저장하는 방식이다.
{{{#!plain
SoftwareInc=www.joinc.co.kr
RecentFiles=wiki.html
}}}
저장 값으로는 숫자, 유니코드 문자, Booleans등이 사용될 수 있다.

==== 멀티 쓰레드 ====
GUI애플리케이션은 특히 멀티 쓰레드를 이용해야하는 경우가 많다. 멀티쓰레드 프로그래밍을 할경우 프로그래머는 쓰레드간 데이터 공유와 쓰레드간 동기화등을 위해서 많은 노력을 해야하며, 많은 수의 쓰레드 함수에 대해서 알고있어야 한다. QT는 '''QThread''', '''QMutex''', '''QMutexLocker''', '''QSemaphore'''와 '''QWaitCondition''' 클래스를 제공한다. 이들 클래스는 높은 수준의 클래스들로써 최소한의 노력으로 효과적인 코드의 작성이 가능하도록 도와준다.

=== QT 개발도구들 ===
==== QT Designer ====
QTDesigner은 QT로 작성되어진 비쥬얼한 유저인터페이스 및 코드 저작툴이다. 이 것을 통해서 완전한 소스코딩이 가능하며, 빠른 개발이 가능해진다.

{{{#!html
<a href=http://www.joinc.co.kr/albums/album01/ahh.png><img src=http://www.joinc.co.kr/albums/album01/ahh.sized.png border=0></a>
}}}

QTDesigner을 이용한 디자인은 직관적이고 간단한 과정을 따른다. 개발자는 사용하기 원하는 위젯을 클릭한다음에 원하는 장소에 위치시키고 위젯의 크기를 (드래그를 통해서) 결정하기만 하면 된다. 위젯의 여러가지 특징은 property editor을 통해서 결정할 수 있다. 예를 들어 어떤 버튼 위젯을 선택했다고 하자. 이 버튼의 이름을 '''종료'''로 하고 싶다면 property editor의 text값에 '''종료'''를 입력하기만 하면 된다. VC++과 볼랜드 C++빌더의 비쥬얼한 환경을 생각하면 될것이다.   

QTDesigner은 인터페이스 디자인을 위해서 complie, link, run 과정이 필요 없다. 눈에 보이는 그대로 실행될것이라는 것을 보장하기 때문이다. 이는 인터페이스 디자인에 걸리는 시간을 획기적으로 줄여준다. QTDesigner은 미리보기 기능을 이용해서 개발자가 만든 인터페이스가 다른 스타일에서는 어떻게 보일지를 미리 보여준다. 예를들어 윈도우 환경에서 인터페이스를 디자인하더라도 매킨토시나 리눅스에서 어떻게 보여질지를 미리 확인할 수 있다. 또한 Qt의 데이터베이스 클래스와 통합되어서 데이터베이스의 데이터를 편집하고 그 결과를 미리 확인할 수 있도록 되어있다.   

개발자는 '''main window'''와 '''dialog'''스타일의 애플리 케이션 모두의 개발이 가능하다. 

여러가지 템플릿을 제공하며, 개발자 정의된 템플릿을 만들 수도 있다. 이 템플릿은 애플리케이션에 투명하게 적용된다. QTdesigner의 마법사(wizard)를 이용하면 툴바, 메뉴, 데이터베이스 애플리케이션을 빠르고 쉽게 제작할 수 있다. 프로그래머는 자신이 생성한 위젯을 QTDesigner에서 쉽게 통합할 수 있다.  

QTDesigner은 프로젝트 기반의 애플리케이션 개발 환경을 지원한다. 프로젝트는 '''a.pro'''형식으로 저장되며 qmake에 의해서 makefile로 변경된다. 개발자는 여기에 폼을 더하고 소스파일을 추가해서 완전한 프로젝트로 만들 수 있다. QTDesigner을 이용하면 개발자는 코드로 부터 인터페이스를 완전히 분리 시킬 수 있다. 

아이콘과 다른 이미지들은 프로젝트들의 폼에서 모두 공유되어서 사용된다. 이것은 실행파일의 크기를 줄이고 좀더 빨리 실행될 수 있도록 도와준다.  

디자인된 폼은 .ul파일로 XML형식으로 저장된다. 이 파일은 uic(User Interface Compiler)에 으해서 C++헤더파일과 소스파일로 변경된다. qmake는 uic를 위한 룰을 포함한 makefile을 자동적으로 생성한다. 개발자는 uic의 사용방법등에 대해서 신경쓸 필요가 없다.  

일반적으로 폼은 컴파일되어서 실행파일형태로 만들어진다. 그러나 때때로 사용자는 소스코드의 엑세스없이 애플리케이션의 모양을 변경하기를 원하는 경우가 있다. 이럴경우를 대비해서 QT는 '''dynamic dialog'''를 지원한다.. .ui파일은 실행시간(run-time)에 읽혀 질수 있으며 동적으로 폼이 생성된다. 예를들자면 각 회사는 고객의 특성에 따라서 적당한 폼을 소스코드의 제컴파일이나, 바이너리의 변환없이 .ui파일만 변경해 줌으로써 만들어 줄수 있게 된다. dinamic dialog는 다음과 같은 방법으로 쉽게 만들어 질 수 있다.      
{{{#!plain
QDialog *creditForm = (QDialog *)
                        QWidgetFactory::create("ucreditform.ui");
}}}

==== QT Assistant ====
QTDesigner은 '''QT Assistant'''라는 온라인 도움말 애플리케이션을 지원한다. QT Assistant는 QT의 모든 문서들을 포함하며, 웹브라우저와 비슷한 모습으로 보여준다. 그러나 웹브라우저에서는 지원하지 않는 full text 검색을 지원한다. 

QT의 레퍼런스 문서는 1,600페이지에 달하며, 여기에는 QT의 클래스와 도구들 overviews, QT프로그래밍에 대한 다양한 소개등의 내용을 담고 있다. 

{{{#!html
<a href=http://www.joinc.co.kr/albums/album01/ahi.png><img src=http://www.joinc.co.kr/albums/album01/ahi.sized.png border=0></a>
}}}

개발자는 QT Assistant 도움말 브라우저를 제작한 애플리케이션이나 문서등에 배치시킬수 있다. 이러한 일은 '''QAssistantClient''' 클래스를 이용해서 가능해진다. QT Assistant는 QT의 HTML레퍼런스 문서를 QTextEdit를 이용해서 렌더링 시킨다. 개발자는 이 클래스를 이용해서 자신만의 도움말 브라우저를 만들 수도 있다. '''QTextEdit'''는 HTML 3.2를 지원하며 '''QStyleSheet''' 클래스를 이용해서 사용자 정의 태그를 만들 수도 있다. 

=== GUI 애플리케이션 예제 ===
{{{#!html
<img src=http://www.trolltech.com/products/qt/whitepaper/hierarchy.png>
}}}
위의 응용은 계층적 구조를 보여주는 '''Hierarchy''' 프로그램이다.

위의 구현을 위한 완전한 소스크드는 아래에 제공되고 있다. main.cpp 파일은 QT DEsigner wizard에 의해서 생성되었다. 

addSearchPath(), removeSearchPath(), updateHierarchy()함수는 모두 슬롯으로 QT Designer에 의해서 생성된 버튼을 통해서 연결된다. 

{{{#!plain
void ClassHierarchy::addSearchPath()
{
    QString path = QFileDialog::getExistingDirectory(
            QDir::homeDirPath(), this, 0, "Select a Directory" );
    if ( !path.isEmpty() && searchPathBox->findItem(path, ExactMatch) == 0 )
        searchPathBox->insertItem( path );
}
void ClassHierarchy::removeSearchPath()
{
    searchPathBox->removeItem( searchPathBox->currentItem() );
}

void ClassHierarchy::updateHierarchy()
{
    QString fileNameFilter;
    QRegExp classDef;

    if ( language->currentText() == "C++" ) {
        fileNameFilter = "*.h";
        classDef.setPattern( "\\bclass\\s+([A-Z_a-z0-9]+)\\s*"
                             "(?:\\{|:\\s*public\\s+([A-Z_a-z0-9]+))" );
    } else if ( language->currentText() == "Java" ) {
        fileNameFilter = "*.java";
        classDef.setPattern( "\\bclass\\s+([A-Z_a-z0-9]+)\\s+extends\\s*"
                             "([A-Z_a-z0-9]+)" );
    }

    dict.clear();
    listView->clear();

    for ( int i = 0; i < searchPathBox->count(); i++ ) {
        QDir dir = searchPathBox->text( i );
        QStringList names = dir.entryList( fileNameFilter );

        for ( int j = 0; j < names.count(); j++ ) {
            QFile file( dir.filePath(names[j]) );
            if ( file.open(IO_ReadOnly) ) {
                QString content = file.readAll();
                int k = 0;
                while ( (k = classDef.search(content, k)) != -1 ) {
                    processClassDef( classDef.cap(1), classDef.cap(2), names[j] );
                    k++;
                }
            }
        }
    }
}

void ClassHierarchy::processClassDef( const QString& derived,
        const QString& base, const QString& sourceFile )
{
    QListViewItem *derivedItem = insertClass( derived, sourceFile );

    if ( !base.isEmpty() ) {
        QListViewItem *baseItem = insertClass( base, "" );
        if ( derivedItem->parent() == 0 ) {
            listView->takeItem( derivedItem );
            baseItem->insertItem( derivedItem );
            derivedItem->setText( 1, sourceFile );
        }
    }
}

QListViewItem *ClassHierarchy::insertClass( const QString& name,
                                            const QString& sourceFile )
{
    if ( dict[name] == 0 ) {
        QListViewItem *item = new QListViewItem( listView, name, sourceFile );
        item->setOpen( true );
        dict.insert( name, item );
    }
    return dict[name];
}
}}}
QT Designer에 관한 내용은 http://doc.trolltech.com/3.1/designer-manual.html 를 참고하기 바란다.

=== 2D와 3D 그래픽 ===
QT는 2D와 3D 그래픽을 지원한다. QT의 2D그래픽관련 클래스들은 bitmap과 vector 그래픽을 지원한다. 또한 애니메이션과 충돌검출(collision detection)과 같은 것들 역시 지원한다. 3D를 위해서는 OpenGL을 이용함으로써 플랫폼에 종속적이지 않은 그래픽관련 프로그램의 개발이 가능하다.    

==== 2D 그래픽 ====
{{{#!html
<h3>Images</h3>
}}}
'''QImage''' 클래스는 BMP, GIF, JPEG, MING, PNG, PNM, XBM, XPM과 같은 다양한 이미지 포캣에 대한 입력/출력과 편집기능을 제공한다.

많은 QT의 내장위젯들이 이미지를 출력할 수 있다. 예를 들어 버턴, 라벨, 메뉴 아이템등이 그것인데, 사용자에게 좀더 직관적인 환경을 제공하기 위해서 이미지를 출력할 수도 있다.  
{{{#!plain
QPushButton *button = new QPushButton( "&Find Address", parent );
button->setIconSet( QIconSet(QImage("find.bmp")) );
}}}
{{{#!plain
<img src=http://www.trolltech.com/products/qt/whitepaper/icon.png>
}}}

'''QImage'''는 1, 8, 32 비트의 색상을 지원한다. 프로그래머는 픽샐과 팔렛트 데이터를 수정할 수 있으며, 회전, 변형, 색상줄이기와 같은 작업을 할 수 있다. 또한 alpha 채널을 이용해서 alpha-blending와 투명배경과 같은 것들의 구현도 가능하다.     

'''QMovie'''클래스를 이용하면 애니메이션 이미지를 플레이 할 수도 있다.

{{{#!html
<h3>Painting</h3>
}}}
'''QPainter'''은 플랫폼 독립적인 패인팅 위젯을 위한 API를 제공한다. 기본적인 패인팅 관련 기능외에도 변환(transformation)과 자르기(clipping)와 같은 발전된 기능도 제공한다. 모든 QT 내장 위젯은 QPainter을 이용할 수 있다. 프로그래머가 자신의 위젯을 만들 때도 QPinater은 유용하게 사용된다. 

'''QPainter'''은 점,선,다각형,원,베지어 곡선등을 그리기 위한 표준적인 함수를 제공한다. 만약 2-pixel의 두깨를 가지는 빨간 선으로 이루어진 120 x 60 크기의 사각형을 25,15 좌표에 그리고 싶다면 다음과 같이 하면 된다.  
{{{#!plain
painter.setPen( QPen(red, 2, DashLine) );
painter.drawRect( 25, 15, 120, 60 );
}}}
기본적으로 위젯에서 기준이 되는지점은 왼쪽 위로 0,0좌표가 된다. 반대의 오른쪽 아래 좌표는 witdh()-1, height()-1이 된다.   
{{{#!html
<img src=http://www.trolltech.com/products/qt/whitepaper/xform.png>
}}}

다음은 bar-graph 사용자 위젯을 위한 코드다. 코드는 '''QPainter'''의 paintEvent()를 이용해서 만들어 졌다.  
{{{#!plain
void BarGraph::paintEvent( QPaintEvent * )
{
    QPainter painter( this );

    draw_bar( &painter, 0, 39, Qt::DiagCrossPattern );
    draw_bar( &painter, 1, 31, Qt::BDiagPattern );
    draw_bar( &painter, 2, 44, Qt::FDiagPattern );
    draw_bar( &painter, 3, 68, Qt::SolidPattern );

    painter.setPen( black );
    painter.drawLine( 0, 0, 0, height() - 1 );
    painter.drawLine( 0, height() - 1, width() - 1, height() - 1 );

    painter.setFont( QFont("Helvetica", 18) );
    painter.drawText( rect(), AlignHCenter | AlignTop, "Sales" );
}

void BarGraph::draw_bar( QPainter *painter, int month, int barHeight,
                         BrushStyle pattern )
{
    painter->setPen( blue );
    painter->setBrush( QBrush(darkGreen, pattern) );
    painter->drawRect( 10 + 30 * month, height() - barHeight, 20,
                       barHeight );
}
}}}

이 위젯은 width(), height()를 이용해서 좌표를 결정하므로 윈도우의 크기가 변하더라도 정확하게 표현된다.  
{{{#!html
<img src=http://www.trolltech.com/products/qt/whitepaper/painting.png>
}}}

'''QPainter'''는 합집합(uniting), 교집합(intersection), 차집합(subtractin), XOR 등을 지원하며 이것을 이용하면, 사각형, 원, 비트맵들간의 겹치는 부분에 대한 손쉬운 표현이 가능해 진다.  

{{{#!html
<h3>Paing Devices</h3>
}}}

==== 3D 그래픽 ====
OpenGL은 3D 프로그래밍을 위한 표준 API다. QT는 '''QWidget'''의 서브 위젯인 '''QGLWidget'''을 제공하는데 이것을 이용해서 3D 그래픽을 지원하는 애플리케이션을 제작할 수 있다.  

QT의 OpengGL 모듈은 Windows, X11, Macintosh 의 시스템이 제공하는 OpenGL라이브러리(또는 Mesa)를 이용해서 이러한 3D를 지원한다. 
{{{#!plain
<img src=http://www.trolltech.com/products/qt/whitepaper/brain-innovation.png>
}}}

다음은 QT를 이용한 3D 그래픽 예제다. 
{{{#!html
<img src=http://www.trolltech.com/products/qt/whitepaper/box3d.png>
}}}

다음은 예제를 위한 완전한 코드다. 이 프로그램은 3D 상자를 그리는데, 3개의 슬라이드 바를 이용해서 박스를 X, Y, Z축으로 회전 시킬 수 있다.

다음은 box3d.h 파일이다.
{{{#!plain
#include <qgl.h>

class Box3D : public QGLWidget
{
    Q_OBJECT
public:
    Box3D( QWidget *parent = 0, const char *name = 0 );
    ~Box3D();

public slots:
    void setRotationX( int deg ) { rotX = deg; updateGL(); }
    void setRotationY( int deg ) { rotY = deg; updateGL(); }
    void setRotationZ( int deg ) { rotZ = deg; updateGL(); }

protected:
    virtual void initializeGL();
    virtual void paintGL();
    virtual void resizeGL( int w, int h );
    virtual GLuint makeObject();

private:
    GLuint object;
    GLfloat rotX, rotY, rotZ;
};
}}}

다음은 box3d.cpp 파일로 box3d.h에 선언된 선언된 함수들의 정의가 되어 있다.
{{{#!plain
#include "box3d.h"

Box3D::Box3D( QWidget *parent, const char *name )
    : QGLWidget( parent, name )
{
    object = 0;
    rotX = rotY = rotZ = 0.0;
}

Box3D::~Box3D()
{
    makeCurrent();
    glDeleteLists( object, 1 );
}

void Box3D::initializeGL()
{
    qglClearColor( darkBlue );
    object = makeObject();
    glShadeModel( GL_FLAT );
}

void Box3D::paintGL()
{
    glClear( GL_COLOR_BUFFER_BIT );
    glLoadIdentity();
    glTranslatef( 0.0, 0.0, -10.0 );
    glRotatef( rotX, 1.0, 0.0, 0.0 );
    glRotatef( rotY, 0.0, 1.0, 0.0 );
    glRotatef( rotZ, 0.0, 0.0, 1.0 );
    glCallList( object );
}

void Box3D::resizeGL( int w, int h )
{
    glViewport( 0, 0, w, h );
    glMatrixMode( GL_PROJECTION );
    glLoadIdentity();
    glFrustum( -1.0, 1.0, -1.0, 1.0, 5.0, 15.0 );
    glMatrixMode( GL_MODELVIEW );
}

GLuint Box3D::makeObject()
{
    GLuint list = glGenLists( 1 );
    glNewList( list, GL_COMPILE );
    qglColor( yellow );
    glLineWidth( 2.0 );

    glBegin( GL_LINE_LOOP );
    glVertex3f( +1.5, +1.0, +0.8 );
    glVertex3f( +1.5, +1.0, -0.8 );
    /* ... */
    glEnd();

    glEndList();
    return list;
}
}}}

다음은 main.cpp 파일로 Box3D의 인스턴스를 생성한다. 
{{{#!plain
#include <qapplication.h>
#include <qslider.h>
#include <qvbox.h>

#include "box3d.h"

void create_slider( QWidget *parent, Box3D *box3d, const char *slot )
{
    QSlider *slider = new QSlider( 0, 360, 60, 0,
            QSlider::Horizontal, parent );
    slider->setTickmarks( QSlider::Below );
    QObject::connect( slider, SIGNAL(valueChanged(int)), box3d, slot );
}

int main( int argc, char **argv )
{
    QApplication::setColorSpec( QApplication::CustomColor );
    QApplication app( argc, argv );
    if ( !QGLFormat::hasOpenGL() )
        qFatal( "This system has no OpenGL support" );

    QVBox *parent = new QVBox;
    parent->setCaption( "OpenGL Box" );
    parent->setMargin( 11 );
    parent->setSpacing( 6 );
    Box3D *box3d = new Box3D( parent );
    create_slider( parent, box3d, SLOT(setRotationX(int)) );
    create_slider( parent, box3d, SLOT(setRotationY(int)) );
    create_slider( parent, box3d, SLOT(setRotationZ(int)) );

    app.setMainWidget( parent );
    parent->resize( 250, 250 );
    parent->show();
    return app.exec();
}
}}}

=== Database ===
QT SQL모듈은 다중 플랫폼에서 SQL 데이터베이스를 액세스하기 위한 인터페이스를 제공한다. QT는 Oracle, Microsoft SQL 서버, Sysbase Adaptive Server, PostgreSQL, MySQL, ODBC를 위한 드라이버를 포함하고 있다. 이 드라이버들은 플랫폼에 관계없이 QT는 물론이고 다른 라이브러리응용을 위해서도 사용가능하다.  

프로그래머는 SQL을 쉽게 엑세스할 수 있어야 한다. QT는 C++인터페이스를 이용해서 높은 수준에서 쉽게 SQL을 다룰 수 있도록 일반적인 사용법을 제공한다.  



