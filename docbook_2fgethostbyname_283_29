#title gethostbyname(3)
[wiki:function_gethostbyname(3) HTML 변환문서]

{{{#!plain
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook V4.1//EN">
<chapter lang=ko>
<!-- 작성자 : yundream             -->
<!-- 작성일 : 2004/05/06           -->
<!-- 연락처 : yundream@joinc.co.kr -->

<!-- 함수 이름을 입력합니다 -->
<title>gethostbyname(3)</title>

<!-- 이건 함수에 대한 대략적인 설명이구요 -->
<para>
	네트웍 호스트 목록을 가져온다.
</para>
 
<!-- 여기에 함수의 간단한 사용법이 들어갑니다 -->
<section>
	<title>사용법</title>
	<para>
		<screen>
#include &lt;netdb.h&gt;
extern int h_errno;

struct hostent *gethostbyname(const char *name);

#include &lt;sys/socket.h&gt;      /* for AF_INET */
struct hostent *gethostbyaddr(const char *addr,
  int len, int type);

void sethostent(int stayopen);

void endhostent(void);

void herror(const char *s);

const char * hstrerror(int err);
		</screen>
	</para>
</section>

<!-- 여기엔 함수의 자세한 설명 이 들어갑니다 -->
<section>
	<title>설명</title>
	<para>
		gethostbyname()함수는 주어진 호스트 <emphasis>name</emphasis>에 
		상응하는 <emphasis>hostent</emphasis>타입의 구조체를 반환한다. 
		name은 호스트이름이거나 표준 점 표기법의 IPv4주소, 혹은 IPv6주소이다. 	
		IPv6에 대한 내용은 <ulink url="http://www.joinc.co.kr/modules.php?name=News&amp;file=article&amp;sid=103">IPv6 환경설정</ulink>을 참고하기 바란다.
	</para>
	<para>
		만일 name이 IPv4나 IPv6주소라면 어떠한 찾기도 행해지지 않고 단지 
		name을 <emphasis>h_name</emphasis>필드에 복사하고 해당 in_addr 구조체를
		반환하는 hostent 구조체의 h_addr_list[0]에 복사한다. 만일 name이 점으로
		끝나지 않고 환경변수 <emphasis>HOSTALIASES</emphasis>가 설정되어 있다면
		HOSTALIASES가 가리키는 별칭 파일이 name을 위해 우선 탐색된다. 현재 
		도메인과 상위 도메인은 name이 점으로 끝나지 않는다면 탐색된다.
	</para>
	<para>
		gethostbyaddr()함수는 길이 <emphasis>len</emphasis>, 주소타입이 typedls
		호스트 주소 <emphasis>addr</emphasis>에 해당하는 
		<emphasis>hostent</emphasis>구조체를 리턴한다. 유일하게 유효한 주소 
		타입은 현재 AF_INET이다.	
	</para>
	<para>
		만일 stayopen이 참(1)이라면, sethostent()함수는 연결된 TCP소켓이 네임
		서버 질의를 위해 사용되어야 한다는 것을 가리킨다. 그렇지 않으면 
		네임 서버질의에 UDP를 이용할 것이다.
	</para>
	<para>
		endhostent()함수는 네임 서버 질의를 위한 TCP연결을 끝낸다.
	</para>
	<para>
		herror()함수는 stderr에 현재 값의 h_errno에 상응하는 에러 메시지를 
		출력한다. 구식으로 사용하지 않는다. 
	</para>
	<para>
		hsterror()함수는 에러 넘버를 가지며 상응하는 메시지를 반환한다. 
		구식으로 사용하지 않는다.
	</para>
	<para>
		도메인 이름 질의는 gethostbyname()에 의해 수행되며 gethostbyaddr()은
		/etc/host.conf에 있는 order라인의 내용에 의존하여 /etc/hosts에서 
		라인을 뽑아내 네임서버의 일부나 모두의 조합과 NIS혹은 YP를 사용한다.
	</para>
	<para>
		hostent 구조체는 &lt;netdb.h&gt;에 다음과 같이 정의되어 있다.	
		<screen>
struct hostent {
        char    *h_name;        /* 호스트의 공식 이름 */
        char    **h_aliases;    /* 별칭 리스트 */
        int     h_addrtype;     /* 호스트 주소 타입 */
        int     h_length;       /* 주소의 길이 */
        char    **h_addr_list;  /* 주소 리스트 */
}
#define h_addr  h_addr_list[0]  /* 구 버전과의 호환을 위해 */
		</screen>
	</para>
</section>

<!-- 함수가 되돌려주는 값이구요 -->
<section>
	<title>반환값</title>
	<para>
		gethostbyname() 그리고 gethostbyaddr() 함수는 hostent 구조체를 
		반환하거나 만일 에러가 발생한다면 NULL 포인터를 반환한다.  
		에러시, h_errno 변수는 에러 넘버를 가진다.
	</para>
</section>

<!-- 에러가 발생했을때 되돌려주는 값들입니다 -->
<section>
	<title>에러</title>
	<para>
		변수 h_errno는 다음 값들을 가진다.
		<variablelist>	
			<varlistentry>
			<term>HOST_NOT_FOUND</term>	
			<listitem>
				<para>	
					지정된 호스트가 알려지지 않았다.
				</para>	
			</listitem>
			</varlistentry>
			<varlistentry>
			<term>NO_ADDRESS, NO_DATA</term>	
			<listitem>
				<para>	
					요구한 이름이 유효하지만 IP주소를 가지지 않는다.
				</para>	
			</listitem>
			</varlistentry>
			<varlistentry>
			<term>NO_RECOVERY</term>	
			<listitem>
				<para>	
					복구 불가능한 네임 서버에러가 발생했다.
				</para>	
			</listitem>
			</varlistentry>
			<varlistentry>
			<term>TRY_AGIN</term>	
			<listitem>
				<para>	
					일시적으로 발생한 에러로 네임서버 인증시 발생했다. 다시 
					시도하면 된다.
				</para>	
			</listitem>
			</varlistentry>
		</variablelist>	
	</para>
</section>

<!-- 마지막으로 에제 입니다                                                 -->
<!-- 여기에는 완전한 예제가 들어가 있는데, 굳이 완전한 예제를 만들필요 없이 -->
<!-- 코드 일부분만 작성해서 올려주셔도 됩니다                               --> 
<!-- "<", ">", "&" 등은 변환해 주셔야 하는데, 귀찮으시면 :-) 변환 하지 않   -->
<!-- 아도 됩니다. 제가 검사 해서 올리겠습니다                               -->
<!-- 예제에 대한 간단한 설명을 적어주셔도 되구요                            -->
<section>
	<title>예제</title>
	<para>
		<screen>
#include &lt;netdb.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;arpa/inet.h&gt;
#include &lt;netinet/in.h&gt;

int main(int argc, char **argv)
{
    struct hostent     *myent;
    struct in_addr *myen;
    long int *add;

    myent = gethostbyname(argv[1]);
    if (myent == NULL)
    {
        perror("ERROR : ");
        exit(0);
    }

    printf("%s\n", myent-&gt;h_name);

    while(*myent-&gt;h_addr_list != NULL)
    {
        add = (long int *)*myent-&gt;h_addr_list;
        myen-&gt;s_addr = *add;
        printf("%s\n", inet_ntoa(*myen));
        myent-&gt;h_addr_list++;
    }
}
		</screen>
		다음은 테스트 결과다.
		<screen>
[root@localhost test]# ./gethostbyname www.yahoo.com
www.yahoo.akadns.net                                                           
66.218.71.83                                                                   
66.218.71.84                                                                   
66.218.71.86                                                                   
66.218.71.87                                          
66.218.71.89                                                                   
...
		</screen>
	</para>
</section>
<section>
	<title>참고문헌</title>
	<para>
		<orderedlist>
		<listitem>
			<para>
			<ulink url="http://www.joinc.co.kr/modules/moniwiki/wiki.php/article_인터넷_주소_변환">인터넷 주소 변환</ulink>
			</para>
		</listitem>
		</orderedlist>
	</para>
</section>
</chapter>
}}}
