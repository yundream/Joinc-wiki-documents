#title linux man page : statfs - 파일시스템 정보를 가져온다.
[wiki:docbook_statfs(2) Docbook 원문]

{{{#!html
<HTML
><HEAD
><TITLE
>statfs(2)</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.59"><META
http-equiv="Content-Type"
content="text/html; charset=euc-kr"></HEAD
><BODY
CLASS="CHAPTER"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="CHAPTER"
><H1
><A
NAME="AEN1"
>1&#51109;. statfs(2)</A
></H1
><DIV
CLASS="TOC"
><DL
><DT
><B
>&#52264;&#47168;</B
></DT
><DT
>1.1&#51208;. <A
HREF="#AEN4"
>사용법</A
></DT
><DT
>1.2&#51208;. <A
HREF="#AEN8"
>설명</A
></DT
><DT
>1.3&#51208;. <A
HREF="#AEN18"
>반환값</A
></DT
><DT
>1.4&#51208;. <A
HREF="#AEN21"
>에러</A
></DT
><DT
>1.5&#51208;. <A
HREF="#AEN83"
>예제</A
></DT
><DT
>1.6&#51208;. <A
HREF="#AEN87"
>참고문헌</A
></DT
></DL
></DIV
><P
>	파일 시스템 정보를 가져온다. </P
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN4"
>1.1&#51208;. 사용법</A
></H1
><P
>		<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;sys/vfs.h&#62;

int statfs(const char *path, struct statfs *buf);
int fstatfs(int fd, struct statfs *buf);
		</PRE
></TD
></TR
></TABLE
>
	</P
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN8"
>1.2&#51208;. 설명</A
></H1
><P
>		statfs()는 마운트(:12)된 파일 시스템에 대한 정보를 반환한다. 
		<B
CLASS="EMPHASIS"
>path</B
>는 마운트된 파일 시스템내 파일의 
		경로 이름이다. 파일 시스템의 정보는 <B
CLASS="EMPHASIS"
>buf</B
>가 
		가르키는 공간에 채워진다. <B
CLASS="EMPHASIS"
>statfs</B
>구조체는 
		다음과 같이 정의되어 있다.
		<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>struct statfs {
   long    f_type;     /* 파일 시스템 타입(아래에서 보여준다) */
   long    f_bsize;    /* 최적화된 전송 블럭 크기 */
   long    f_blocks;   /* 파일 시스템내 총 데이터 블럭들 */
   long    f_bfree;    /* 파일 시스템내 여유 블럭들 */
   long    f_bavail;   /* 비-슈퍼 유저를 위한 여유 블럭들 */
   long    f_files;    /* 파일 시스템내 총 파일 노드들 */
   long    f_ffree;    /* 파일 시스템내 여유 파일 노드들 */
   fsid_t  f_fsid;     /* 파일 시스템 ID */
   long    f_namelen;  /* 파일 이름의 최대 길이 */
   long    f_spare[6]; /* 나중을 위한 여유분 */
};
		</PRE
></TD
></TR
></TABLE
>
		다음은 파일 시스템 타입이다.	
		<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>linux/affs_fs.h:
   AFFS_SUPER_MAGIC      0xADFF
linux/ext_fs.h:
   EXT_SUPER_MAGIC       0x137D
linux/ext2_fs.h:
   EXT2_OLD_SUPER_MAGIC  0xEF51
   EXT2_SUPER_MAGIC      0xEF53
linux/hpfs_fs.h:
   HPFS_SUPER_MAGIC      0xF995E849
linux/iso_fs.h:
   ISOFS_SUPER_MAGIC     0x9660
linux/minix_fs.h:
   MINIX_SUPER_MAGIC     0x137F /* orig. minix */
   MINIX_SUPER_MAGIC2    0x138F /* 30 char minix */
   MINIX2_SUPER_MAGIC    0x2468 /* minix V2 */
   MINIX2_SUPER_MAGIC2   0x2478 /* minix V2, 30 char names */
linux/msdos_fs.h:
   MSDOS_SUPER_MAGIC     0x4d44
linux/ncp_fs.h:
   NCP_SUPER_MAGIC       0x564c
linux/nfs_fs.h:
   NFS_SUPER_MAGIC       0x6969
linux/proc_fs.h:
   PROC_SUPER_MAGIC      0x9fa0
linux/smb_fs.h:
   SMB_SUPER_MAGIC       0x517B
linux/sysv_fs.h:
   XENIX_SUPER_MAGIC     0x012FF7B4
   SYSV4_SUPER_MAGIC     0x012FF7B5
   SYSV2_SUPER_MAGIC     0x012FF7B6
   COH_SUPER_MAGIC       0x012FF7B7
linux/ufs_fs.h:
   UFS_MAGIC             0x00011954
linux/xia_fs.h:
   _XIAFS_SUPER_MAGIC    0x012FD16D
		</PRE
></TD
></TR
></TABLE
>
		정의되지 않은 파일시스템이 검색되었을 경우 필드는 -1로 설정된다. 
	</P
><P
>		fstatfs()는 열린 파일지정자<B
CLASS="EMPHASIS"
>fd</B
>를 사용한다는 것을 
		제외하고는 statfs()와 동일하다.
	</P
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN18"
>1.3&#51208;. 반환값</A
></H1
><P
>		성공시 0이 리턴되고, 에러가 발생하면 -1이 리턴된다. 
	</P
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN21"
>1.4&#51208;. 에러</A
></H1
><P
>		statfs():
		<P
></P
><DIV
CLASS="VARIABLELIST"
><DL
><DT
>ENOTDIR</DT
><DD
><P
>	
					path의 경로 요소가 디렉토리가 아니다.
				</P
></DD
><DT
>ENAMETOOLONG</DT
><DD
><P
>	
					<B
CLASS="EMPHASIS"
>path</B
>가 너무 길다. 
				</P
></DD
><DT
>ENOENT</DT
><DD
><P
>	
					탐색 허가권이 <B
CLASS="EMPHASIS"
>path</B
>경로 요소에서 
					거부되었다.
				</P
></DD
><DT
>ELOOP</DT
><DD
><P
>	
					너무 많은 상징 연결을<B
CLASS="EMPHASIS"
>path</B
>해석시에 
					만났다.
				</P
></DD
><DT
>EFAULT</DT
><DD
><P
>	
					<B
CLASS="EMPHASIS"
>buf</B
>나<B
CLASS="EMPHASIS"
>path</B
>가
					유효하지 않은 주소를 가리키고 있다.
				</P
></DD
><DT
>EIO</DT
><DD
><P
>	
					파일 시스템을 읽거나 쓰는 동안 I/O 에러가 발생했다.
				</P
></DD
><DT
>ENOMEM</DT
><DD
><P
>	
					이용할 수 있는 커널 메모리가 충분하지 않다.
				</P
></DD
><DT
>ENOSYS</DT
><DD
><P
>	
					<B
CLASS="EMPHASIS"
>path</B
>파일 시스템이 statfs를 지원하지
					않는다.
				</P
></DD
></DL
></DIV
>	
		fstatfs():
		<P
></P
><DIV
CLASS="VARIABLELIST"
><DL
><DT
>EBADF</DT
><DD
><P
>	
					<B
CLASS="EMPHASIS"
>fd</B
>는 유효한 파일지정자가 아니다.
				</P
></DD
><DT
>EFAULT</DT
><DD
><P
>	
					<B
CLASS="EMPHASIS"
>buf</B
>가 유효하지 않은 주소를 
					가리키고 있다.
				</P
></DD
><DT
>ENOSYS</DT
><DD
><P
>	
					<B
CLASS="EMPHASIS"
>path</B
>파일 시스템이 statfs를 지원하지
					않는다.
				</P
></DD
><DT
>EIO</DT
><DD
><P
>	
					파일 시스템을 읽거나 쓰는 동안 I/O 에러가 발생했다.
				</P
></DD
></DL
></DIV
>	
	</P
></DIV
><DIV
CLASS="SECTION"
>
}}}
[[adsense]]
{{{#!html
<HR><H1
CLASS="SECTION"
><A
NAME="AEN83"
>1.5&#51208;. 예제</A
></H1
><P
>		<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>/*
 * 파일시스템 정보 얻어오기
 * /proc/mounts 정보와 statfs를 이용한다. 
 */
#include &#60;stdio.h&#62;
#include &#60;string.h&#62;
#include &#60;libgen.h&#62;
#include &#60;sys/vfs.h&#62;
#include &#60;sys/stat.h&#62;
#include &#60;sys/types.h&#62;

const char *MMOUNT = "/proc/mounts";

struct f_size
{
    long blocks;
    long avail; 
};

typedef struct _mountinfo 
{
    FILE *fp;                // 파일 스트림 포인터    
    char devname[80];        // 장치 이름
    char mountdir[80];        // 마운트 디렉토리 이름
    char fstype[12];        // 파일 시스템 타입
    struct f_size size;        // 파일 시스템의 총크기/사용율 
} MOUNTP;

MOUNTP *dfopen()
{
    MOUNTP *MP;

    // /proc/mounts 파일을 연다.
    MP = (MOUNTP *)malloc(sizeof(MOUNTP));
    if(!(MP-&#62;fp = fopen(MMOUNT, "r")))
    {
        return NULL;
    }
    else
        return MP;
}

MOUNTP *dfget(MOUNTP *MP)
{
    char buf[256];
    char *bname;
    char null[16];
    struct statfs lstatfs;
    struct stat lstat; 
    int is_root = 0;

    // /proc/mounts로 부터 마운트된 파티션의 정보를 얻어온다.
    while(fgets(buf, 255, MP-&#62;fp))
    {
        is_root = 0;
        sscanf(buf, "%s%s%s",MP-&#62;devname, MP-&#62;mountdir, MP-&#62;fstype);
         if (strcmp(MP-&#62;mountdir,"/") == 0) is_root=1;
        if (stat(MP-&#62;devname, &#38;lstat) == 0 || is_root)
        {
            if (strstr(buf, MP-&#62;mountdir) &#38;&#38; S_ISBLK(lstat.st_mode) || is_root)
            {
                // 파일시스템의 총 할당된 크기와 사용량을 구한다.        
                statfs(MP-&#62;mountdir, &#38;lstatfs);
                MP-&#62;size.blocks = lstatfs.f_blocks * (lstatfs.f_bsize/1024); 
                MP-&#62;size.avail  = lstatfs.f_bavail * (lstatfs.f_bsize/1024); 
                return MP;
            }
        }
    }
    rewind(MP-&#62;fp);
    return NULL;
}

int dfclose(MOUNTP *MP)
{
    fclose(MP-&#62;fp);
}

int main()
{
    MOUNTP *MP;
    if ((MP=dfopen()) == NULL)
    {
        perror("error");
        return 1;
    }

    while(1)
    {
        while(dfget(MP))
        {
            printf("%-14s%-20s%10lu%10lu\n", MP-&#62;mountdir, MP-&#62;devname, 
                                MP-&#62;size.blocks,
                                MP-&#62;size.avail);
        }
        printf("=========================\n\n");
        sleep(1);
    }
}
		</PRE
></TD
></TR
></TABLE
>
	</P
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN87"
>1.6&#51208;. 참고문헌</A
></H1
><P
>		<P
></P
><OL
TYPE="1"
><LI
><P
>			<A
HREF="http://www.joinc.co.kr/modules/moniwiki/wiki.php/article_sms_프로그램_제작"
TARGET="_top"
>SMS 프로그램 제작</A
>
			</P
></LI
><LI
><P
>			<A
HREF="http://www.joinc.co.kr/modules/moniwiki/wiki.php/Code_C_dfget"
TARGET="_top"
>디스크 정보 가져오기</A
>
			</P
></LI
></OL
>
	</P
></DIV
></DIV
></BODY
></HTML
>
}}}
