#title linux man page : malloc - 메모리를 할당한다.

[[tag(리눅스,시스템프로그래밍,c,malloc,라이브러리,함수)]]

{{{#!html
<HTML
><HEAD
><TITLE
>malloc(2)</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.59"><META
http-equiv="Content-Type"
content="text/html; charset=euc-kr"></HEAD
><BODY
CLASS="CHAPTER"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="CHAPTER"
><H1
><A
NAME="AEN1"
>1&#51109;. malloc(2)</A
></H1
><DIV
CLASS="TOC"
><DL
><DT
><B
>&#52264;&#47168;</B
></DT
><DT
>1.1&#51208;. <A
HREF="#AEN4"
>사용법</A
></DT
><DT
>1.2&#51208;. <A
HREF="#AEN8"
>설명</A
></DT
><DT
>1.3&#51208;. <A
HREF="#AEN24"
>반환값</A
></DT
><DT
>1.4&#51208;. <A
HREF="#AEN31"
>예제</A
></DT
><DT
>1.5&#51208;. <A
HREF="#AEN38"
>참고문헌</A
></DT
></DL
></DIV
><P
>	동적 메모리 할당 및 해제</P
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN4"
>1.1&#51208;. 사용법</A
></H1
><P
>		<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;stdlib.h&#62;

void *malloc(size_t size);
void *calloc(size_t size);
int free(void *ptr); 
void *realloc(void *ptr, size_t size);
		</PRE
></TD
></TR
></TABLE
>
	</P
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN8"
>1.2&#51208;. 설명</A
></H1
><P
>		malloc() 는 size 크기만큼의 메모리(:12)를 (동적으로)할당하기 위해서 
		사용한다. malloc()은 호출에 성공한뒤 할당된 메모리영역을 가르키는 
		포인터를 반환한다. malloc()을 이용해서 할당된 메모리 영역은 자동으로 
		clear 되지 않는다. 더이상 사용하지 않는 메모리영역은 반드시 
		free() 를 이용해서 clear 해주도록한다. 그렇지 않을경우 메모리
		누수가 일어날수 있다.
	</P
><P
>		calloc()는 <B
CLASS="EMPHASIS"
>size</B
>크기를 가지는 
		<B
CLASS="EMPHASIS"
>nmemb</B
>요소 만큼의 공간을 할당한다. 메모리는 
		0으로 설정된다. 
	</P
><P
>		realloc()는 <B
CLASS="EMPHASIS"
>ptr</B
>가 가르키는 메모리영역의 크기를 
		<B
CLASS="EMPHASIS"
>size</B
>만큼 조절한다. 메모리 영역에 있던 데이터는 
		그대로 남아 있게 된다. 만약 <B
CLASS="EMPHASIS"
>ptr</B
>가 
		<B
CLASS="EMPHASIS"
>NULL</B
>을 가리키고 있었다면 malloc(size)와 동일한 
		수행을 보여준다. <B
CLASS="EMPHASIS"
>size</B
>가 0이라면 free(ptr)과 
		동일한 수행을 보여준다.
	</P
><P
>		free()는 <B
CLASS="EMPHASIS"
>ptr</B
>가 가르키는 메모리 영역을 해제한다. 
		malloc(), calloc(), realloc()를 사용한 메모리영역을 더이상 사용하지 
		않는다면 free()를 호출해서 자원의 낭비를 막도록 한다. 
		<B
CLASS="EMPHASIS"
>ptr</B
>가 <B
CLASS="EMPHASIS"
>NULL</B
>이라면 아무런 
		일도 수행하지 않은 경우가 된다. 
	</P
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN24"
>1.3&#51208;. 반환값</A
></H1
><P
>		calloc(), malloc()는 할당된 메모리를 가리키는 포인터를 리턴한다. 
		실패했다면 <B
CLASS="EMPHASIS"
>NULL</B
>을 리턴한다. 
	</P
><P
>		free()는 값을 리턴하지 않는다.
	</P
><P
>		realloc()는 새로할당된 메모리를 가리키는 포인터를 리턴한다. 
		실패할 경우 <B
CLASS="EMPHASIS"
>NULL</B
>을 리턴한다. 
		realloc()가 실패하더라도 이전 메모리가 해제되거나 이동하는 일은 
		발생하지 않는다. 만약 realloc()요청한 메모리의 크기가 충분히 커서 
		이전 포인터 영역에서 연속된 메모리 공간을 할당할 수 없게 된다면 
		공간확보가 가능한 다른 영역으로 복사된다.	
	</P
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN31"
>1.4&#51208;. 예제</A
></H1
><P
>		<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;string.h&#62;
#include &#60;stdlib.h&#62;

struct name
{
    int     age;
    char    name[25];
};
int main()
{           
    char *org_name;
    struct name *myname;
    int i;
                       
    // org_name 에 char 이 25만큼 들어갈수 있는
    // 메모리 공간을 할당한다.                                                
    // malloc 는 할당된 메모리 영역의 포인터를 리턴해주므로
    // org_name 은 malloc 를 이용해 할당된 영역의 포인터를 가르키게 된다.
    org_name = (char *)malloc(sizeof(char)*25);
                                                                               
    // myname 역시 마찬가지로 struct name 이 2개 만큼 들어갈수
    // 있는 메모리 공간을 할당한다.
    myname = (struct name *)malloc(sizeof(myname)*2);                         

    strcpy(org_name, "yundream");
                                                                              
    myname[0].age = 25;
    strcpy(myname[0].name, org_name);

                                                                               
    strcpy(org_name, "testname");                                             
    myname[1].age = 28;                                                       
    strcpy(myname[1].name, org_name);                                          
                     
    for(i = 0; i &#60; 2; i++)
    {                           
        printf("%d : %s\n", myname[i].age, myname[i].name);
    }                                                                         
}
		</PRE
></TD
></TR
></TABLE
>
	</P
><P
>		위의 코드를 보면 org_name 라는 char 형 포인터가 선언되어 있다. 
		처음 선어시에 이 포인터는 아무것도 가르키지 않고 있음으로, 이 
		포인터를 사용하기 위해서는 메모리를 할당하고 할당된 메모리의 주소를 
		가르키도록 만들어 줘야 한다.
	</P
><P
>		<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
> malloc 사용전
              
 +-- 4byte -+ 
              
 +----------+ 
 | org_name | 
 +----------+          ?
     |                 |
     +-----------------+
                        
 malloc 사용후          
                      +- 25 byte -+
                                   
 +----------+         +------------+
 | org_name |         |MEMORY      |
 +----------+         +------------+
     |                 |            
     +-----------------+            
		</PRE
></TD
></TR
></TABLE
>
	</P
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN38"
>1.5&#51208;. 참고문헌</A
></H1
><P
>		<P
></P
><OL
TYPE="1"
><LI
><P
>					<A
HREF="http://www.joinc.co.kr/modules/moniwiki/wiki.php/Site/C/Documents/malloc"
TARGET="_top"
>동적메모리 할당</A
>
				</P
></LI
></OL
>
	</P
></DIV
></DIV
></BODY
></HTML
>
}}}
