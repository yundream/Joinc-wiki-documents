#title LB를 이용한 분산 서비스 구성 

[[TableOfContents]]
== 만들고자 하는 서비스 ==
웹 서비스를 만들려고 한다. [wiki:man/12/nginx Nginx]와 PHP기반이며, Mysql 데이터베이스를 사용할 계획이다. 상당히 많은 유저의 접근이 예상되는데, 특히 주말에는 평일보다 2배 이상의 요청이 몰릴 것으로 예상 된다.  

이상 아래의 요구 사항들을 만족해야 한다.
  1. 유저의 요청을 분산할 수 있어야 한다. 
  1. 기본적인 가용성은 가지고 있어야 한다. 예를 들어 하나의 서버에 문제가 생기더라도 남아 있는 다른 서버가 대신 요청을 처리할 수 있어야 한다. 
  1. 유저 요구에 따라서 탄력적으로 컴퓨팅 자원을 할당할 수 있어야 한다. 즉 scale-in, scale-out이 자유로워야 한다.
  1. AWS를 기반으로 한다.

== ELB를 이용한 분산 처리 구성 ==
유저요청을 분산처리하는 일반적인 방법은 L4 스위치를 붙이는 거다. TCP 패킷을 제어하는 것으로 유저의 요청을 분산할 수 있다. 물론 나는 스위치를 붙이진 않을 거다. 

대신 AWS에서 제공하는 [wiki:Site/cloud/AWS/ELB ELB]를 이용해서 요청을 분산하기로 했다. ELB는 소프트웨어 기반의 로드 밸런싱 서비스로, AWS에서 가용성과 확장성을 확보해 준다는 장점이 있다.
  1. 가용성 : L4 스위치를 이용해서 부하를 분산한다고 가정해보자. HA 시스템을 구성하려면 2대의 L4 스위치를 이용해서 구성해야 한다. 구성도 복잡할 뿐더러 상당한 관리 비용이 추가 된다. ELB의 가용성은 AWS가 보장한다.  
  1. 확장성 : 트래픽이 늘어날 경우 자동으로 대역폭을 확장한다. 이 과정 역시 자동으로 이루어진다. 유저는 사용한 만큼만 비용을 지불하면 된다. 

AWS에서 제공하는 RDS를 이용해서 구성한다. ELB를 이용해서 유저의 요청을 탄력적으로 처리하도록 구성했기 때문에, 데이터베이스 역시 요청이 증가함에 따라 탄력적으로 대응할 수 있어야 한다.

RDS의 '''read only replica'''를 이용해서 늘어나는 유저의 요청에 대응하도록 한다. '''Read only replica'''는 읽는 작업을 분산해서 처리하는 용도로 사용할 수 있다. 쓰기 작업에 대해서는 분산을 할 수가 없다. 하지만 대부분의 웹 서비스가 "읽는 작업"이 많다는 것을 감안하면 큰 문제는 아니라고 할 수 있다. 

이상 대략 아래와 같은 구성이 나온다.

{{{#!html
<img src="https://docs.google.com/drawings/d/1mIOVHWyVeXT-Sskxhw1t_l5pIrILUuept5GDLqPtsPg/pub?w=405&amp;h=561">
}}}

3개의 웹서버로 요청을 처리한다. 이들 웹서버 앞단에 ELB를 두는 것으로 서비스를 분산할 수 있다.     

Mysql의 경우 Read only replica를 만드는 것으로 늘어나는 요청을 빠르게 처리할 수 있다. RDS의 경우 AWS cloud console을 이용해서 버튼 클릭 한번으로 쉽게 replica를 만들 수 있다.  

== ELB와 EIP ==
웹 서버는 인터넷에 직접 연결되지 않으므로 [wiki:Site/cloud/AWS/EIP EIP]를 가질 필요가 없다. 이 구성에서 인터넷 접점은 ELB이므로, ELB에 IP를 할당해야 할 것이다.

그러나 ELB에는 EIP를 할당할 수 없다. 대신 도메인 이름이 할당되고, 이 도메인이름을 CNAME에 등록하는 것으로 ELB 서비스를 사용할 수 있다. CNAME 설정관련 내용은 [http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/using-domain-names-with-elb.html using domain names with elb]문서를 참고하자. 


== Haproxy를 이용한 LB 시스템 구성 == 
특별히 노가다를 좋아하는 체질이거나 한번쯤 ELB 같은 시스템을 만들어보고 싶다 하면 만들어보자. [wiki:Site/cloud/ClusterLBWithOpenSource Haproxy를 이용한 ELB] 문서를 참고. 

== 개선 == 
이 구성은 적당한 수준의 확장성과 적당한 수준의 가용성을 보장한다. 아래의 몇 가지 방법을 이용하면 좀 더 견고한 구성을 할 수 있다. 여기에서는 개선사항을 개략적으로 설명한다. 이들 개선사항을 반영한 구조는 따로 문서를 만들 계획이다.

=== Auto Scaling ===
유저 요청의 증가와 감소에 따라서 웹서버를 자동으로 추가하거나 삭제할 수 있다면 효율적인 운용이 가능할 것이다. Auto scaling을 이용하면 EC2 인스턴스의 상태에 따라서 자동으로 추가 및 삭제가 가능하다. 예를 들자면 EC2 인스턴스의 지연시간을 지속적으로 모니터링 하다가 일정 기준을 초과하면, 인스턴스를 추가 하도록 규칙을 정할 수 있다. 

이런 규칙을 정하려면 "모니터링 솔류션"이 필요하다. Cloudwatch를 이용하거나 혹은 [wiki:Site/QOS/Monitering_Tool/zabbix Zabbix]등으로 직접 구축해서 사용할 수 있다. Zabbix로 직접 구축할 경우, 인스턴스의 CPU, 메모리, 응답지연등을 모니터링 하다가 임계치를 초과하면 AWS API를 이용해서 인스턴스를 만들면 된다. 

=== Availability zone ===
AWS의 region은 보통 두 개 이상의 zone으로 구성이 된다. 이들 zone은 물리적으로 독립된 환경을 가지고 있다. 예를 들어 zone-a와 zone-b루 구성된 aws region이 있다고 가정해보자. 어떤 이유로 zone-a에 문제가 생기더라도 zone-b는 영향을 받지 않고 작동을 할 수 있다. (지진같은 국가 규모의 재앙이라면 region 자체가 사용 불능이 될 수 있긴 하겠다.)  

Zone이 물리적으로 분리되지만 논리적으로(네트워크로) 연동된다. 그러므로 웹서버를 zone에 분산해서 배치한 후 ELB로 묶어서 서비스하는게 가능하다. 이처럼 zone은 논리적으로 연결돼서 가용성을 높일 수 있는 구조를 가지기 때문에 '''Availability zone(가용성 zone)''' 이라고 부른다. 이렇게 구성하면, 한쪽 zone에 문제가 생겨도 서비스를 가용상태로 유지할 수 있다.  

{{{#!html
<img src="https://docs.google.com/drawings/d/1JY1257XURcXl6jq0ARBLEp1JuoZYsL18L1NmBPTbsB8/pub?w=415&amp;h=415">
}}}

=== VPC ===
Region안에서 인스턴스들은 네트워크로 모두 연결이 된다. Security group 그룹을 이용해서 패킷을 필터링 할 수 있지만, 보안에 문제를 제기할 수도 있다. 독립적인 네트워크를 구성하려면 VPC 서비스를 이용해야 한다.
