 * threadInterface.h
{{{#!vim cpp
/*
 *  쓰레드 객체를 사용하기 위한 인터페이스
 * 
 *  Copyright (c) KarlLy corp. All rights reserved. Code by SaNha - 2003. 1. 13.
 */ 

#ifndef _THREAD_INTERFACE_
#define _THREAD_INTERFACE_

#include <pthread.h>

class ThreadInterface {
	
	private :
		pthread_t pt;
		static void* callThread(void* arg);	// 쓰레드 호출 인자 메소드
		virtual void threadFunc(void) = 0;		// 실제 쓰레드에서 실행될 순수가상함수		
		
	public :
		void startThread(void);					// 쓰레드 시작 메소드
		void stopThread(void);					// 쓰레드 종료 메소드
		ThreadInterface(void);
		virtual ~ThreadInterface(void);
				
};

#endif
}}}

 * threadInterface.cpp
{{{#!vim cpp
/*
 *  쓰레드 객체를 사용하기 위한 인터페이스
 * 
 *  Copyright (c) KarlLy corp. All rights reserved. Code by SaNha - 2003. 1. 13.
 */ 

#include <pthread.h>
#include <iostream>
#include "threadInterface.h"

using namespace std;

ThreadInterface :: ThreadInterface(void) {
	cout << "This is ThreadInterface constructor" << endl;
}

ThreadInterface :: ~ThreadInterface(void) {
	cout << "This is ThreadInterface destructor" << endl;
}

void ThreadInterface :: startThread(void) {
	pthread_create(&pt, NULL, callThread, this);
	pthread_detach(pt);
}

void ThreadInterface :: stopThread(void) {
	pthread_cancel(pt);
}

void* ThreadInterface :: callThread(void* arg) {
	ThreadInterface* pThread;
	pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, NULL);
	pthread_setcanceltype(PTHREAD_CANCEL_ASYNCHRONOUS, NULL);
	pThread = (ThreadInterface*) arg;											// 쓰레드 객체의 주소로 형변환
	pThread->threadFunc();														// 실제 주요 쓰레드 메소드의 호출
	return(NULL);
}
}}}

 * TestC.h
{{{#!vim cpp
#ifndef _TEST_C_
#define _TEST_C_

#include "threadInterface.h"

class TestC : public ThreadInterface {

	private:
		int i;
		void threadFunc(void);
			
	public:
		TestC(void);		// 전역에 인스턴스를 생성할때를 대비한것이나 포인터를 사용하면 필요없음
		TestC(int a);
		~TestC(void);

};

#endif
}}}

 * TestC.cpp
{{{#!vim cpp
#include <iostream>
#include <unistd.h>
#include "TestC.h"

using namespace std;

void TestC :: threadFunc(void) {
	while (1) {
		cout << "This is thread " << i << endl;
		sleep(1);
	}
}

TestC :: TestC(void) {
	cout << "This is TestC default constructor" << endl;
}

TestC :: TestC(int a) {
	cout << "This is TestC constructor" << endl;
	i = a;
}

TestC :: ~TestC(void) {
	cout << "This is TestC destructor" << endl;
}
}}}

 * main.cpp
{{{#!vim cpp
#include <iostream>
#include <signal.h>
#include <unistd.h>
#include "TestC.h"

using namespace std;

TestC* tc;

void sigHan(int sig) {
	cout << "Got signal " << sig << endl;
	tc->stopThread();
	sleep(3);
	delete tc;
	exit(EXIT_SUCCESS);
}


int main(void) {
	signal(SIGTERM, sigHan);
	tc = new TestC(3);
	tc->startThread();
	while (1) {
		cout << "This is main" << endl;
		sleep(1);
	}
	return(0);
}
}}}
