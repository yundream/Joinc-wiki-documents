#title C프로그래머를 위한 C++
[[tag(C,시스템프로그래밍,Beginner)]]
{{{#!html
<HTML
><HEAD
><TITLE
>C 사용자를 위한 C++</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.59"><META
http-equiv="Content-Type"
content="text/html; charset=euc-kr"></HEAD
><BODY
CLASS="ARTICLE"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="ARTICLE"
><DIV
CLASS="TITLEPAGE"
><H1
CLASS="TITLE"
><A
NAME="AEN2"
>C 사용자를 위한 C++</A
></H1
><H3
CLASS="AUTHOR"
><A
NAME="AEN4"
>윤 상배</A
></H3
><DIV
CLASS="AFFILIATION"
><DIV
CLASS="ADDRESS"
><P
CLASS="ADDRESS"
>				dreamyun@yahoo.co.kr<br>
			</P
></DIV
></DIV
><HR></DIV
><DIV
CLASS="TOC"
><DL
><DT
><B
>&#52264;&#47168;</B
></DT
><DT
>1&#51208;. <A
HREF="#AEN9"
>C프로그래머를 위한 C++</A
></DT
><DD
><DL
><DT
>1.1&#51208;. <A
HREF="#AEN11"
>새로운 include 방법</A
></DT
><DT
>1.2&#51208;. <A
HREF="#AEN16"
>라인단위 주석사용</A
></DT
><DT
>1.3&#51208;. <A
HREF="#AEN20"
>간단하게 사용할수 있는 입출력 스트림</A
></DT
><DT
>1.4&#51208;. <A
HREF="#AEN24"
>변수선언 위치제한</A
></DT
><DT
>1.5&#51208;. <A
HREF="#AEN29"
>전역변수와 지역변수의 동일이름 사용</A
></DT
><DT
>1.6&#51208;. <A
HREF="#AEN33"
>변수의 상호참조가능</A
></DT
><DT
>1.7&#51208;. <A
HREF="#AEN37"
>namespace 의 선언</A
></DT
><DT
>1.8&#51208;. <A
HREF="#AEN41"
>inline 함수의 사용</A
></DT
><DT
>1.9&#51208;. <A
HREF="#AEN45"
>예외처리</A
></DT
><DT
>1.10&#51208;. <A
HREF="#AEN49"
>default 인자사용 가능</A
></DT
><DT
>1.11&#51208;. <A
HREF="#AEN53"
>Parameters Overload</A
></DT
><DT
>1.12&#51208;. <A
HREF="#AEN57"
>Operator overload</A
></DT
><DT
>1.13&#51208;. <A
HREF="#AEN62"
>template</A
></DT
><DT
>1.14&#51208;. <A
HREF="#AEN68"
>메모리 할당/해제</A
></DT
><DT
>1.15&#51208;. <A
HREF="#AEN74"
>Class</A
></DT
><DT
>1.16&#51208;. <A
HREF="#AEN79"
>생성자 / 소멸자</A
></DT
><DT
>1.17&#51208;. <A
HREF="#AEN87"
>클래스 메서드의 선언과 정의 분리</A
></DT
><DT
>1.18&#51208;. <A
HREF="#AEN91"
>객체의 배열</A
></DT
><DT
>1.19&#51208;. <A
HREF="#AEN95"
>클래스 멤버변수의 static 선언</A
></DT
><DT
>1.20&#51208;. <A
HREF="#AEN99"
>클래스 멤버변수의 상수선언</A
></DT
><DT
>1.21&#51208;. <A
HREF="#AEN103"
>this 포인터</A
></DT
><DT
>1.22&#51208;. <A
HREF="#AEN107"
>상속</A
></DT
><DT
>1.23&#51208;. <A
HREF="#AEN111"
>다중상속</A
></DT
><DT
>1.24&#51208;. <A
HREF="#AEN115"
>캡슐화(은닉)</A
></DT
><DT
>1.25&#51208;. <A
HREF="#AEN125"
>가상함수</A
></DT
><DT
>1.26&#51208;. <A
HREF="#AEN131"
>파일스트림 처리</A
></DT
><DT
>1.27&#51208;. <A
HREF="#AEN136"
>정형화된 출력</A
></DT
><DT
>1.28&#51208;. <A
HREF="#AEN140"
>문자배열을 file 처럼이용하기</A
></DT
></DL
></DD
></DL
></DIV
><DIV
CLASS="SECTION"
><HR><H1
CLASS="SECTION"
><A
NAME="AEN9"
>1&#51208;. C프로그래머를 위한 C++</A
></H1
><DIV
CLASS="SECTION"
><H2
CLASS="SECTION"
><A
NAME="AEN11"
>1.1&#51208;. 새로운 include 방법</A
></H2
><P
>			C++ 에서는 헤더파일을 인클루드 시키기 위해서 새로운 방법을 
			사용한다. C++ 에서는 C의 표준 헤더파일을 인클루드 시키기 위해서 
			".h" 확장자를 사용하는 대신에 ".h"를 생략하고 헤더파일의 가장앞에 
			"c" 를 붙여서 인클루드 시킨다. 제대로된 인클루드를 위해서 
			"using namespace std;" 를 포함시키도록 한다. 표준 C++ 헤더는 	
			확장자를 생략하면 된다 - 생략하지 않아도 문제는 없지만 -.  
		</P
><P
>			물론 기존의 C 스타일대로 헤더파일을 인클루드 시켜도 문제는 
			없다. 그러나 어떤 컴파일러의 경우(gcc 3.x 와 같은) 디버깅 옵션을 
			켜놓은 상태에서 컴파일할경우 warning 메시지를 출력하기도 한다.  	
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>// stdlib.h -&#62; cstdlib
#include &#60;cstdlib&#62;
#include &#60;iostream&#62;

using namespace std;
int main()
{
    char *age = "25";

    cout &#60;&#60; atoi(age) &#60;&#60; endl;
}
			</PRE
></TD
></TR
></TABLE
>
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN16"
>1.2&#51208;. 라인단위 주석사용</A
></H2
><P
>			C 에서와 마찬가지로 // 를 이용한 라인단위 주석의 사용이 
			가능하다. 
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;cstdlib&#62;
#include &#60;iostream&#62;             // iostream 라이브러리 사용

using namespace std;           // 표준 라이브러리 namespace 지정
int main()
{
    char *age = "25";

    cout &#60;&#60; atoi(age) &#62;&#62; endl; // 출력
    return 1;                  // 종료
}
			</PRE
></TD
></TR
></TABLE
>
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN20"
>1.3&#51208;. 간단하게 사용할수 있는 입출력 스트림</A
></H2
><P
>			C 에서는 간단한 화면/키보드 입출력이라도 꽤 번거로운 
			과정을 거쳐야 하지만, C++ 에서는 cout &#60;&#60;,
			cin &#62;&#62; 을 
			이용해서 간단한 입출력을 쉽게 처리할수 있다.  
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;iostream&#62;

using namespace std;
int main()
{
    int age;
    char name[32];
    cout &#60;&#60; "hello world " &#60;&#60; endl;
    cout &#60;&#60; "your age : ";
    cin &#62;&#62; age;
    cout &#60;&#60; "your name : ";
    cin &#62;&#62; name;

    cout &#60;&#60; "Your input is " &#60;&#60; name &#60;&#60; ":" &#60;&#60; age &#60;&#60; endl;
}
			</PRE
></TD
></TR
></TABLE
>
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN24"
>1.4&#51208;. 변수선언 위치제한</A
></H2
><P
>			C 의 경우 변수 선언은 함수의 가장첫부분에서 이루어져야 
			한다. 만약 중간에 선언이 이루어진다면, 컴파일시 에러를 
			발생하게 된다. 
		</P
><P
>			C++ 은 어느 위치에서라도 선언해서 사용할수 있다. 
			이러한 점이 때로는 코드를 난잡하게 만들기도 하지만, 
			오히려 코드를 보기쉽게 만들어줄때도 있다. 
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;iostream&#62;

using namespace std;
int main()
{
    int a, b;

    cout &#60;&#60; "A : " ;
    cin &#62;&#62; a ;
    cout &#60;&#60; "B : " ;
    cin &#62;&#62; b ;

    int sum;
    sum = a + b;
    cout &#60;&#60; a &#60;&#60; "+" &#60;&#60; b &#60;&#60; "=" &#60;&#60; sum &#60;&#60; endl;
}
			</PRE
></TD
></TR
></TABLE
>
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN29"
>1.5&#51208;. 전역변수와 지역변수의 동일이름 사용</A
></H2
><P
>			C 에서는 전역변수와 지역변수가 이름이 같을경우 
			무조건 지역변수의 값만을 사용할수 있었으나(전역변수 값은 사용 
			할수가 없다), C++ 에서는 각각 구분해서 사용가능하다.  
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;iostream&#62;
using namespace std;

int my_age = 28;
int main()
{
    int my_age = 35;

    cout &#60;&#60; "Local my_age " &#60;&#60; my_age &#60;&#60; endl;
    cout &#60;&#60; "global my_age " &#60;&#60; ::my_age &#60;&#60; endl;

    return 0;
}
			</PRE
></TD
></TR
></TABLE
>
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN33"
>1.6&#51208;. 변수의 상호참조가능</A
></H2
><P
>			다음과 같은 방법으로 하나의 변수를 다른변수에서 
			참조하여 사용하는게 가능하다.  
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;iostream&#62;
using namespace std;

int main()
{   
    int a = 200;
    int &#38;b = a;

    b = 100;
    
    cout &#60;&#60; "a is "  &#60;&#60; a &#60;&#60; endl;
    return 0;
}
			</PRE
></TD
></TR
></TABLE
>
			위의 코드를 실행시키면 100 이 출력된다. 
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN37"
>1.7&#51208;. namespace 의 선언</A
></H2
><P
>			namespace 를 이용해서 변수의 선언이 가능하며 :: 연산자를 
			통해서 선언 없이 곧바로 변수의 이용이 가능하다.  
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;iostream&#62;
using namespace std;

namespace first
{
    int a;
    int b;
}
namespace second
{
    int a;
    int b;
}
int main()
{
    first::a = 100;
    first::b = 200;

    second::a = 400;
    second::b = 800;

    cout &#60;&#60; first::a + second::a &#60;&#60; endl;
    cout &#60;&#60; first::b + second::b &#60;&#60; endl;
}
			</PRE
></TD
></TR
></TABLE
>
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN41"
>1.8&#51208;. inline 함수의 사용</A
></H2
><P
>			간단한 함수들은 inline 으로 선언해서 사용함으로써 몇가지 
			잇점을 얻을수 있다. 
			inline 으로 선언된 함수는 일종의 macro 와 같이 작동을 하게 된다. 
			즉 필요할때 불러오는 방식이 아니라, 코드에 바로 insert 된 효과를 
			준다. 이것이 주는 잇점은 코드가 약간 커지긴 하겠지만, 빠른 
			실행 속도를 보장해 준다는 점이다.  
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;iostream&#62;
#include &#60;cmath&#62;
using namespace std;

inline double mysqrt(double a, double b)
{
    return sqrt (a * a + b * b);
}
int main()
{
    double k = 6, m = 9;

    // 밑의 2개의 라인은 실행시에 완전히 
    // 동일하게 작동한다.  
    cout &#60;&#60; mysqrt(k, m) &#60;&#60; endl;
    cout &#60;&#60; sqrt(k*k + m*m) &#60;&#60; endl;

    return 0;
}
			</PRE
></TD
></TR
></TABLE
>
			inline 인것과 아닌것의 차이를 비교해보고 싶다면, g++ -S 를  
			이용해서 어셈코드를 얻은다음에 직접 비교 해보기 바란다.  
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN45"
>1.9&#51208;. 예외처리</A
></H2
><P
>			당신이 C에서 사용하고 있다면, for, if, do, while, switch 
			와 같은 키워드들를 알고 있을것이다. C++ 에서는 
			예외처리(EXECPTION)와 관련된 또다른 키워드들을 
			제공한다. 선택문 혹은 예외처리를 위한 좀더 직관적이고 
			손쉬운 프로그래밍 작업을 가능하도록 도와준다.  
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;iostream&#62;
#include &#60;cmath&#62;
using namespace std;

int main()
{
    int age;
    char *no_vote[] = {"없습니다", "있습니다."};

    cout &#60;&#60; "당신의 나이는 ? ";
    cin &#62;&#62; age;

    try
    {
        if (age &#62; 18) throw 1;
        else throw 0;
    }
    catch(int result)
    {
        cout &#60;&#60; "당신은 투표권이 " &#60;&#60;  no_vote[result] &#60;&#60; endl;
    }

    return 0;
}
			</PRE
></TD
></TR
></TABLE
>
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN49"
>1.10&#51208;. default 인자사용 가능</A
></H2
><P
>			함수의 인자를 사용할때 기본 인자를 설정할수 있다.  
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>  
#include &#60;iostream&#62;
using namespace std;

int mysqrt(int a, int b = 2)
{
    int c = 1;
    for (int i =0; i &#60; b; i++)
    {
        c *= a;
    }
    return c;
}
int main()
{
    cout &#60;&#60; mysqrt(5) &#60;&#60; endl;
    cout &#60;&#60; mysqrt(5, 5) &#60;&#60; endl;
}
			</PRE
></TD
></TR
></TABLE
>  
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN53"
>1.11&#51208;. Parameters Overload</A
></H2
><P
>			C++ 의 중요한 잇점중에 하나가 인자를 통한 함수 오버로드가 
			가능하다는 점이다. 오버로드 기능을 이용함으로써, 
			서로 다른 연산을 수행하는 함수를 하나의 이름으로 관리 가능 
			하도록 도와주며, 이는 코드의 유지/보수/가독성을 높여준다. 
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;iostream&#62;

using namespace std;

double add (double a, double b)
{
    return a+b;
}

int add (int a, int b)
{
    return a+b;
}

int main()
{
    cout &#60;&#60; add(1, 2) &#60;&#60; endl;
    cout &#60;&#60; add(1.2, 2.4) &#60;&#60; endl;
}
			</PRE
></TD
></TR
></TABLE
>
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN57"
>1.12&#51208;. Operator overload</A
></H2
><P
>			함수인자를 통한 오버로드 뿐만 아니라, 기본적인 연산자들의 
			오버로드역시 가능하다. 다시 말해서 연산자의 정의를 
			다시 내릴수 있도록 한다. 
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;iostream&#62;

using namespace std;
struct vector
{
    double x;
    double y;
};

vector operator * (double a, vector b)
{
    vector r;
    r.x = a * b.x;
    r.y = a * b.y;

    return r;
};

int main()
{
    vector k, m;
    k.x = 2;
    k.y = 4;

    m = 3.141927 * k;
    cout &#60;&#60; "(" &#60;&#60; m.x &#60;&#60; "," &#60;&#60; m.y &#60;&#60; ")" &#60;&#60; endl;

    return 0;
}
			</PRE
></TD
></TR
></TABLE
>
			연산자 오버로는 사칙연산자 외에도 +=, ++, [], (), &#60;&#60; 
			등을 포함한 약 40개 이상의 연산자에 대해서도 가능하다.
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;iostream&#62;

using namespace std;
struct vector
{
    double x;
    double y;
};

ostream&#38; operator &#60;&#60; (ostream &#38; o, vector a)
{
    o &#60;&#60; "(" &#60;&#60; a.x &#60;&#60; "," &#60;&#60; a.y &#60;&#60; ")" ;
    return o;
}

int main()
{
    vector k;
    k.x = 2;
    k.y = 4;

    cout &#60;&#60; k &#60;&#60; endl;
    cout &#60;&#60; "hello "&#60;&#60; endl;

    return 0;
}
			</PRE
></TD
></TR
></TABLE
>
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN62"
>1.13&#51208;. template</A
></H2
><P
>			함수 오버로딩이 꽤 편하긴 하지만, 몇가지 불편함이 있다. 
			즉 인자의 갯수만큼의 함수를 만들어줘야 한다. 
			만약 int, float, double 연산을 위한 오버로드된 함수를 
			만들고자 한다면, 거의 똑같은 3개의 함수를 정의해야만 한다. 
			template 를 사용하면 인자의 자료형에 관계없이 사용가능한 
			(범용한) 함수의 제작이 가능하다. 
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;iostream&#62;

using namespace std;

template &#60;class T&#62;
T mymin (T a, T b)
{
    T r;
    r = a;

    if (b &#60; a) r = b;

    return r;
}

int main()
{
    cout &#60;&#60; "Litle is : " &#60;&#60; mymin(2, 100) &#60;&#60; endl;
    cout &#60;&#60; "Litle is : " &#60;&#60; mymin(2.6, 2.4) &#60;&#60; endl;
}
			</PRE
></TD
></TR
></TABLE
>
		</P
><P
>			위의 템플릿을 이용한 코드는 꽤 괜찮게 작동하긴 하지만, 
			한가지 문제가 있다. 위의 코드는 인자의 타입이 동일해야 한다. 
			만약 인자가 각각 int, double 타입을 가진다면, 컴파일시 
			에러를 발생시킬것이다. 이문제는 템플릿을 선언할때 
			서로 다른 인자를 받아들일수 있도록 선언하면 된다.  
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;iostream&#62;

using namespace std;

template &#60;class T1, class T2&#62;
T1 mymin (T1 a, T2 b)
{
    T1 r, converted;

    r = a;

    converted = (T1) b;

    if (converted &#60; a) r =  converted;

    return r;
}

int main()
{
    cout &#60;&#60; "Litle is : " &#60;&#60; mymin(2, 100) &#60;&#60; endl;
    cout &#60;&#60; "Litle is : " &#60;&#60; mymin(2.6, 2.4) &#60;&#60; endl;
    cout &#60;&#60; "Litle is : " &#60;&#60; mymin(3.4, 3) &#60;&#60; endl;
}
			</PRE
></TD
></TR
></TABLE
>
			그외에도 비교연산을 제대로 수행하기 위한 형변환이 필요할 
			것이다.
		</P
></DIV
><DIV
CLASS="SECTION"
><HR>
<script type="text/javascript"><!--
google_ad_client = "pub-0339096251232740";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "text_image";
//2007-06-19: blog_center
google_ad_channel = "8014010384";
//-->
</script>
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<H2
CLASS="SECTION"
><A
NAME="AEN68"
>1.14&#51208;. 메모리 할당/해제</A
></H2
><P
>			메모리 할당과 해제를 위해서 <B
CLASS="EMPHASIS"
>new</B
> 와 
			<B
CLASS="EMPHASIS"
>delete</B
> 키워드를 사용할수 있다.
			이들은 C 에서 사용하는 malloc, free 대신 사용할수 있다. 
			만약 배열의 할당을 원한다면 new[] delete[] 를 사용하면 된다.  
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;iostream&#62;
#include &#60;cstring&#62;

using namespace std;

int main()
{
    int *d;

    // int 형을 포함할수 있는 새로운 메모리 공간확보하고 
    // 주소를 되돌려준다. 
    d = new int;
    *d = 21;

    cout &#60;&#60; "Type a number : ";
    cin &#62;&#62; *d;
    cout &#60;&#60; *d + 5 &#60;&#60; endl;

    // 할당받은 메모리 영역을 해제한다.
    delete d;

    // 15개의 int 형자료를 저장할수 있는 새로운 메모리 
    // 공간을 확보하고, 주소를 되돌려준다. 
    d = new int[15];
    d[0] = 1234;
    d[1] = d[0] + 1234;

    cout &#60;&#60; d[0] &#60;&#60; ":"&#60;&#60; d[1] &#60;&#60; ":" &#60;&#60; d[2] &#60;&#60; endl;
    delete []d;
    return 0;
}
			</PRE
></TD
></TR
></TABLE
>
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN74"
>1.15&#51208;. Class</A
></H2
><P
>			간단히 생각해서 Class 란 발전된 형태의 struct 이다. 
			데이타와 함께, 데이타를 가공할 METHODS 가 선언될수 있다. 
			다음은 Class 설명을 위한 간단한 예제이다.  
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;iostream&#62;
#include &#60;cstring&#62;

using namespace std;

class vector
{
    public:
        double x;
        double y;

    inline double surface()
    {
        double s;
        s = x*y;
        if (s &#60; 0)
            s = -s;
        return s;
    }
};

int main()
{
    vector a;
    a.x = 3;
    a.y = 4;

    cout &#60;&#60; a.surface() &#60;&#60; endl;
    return 0;
}
			</PRE
></TD
></TR
></TABLE
>
			위의 예제코드에서 <B
CLASS="EMPHASIS"
>a</B
>를 클래스 vector 의 
			인스턴스(INSTANCE)라고 한다. 
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN79"
>1.16&#51208;. 생성자 / 소멸자</A
></H2
><P
>			만들수 있는 메서드 중에는 생성자(Constructor)와 소멸자
			(Destructor), 이것들은 인스턴스가 생성되고 소멸될때 
			자동적으로 호출되는 메서드이다. 
		</P
><P
>			생성자는 인스터스의 여러가지 변수를 초기화하거나, 메모리 
			할당등의 작업을 위해서 쓰인다. 다음은 오버로드된 2개의 
			생성자를 이용한 셈플코드이다.  
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;iostream&#62;

using namespace std;

class vector
{
    public:
        double x;
        double y;
        vector()
        {
            x = 0;
            y = 0;
        }
        vector(double a, double b)
        {
            x = a;
            y = b;
        }

};

int main()
{
    vector k;
    cout &#60;&#60; "vector k: " &#60;&#60; k.x &#60;&#60; "," &#60;&#60; k.y &#60;&#60; endl;

    vector m(45, 5);
    cout &#60;&#60; "vector m: " &#60;&#60; m.x &#60;&#60; "," &#60;&#60; m.y &#60;&#60; endl;

    k = vector (22, 13);
    cout &#60;&#60; "vector k: " &#60;&#60; k.x &#60;&#60; "," &#60;&#60; k.y &#60;&#60; endl;
}
			</PRE
></TD
></TR
></TABLE
>
			하지만 이미 앞에서 배운 default parameter 을 사용하면, 
			번거롭게 overload 하지 않고 코드를 단순화 시킬수 있다. 
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;iostream&#62;

using namespace std;

class vector
{
    public:
        double x;
        double y;
        vector(double a = 0, double b = 0)
        {
            x = a;
            y = b;
        }

};

int main()
{
    vector k;
    cout &#60;&#60; "vector k: " &#60;&#60; k.x &#60;&#60; "," &#60;&#60; k.y &#60;&#60; endl;

    vector m(45, 5);
    cout &#60;&#60; "vector m: " &#60;&#60; m.x &#60;&#60; "," &#60;&#60; m.y &#60;&#60; endl;

    vector p(5);
    cout &#60;&#60; "vector p: " &#60;&#60; p.x &#60;&#60; "," &#60;&#60; p.y &#60;&#60; endl;
}
			</PRE
></TD
></TR
></TABLE
>
		</P
><P
>			소멸자는 그리 필요하지 않는경우가 많다. 보통은 
			인스턴스가 제대로 종료되었는지 확인하고, 종료될때 
			어떤 값을 가지고 종료되는지 알고자하는 목적(DEBUG) 으로 
			많이 사용된다. 그러나 만약 인스턴스에서 메모리 할당을 
			했다면 (new 나 malloc 로) 인스턴스를 종료시키기 전에 
			반드시 메모리를 해제(free) 시켜줘야 한다. 이럴경우 
			소멸자는 매우 유용하게 사용된다. 
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;iostream&#62;

using namespace std;

class person
{
    public:
        char *name;
        int age;

    person(char *n ="no name", int a = 0)
    {
        name = new char[40];
        strncpy(name, n, 40);
        age = a;
    }

    ~person()
    {
        cout &#60;&#60; name &#60;&#60; " : 40 byte is free : Instance going to be deleted" &#60;&#60; e
ndl;
        delete []name;
    }
};

int main()
{
    person me("yundream", 25);
    cout &#60;&#60; "name is " &#60;&#60; me.name &#60;&#60; endl;
    cout &#60;&#60; "age is " &#60;&#60; me.age &#60;&#60; endl;

    person *my;
    my = new person("hello");
    cout &#60;&#60; "name is " &#60;&#60; my-&#62;name &#60;&#60; endl;
    cout &#60;&#60; "age is " &#60;&#60; my-&#62;age &#60;&#60; endl;
    delete my;
    return 0;
}
			</PRE
></TD
></TR
></TABLE
>
			(할당된 메모리는 free 를 하거나 프로세스가 종료되지 않는한은 
			커널에 되돌려지지 않는다.) 
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN87"
>1.17&#51208;. 클래스 메서드의 선언과 정의 분리</A
></H2
><P
>			만약 메서드를 inline 으로 작성하고 싶지 않다면, 
			클래스에는 단지 선언만을 포함하게 유지하고, 
			메서드의 원형을 별도로 관리하도록 할수 있다.  
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;iostream&#62;
using namespace std;

class vector
{
    public:
        double x;
        double y;

        double surface();
};

double vector::surface()
{
    double s= 0;
    for (double i = 0; i &#60; x; i++)
    {
        s = s + y;
    }
    return s;
}

int main()
{
    vector k;

    k.x = 5;
    k.y = 6;
    cout &#60;&#60; k.surface() &#60;&#60; endl;

    return 0;
}
			</PRE
></TD
></TR
></TABLE
>
			이렇게 분리할경우 inline 에 비해서 약간의 속도저하가 
			있을수 있겠지만, 유지/보수가 수월해질것이다.  
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN91"
>1.18&#51208;. 객체의 배열</A
></H2
><P
>			당연히 객체를 배열로 선언하는 것도 가능하다. 
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;iostream&#62;
#include &#60;cmath&#62;
using namespace std;

class vector
{
    public:
        double x;
        double y;

        vector (double a=0, double b=0)
        {
            x = a;
            y = b;
        }

        double module()
        {
            return sqrt (x*x + y*y);
        }
};

int main()
{
    vector t[3] = {vector(4,5), vector(5,5), vector(2,5)};

    cout &#60;&#60; t[0].module() &#60;&#60; endl;
    cout &#60;&#60; t[1].module() &#60;&#60; endl;
    cout &#60;&#60; t[2].module() &#60;&#60; endl;

    return 0;
}
			</PRE
></TD
></TR
></TABLE
>
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN95"
>1.19&#51208;. 클래스 멤버변수의 static 선언</A
></H2
><P
>			클래스 맴버변수는 static 로 선언될수 있으며, static 로 
			선언되었을경우 모든 인스턴스에서 공유해서 사용할수 있다. 
			단. static 으로 선언된 변수의 초기화는 클래스의 밖에서만 
			가능하다.    
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;iostream&#62;
#include &#60;cmath&#62;
using namespace std;

class vector
{
    public:
        double x;
        double y;
        static int count;

        vector (double a=0, double b=0)
        {
            x = a;
            y = b;
            count ++;
        }

        ~vector()
        {
            count --;
        }
};

int vector::count = 0;

int main()
{
    cout &#60;&#60; "Number of vector : " &#60;&#60; endl;
    vector a;
    cout &#60;&#60; vector::count &#60;&#60; endl;
    vector b;
    cout &#60;&#60; vector::count &#60;&#60; endl;

    vector *r, *u;

    r = new vector;
    cout &#60;&#60; vector::count &#60;&#60; endl;
    u = new vector;
    cout &#60;&#60; vector::count &#60;&#60; endl;

    delete r;
    cout &#60;&#60; vector::count &#60;&#60; endl;
    delete u;
    cout &#60;&#60; vector::count &#60;&#60; endl;

    return 0;
}
			</PRE
></TD
></TR
></TABLE
>
			위의 vector 클래스는 count 라는 static 변수를 가지고 있다. 
			이 변수는 현재 vector 클래스의 인스턴스의 갯수를 계수하기 
			위한 용도로 사용된다. vector 클래스의 새로운 인스턴스가 
			만들어지면 count 를 증가하고 인스턴스가 소멸되면 count 를 
			감소시킴으로써 인스턴스의 갯수를 유지한다.  
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN99"
>1.20&#51208;. 클래스 멤버변수의 상수선언</A
></H2
><P
>			클래스 멤버변수가 static 로 선언되는것과 마찬가지로 상수
			(constant)로 선언될수도 있다. 이 변수는 클래스안에서 
			값이 할당되며, 인스턴스에서 변경될수 없다.  
			그러나 단지 const 로만 선언했을경우 컴파일러에 따라서 
			컴파일이 안될수도 있다. 예를들어 gnu 컴파일러의 경우 
			const static 로 선언해야 될경우가 있다.   
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;iostream&#62;
#include &#60;cmath&#62;
using namespace std;

class vector
{
    public:
        double x;
        double y;
        const static double pi = 3.1415927;

        vector (double a=0, double b=0)
        {
            x = a;
            y = b;
        }

        double cilinder_volume()
        {
            return x*x/4*pi*y;
        }
};

int main()
{
    cout &#60;&#60; "pi is: " &#60;&#60; vector::pi &#60;&#60; endl;
    vector k (3,4);
    cout &#60;&#60; "Result: " &#60;&#60; k.cilinder_volume() &#60;&#60; endl;
    return 0;
}
			</PRE
></TD
></TR
></TABLE
>
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN103"
>1.21&#51208;. this 포인터</A
></H2
><P
>			클래스에서 각 메서드는 주소에 의한 방식으로 
			함수를 호출한다. 이렇게 할수 있는 이유는 this 라는 가상의 
			포인터 때문이다. 클래스에 선언된 모든 메서드는 this 를 
			명시하지 않더라도 this 가 있는것으로 간주되고 주소에 의해서 
			함수가 호출된다. 이렇게 하는 이유는 클래스내의 멤버함수를 
			객체에 의해서 소유하도록 하기 위함이 목적이다. 
			즉 this 는 보이지 않는 포인터로 객체와 멤버함수를 
			내부적으로 연결하는 일을 한다. 
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;iostream&#62;
#include &#60;cmath&#62;

using namespace std;


class vector
{
    protected:
        double k;
    public :
        double x;
        double y;
        vector(double a= 0, double b= 0)
        {
            x = a;
            y = b;
        }
        double module()
        {
            cout &#60;&#60; "module " &#60;&#60;  x &#60;&#60; " : " &#60;&#60; y&#60;&#60; endl;
            return sqrt(x*x + y*y);
        }

        void set_length(double a = 1)
        {
            double length;
            length = this-&#62;module();

            x = x/length *a;
            y = y/length *a;
        }
};


int main()
{
    vector a(3,5);
    cout &#60;&#60; "--&#62; " &#60;&#60; a.module() &#60;&#60; endl;
    a.set_length(2);
    cout &#60;&#60; "--&#62; " &#60;&#60; a.module() &#60;&#60; endl;
    a.set_length();
    cout &#60;&#60; "--&#62; " &#60;&#60; a.module() &#60;&#60; endl;
}
			</PRE
></TD
></TR
></TABLE
>
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN107"
>1.22&#51208;. 상속</A
></H2
><P
>	
			클래스는 다른 클래스로 부터 파생(Derived)될수 있다. 이 
			새로운 클래스는 원본클래스의 메서드와 변수를 상속
			(Inherits) 받게 된다. 이렇게 해서 파생된 클래스는 
			새로운 메서드와 변수들을 추가함으로써 확장시켜 나갈수 있게 된다. 
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>	
#include &#60;iostream&#62;
#include &#60;cmath&#62;
using namespace std;
    
// 원본 클래스
class vector
{
    public:
        double x;
        double y;
        const static double pi = 3.1415927; 

        vector (double a=0, double b=0)
        {
            x = a;
            y = b;
        }

        double surface()
        {
            return x * y;
        }
};

// vector 로부터 파생된 새로운 클래스
// 원본 vector 클래스의 표면적을 구하는 작업외에 
// 체적을 구하는 작업을 할수있도록 확장되었다. 
class trivector: public vector
{
    public :
        double z;

        // trivector 생성자가 호출되기 전에
        // vector 생성자가 호출되어서 m, n 인자를 
        // 초기화 한후, 거기에 3차원 지원을 위해서 p 가 
        // 초기화 된다.  
        trivector(double m =0, double n =0, double p=0): vector(m,n)
        {
            z = p;
        }

        // 또다른 생성자로 만약에 2차원 정보가 
        // 들어왔을경우 3차원으로 변경한다.  
        trivector(vector a, double p = 0)
        {
            x = a.x;
            y = a.y;
            z = p;
        }

        // 3차원 데이타를 이용해서 체적을 구한다. 
        // surface()메서드를 호출해서 표면적을 구하고 
        // 거기에 높이인 z 를 곱해주면 된다. 
        double volume()
        {
            return this-&#62;surface() * z;
        }
};

int main()
{
    vector a(4, 5);
    trivector b(1, 2, 3);
    trivector c(a);

    cout &#60;&#60; "surface a: " &#60;&#60; a.surface() &#60;&#60; endl;
    cout &#60;&#60; "volume  b: " &#60;&#60; b.volume() &#60;&#60; endl;
    cout &#60;&#60; "surface b: " &#60;&#60; b.surface() &#60;&#60; endl;
    cout &#60;&#60; "volume  c: " &#60;&#60; c.volume() &#60;&#60; endl;

    trivector d(a,5.8);
    cout &#60;&#60; "volume  d: " &#60;&#60; d.volume() &#60;&#60; endl;
}
			</PRE
></TD
></TR
></TABLE
>	
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN111"
>1.23&#51208;. 다중상속</A
></H2
><P
>			바로 위에서 상속에 대해서 알아봤는데, C++ 은 1개 이상의 
			클래스로 부터 상속받는 것도 가능하다. 그러나 다중상속을 
			이용해서 클래스를 만들경우 나중에 유지/보수가 곤란해지는 
			문제가 생길수 있음으로, 대체적으로 다중상속은 지양하는 
			추세이다.     
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;iostream&#62;
#include &#60;cmath&#62;
using namespace std;

// 원본 클래스
class vector
{
    public:
        double x;
        double y;
        const static double pi = 3.1415927;

        vector (double a=0, double b=0)
        {
            x = a;
            y = b;
        }

        double surface()
        {
            return x * y;
        }
};

class height
{
    public :
        double z;
        height (double a)
        {
            z = a;
        }

        int is_negative()
        {
            if (z &#60; 0) return 1;
            else       return 0;
        }
};

class trivector: public vector, public height
{
    public :
        trivector(double a= 0, double b=0, double c=0): vector(a,b), height(c)
        {
        }
        double volume()
        {
            return fabs(x* y* z);
        }
};

int main()
{
    trivector a(2, 3, -5);

    cout &#60;&#60; a.volume() &#60;&#60; endl;
    cout &#60;&#60; a.surface() &#60;&#60; endl;
    cout &#60;&#60; a.is_negative() &#60;&#60; endl;
}
			</PRE
></TD
></TR
></TABLE
>
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN115"
>1.24&#51208;. 캡슐화(은닉)</A
></H2
><P
>			아마 당신이 C++ 을 처음접해 보았다면, 위의 코드에서 
			<B
CLASS="EMPHASIS"
>public:</B
> 라고 하는 생소한 키워드를 
			보았을것이다. 이것은 C++ 에서 새로추가된 키워드로 
			메서드나 멤버변수에 엑세스레벨을 부여하게 된다. 
		</P
><P
>			public: 는 프로그램어디에서든지 엑세스 할수 있음을 나타낸다. 
			이것은 원본클래스와 파생클래스에게 모두 동일하게 적용된다.  
		</P
><P
>			private: 는 단지 원본 클래스의 메서드를 통해서만 접근이 가능하다. 
		</P
><P
>			protected: private 와 비슷하게 클래스 메서드를 통해서만 접근이 
			가능하지만, private 와는 달리 원본뿐 아니라 파생된 클레스에서의 
			접근도 가능하다.  
		</P
><P
>			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;iostream&#62;
#include &#60;cmath&#62;

using namespace std;


class vector
{
    private:
        double x;
        double y;
    public :
        double surface()
        {
            return x * y;
        }
};

int main()
{
    vector b;
    b.x = 2; // 컴파일 에러발생
    b.y = 3; // 컴파일 에러발생
}
			</PRE
></TD
></TR
></TABLE
>
			위의 경우 c++ 컴파일러로 컴파일할경우 
			`double vector::x' is private 와 같은 에러메시지를 출력하고 
			컴파일 중지된다. vector 클래스의 멤버변수 x, y 는 private 로 
			선언되어 있음으로 단지 현재 클래스의 메서드를 통해서만 
			접근가능하기 때문이다. 이럴경우 x, y 입력을 위한 전용 메서드를 
			하나 만들어야 할것이다.    
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;iostream&#62;
#include &#60;cmath&#62;

using namespace std;


class vector
{
    private:
        double x;
        double y;
    public :
        double surface()
        {
            return x * y;
        }
        void input(double a, double b)
        {
            x = a;
            y = b;
        }
};

int main()
{
    vector b;
    b.input(11, 40.5);
    cout &#60;&#60; b.surface() &#60;&#60; endl;
}
			</PRE
></TD
></TR
></TABLE
>
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN125"
>1.25&#51208;. 가상함수</A
></H2
><P
>			원본클래스에서 파생된 새로운 클래스는 원본 클래스의 
			메서드와 멤버변수를 상속받는다는 것을 배워서 알고 있다. 
			그런데 이런경우를 생각할수 있을것이다. 
			vector 에 module 란 메서드가 있는데, 이 메서드는 다음과 
			같다.   
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>double module()
{
    return sqrt(x*x + y*y);	
}
			</PRE
></TD
></TR
></TABLE
>
			만약 vector 에서 파생된 trivector 이란 클래스를 선언했다면, 
		 	trivector 클래스는 vector-&#62;module() 를 상속받게 될것이다. 
			그러나 trivector 의 경우 sqrt 연산을 할때 3차원 데이타를 
			가지고 연산을 해야 할것이다. 	
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>double module()
{
	return sqrt(x*x + y*y + z*z);
}
			</PRE
></TD
></TR
></TABLE
>
			이처럼 메서드를 상속받았을때, 상속받은 메서드의 
			연산방식이 변경될경우 virtual 로 선언하면 된다.  
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;iostream&#62;
#include &#60;cmath&#62;

using namespace std;


class vector
{
    public :
        double x;
        double y;
        virtual double module()
        {
            return sqrt(x*x + y*y);
        }
};

class trivector: public vector
{
    public :
        double z;

    trivector(double m=0, double n=0, double p=0)
    {
        x = m;
        y = n;
        z = p;
    }

    double module()
    {
        return sqrt(x*x + y*y + z*z);
    }
};

int main()
{
    trivector b(2,3,4);
    cout &#60;&#60; b.module() &#60;&#60; endl;
}
			</PRE
></TD
></TR
></TABLE
>
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN131"
>1.26&#51208;. 파일스트림 처리</A
></H2
><P
>			C++ 은 파일처리를 위한 매우 간단한 방법을 제공한다. 
			다음은 파일을 읽기 위한 코드이다. 
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;iostream&#62;
#include &#60;fstream&#62;
using namespace std;

int main()
{
    fstream f;
    char c;

    f.open("seek3.c", ios::in);
    while (! f.eof())
    {
        f.get(c);
        cout &#60;&#60; c;
    }

    f.close();

    return 0;
}
			</PRE
></TD
></TR
></TABLE
>
			다음은 파일에 쓰기 위한 코드이다. 
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;iostream&#62;
#include &#60;fstream&#62;
#include &#60;cstdio&#62;
using namespace std;

int main()
{
    fstream f;
    f.open("text.txt", ios::out);

    f &#60;&#60; "Hello world " &#60;&#60; endl;

    f.close();
    return 0;
}
			</PRE
></TD
></TR
></TABLE
>
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN136"
>1.27&#51208;. 정형화된 출력</A
></H2
><P
>			보통 표준 C 언어에서는 printf 를 이용해서 정형화된 출력을 
			수행한다. C++ 에서는 width() 와 setw()를 이용해서 정형화된 
			출력을 한다. 이것들은 단지 가장최근의 출력에만 영향을 미친다.    
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;iostream&#62;
#include &#60;iomanip&#62;
using namespace std;

int main()
{
    for (int i = 1; i &#60;= 1000; i *=2)
    {
        cout.width(7);
        cout &#60;&#60; i &#60;&#60; endl;
    }
    for (int i = 0; i &#60;=10 ;i ++)
    {
        cout &#60;&#60; setw(3) &#60;&#60; i &#60;&#60; setw(5) &#60;&#60; i * i * i &#60;&#60; endl;
    }
    return 0;
}
			</PRE
></TD
></TR
></TABLE
>
		</P
></DIV
><DIV
CLASS="SECTION"
><HR><H2
CLASS="SECTION"
><A
NAME="AEN140"
>1.28&#51208;. 문자배열을 file 처럼이용하기</A
></H2
><P
>			좀 이상하게(혹은 쓸모없는 것처럼) 들릴수 있겠지만, 
			문자배열을 파일처럼 연산하는게 가능하다. 
			이것은 파일 스트림과 메모리를 연결해서 사용하는 프로그래밍 
			기법을 가능하도록 해준다. 
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;iostream&#62;
#include &#60;cmath&#62;
#include &#60;cstring&#62;
#include &#60;strstream&#62;

using namespace std;

int main()
{
    char a[1024];
    ostrstream b(a, 1024);

    b.seekp(0); // 스트림의 첫번째로 이동 
    b &#60;&#60; "2+2 = " &#60;&#60; 2+2 &#60;&#60; ends; // ends 임에 주의
    cout &#60;&#60; a &#60;&#60; endl;

    double v = 49;
    strcpy(a, "A sinus: ");

    b.seekp(strlen(a));
    b &#60;&#60; "sin (" &#60;&#60; v &#60;&#60; ") = " &#60;&#60; sin(v) &#60;&#60; ends;
    cout &#60;&#60; a &#60;&#60; endl;
}
			</PRE
></TD
></TR
></TABLE
>
			<TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>#include &#60;iostream&#62;
#include &#60;cmath&#62;
#include &#60;cstring&#62;
#include &#60;strstream&#62;

using namespace std;

int main()
{
    char a[1024];
    istrstream b(a, 1024);

    strcpy(a, "45.656");
    double k, p;

    b.seekg(0);
    b &#62;&#62; k;

    k = k+1;
    cout &#60;&#60; k &#60;&#60; endl;

    strcpy(a, "444.23 56.89");
    b.seekg(0);
    b &#62;&#62; k &#62;&#62; p;

    cout &#60;&#60; k &#60;&#60; ", " &#60;&#60; p + 1 &#60;&#60; endl;
    return 0;
}
			</PRE
></TD
></TR
></TABLE
>
		</P
></DIV
></DIV
></DIV
></BODY
></HTML
>
}}}
[[tag(객체지향,OOP,C++,C)]]
[[category(2)]]
