#title AWS - EC2

[[TableOfContents]]
== EC2 ==
=== EC2에 대해서 ===
EC2(Elastic Compute Cloud)는 '''컴퓨팅 파워'''를 제공하는 AWS의 클라우드 서비스다. Elastic(탄력적)이란 수식어가 붙은 만큼, 탄력적인 운용이 가능하다는게 가장 큰 특징이다. 예컨데, 필요 할 때, 필요한 만큼만 쓰다가 필요 없으면 언제든지 인스턴스를 내릴 수 있다. 인스턴스를 내리거나 혹은 삭제하더라도 볼륨(volume)을 보관할 수 있으므로, 원할 때 복구할 수도 있다. 

EC2가 생각만큼 (성능 대비)저렴하지 않다고 한다. 나 역시 그렇게 생각한다. 물론 이건 어디까지나 EC2 만을 떼어 놓고 생각 했을 때 그렇다는 이야기다. 서비스 규모가 좀 커져서 EC2를 AWS의 다른 서비스를 연결 하려다보면, 왜 AWS를 사용해야 하는 건지 느낌이 온다.     

== EC2 Instance 관리 방안 ==
=== Auto provisioning ===
여기에서 Auto provisioning는 운영체제의 auto provisioning와 소프트웨어의 auto provisioning를 모두 포함하는 개념이다.

운영체제 auto provisioning는 '''손으로 운영체제를 설치하고 켜는 것을 자동화'''하겠다는 것 이상의 의미다. Auto provisioning관리하려고 하는 시스템의 형상을 '''코드화''' 하고, 그 코드를 '''로직(프로그램)'''을 이용해서 실행하는 것이다. 서비스의 유지/보수, 품질에 직접적으로 관련된다. 예전부터 운영체제 프로비저닝은 "노가다"였는데, 노가다를 자동화 함으로써 남는 시간에 서비스의 다른 측면에 노력을 기울일 수 있는 혜택도 덤으로 누릴 수 있다.    

=== chef, cloud-init ===
인스턴스의 auto provisioning, 운영체제와 소프트웨어의 형상을 관리하기 위한 (아마도)백가지 쯤 되는 방법들이 있는 것 같다. 이것들을 다 섭렵할 수는 없는 노릇이라서, 그냥 내 생각을 정리하려 한다.

일단 AWS에서 제공하는 cloudformation, Opsworks와 같은 툴이 있고, 몇몇 (chef 기반으로 된 것들도 본적이 있다.)상용툴들도 있는 것 같다. 이들 제품을 보고 얻은 결론은 다음과 같다.   
  * 이런 툴들은 퍼블릭한 환경을 대상으로 한다. 대다수가 사용하기에는 무난한 툴이지만, 자신의 시스템/네트워크 환경에 맞춰서 제대로 관리하려고 하면 한계가 보인다.   
  * 관리 시스템 구축을 위한 팀이 제대로 운영되고 있다면, 자신의 환경에 맞게 직접 만드는게 낫다.
  * 예전 같으면 직접 만드는 걸 권하지 않았을 것이다. 그때는 그냥 중구 난방이었다. 100개의 시스템/네트워크 환경이 있었다면, 이를 관리하기 위한 100가지 방법이 있었다. 제대로 된 툴이 없이 능력껏 구성하다 보니 그렇게 된거다.   
  * 지금은 좋은 툴들이 많다. Chef, puppet, cloud-init 여기에 AWS에서 제공하는 툴들을 잘 조합하면, 자신의 환경에 최적화된 시스템을 구축할 수 있다. 

내가 선택한 툴은 chef와 AWS의 user metada의 조합이다. 대략의 구성은 다음과 같다.

{{{#!html
<img src="https://docs.google.com/drawings/d/12oLgy1xad8XYd_KKmemz0knrUcMh_D-QH3BtAcTQQfw/pub?w=766&amp;h=467">
}}}

'''Standard AMI''' 
  * 표준 운영체제는 하나 만들어서 AMI로 떠 놓는다.

'''Chef-server'''
  * Chef-server로 운영체제와 소프트웨어 형상을 관리한다.
  * Domain 이름 기반으로 role을 적용한다. 예컨데, web01.myservice.com 이라면 web role을 적용한다. 이 role은 대략 apache, php 기타등등 웹 서비스를 위한 cookbook을 가지고 있을 거다. 

'''Linux package repository'''
  * 운영체제와 소프트웨어 버전관리를 위한 레포지토리는 운용해야겠다. 

'''Instance metadata'''
AWS는 인스턴스에 대한 메타정보를 관리하고 있다. 유저는 언제든지 인스턴스의 메타정보들 - 인스턴스 ID, 생성일, 상태, 네트워크 정보, ssh-key 등등 - 을 확인할 수 있다. 인스턴스에서 '''GET http://169.254.169.254'''를 호출하면 호출한 인스턴스의 메타정보를 JSON 형태로 돌려준다.  

'''user-data'''
중요한 점은 Instance metadat에 유저 데이터를 설정할 수 있다는 점이다. Key-Value 형식으로 설정하면, 언제든지 값을 가져올 수 있다. 필요하다면 파일을 올릴 수도 있다. 물론 실행파일도 올릴 수 있을테고, 나중에 인스턴스의 초기 설정등에 사용할 수 있을 거다. user-data 에서 가장 중요한 설정은 인스턴스의 '''도메인 이름'''을 박는 거다.  

이제 Instance를 만들면 아래의 과정을 따라서 프로비저닝 된다. 
  1. EC2 API를 이용해서 Standard AMI로 부터 instance를 만든다. 
     * 인스턴스를 만들 때, 도메인 이름을 user-data에 설정한다.  
  1. 인스턴스가 뜬다. 
  1. init-script를 수행한다.
     * script는 인스턴스 메타데이터에서 '''도메인 이름'''을 가져온다.  
     * 도메인 이름을 가져왔면, 호스트 이름을 설정한다.
  1. chef-client를 수행한다.
     * chef-client는 자신의 호스트 이름으로, chef-server에 등록한다. 
  1. chef-server는 cookbook을 내려주고   
  1. cookbook을 실행해서 운영체제와 소프트웨어를 설정한다.


=== EC2 Instance 모니터링 ===
==== Cloudwatch를 이용한 매트릭 수집 ====
AWS는 cloudwatch라는 모니터링 툴을 제공한다. Cloudwatch를 이용하면, EC2를 비롯한 AWS의 거의 모든 자원을 모니터링할 수 있다.  
  * EC2 인스턴스
  * EBS 볼륨
  * ELB
  * RDS
  * SQS
  * SNS
  * DynamoDB
  * Storage gateway
  * Elastic MapReduce
  * Autoscaling 그룹
EC2에서 수집할 수 있는 주요 매트릭은 다음과 같다.
  * CPU 사용율
  * Disk 평균 Read/Write  
  * Disk Read/Write count
기초 모니터링 자료로는 쓸만하지만, 제대로 모니터링 하기에는 뭔가 많이 아쉽다. 다행히 커스텀 매트릭을 추가할 수 있기는 한데, 그렇다고 하더라도 아래의 제한들 때문에 본격적인 모니터링 툴로 사용하기에는 많이 부족하다. 
  * 매트릭의 종류에 따라 다르지만 5분 미만의 주기로 수집할 수 없는 매트릭이 있으며, 어떤 매트릭의 경우 1분 주기로 수집하려면 비용을 지불해야 한다.   
  * AWS API 요청은 무한대가 아니다. 제한이 있다. 50개 정도의 인스턴스를 관리한다고 가정하고, detect time을 줄이기 위해서 5개 정도의 인스턴스를 1 분단위로 수집한다고 하면, 1시간에 15000번의 API를 호출한다.  
  * AWS console로 모니터링 정보를 볼 수 있지만, 이걸로는 제대로 된 정보를 얻기가 함들다. 결국 매트릭 정보를 수집해서 별도의 데이터베이스에 적재한다음 모니터링 정보를 리포팅 해주는 시스템을 개발해야 한다.    
  * Cloudwatch에서 제공하는 이벤트 알람 기능은 제한적이다. Auto scaling을 위한 알람용도로는 활용할 수 있지만, 본격 모니터링 이벤트 알람용으로 사용하기에는 부족하다. 
  * 결국 : Cloudwatch는 기초자료 수집용이다. 모니터링 시스템을 구축해야 한다. 
모니터링 시스템 구축은 그냥 [wiki:Site/QOS/Monitering_Tool/zabbix/AWSMonitering zabbix]를 믿고 가자.

=== Security ===

=== EC2와 VPC ===
VPC를 이용하면, 퍼블릭 네트워크 상에 사설 네트워크를 만들 수 있다. 사설 네트워크를 만드는 이유는 다음과 같다. 
  1. 자유로운 네트워크 구성.   
  1. 보호해야 할 자원을 퍼블릭 네트워크로 부터 숨길 수 있다. 
  1. 오피스 네트워크와 VPN을 연결해서 별도의 관리 네트워크를 구성할 수 있다.  
VPC와 관련된 내용은 [wiki:Site/cloud/AWS/VPC VPC 구축]문서를 참고하자.
