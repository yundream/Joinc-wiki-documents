[mailto:yundream@yahoo.co.kr]

'''용어 사전'''
IT분야에서 사용되는 각종 용어에 대한 정리

[[TableOfContents]]
=== ㄱ ===
==== 기술영업 ====
영어로 sales engineer 혹은 technical service engineer 이라고 불리운다. 일반적으로 영업관리는 거래처관리 인력관리 수납등의 일을 담당하는데 기술영업은 여기에 기술지원이 추가된다. 영업 + 기술지원(컨설팅)이라고 보면 된다.  

기술영업의 경우 파는 물건에 대한 지식은 물론이고 파는 물건과 관련된 광범위한 지식까지 충분히(고객을 설득시킬 수 있는 수준)알고 있어야 하므로 그리 쉽게 접근할 수 있는 영역은 아니라고 할 수 있다. 

이런 이유로 몇년 개발경력을 쌓은후 기술영업으로 전향하는 경우가 많다. 

기술에 대한 지식은 물론 가지고 있어야 하며, 사람을 만나고 상대하는 걸 좋아하며 상대방을 설득할 수 있는 능력을 필요로 한다. 

=== D ===
==== dead lock ====
 * 프로그램들이 자료 처리를 위해 자료를 확보할 때 경쟁이 일어나서 자료를 확보하지 못하고 서로 상대방이 자료의 록을 해제하기를 기다리는 상태
 * 예를 들면 다음과 같은 경우 dead lock에서 풀려날수 없다.
 {{{#!vim c
int main(void)
{
 volatile int key;
 Lock(key); /* Lock */
  Lock(Key); /* Lock이 이미 진행된 상태에서 다시 Lock을 중첩할경우 여기서 풀려날수 없는 상태가 된다. */
  UnLock(key);
 UnLock(key);
 return(0);
}
}}}
 * 또한 Lock과 UnLock 은 하나의 시퀀스상에서 짝을 이뤄야 하는데 이를 지키지 못하는 경우 daed lock이 발생한다.
 {{{#!vim c
/* 다음과 같이 2개의 thread가 동시시점에서 실행될때 */
static int Key;
void Thread(void)
{
 Lock(Key);
 /* ... */
 UnLock(Key);
}
void Thread_DeadLock(void)
{
 Lock(Key);
 /* ... */
 /* UnLock을 하지 않았을때 모든 동일키 안에 움직이는 요소는 전부 Lock에서 dead lock 상태로 정의됨. */
}
}}}
=== F ===
==== promiscuous mode ====
더미허브로 관리되는 서브네트워크의 경우 하나의 호스트에서 발생시킨 패킷은 서브네트워크의 모든 호스트로 전달된다. 그러므로 각 호스트는 자신을 목적지로 하지 않는 더미패킷을 받을 수 있게 된다. 이 때 우리는 네트워크 카드가 자신이 목적지인 패킷을 버릴


==== FAQ ====
Frequently Askedd Questions의 줄임말로서 중복되는 질문과 질문에 대한 답변을 따로 정리한 문서를 말한다. 

==== Frame buffer ====
frame buffer이란 Linux시스템에서 그래픽을 표현할 수 있는 하드웨어를 말한다. 하드웨어란 일반PC를 기준으로 그래픽카드를 말한다. 그래픽카드와 같은 장치의 제어는 커널(장치 드라이버)에서 담당하는데, Frame buffer driver을 사용할 경우 유저레벨의 응용 애플리케이션에서 접근이 가능하다.

리눅스에서 Frame buffer는 주로 X윈도우를 사용하지 않은 일반 콘솔화면에서 그래픽을 뿌려주고자 하는 목적으로 사용된다. 리눅스에서 Frame buffer를 사용하기 원한다면 xdm을 끄고 lilo.conf를 약간 조작해서 frame buffer 드라이버를 사용한 상태에서 커널이 올라오도록 설정하면 된다.  

다음은 설정변경한 lilo.conf의 내용이다. 
{{{#!vim
image=/boot/vmlinuz-2.4.2-2 
	label=linux
	read-only
	root=/dev/hda7 
	vga=0x0317
}}}
vga가 추가된 부분이다.

=== H ===
==== Hash ====

==== HTTP ====
HyperText Transfer Protocol의 약자이며, 분산환경 및 공동작업 환경에 이용할 하이퍼 미디어 정보시스템의 개발을 목적으로 설계된 응용계층 프로토콜이다. WWW의 핵심 프로토콜이다.  

=== I ===
==== InterNet ====
뉴런은 단일 객체로 있을 때 별 힘을 발휘하지 못하지만 수많은 뉴런이 모이고 주변의 뉴런들과 망상(Net)으로 연결되어서 통신(Communication)됨으로써 엄청난 힘을 발휘한다. 인간의 뇌의 무게는 고작 1.3Kg에서 1.4Kg에 불과하지만 우주를 탐구하고 양자를 넘어서 물질의 근본을 밝혀낸다. 

인류는 일찍이 여러 비슷한 일을 하는 객체를 망상으로 연결 시킬 경우 훨씬더 효율적으로 일을 처리할 수 있다는 것을 깨닫게 된다. 그래서 도로망 상하수도망을 만들고 근대에는 전신/전화망등을 만들게 된다. 

매우 최근들어 인류는 컴퓨터라는 매우 훌륭한 계산기를 발명했다. 이 컴퓨터는 정보의 저장과 처리능력에 있어서 탁원한 능력을 보였으며 이들 컴퓨터를 연결할 경우 더욱더 효율적으로 정보를 저장하고 처리하고 전달할 수 있음에 주목하게 된다. 그리하여 1969년대말 ARPA에서 최초의 컴퓨터 네트워크라고 할 수 있는 ARPNET을 구성하게 된다.  

ARPNET은 하드웨어의 발전과 더불어 계속 발전했으며 특히 Unix와 TCP/IP의 탄생으로 인하여 일대 전환기를 맡게 된다. 1983년 경에는 ARPNET의 프로토콜이 TCP/IP로 변경되었으며 일반사용자를 대상으로 TCP/IP 서비스를 제공하게 된다. 그리하여 회사, 기관, 국가의 각 네트워크를 연결하는 거대한 인터네트 환경이 만들어지게 된다.

{{{#!html
<img src=http://www.joinc.co.kr/albums/album01/aau.gif>
}}}
|| [http://www.joinc.co.kr/modules.php?name=News&file=article&sid=109 네트워크 보안의 기본] ||

==== Interrupts ====
일반적으로 봤을 때 프로그램 자신의 맡은 일을 시작 부터 종료할 때까지 중단 없이 끝내도록 하는게
매우 간단해 보이긴 하지만 이런 저런 이유로 외부에서 "중단(Interrupts)"이 요청되게 된다. 예를
들자면 마우스의 움직임이 있을 때 발생하는 것과 같은 인터럽트로 마우스 장치는 마우스가 움직일
때 현재의 프로세스에 인터럽트를 발생시키게 된다. 이렇게 인터럽트가 발생하게 되면 인터럽트 핸들
러(interrupt handler)가 수행된다. 인터럽트 핸들러는 프로그램을 중단시키는 루틴을 수행한다.

인터럽트는 마우스와 같은 주변장치에서 발생하는 하드웨어 인터럽트와 소프트웨어에서 인위적으로
발생시키는 소프트웨어 인터럽트가 있는데, 합해서 256가지의 인터럽트를 가지게 되며, 각각의 인터
럽트는 고유한 번호를 가지게 된다. 인터럽트 핸들러는 인터럽트가 발생한 물리적인 메모리의 위치를
기억하기 위한 세그먼트 어드레스를 포함하게 된다. 그래서 인터럽트 핸들러가 끝난후 중단된 프로세
스에서 다시 하던 일을 계속하도록 지시할 수 있다.

이러한 인터럽트의 행동방식은 지극히 상식적이다. 일상생활에서 우리가 업무중에 전화등으로 인한
인터럽트가 발생했을경우 전화요청을 다 처리한다음 중단된 업무부터 다시 일을 시작해 나가는 것과
마찬가지다. 이럴 경우 내가 어디까지 업무를 진행하다가 중단하고 전화를 받았는지를 기억하고 있어
야 할것이다.

하드웨어 인터럽트 들은 CPU외의 다른 장치들에서 발생한다. 키보드, 디스크 드라이브, CD-ROM, 사운
드 카드, 마우스와 같은 장치들이 이에 포함된다. 내부 인터럽트는 CPU로 부터 발생하는 운영오류 등
이 포함된다. 이러한 인터럽트들은 트랩(traps)이라고 부르기도 한다.

소프트웨어 인터럽트 들은 말그대로 프로그램에서 필요에 따라 발생시키는 인터럽트 들로 고유의 API
(Application Programming Interface)를 이용해서 발생시킨다. 유닉스와 윈도우즈 같은 현대적인 대
부분의 운영체제들은 C로된 소프트웨어 인터럽트 인터페이스를 가진다. 

==== IPC ====
Interprocess Communication의 줄임말로 프로세스간 내부통신을 위한 유닉스 설비이다. BSD계열 IPC와 비교적 최근에 개발된 System V 계열 IPC가 있다. System V꼐열 IPC는 AT&T사에 의해서 소개 되었으며, FIFO, PIPE외에 Message Queue, Semaphore, Shared Memory가 추가 되었다.  

이외에도 Unix Domain Socket를 IPC로 사용할 수도 있다. 
|| [http://www.joinc.co.kr/modules.php?name=News&file=article&sid=13 System V IPC에 대해서]	||
|| [http://www.joinc.co.kr/modules.php?name=News&file=article&sid=16 PIPE의 사용]			||
|| [http://www.joinc.co.kr/modules.php?name=News&file=article&sid=21 FIFO활용]				||
|| [http://www.joinc.co.kr/modules.php?name=News&file=article&sid=40 세마포어의 사용]		||
|| [http://www.joinc.co.kr/modules.php?name=News&file=article&sid=42 메시지큐의 사용]		||
|| [http://www.joinc.co.kr/modules.php?name=News&file=article&sid=78 Unix Domain Socket]	||
|| [http://www.joinc.co.kr/modules.php?name=News&file=article&sid=59 IPC 성능 테스트]		||

==== IRC ====
Internet Relay Chat의 줄임마로 인터네트를 통하여 의견을 교환하는 서비스로 가장인기있으며 오래된 역사를 자랑하는 서비스다. 우리나라에서 가장 규모가큰 IRC서버는 irc.nuri.net 이다.  
||[http://www.joinc.co.kr/modules.php?name=News&file=article&sid=145 IRC 사용자 메뉴얼	||

==== ISO ====
'''ISO'''는 International Oraganization for Standardzation으로 사업, 정부, 사회를 위한 국제 '''표준'''을 제정하는 단체이다. 현재 약 14,000개의 표준이 재정되어 있다.  

=== L ===

==== Linked List ====
여러가지 자료구조중 가장 기본이 되는 자료구조다. 각 데이터가 서로 연결된 리스트 형태로 관리된다고 해서 Linked List라고 한다. 각각의 데이터 연결을 위해서 다음 데이터를 가르키는 포인터를 사용한다.    

다음은 그림으로 나타낸 일반적인 Linked List의 자료 구조다. 

{{{#!html
<img src=http://www.joinc.co.kr/albums/album01/adb.gif>
}}}

|| [http://www.joinc.co.kr/modules.php?name=News&file=article&sid=128 링크드 리스트]		||


==== Linux ==== 
1991년 핀란드의 대학생 리누스 토발즈(Linux B. Torvalds)가 만든 운영체제이다. 전산학을 전공하던 그는 당시 그가 배우던 교육용 유닉스(UNIX)인 Minix의 커널을 고쳐서 x86에서 작동하는 운영체제를 만들었다.  

초기 진행은 어셈블리를 통해서 이루어졌으나 어느정도 개발이 진행된다음 C언어를 사용하게 되었다. 
이렇게 밤낮없이 개발을 진행하던중 1만줄짜리 리눅스 커널(0.0.2)개발 하게 되었다. 지금의 
리눅스 커널은 200만줄에 육박하며 가장 장래성 있는 운영체제중 하나로 성장했다.  

리눅스가 단지 개인의 취미생활용 운영체제로 전락하지 않고 주요 운영체제로 발전하게 된데에는 인터넷의 힘이 절대 적이였다. 리누스는 자신의 운영체제를 서랍안에 두지 않고 인터넷에 공개했으며 뉴스그룹을 통해서 전세계의 개발자들과 함께 개발하고자 하는 당시로써는 꽤 혁명적인 개발 방식을 선택했고 엄청난 성과를 거두게 되었다. [수정일 2003-11-7] 

==== LVM ====
'''L'''ogical '''V'''olume '''M'''anagement로 컴퓨터 시스템의 디스크 저장 공간을디스크와 파티션단위가 아닌 (논리적인)높은 수준에서 다룰수 있도록 도와준다. 논리적인 개념으로 보기 때문에 유저는 일반 애플리케이션을 통해서 더욱 유연하게 디스크 공간을 관리할 수 있다.  

LVM을 적용할 경우 공간의 크기조정, 이동등과 같은 꽤나 신경써야하는 (위험한 작업을) 위험부담을 줄이면서도 간단하게 할 수 있다. 또한 저장공간에 대해서 사용자 정의 그룹핑이 가능하다. 예를들어 sda, sdb와 같은 이해하기 어려운 물리적 디스크 이름대신 "development", "backup", "multimedia"와 같은 이름을 사용할 수 있다.  

 1. [http://www.tldp.org/HOWTO/LVM-HOWTO/index.html LVM HOWTO] 

=== M ===
==== MBone ====
멀티미디어 데이터를 효과적으로 전송하기 위해서 만들어진 인터넷 가상망이다. 멀티미디어 데이터의 효율적 전송을 위해서 멀티캐스팅 기법을 사용해야 하는데 이러기 위해서는 인터넷 상의 모든 라우터가 멀티캐스팅을 지원해야 한다. 그러나 이러한 장비의 교체는 당분간 매우 어려운일이다. 그래서 멀티캐스팅을 지원하는 라우터들을 별도로 묶는 MBone망 구축 프로젝트가 만들어지게 되었다. 
{{{#!html
<img src=http://www.joinc.co.kr/albums/album01/afb.gif>
}}}

MBone를 제대로 이해하기 위해서는 멀티 캐스팅에 대한 이해가 필수적이다. 멀티 캐스팅에 대한 내용은 [multicast]를 참고하기 바란다.  

==== MTU ====
Maximum Transfer Unit의 줄임말이다. 한번에 보낼 수 있는 IP 데이타 그램의 최대크기로 네트워크 환경에 따라 달라질 수 있다. 이더넷의 경우 1500, ATM의 경우 9600, SLIP은 576의 크기를 가진다. 이것은 각 환경에 대한 - 대략 이정도의 데이터 그램 크기라면 최적화된 통신을 할 수 있다 - 경험적인 수치다.  

ifconfig등의 도구를 이용하면 MUT사이즈를 얻어올 수 있다. 
{{{#!plain
# ifconfig                                              
eth0      Link encap:Ethernet  HWaddr 00:50:BF:2C:7B:B2                      
          inet addr:192.168.0.4  Bcast:192.168.0.255  Mask:255.255.255.0     
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1                 
          RX packets:355481 errors:1 dropped:0 overruns:0 frame:0            
          TX packets:360573 errors:0 dropped:0 overruns:0 carrier:0         
          collisions:5023                                               
          RX bytes:369176288 (352.0 Mb)  TX bytes:33374363 (31.8 Mb)         
                                                                           
lo        Link encap:Local Loopback                                         
          inet addr:127.0.0.1  Mask:255.0.0.0                                
          UP LOOPBACK RUNNING  MTU:16436  Metric:1                          
          RX packets:68 errors:0 dropped:0 overruns:0 frame:0           
          TX packets:68 errors:0 dropped:0 overruns:0 carrier:0              
          collisions:0                                                       
          RX bytes:3400 (3.3 Kb)  TX bytes:3400 (3.3 Kb) 
}}}

1. [http://www.joinc.co.kr/modules.php?name=News&file=article&sid=54 IP 자세히 보기] 
1. [http://www.joinc.co.kr/modules.php?name=News&file=article&sid=148&mode=nested 네트워크관련 정보 얻기]

==== multicast ====
서버와 호스트들 혹은 호스트와 호스트들 간의 데이터 교환을 위한 방법중 하나이다. unicast나 broadcast방식과는 달리 서버단에서 데이터 복사가 이루어지지 않고 멀티캐스팅을 지원하는 라우터에서라우터가 관리하는 호스트들중 데이터를 받아야 하는 호스트들에게 선택적으로 데이터가 전송된다. 
서버측에서 봤을 때 데이터 복사량이 줄어들므로 당연히 서버효율이 높아지게 되며, 네트워크환경 측면에서 봤을 때도 단일 데이터만 전송되므로 트래픽을 줄일 수 있다. 

이러한 멀티캐스트의 특징으로 앞으로 인터넷 쌍방향 TV, 원격 고화질 화상 회의등의 서비스에 핵심적인 기술로 사용될 것이다.   

{{{#!html
<img src=http://www.joinc.co.kr/albums/album01/aey.gif>
}}}

위의 그림은 멀티캐스트와 유니캐스트 방식의 차이를 나타낸 그램이다.
|| [wiki:multicast 멀티캐스트 스터디 위키]		||
|| [http://www.joinc.co.kr/modules.php?name=News&file=article&sid=147 멀티캐스트 JOINC 기사]||

=== N ===
==== NFS ====
'''NetWork File System'''

=== P ===

==== Perl ====
1986년 버젼 1.0이 발표되고 나서 지금까지 유닉스 환경에서의 시스템 관리 프로그램으로 가장 널리 쓰이는 프로그래밍 언어이다. 

강력한 문자분석(정규표현)의 지원으로 텍스트 파일을 읽고 의미있는 정보를 추출하여 레포트를 출력하는 제반작어에 최적화된언어이다. 유닉스의 시스템 관리의 대부분이 파일과 텍스트 관리라는 점을 감안한다면 왜 Perl이 시스템관리를 위한 강력한 도구로 사용되는지 쉽게 이해 할 수 있다. 

 1. [http://www.php.org Perl 메인 사이트]
 1. [http://www.perl.or.kr 한국 펄 사용자 모임] 

==== PHP ====

==== POSIX ==== 
Portable Operation System Interface의 줄임말로 개방형 운영체제 인터페이스의 표준이다. IEEE에 의해서 만들어 졌으며, ISO와 ANSI에 의해 승인되었다. 

운영체제에서 POSIX를 지원하는것은 매우중요하다. 운영체제가 POSIX를 충실히 지원하다면 다른 운영체제(역시 POSIX를 준수하는)의 코드 역시 최소한의 수정만으로 지원하도록 프로그래밍을 할 수 있음을 의미한다. 

HP-UX, AIX, BSD, Linux등의 서로 다른 운영체제에서 프로그래밍한 코드가 대부부분 별 수정없이 호환되는 것도 모두 POSIX를 염두에 두고 설계되었기 때문이다. 

예를 들어서 POSIX를 지원하는 운영체제라면 다음과 같은 최소한 다음의 기능을 지원할 것이다.  
 * fork()의 지원
 * 시그널의 지원
 * 쓰레드와 프로세스의 구별
 * 각각의 프로세스가 다른 이름을 지닌 공간에 상주하며, 각각의 심볼 테이블을 유지

==== Proxy ====
proxy의 단어적인 뜻은 '''대리''','''위임'''의 뜻을 가진다. proxy는 일정의 캐쉬 기능을 가진 서버로 인터넷과 사용자의 중간에 놓여서 사용자의 요청이 있는 페이지를 Proxy서버에 저장해 두고 사용자가 동일한 데이터를 다시 요청할 때 인터넷을 가로지르지 않고 Proxy서버에 저장된 데이터를 가져가도록 한다. 이렇게 되면 요청이 빈번한 데이터들은 Proxy서버의 디스크에 남게 될것이고 사용자는 당연히 좀더 빠르게 필요한 정보를 얻어올 수 있을 것이다.   

=== Q ===
==== Qos ====
'''Quality of Service'''의 줄임말 이다. 데이터를 패킷단위로 다루지 않고 서비스 단위로 다룬다. 패킷단위로 데이터를 다룰 경우 모든 패킷은 같은 우선순위를 가진다. 즉 Telnet이든 실시간 동영상/음악 데이터간에 먼저들어온 패킷이 먼저 클라이언트에게 전달된다. 하지만 FTP 데이터와 실시간 동영상 데이터가 동시에 들어올 경우에 분명히 동영상 데이터에 우선순위가 있을 수 있다. FTP 데이터는 동영상을 보면서 백그라운드에서 천천히 받아도 별 문제 없지만 FTP데이터 때문에 동영상 데이터가 끊기거나 하는 일은 가능하면 벌어지지 않도록 해야 한다. Qos는 이러한 데이터에 우선순위를 줌으로써 중요한 서비스를 좀더 원할하게 서비스 받을 수 있도록 도와준다.   

=== S ===
==== SMTP ====
Simple Mail Transfer Protocol로서 호스트간 전자 우편을 전송하기 위한 표준 프로토콜이다. TCP/IP계층의 상위 계층(응용 계층)프로토콜이며 '''sendmail''', '''exchange'''와 같은 메일서버를 비롯하여, 메일전송을 위해 사용되는 대부분의 클라이언트 프로그램들이 SMTP를 사용해서 메일을 교환한다.     

표준 서비스 포트로 '''25'''번을 사용한다.
  
==== SNMP ====
Simple Network Management Protocol로서 네트워크자원을 관리하기 위한 프로엠워크다. SNMP가 사용되기 이전에는 ICMP를 이용해서 네트워크 자원을 관리했었다. ICMP를 이용하면 관리하고자 하는 서버가 작동하고 있는지 작동한다면 어느정도의 응답시간을 가지고 작동하는 지를 확인할 수 있었다. 그러나 네트워크 환경이 복잡해지자 ICMP만으로는 관리에 한계를 느끼게 된다.  

그래서 몇가지 프로토콜에 대한 연구가 진행되었고 SGMP, HIMS, CMIP/CMIS등이 제안되었다. 이들중 SNMP가 사실상 네트워크 관리를 위한 표준적인 프로토콜로 자리잡게 된다.  

SNMP는 거의 대부분의 운영체제에서 지원되어 지고 있다. Linux, Unix와 대부분의 Windows에서 지원한다.  

 1. [http://www.joinc.co.kr/modules.php?name=News&file=article&sid=125 SNMP 개요]
 1. [http://www.joinc.co.kr/modules.php?name=News&file=article&sid=129 SNMP 프로그래밍]

==== STL ====
국제표준기구(International Standards Organization: ISO) 와 미국국가표준기관(American National Standards Institute: ANSI) 에서 C++ 언어에 대한 표준을 마련하는 노력이 있었으며 이중에 하나가 바로 STL입니다. 여기서 마련된 라이브러리는 다음과 같은 요소를 가지고 있습니다.

  1. 표준템플릿라이브러리 (Standard Template Library: STL) - 이것은 데이터 구조와 그에 대한 알로리즘을 구현하는 것에 대하여 특별히 요소로 분리됩니다.
  1. I/O stream (입/출력 흐름 요소)
  1. 국제화 관련 요소
  1. Memory 관리요소
  1. 문자열/복소수/수치제한 템플릿 클래스
  1. 예외 처리에 대한 제어요소
  1. 그 밖에 ... (필자는 더이상 뭐가 있는지 잘 모름)

STL은 그 구조적인 목적을 만족하기 위해서 복잡한 계층적 구조와 상속의 개념을 피하고 있습니다. 이것은 C++의 장점을 살리기 보다는 최적화에 중점을 두어 구성된 것이므로 사용자는 이 특성을 적절히 보다 폭 넓게 사용할수 있게 합니다. 만약 이를 C++의 객체지향성의 모든 요소를 사용하여 만든다면 사용상 간편한 부분은 있을지 모르겠으나 속도 및 크기 면에서 만족할수 없는 결과가 발생합니다. 적어도 프론트엔드에서는 객체지향적인 설계가 유리할지 모르지만 백엔드에서는 이러한것이 오히려 성능에 악영향을 발생할수 있을겁니다. 그 만큼 H/W의 사양을 높여야 하고 그 만큼 드는 비용적인 지출이 크게 될것이 뻔합니다.

STL은 Thread환경에서 굉장히 조심성 있게 사용해야 합니다. (즉, STL은 경쟁적 조건상에 놓인 데이터를 보장해주지 않습니다.) 제 아무리 잘 만든다고 하여도 Safe thread 코드는 그만큼 경쟁조건에 대한 처리로 인하여 CPU를 과소비하게 될수밖에 없습니다. 때문에 개발자는 편리함을 강조하기 보다는 설계적인 요소를 충분히 고려하여 이를 극복해야 합니다.

STL은 크게 3가지 요소를 사용하여 고려되는데 데이터 형식, 데이터 전달방식, 알고리즘 이 그것입니다. 이를 C++에서 Template 기능을 적극 활용하여 많은 코드분량을 줄일수 있도록 됩니다. 모든 개발자는 이러한 3가지의 요소를 충분히 간파하여 설계를 해야 하며 그에 따르는 성과를 직접 느껴볼수 있게 될것입니다. 

 1. [mz_stl] 

=== U ===
==== unicast(유니캐스트) ====
네트워크 상에서 서버와 클라이언트간 1:1로 이루어지는 통신이다. 일반적으로 말하는 네트워크 프로그램들은 대부분 유니캐스트 방식을 이용한다. 구현이 직관적이고 간편하긴 하지만 클라이언트의 수만큼 연결이 만들어지고 그만큼 데이터 복사가 이루어짐으로 네트워크자원을 비효율적으로 이용한다는 단점이 있다.    

일반적인 데이터 교환에서는 유니캐스트의 이러한 특징이 큰 문제가 되지 않지만 인터넷을 이용한 고화질 화상회의, 쌍방향 TV서비스에는 상당한 문제가 될 수 있다. 
이러한 문제를 해결하기 위해서 [multicast]가 등장했다. 

=== W ===
==== Whois 서비스 ====
유닉스에서는 whois라는 명령어를 제공한다. -h 옵션을 이용해서 질의할 whois서버를 명시할 수 있다.  

{{{#!plain
# whois -h whois.nic.or.kr [호스트이름]
한국인터넷정보센터에서 제공하는 도메인이름 등록정보 조회(WHOIS) 서비스 입니다.

query: ok.ok.kr 

# KOREAN

도메인이름                : ok.ok.kr 
.....
}}}
