head	1.8;
access;
symbols;
locks
	root:1.8; strict;
comment	@# @;


1.8
date	2015.03.28.08.17.17;	author root;	state Exp;
branches;
next	1.7;

1.7
date	2015.03.28.02.13.34;	author root;	state Exp;
branches;
next	1.6;

1.6
date	2015.03.28.02.13.14;	author root;	state Exp;
branches;
next	1.5;

1.5
date	2015.03.28.02.12.46;	author root;	state Exp;
branches;
next	1.4;

1.4
date	2015.03.28.02.08.56;	author root;	state Exp;
branches;
next	1.3;

1.3
date	2015.03.28.02.08.45;	author root;	state Exp;
branches;
next	1.2;

1.2
date	2015.01.05.07.18.35;	author root;	state Exp;
branches;
next	1.1;

1.1
date	2013.06.08.15.12.23;	author root;	state Exp;
branches;
next	;


desc
@./data/text/man_2f12_2fhash
@


1.8
log
@119.64.102.68;;yundream;;
@
text
@#title 해시 - hash
[[TableOfContents]]
<!> 제대로 살펴봐야 겠다는 생각이 마구 들고 있다.
== Hash ==
Hash 함수는 임의의 길이를 가지는 데이터를 고정된 길이의 데이터로 맵핑하는 알고리즘이다. 해쉬 함수는 Hash(k) = V 로 표현할 수 있다. 함수 hash()에 K를 입력하면, 값 V가 출력된다. 이때 K가 같으면 항상 같은 V가 출력된다. 

아래 그림은 해싱의 기본 개념을 묘사하고 있다. 

{{{#!html
<img src="https://docs.google.com/drawings/d/18F4U2Jl7OsYo7QRdBUM3OlXNZA1kQPIMU0RIEo1yXZU/pub?w=439&amp;h=314">
}}}

해쉬 함수는 매우 큰 범위의 입력 데이터를 hash 함수를 이용해서, 고정된 크기의 디지털 데이터에 맵핑하기 위한 목적으로 사용한다. 어떤 해싱함수를 사용하느냐에 따라서 다양한 응용이 가능하다.

=== 응용 ===
==== Hash Table ====
많은 양의 데이터에서 데이터의 위치를 빠르게 찾기 위해서 사용한다. Hash 함수에 key를 넣으면, 값 v를 리턴하는데, 이 v를 인덱스(index)로 해서 key에 대한 값이 저장된 위치를 찾는식이다. 

{{{#!html
<img src="https://docs.google.com/drawings/d/1Zt61DTtIH_ZGISuHRnO8S0oFDa1sIVyOU0d3sThBxkg/pub?w=464&amp;h=298">
}}}

크기가 4인 해시 테이블이 있다. 이 해시 테이블을 관리하는 해시함수 Hash(k)에 key를 입력하면, 해시 테이블에 있는 값들 중 하나를 반환한다. 이 반환 값은 실제 k가 저장된 위치에 대한 색인이다. 

==== Cache ====
하드디스크와 같은 느린 미디어에 저장된 대량의 데이터에서 원하는 데이터를 빠르게 읽기 위해서 일반적으로 Cache를 사용한다.

ARP(Address Resolution Protocol)이 캐시를 이용해서 성능을 올리는 대표적인 예다. ARP는 로컬네트워크 상에서 IP에 대한 MAC 주소를 찾기 위해서 사용하는 프로토콜이다. 로컬 네트워크에서 데이터 통신을 하기 위해서는 IP에 대한 MAC 주소가 일치해야 하기 때문에, 운영체제는 ARP를 이용해서 상대편 컴퓨터의 MAC과 IP 주소를 먼저 수집한다. arp 명령을 이용하면, 이러한 방법으로 수집한 ARP 테이블을 확인할 수 있다.(ARP 주소는 수정했다.) 
{{{#!plain
# apr -a
(192.168.11.21) at bc:5f:f4:00:00:01 [ether] on em1
(192.168.11.1) at 00:08:9f:00:00:02 [ether] on em1
(192.168.11.18) at 00:08:9f:00:00:03 [ether] on em1
(192.168.11.94) at bc:5f:f4:00:00:04 [ether] on em1
(192.168.11.33) at 00:08:9f:00:00:05 [ether] on em1
}}}
이 정보를 통신을 할 때마다 수집하는 것은 매우 비효율 적이다. 네트워킹을 위해 사용하는 매체는 매우 느리기 때문이다. 해서 운영체제는 수집한 ARP 정보를 상대적으로 빠른 로컬 메모리에 저장해서 사용한다. 그리고 수정되는 정보만 갱신한다. 

Cache는 웹 서비스의 성능을 올리기 위해서도 널리 사용한다. 어떤 데이터(예를 들어 웹 문서)가 디스크에 저장돼 있다면, 자주 읽는 문서를 메모리에 캐시해서 속도를 높이는 식이다. 이 경우 모든 (비용 등 여러 가지 문제로)데이터를 메모리에 올릴 수 없기 때문에, 자주 접근하는 데이터를 Cache에 올리기 마련이다. 그렇다면 유저가 어떤 데이터를 요청했을 때, 그 데이터가 캐시에 있는지를 빠르게 찾아야 하는데, 이때 해시를 이용할 수 있다. 

==== Protection data ====
보안이 필요한 정보에 대한 유일한 확인을 위해서 해시 값을 사용할 수 있다. 해시 함수는 같은 입력에 대해서는 항상 같은 출력이 나온다. 만약 데이터가 변조 됐다면, 다른 해쉬 값이 나올테고, 원래 해쉬값과 비교하는 것으로 데이터 변조 여부를 확인할 수 있다.   

문제는 서로 다른 데이터들에 대해서 같은 해쉬 값이 나올(해쉬 값 충돌 - collision) 확률이 존재한다는 거다. 이 문제는 근본적으로 해결 할 수 없고, 해쉬 값을 크게 해서 확률을 낮추는 방향으로 해결하고 있다. 암호화에 널리 사용하는 SHA-1도 해쉬 함수로 구현한다.

==== Finding similar records ====
중복(거의 동일한)데이터를 찾는데 사용할 수 있다. 예컨데, 대량의 오디오 파일에서 비슷한 소리를 찾는다거나, 대량의 문서파일에서 비슷한 문서를 찾는 애플리케이션의 개발이 가능하다.

==== Geometric hashing ====

==== Finding similar substring ====
== Consistent hash ==
[wiki:man/12/hash/consistent consistent hash 참고]
@


1.7
log
@119.64.102.68;;yundream;;
@
text
@d17 1
a17 3
'''해시 테이블(Hash tables)'''구성은 해시를 사용하는 가장 큰 이유다. 많은 양의 데이터를 저장하고 있을 때, 저장하고 있는 데이터의 위치를 빠르게 찾기 위해서 사용한다. Hash 함수에 key를 넣으면, 값 v를 리턴하는데, 이 v를 인덱스(index)로 해서 keY에 대한 값이 저장된 위치를 찾는식이다. 

간단한 예제다.
@


1.6
log
@119.64.102.68;;yundream;;
@
text
@d55 1
a55 1
[wiki:man/12/consistent consistent hash 참고]
@


1.5
log
@119.64.102.68;;yundream;;
@
text
@d55 1
a55 1
[/consistent consistent hash 참고]
@


1.4
log
@119.64.102.68;;yundream;;
@
text
@d55 1
a55 1
Consistent hashing는 Key의 집합을 ''K'', 슬롯의 크기를 ''N''라고 했을 때, '''N의 갯수가 바뀌더라도''' 대부분의 키들이 슬롯을 그대로 사용할 수 있는 해싱 기법을 의미한다. 슬록이 추가되거나 삭제됐을 때, K/n만큼만 조정된다. 추가된 노드만큼 재 조정되는 것이니, consistent 하다고 할 수 있다. 다른 해쉬들은 슬롯을 변경할 경우 거의 대부부분의 key들을 재 조정 해야 한다.
@


1.3
log
@119.64.102.68;;yundream;;
@
text
@a1 1
#title Consistent hashing
@


1.2
log
@119.64.102.68;;yundream;;
@
text
@d2 3
a4 1

d6 1
a6 1
해시는 임의의 데이터를 해시알고리즘을 통과 시켜서 만들어낸 "전자지문"이다. 해시알고리즘은 동일한 데이터를 입력했을 때, 반드시 동일한 결과값(해시값)이 나온다는 보장한다.
d8 1
a8 1
이러한 해시의 특성을 이용해서 큰 크기의 파일을 비교하거나 중복되는 레코드를 찾는등의 애플리케이션을 개발할 수 있다. 
d10 3
a12 1
일상에서 가장 쉽게 찾아볼 수 있는 해시의 응용사례는 '''해시를 이용한 파일 변조 여부 검사'''다. 애플리케이션을 웹에서 배포한다고 가정해 보자. 이경우 다운로드 받는 사람은 애플리케이션의 변조여부를 확인할 수 있어야 한다. 이를 위해서 애플리케이션 배포자는 애플리케이션과 함께 애플리케이션 데이터로 부터 추출한 '''hash'''파일을 함께 배포한다. 
d14 1
a14 1
애플리케이션을 다운로드 받은 사용자는 해시 알고리즘을 이용해서 애플리케이션의 해시 값을 추출해서 원본 해시 값과 비교하는 방법으로 애플리케이션 변조 유무를 확인할 수 있다. 물론 서로 같은 해시 알고리즘을 사용해야 한다.
d16 5
a20 2
=== Hash table ===
해시 함수를 이용하는 가장 주요한 목적 중 하나는 해시 테이블을 만들기 위함이다. 해시 테이블은 데이터를 빠르게 찾기 위해서 만든다. 원본 데이터로 부터 추출한 해시가 키가 되고, 원본 데이터가 value가 되는 key <-> value 자료구조다. 
d23 1
a23 1
<img src="https://docs.google.com/drawings/d/18F4U2Jl7OsYo7QRdBUM3OlXNZA1kQPIMU0RIEo1yXZU/pub?w=554&amp;h=309">
d26 20
a45 1
Hash 함수를 통과 함 key는 bucket에 저장이 된다. 위의 그림에서는 Bucket이 리스트가 아니다. 따라서 Value-A와 Value-D는 충돌(collision)로 인하여, 데이터를 잃어 버릴 수 있다. 이 경우 충돌을 피하기 위한 목적으로 bucket에 List를 저장할 수도 있다. 
d47 1
a47 3
=== 충돌 회피 ===
==== Separate chaining ====
Hash 함수는 원리적으로 key와 bucket을 1:1로 가져갈 수는 있다. 하지만 "무한한 가짓수의 입력을 받아서 유한한 가짓수의 출력 값을 만들어야 하는 경우" hash 충돌이 존재한다. 
d49 2
a50 2
=== consistent hashing ===
[wiki:man/12/ConsistentHashing Consistent hashing 참고]
d52 1
d54 3
a56 2
== 참고 ==
 * [http://codecapsule.com/2013/05/13/implementing-a-key-value-store-part-5-hash-table-implementations/ Implementing a key value store]
@


1.1
log
@128.134.217.152;;yundream;;
@
text
@d13 1
a13 1
해시 함수를 이용하는 가장 주요한 목적 중 하나는 해시 테이블을 만들기 위함이다. 해시 테이블은 데이터를 빠르게 찾기 위해서 만든다. 원본 데이터로 부터 추출한 해시가 index 키가 되고, 원본 데이터가 value가 되는 일종의 dictionary라고 보면 된다.
d15 16
a30 5
=== Caches ===
=== 중복 record 찾기 ===
=== 비슷한 record 찾기 ===
=== 비슷한 substring 찾기 ===
=== Geometric hashing ===
@
