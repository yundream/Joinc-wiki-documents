head	1.7;
access;
symbols;
locks
	root:1.7; strict;
comment	@# @;


1.7
date	2015.05.03.07.31.21;	author root;	state Exp;
branches;
next	1.6;

1.6
date	2015.05.03.06.46.41;	author root;	state Exp;
branches;
next	1.5;

1.5
date	2015.04.28.05.49.47;	author root;	state Exp;
branches;
next	1.4;

1.4
date	2015.04.27.17.50.09;	author root;	state Exp;
branches;
next	1.3;

1.3
date	2015.04.27.12.06.13;	author root;	state Exp;
branches;
next	1.2;

1.2
date	2015.04.27.05.38.15;	author root;	state Exp;
branches;
next	1.1;

1.1
date	2015.04.27.03.56.18;	author root;	state Exp;
branches;
next	;


desc
@./data/text/man_2f12_2fdocker_2fDefaultNetwork
@


1.7
log
@175.223.49.40;;yundream;;
@
text
@#title Docker Default Network
[[TableOfContents]]
== Docker Network ==
도커(docker)의 기본 네트워크를 살펴보려 한다.
=== 테스트 환경 ===
  * 우분투 리눅스 14.10
  * Docker 버전 : 1.2.0 
  * 호스트 운영체제 네트워크 : 그냥 홈 네트워크로 192.168.11.0/24를 사용한다.
  * 호스트 운영체제 IP : Eth0의 IP로 192.168.11.100이다.
=== 브릿지 네트워크 ===
Docker는 리눅스에서 제공하는 [wiki:man/12/bridge 브릿지]를 기본 네트워크로 사용한다. docker를 설치하면 docker0이라는 브릿지 인터페이스를 확인할 수 있다. 
{{{#!plain
# ifconfig
docker0   Link encap:Ethernet  HWaddr 56:84:7a:fe:97:99  
          inet addr:172.17.42.1  Bcast:0.0.0.0  Mask:255.255.0.0
          inet6 addr: fe80::5484:7aff:fefe:9799/64 Scope:Link
          UP BROADCAST MULTICAST  MTU:1500  Metric:1
          RX packets:8 errors:0 dropped:0 overruns:0 frame:0
          TX packets:39 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:536 (536.0 B)  TX bytes:6512 (6.5 KB)
}}}

브릿지 네트워크 정보를 확인해 보자.
{{{#!plain
# brctl show docker0
bridge name    bridge id            STP enabled    interfaces
docker0        8000.56847afe9799    no        
}}}
아직 아무런 인터페이스가 붙어있지 않다. 브릿지만 덩그러니 놓여있는 상태다.

docker0은 172.17.42.1 IP 주소를 가지며, 게이트웨이 역할을 한다. 외부로 나갈 경우 NAT를 해야 할테다. NAT 정보를 확인해 보기로 했다.  
{{{#!plain
# iptables -nvL -t nat
Chain PREROUTING (policy ACCEPT 7489 packets, 1161K bytes)
 pkts bytes target     prot opt in     out     source               destination         
    1    76 DOCKER     all  --  *      *       0.0.0.0/0            0.0.0.0/0            ADDRTYPE match dst-type LOCAL

Chain INPUT (policy ACCEPT 1364 packets, 216K bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain OUTPUT (policy ACCEPT 1937 packets, 122K bytes)
 pkts bytes target     prot opt in     out     source               destination         
    0     0 DOCKER     all  --  *      *       0.0.0.0/0           !127.0.0.0/8          ADDRTYPE match dst-type LOCAL

Chain POSTROUTING (policy ACCEPT 1937 packets, 122K bytes)
 pkts bytes target     prot opt in     out     source               destination         
    3   208 MASQUERADE  all  --  *     !docker0  172.17.0.0/16        0.0.0.0/0           
}}}
docker0으로 향하는 패킷을 제외한 모든 패킷에 대해서 [wiki:Site/System_management/NAT SNAT(MASQUERADE)]하고 있음을 알 수 있다.

디버깅 정보.
{{{#!plain
# iptables -nvL --line-numbers
Chain INPUT (policy ACCEPT 1553 packets, 2013K bytes)
num   pkts bytes target     prot opt in     out     source          destination         

Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)
num  pkts   bytes target   prot opt in      out       source         destination         
1    13894    21M ACCEPT   all  --  *       docker0   0.0.0.0/0      0.0.0.0/0      ctstate RELATED,ESTABLISHED
2     8809   456K ACCEPT   all  --  docker0 !docker0  0.0.0.0/0      0.0.0.0/0           
3        0     0  ACCEPT   all  --  docker0  docker0  0.0.0.0/0      0.0.0.0/0           

Chain OUTPUT (policy ACCEPT 110 packets, 11477 bytes)
num   pkts bytes target     prot opt in     out     source          destination         
}}}

=== 브릿지 정보 확인 ===
도커 컨테이너를 기본 네트워크로 실행 한 후, docker0 정보를 확인했다. 
{{{#!plain
# brctl show docker0
bridge name	bridge id		STP enabled	interfaces
docker0		8000.56847afe9799	no		veth0b37
                                        veth24c4
# brctl showmacs docker0
port no	mac addr             is local?    ageing timer
  2     1a:13:90:cf:10:dd    yes          0.00
  2     42:5a:32:bd:a3:10    no           2.26
  1     72:09:b7:05:c5:eb    yes          0.00
}}}

@


1.6
log
@39.7.50.46;;yundream;;
@
text
@a81 18
== 레퍼런스 네트워크 구성 ==
도커 기반으로 만들 수 있는 다양한 네트워크 구성을 살펴보려 한다. 
=== 테스트 환경 ===
KVM을 기반으로 테스트 환경을 만들기로 했다. 

{{{#!html
<img src="https://docs.google.com/drawings/d/1reUrXTqrWnp6SrUy2gk8uH8L6zZ4JJZJKg-qHrHV8lw/pub?w=652&amp;h=334">
}}}

제대로 테스트하려면 두 개 이상의 물리적인 호스트와 스위치가 필요하다. 지금은 이런 여력이 없어서 KVM을 기반으로 구축하기로 했다. 
  * VM : KVM으로 만든다. VM 하나가 물리적인 호스트 하나에 대응한다. 4대의 VM 으로 물리적인 호스트를 시뮬레이션한다. 
  * Docker 컨테이너 : VM은 여러 개의 컨테이너를 실행한다. 이들 컨테이너를 이용해서 다양한 네트워크 구성을 테스트 한다. 
  * OVS : OVS(OpenvSwitch)로 각 VM간 통신을 위한 스위치를 구현한다. 

=== 기본 네트워크 구성도 ===
{{{#!html
<img src="https://docs.google.com/drawings/d/1c9F3qJCibddjYHw9ddttif4qRi9fxEbipbNMKjM93E8/pub?w=370&amp;h=346">
}}}
@


1.5
log
@1.214.223.250;;yundream;;
@
text
@d82 14
@


1.4
log
@119.64.102.68;;yundream;;
@
text
@d11 1
a11 1
Docker는 리눅스에서 제공하는 브릿지를 기본 네트워크로 사용한다. docker를 설치하면 docker0이라는 브릿지 인터페이스를 확인할 수 있다. 
d50 1
a50 1
docker0으로 향하는 패킷을 제외한 모든 패킷에 대해서 SNAT(MASQUERADE)하고 있음을 알 수 있다.
a85 1

@


1.3
log
@119.64.102.68;;yundream;;
@
text
@a1 1
<!> 작성 중
d81 6
@


1.2
log
@1.214.223.250;;yundream;;
@
text
@d53 1
a53 1
iptables에 대한 디버깅 정보다. 
d69 13
a81 1

@


1.1
log
@1.214.223.250;;yundream;;
@
text
@d2 2
a3 1

d33 36
@
