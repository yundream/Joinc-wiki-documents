#title Beginner's Guide to Pointers

이렇게 옮겨 오면 안 될것도 같고... 070123 --Crystal
  [wiki:Site/C/Documents/PointerGuide C Wiki] 에서 번역교정작업 하고 있습니다. -- yundream 2007/1/24
----


원본글 : http://www.codeproject.com/cpp/pointers.asp 
Donwload source files - 3kb



<<포인터란?>>
포인터의 기반은 다른 변수와 같습니다
그러나, 그것은 실제적인 데이터를 같고있는것 대신에 정보를 찾을수있는 메모리 공간의 주소를 가지고있다
이것은 매우 중요한 개념입니다, 그리고 많은 프로그램과 포인터를 기반으로 한 디자인들의 링크리스트같은것들 아이디어를 만들어낸다.

<<시작>>
어떻게 포인터를 정의할껀가?
변수이름에 별표(*)를 붙이는것을 제외하곤 다른변수와 동일하다.
예를들어보자, 아래의 두개는 둘다 int형 포인터 포인터를 만들어준다 :

int* pNumberOne;
int* pNumberTwo;
두개의 변수이름앞에 p는 무엇을 알리는것인가? 이것은 변수가 포인터를 가르킨다는 관습(풍습)이다.

이제, 만들어진 포인터로 무언가를 해보자 : 

pNumberOne = &some_number;
pNumberTwo = &some_other_number;
&기호는 'the address of' 라고 읽어야한다, 그리고 변수자신을 대신해 메모리 주소를 되돌려준다.
예를들어보자, pNumberOne의 주소는 some_number와 같다 그래서 pNumberOne은 새로운 some_number의 주소이다;

만약 우리가 some_number의 주소를 참조하고싶다면 pNumberOne을 대신해 이용할수있다
만약 pNumberOne으로부터 some_number의 벨류값을 참조하고싶다면, *pNumberOne으로 쓰면된다
* 포인터 역참조기호다, 그리고 'the memory location pointed to by' 라고 읽는다, 'int *pNumber' 처럼 선언하는것을 제외하고 말이다.

<<무엇을 배&#50911;는가?: 예제:>>
만약 니가 이해하지못하고 포기하려고 한다면, 나는 이문구를 읽어보기를 추천해주고싶다; 포인터는 복합한 주제이다 그리고 이것을 마스터 하기에는 오래걸릴수도있다

여기 위에 내용에 대한 예제가 있다, c++문장이 아닌 c언어로 작성되었다.

#include <stdio.h>

void main()
{
    // 변수의 선언
    int nNumber;
    int *pPointer;

    // 이제, 변수를 대입한다
    nNumber = 15;
    pPointer = &nNumber;

    // nNumber로부터 변수를 출력해준다:
    printf("nNumber is equal to : %dn", nNumber);

    // 이제, pPointer를 통해 nNumber를 바꿔보자:
    *pPointer = 25;

    // 위 명령으로 인해 nNumber가 변경의 결과를 증명하기위해
    // 변수를 다시 출력한다:
    printf("nNumber is equal to : %dn", nNumber);
}

생각하면서 읽어봐라 그리고 이 예제코드를 컴파일보고 왜 이렇게 되는지 너는 이해해야한다. 이해가 다 &#46124;다면, 계속읽어라!

<<함정!>>
보아라 만약 너가 아래프로그램처럼 다음과같은 실수를 한다면 :

#include <stdio.h>

int *pPointer;

void SomeFunction();
{
    int nNumber;
    nNumber = 25;    

    // pPointer 포인터에 nNumber을 만들어준다:
    pPointer = &nNumber;
}

void main()
{
    SomeFunction(); // pPointer 주소에 무언가 만들어준다

    // 왜 실패하는가!?
    printf("Value of *pPointer: %dn", *pPointer);
}

프로그램은 처음으로 SomeFunction함수를 호출한다, nNumber변수를 생성하고 pPointer 포인터를 만들어 넣는다
하지만 이것은 문제가 있다.
함수를 빠져나갈때, nNumber은 지워진다, 왜냐면 지역변수이기 때문이다.

지역변수는 항상 선언한 그 블럭에서 이용되고 빠져나갈때 지워진다.
This means when SomeFunction returns to main(), the variable is deleted, so pPointer is pointing at where the variable used to be, which no longer belongs to this program. 
이것은 SomeFunction이 main으로 되돌아오면, 이변수는 지워진다, 그래서 pPinter의 포인터는 변수를 이용할수있다, 

만약 이것을 이해하지 못했다면, 이것은 아마 지역변수와 전역변수, 유효범위에 대해 다시 읽어야한다
이것은 매우 중요한 개념이다.

문제점을 풀었는가? 정답은 메모리 할당의 기술을 알아 이용할수잇어야 한다.
이 틀린점을 깨닳아야한다.
c와 c++의 사이에서, 이후 대부분 계발은 c++로아래코드와 같은 코드를 이용한다

<<동적 할당>>
동적 할당은 아마 포인터문제의 해결방법일것이다
변수 정의와 pointer 주소를 만들지않고 메모리를 할당할수있다.

비록 개념이 많이 햇갈릴수있겟지만 , 매우 간단하다. 아래코드는 integer 메모리를 할당하는것을 보여준다 :

int *pNumber;
pNumber = new int;

처음줄은 pNumber로 포인터를 선언한다 
두번째줄은 interger 메모리를 할당하고 pNumber 포인터에 이 새로운 메모리를 만들어준다
이 예제는 double로 같이만든 예제이다 : 

double *pDouble;
pDouble = new double;

이식은 같은형식이다, so you can't really fail with this bit.

동적할당이 다른건, 아무리 함수에서 빠져나오거나 선언한 블럭을 빠져나올때에도 너가 할당한 메모리가 지워지지 않는다는것이다.
그래서 만약 너가 동적할당을 이용해 이 예제를 다시 쓴다면, 우리는 다음과같이 작성할수있다 :

#include <stdio.h>

int *pPointer;

void SomeFunction()
{
    // pPointer 포인터에 new integer를 만든다
    pPointer = new int;
    *pPointer = 25;
}

void main()
{
    SomeFunction(); // pPointer 포인터에 무언가를 만들어준다
    printf("Value of *pPointer: %dn", *pPointer);
}

생각하면서 읽어보아라, 그리고 컴파일러가 어떻게 할찌 생각해보고 왜 이렇게 나오는지 이해해보아라.
SomeFunction이 호출될때, 메모리를 할당하고 pPointer 포인터에 이것을 만들어준다.
함수가 리턴될때, 새로운 메모리는 원래대로 남아있다, 그래서 pPointer는 이용할수잇다.
동적할당이 이것이다! 만든것을 이해할수있어야하고 읽어보면서 배우는것에 흥미를 붙여봐라, 그리고 왜 이 코드는 에러가 일어나지 않는지 생각해봐라.


<<Memory comes, memory goes>>
이것은 비록 매우쉽게 고칠수있지라도 항상 복잡하고 이것은 매우중대한것이다,
생각해볼문제는 너가 할당하여 이용하는 동적할당을 편하게 그냥 놓아둬버리는것이다, 이 메모리는 실제로 절때 자동으로 제거되지 않는다

프로그램이 끝났을때에도 컴퓨터는 메모리는 할당된채로 남겨둘것이다.
결국 이것은 만약 컴퓨터에게 메모리의 사용의 끝을 말해주지 않는다면, 이것은 이것은 다른 프로그램의 공간을 낭비하거나 다른 너의프로그램에 다른부분에 이용될것이다

최후에는 모든 메모리를 써버려서 시스템 충돌을 일어낼것이다, 그래서 이것은 매우 중요하다.
너의 프로그램이 종료되었을때 메모리를 풀어주는 매우 간단한 예제이다 :

delete pPointer;

That's all there is to it. 
이것이 전부이다.
너는 주의깊어야한다, 너가 확실한 pointer를 넘겨주엇는지 , 예를들어 실제 포인터가 메모리를 너가 할당한 pointer이고 단지 쓰레기값이 아닌지 말이다
항상 위험하지만 메모리 해제를 시도는 너의 프로그램을 완벽하게 할수있다.

예제를 다시봐보자, 좀더 발전하여 메모리를 낭비하지 않는 코드로 말이다 :

#include <stdio.h>

int *pPointer;

void SomeFunction()
{
// pPointer 포인터에 new interger 를 만들어준다
    pPointer = new int;
    *pPointer = 25;
}

void main()
{
    SomeFunction(); // pPointer 포인터에 무언가를 만들어준다
    printf("Value of *pPointer: %dn", *pPointer);

    delete pPointer;
}
전체에서 단지 한라인만이 추가되었다, 하지만 이라인은 가장중요한 라인이다.
만약 너가 메모리를 해제하지 않았다면, 너가 알고있는 '메모리 누수' 가 일어날것이다, 일반적으로 메모리 누수가 계속 일어나고 재생하지 않으면 프로그램이 종료되기 전까지 말이다.

<<함수로 포인터 전달하기>>
포인터를 함수인자로 전달하는 기술은 매우 유용하다, 매우쉽게 마스터할수있다.
만약 너가프로그램에서 수를 가져가 5를 더하고 싶다면, 우리는 다음과같이 작성할지도 모른다 : 


#include <stdio.h>

void AddFive(int Number)
{
    Number = Number + 5;
}

void main()
{
    int nMyNumber = 18;
    
    printf("My original number is %dn", nMyNumber);
    AddFive(nMyNumber);
    printf("My new number is %dn", nMyNumber);
}

그러나 문제는 이 Number 참조로 Addfive로 변수를 nMyNumber를 함수로 넘겨줄때, 변수 그자체가 아니라는것이다
그런까닭에 'Number = Number + 5' 이줄은 복사된 변수에 5가 더해진다, 원래 변수는 in main() 안에 남겨두니 영향이 없다
실행을 시도하면 알수있다

이러한 문제를 가지고있다, 우리는 포인터를 넘겨둬서 함수에 그 메모리를 유지할수있다, 그러나 우리는 number가 아닌 포인터의 number임을 기대하고함수를 바꿀수있다, 
이것은, 우리가 void AddFive(int Number) 이것을 void AddFive(int* Number) 이렇게 * 를 붙여 바꿀수있다
프로그램을 조금바꿔 다시 봐보자.
number 자신대신에 nMyNumber의 주소로 만들어 우리에게 넘겨주는가?
이것은 &기호를 붙여서 해준다, 우리가 다시부를때 'the address of'라고 읽는다 

#include <stdio.h>
void AddFive(int* Number)
{
    *Number = *Number + 5;
}

void main()
{
    int nMyNumber = 18;
    
    printf("My original number is %dn", nMyNumber);
    AddFive(&nMyNumber);
    printf("My new number is %dn", nMyNumber);
}

시도해보고 이것이 너의것임을 증명하세요.
AddFive 함수안에 Number 앞에 *가 중요한가요?
This is needed to tell the compiler that we want to add five to the number pointed to by the variable Number, rather than add five to the pointer itself. 

마지막으로 생각해줘야할것은 포인터로 리턴형을 주고싶다면 다음과같이 해야될것이다 : 
int * MyFunction();

이 예제는 MyFunction 리턴이 integer형 포인터이다.

<<클래스 포인터>>
이것은 여러개가있는것을 구조체나 클래스로 묶어 포인터로 이용하는것이다. class 선언은 다음과같다 : 

class MyClass
{
public:
    int m_Number;
    char m_Character;
};
MyClass타입 변수를 다음과같이 선언한다 : 

MyClass thing;
너는 항상 이것을 알고있어야한다, 만약 이것을 읽을수없다면 위에를 다시 읽어야한다.

MyClass 포인터로 선언은 다음과같이 한다 : 

MyClass *thing;
이렇게 하면된다
그리고, 너는 메모리와 포인터 주소를 메모리에 넣어 할당해야한다 :

thing = new MyClass;
이것은 문제를 가져온다, 어떻게 포인터를 이용할것인가?
자, 일반적으로 너는 'thing.m_Number' 라고 쓸것이다, 그러나 너는 제대로 하지 않았다, 왜냐면 NyClass가 아니라 포인터 이기 때문이다, 그래서 우리는 m_Number 변수를 불러오도록 해보자; 
이것은 m_Number을가지고있는 구조체이다.
그렇기 때문에 우리는 조검 다른 규칙을 이용해야한다
'.'(dot) 을 -> (dash 뒤에 > 크다라는 기호를 붙인 기호) 로 바꾸어야한다
자 바뀐 예제를 봐보자 : 

class MyClass
{
public:
    int m_Number;
    char m_Character;
};

void main()
{
    MyClass *pPointer;
    pPointer = new MyClass;

    pPointer->m_Number = 10;
    pPointer->m_Character = 's';

    delete pPointer;
}

배열의 포인터
너는 또한 배열을 가르키는 주소 포인터를 만들수있다, 이 예제를 봐보자 : 

int *pArray;
pArray = new int[6];

이것은 pArray 포인터를 생성하고 6개의 요소를 가진 배열의 주소로 만들어준다.
동적할당을 이용하지 않고 다른방법을 으로 할수있다 : 

int *pArray;
int MyArray[6];
pArray = &MyArray[0];

이것은 &MyArryay[0]로 대신 쓴다, 너는 간단히 MyArray를 쓸수있다.
이것은 단지 배열을 적용시키는 c/c++언어의 방법일뿐이다

일반적인 함정은 pArray = &Myarray; 로 쓰는것인데 이것은 올바르지 않는 표현이다.
만약 이렇게 &#50043;다면, 너는 (타입이없는)배열의 주소를 가르키는 포인터로 써버릴것이다, 이것은 너가 원하는것을 할수없을것이다.

배열의 포인터 이용하기
너는 배열의 포인터를 가지게 되엇다, 이제 어떻게 이것을 이용할까?
자, int형의 배열을가진 포인터를 말해보아라.
포인터는 초기화된 배열을 처음부터 가지고잇을것이다, 아래 예제를 봐보자 : 

#include <stdio.h>

void main()
{
    int Array[3];
    Array[0] = 10;
    Array[1] = 20;
    Array[2] = 30;

    int *pArray;
    pArray = &Array[0];

    printf("pArray points to the value %dn", *pArray);
}
만들어진 포인터를 변수를 가진 배열로 옴기려면, 우리는 pArray++ 라고 하면된다.
우리는 또한 너는 아마 추측할수잇을것이다, 이제 pArryay + 2 를 추측할수있을것이다, 이것은 배열의 요소를 두번앞으로 옴겨줄것이다.
우리가 주의해야할것은 배열의 범위 (예제에서는 3)을 벗어나면 안된다는거이다, 왜냐하면 컴파일러는 포인터를쓸때 배열의 끝에 왔는지 체크하지 못하기 때문이다, 그러면 너는 쉽게 이 방법을 쓸수있을것이다. 예제를 다시 봐보자, 우리가 지정한 3개의 변수를 출력해준다 : 


#include <stdio.h>

void main()
{
    int Array[3];
    Array[0] = 10;
    Array[1] = 20;
    Array[2] = 30;

    int *pArray;
    pArray = &Array[0];

    printf("pArray points to the value %dn", *pArray);
    pArray++;
    printf("pArray points to the value %dn", *pArray);
    pArray++;
    printf("pArray points to the value %dn", *pArray);
}

변수를 뺄수도있다, 일반적인 포인터의 pArray로부터 pArray - 2 는 2번째 전 요소를 가르킨다.
만들수있다, 하지만 너는 더하거나 빼는것은 포인터이지 벨류가 아니다.
포인터의 몇조작들과 배열의 사용은 대부분 무언가를찾을때 반복문에서 사용된다,

또한 너는 포인터의 벨류 가질수있다, 예를들어 int* pNumberSet, 
너는 배열을 다루어보았을것이다, 예를들어 pNumberSet[0] 는 *pNumberSet와 같은 뜻이다, 그리고 pNumberSet[1]는 (pNumberSet + 1) 와 같은 뜻이다.

배열에서 마지막으로 조심해야할것은, 만약 너가 배열을 이용하기위해 new키워드로 메모리할당을 해주었다면 예제와같이 해주어야한다 : 

int *pArray;
pArray = new int[6];
아마 메모리를 다음과같이 해제해주어야한다 : 

delete[] pArray;
[] 뒤를 제거해주겠다는것이다.
컴파일러에게 지우는것이 배열이고 하나의 item아니라는것을 말해준다.
너가 이방법을 꼭이용해야만한다 만약 그렇지 않는다면 너는 메모리 누수를 일으키게 될것이다

<<Last Words>>
마지막 알림 : 너는 아마 new키워드를 이용해 할당하지 않았더라면 메모리 해제를 하지않아도된다, 다음과같이 말이다 : 

void main()
{
    int number;
    int *pNumber = number;
    
    delete pNumber; // wrong - *pNumber는 new 키워드로 할당되지 않았다
}

<< 코맨트 질문과 FAQ >>
질문 : new와 delete를 쓰려는데 왜 'symbol undefined' 에러가 나나요?

답변 : 이것은 대부분의 원인은 너의 소스코드가 c파일인경우에 일어납니다. new 와 delete 연산자는 c++의 특징입니다
이것을 보통 가능한 형태로 고치기 위해서는 너의 소스파일의 확장자를 .cpp로 바꾸어주면 됩니다.


질문 : new와 malloc이 어떻게 다르나요?

답변 : new키워드는 c++ 문법입니다, 그래서 동적메모리를 만드는 표준방법(이외에 윈도우 메모리할당 루틴을 이용하는)이다
너는 c c++ 응용프로그램에서 malloc 의 이용은 절대적으로 필요하지 않는다
왜냐하면 malloc은 c++의 객체지향적인 특징이 아니기 때문이다, 이것(new)을 이용하면 클래스들을 할당된 메모리는 클래스생성자를 호출해 예방한다,  단지 이하나의 예에서도 문제가 일어난다.
malloc 과 free사용시 일어나는 문제의 결과에서 처럼 그것(malloc)의 목적과 의도는 쓸모없어졌기때문에 이 글에서 그것에 대한 자세한 이야기들을 다루지 않는다, 그리고 나는 저것을 사용하는 유져들에게 언제든지 가능하다고 용기를 주고싶다


질문 : free 와 delete를 같이 사용해도 되나요?

답변 : 너는 메모리를 할당한 루틴과 동등하게 메모리를 해제해주어야한다.
예를들면, free는 오직 malloc로 할당한 메모리를 이용할때, delete 는 오직 new로 할당한 메모리를 이용할때 등등.

참조
참조에 대해 이글은 어느정도까지만 적혀져있다
그러나, 많은사람들이 읽고 이것에 대해 질문하는것을 보았다, 나는 그것에 대해 간단히 이야기해볼것이다.
참조는 포인터로 많은 밀접하고 좀더 간단한 대안중에 하나이다
만약 변수명 앞쪽에 쓰여진다면, 나는 & 를 'the address of' 라고 읽지 않고 선언이라고 언급한다
이것은 'a reference to' 라고 읽는다


int& Number = myOtherNumber;
Number = 25;

참조는 myOtherNumber의 포인터와 같다, 자동으로 역참조가 되는것을 빼고말이다, 그리고 이것은 포인터 타입보다 실제타입이다.
포인터를 이용하여 똑같이 만든 코드이다 : 

int* pNumber = &myOtherNumber;
*pNumber = 25;

포인터와 참조의 다른 차이점이라면 참조는 포인터처럼 나중에 선언을 바꾸지않는 '재지정'하지 않아도된다,

예를들어 다음코드의 결과는 '20'이 나올것이다 : 

int myFirstNumber = 25;
int mySecondNumber = 20;
int &myReference = myFirstNumber;

myReference = mySecondNumber;

printf("%d", myFristNumber);
클래스일때, 벨류는 다음과같은 구조로 참조로 변수를 설정할수있다 :

CMyClass::CMyClass(int &variable) : m_MyReferenceInCMyClass(variable)
{
    // 코드를 여기에 작성한다
}


<<요약>>
이 토픽은 기초를 마스터할수있다, 그래서 최소한 두번은 봐야한다 : 많은 사람들이 곧 이해할수없을것이다.여기가 핵심이니 보고 또봐라:

포인터는 메모리영역의 주소를 담는 변수이며 변수이름앞에 * 를 붙이면된다 (예, nt *number)
변수의 주소를 얻고싶을때는 & 기호를 앞에 붙이면된다 (예, pNumber = &my_numbe).
* 기호는 선언일때를 제외하고 (int *number 와같은) 'the memory location pointed to by' 라고 읽는다.
& 기호는, 선언일때를 제외하고(int &number와같은) 'the address of' 라고 읽는다.
메모리를 할당할때는 'new'키워드를 이용할수있다
Pointers MUST be of the same type as the variables you want them to point to, so int *number will not point to a MyClass. 
너는 함수로 포인터를 넘길수있다
너는 할당한 메모리를 해제할때 'delete'키워드를 이용해야한다
이미 존재하는 배열의 주소를얻고싶다면 &array[0].
동적할당한 배열을 해제하고 싶다면 delete[] 를 이용해야된다, 그냥 delete를 써선 안된다.

이것은 포인터에 대해 절대적으로 완벽한 가이드는 아닙니다, 약간의 정보와 보다 자세한 이중포인터와같은것은 잘나타나있지않습니다.
또한 내가선택하지 않은것들도있습니다, 함수포인터와같은것들, 나는 너무 많이 복잡한 초보자글이 아닐까 생각한다
그리고 이것을 충분히 드물고 또한 초보자들에게 자세히 다루는것은 OTL일것이다

이것이다다! 프로그램을 실제 돌려보고 모든 예제를 너의것으로 만들어라 :)

번역한마디
쉽다고 덤볏다 Orz
내용은.. 다그져그런내용..미안&#54973;들..학학 

출처 프갤: 커플님 
http://kr.dcinside1.imagesearch.yahoo.com/zb40/zboard.php?id=programming&page=1&sn1=&divpage=4&banner=&sn=off&ss=on&sc=off&select_arrange=headnum&desc=asc&no=21041


