#title QT로 작성하는 HTTP Server 셈플
[[UploadFile]]
== 소개 ==
이번에는 QT에서 제공하는 SocketServer 클래스를 통해서 간단한 HTTP Server를 만들어 보도록 하겠다.

kdevelop(12)를 이용해서 구현을 하도록하겠다. UI는 designer(12)를 이용하도록 한다. 특히 kdevlop 3.2부터는 designer과 통합된 개발환경을 제공하는 이유로 좀더 쉽게 UI개발 관련 작업을 할 수 있게 되었다.

attachment:qsocketserver1.jpg

== HTTP Server 구현 ==
=== QServerSocket Class ===
QServerSocket는 TCP기반의 네트워크 서버를 간단하게 작성할 수 있도록 도와준다. 단지 포트를 지정하는 정도로 듣기 소켓을 생성할 수 있이며, 연결된 클라이언트로 부터의 읽기와 쓰기는 QT의 signal/slot를 이용해서 간단하게 구현이 가능하다. 

새로운 연결에 대한 처리는 newConnection()핸들러를 수정하면 될 뿐이다.

=== 프로젝트 생성 ===
kdevelop를 이용해서 프로젝트를 생성한다. kdevelop는 다양한 프로젝트 템플릿을 제공하는데, QT App 전용의 템플릿은 없으므로 C++ > KDE 템플릿을 이용하도록 한다. 약간만 수정하면 QT전용 APP 생성이 가능하므로 크게 문제될건 없을 것이다. 
다음은 수정을 마친 main.cpp파일이다. 
{{{#!plain
#include "simplewebserver.h"
#include <qapplication.h>

static const char version[] = "0.1";


int main(int argc, char **argv)
{


    QApplication app(argc, argv);
    SimpleWebServer *mainWin = 0;

    mainWin = new SimpleWebServer();
    app.setMainWidget( mainWin );
    mainWin->show();
    return app.exec();
}
}}}

=== UI 디자인 ===
UI는 designer를 통해 구현하도록 하겠다. 아래와 같이 간단하게 구성하도록 하겠다.

attachment:qsocketserver2.jpg

LineEdit는 포트번호를 결정하기 위해서 사용한다. Start 버튼을 누르면 서버가 작동하며, Close 버튼을 누르면 프로그램은 종료된다. 가장 아래에 있는 TextEdit는 클라이언트의 연결정보를 출력하기 위해서 사용된다. TextEdit는 클라이언트의 연결, 종료, Read와 같은 이벤트가 발생할 때 이를 출력하게 된다.  

designer를 통해서 UI를 만드는 자세한 방법은 [wiki:Site_QT QT 미니사이트]의 문서를 참고하기 바란다. 여기에서는 간단하게 설명하고 넘어가도록 하겠다. 

File > New 를 이용하면, 새로운 파일을 생성할 수 있다. 파일의 타입은 Widget(.ui)로 하고 파일이름은 WebUI로 하겠다. 

그러면 designer가 실행된다. 이후 UI디자인은 대충 비슷하게 만들어 보기 바란다. 이 예제에서 최상위 부모 wiget의 이름은 Form1으로 했다. Form1은 위젯의 클래스 이름으로 사용이 된다.   

만들어진 UI는 XML 형식으로 저장된다. 이를 QT에 붙이기 위해서는 uic를 이용해서 헤더파일과 cpp 파일을 생성한다. 
{{{#!plain
# uic -o WebUI.h WebUI.ui 
# uic -o WebUI.cpp -i WebUI.h WebUI.ui 
}}}
다음은 이렇게 해서 만들어진 Form1 클래스와 여기에 포함된 멤버함수와 멤버변수들이다. 대략 보면 각 멤버변수가 어떤 Wedget과 관련된 것인지 알 수 있을 것이다.

=== 구현 코드  ===
{{{#!plain down:simplewebserver.h
#ifndef _SIMPLEWEBSERVER_H_
#define _SIMPLEWEBSERVER_H_

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif

#include <stdlib.h>
#include "WebUI.h"

#include <qtextstream.h>
#include <qregexp.h>
#include <qwidget.h>
#include <qserversocket.h>
#include <qsocket.h>
#include <qmessagebox.h>
#include <qtextedit.h>
/**
 * @short Application Main Window
 * @author yundream <yundream@joinc.co.kr>
 * @version 0.1
 */
class SimpleWebServer : public Form1
{
    Q_OBJECT
public:
    /**
     * Default Constructor
     */
    SimpleWebServer(QWidget *parent = 0, const char *name=0);

    /**
     * Default Destructor
     */
    virtual ~SimpleWebServer();

private slots:
    void Connected();
    void Close();

    // 새로운 연결이 발생했을 때 출력할 메시지
    void newConnectmsg()
    {
        ShowInfo->append("New Connection");
    }

    // 연결이 종료되었을 때 출력할 메시지
    void endConnectmsg()
    {
        ShowInfo->append("Close Connection");
    }

    // 클라이언트로 데이터를 보냈을 때 발생할 메시지
    void wroteToClientmsg()
    {
        ShowInfo->append("Send Message");
    }

private:
    int PortNum;
};


// ------------------------------------------
class Acceptor : public QServerSocket
{
    Q_OBJECT
public:
    Acceptor(int Pnum, QObject *parent=0) : QServerSocket(Pnum,1, parent)
    {
      if (!ok())
      {
           qWarning("Failed to bind port");
      }
      else
      {
           qWarning("Success to bind port");
      }
    }

    void newConnection(int socket)
    {
        QSocket *sockfd = new QSocket(this);
        // readRead 시그널이 발생할 경우 readClinet 에서 이를 처리한다.
        connect(sockfd, SIGNAL(readyRead()), this, SLOT(readClient()));
        connect(sockfd, SIGNAL(delayedCloseFinished()), this, SLOT(discardClient()));
        // 소켓을 생성하고 newConnect 시그널을 보낸다.
        sockfd->setSocket(socket);
        emit newConnect();
    }

signals:
    void newConnect();
    void endConnect();
    void wroteToClient();

private slots:
    void discardClient();

    // 클라이언트로 부터 HTTP 요청을 읽어들이고 
    // 처리한다.
    void readClient()
    {
      qWarning("Debug1");
      QSocket *socket = (QSocket *)sender();
      qWarning("Debug2");
      if (socket->canReadLine())
      {
        qWarning("Read Message ");
        QStringList tokens = QStringList::split(QRegExp("[ \n][ \n]*"), socket->readLine());
        if(tokens[0] == "GET")
        {
            QTextStream os(socket);
            os.setEncoding( QTextStream::UnicodeUTF8 );
            os << "HTTP/1.0 200 Ok\n"
                    "Content-Type: text/html; charset=\"utf-8\"\n"
                    "\n"
                    "<h1>Hello World</h1>\n";
            socket->close();
            // 클라이언트에게 데이터를 전송했음을 알려준다.
            emit wroteToClient();
        }
      }
      else
      {
          qWarning("Not REad Message");
      }
    } 
};
#endif // _SIMPLEWEBSERVER_H_
}}}

{{{#!plain down:simplewebserver.cc

#include <qserversocket.h>
#include <qmessagebox.h>
#include <qlineedit.h>
#include <qpushbutton.h>

using namespace std;

SimpleWebServer::SimpleWebServer(QWidget *parent, const char *name)
    : Form1(parent, name)
{
    // Start 버튼을 클릭하면 듣기 소켓을 생성한다.
    connect(StartButton, SIGNAL(clicked()), this, SLOT(Connected()));
}

SimpleWebServer::~SimpleWebServer()
{
}

/*
 * Web Server Start
*/
void SimpleWebServer::Connected()
{
    string PortStr = PortInput->text();
    Acceptor *httpd = new Acceptor(atoi(PortStr.c_str()), this);
    ShowInfo->append("Server Daemon Start!!");
    connect(httpd, SIGNAL(newConnect()), this, SLOT(newConnectmsg()));
    connect(httpd, SIGNAL(endConnect()), this, SLOT(endConnectmsg()));
    connect(httpd, SIGNAL(wroteToClient()), this, SLOT(wroteToClientmsg()));

}

void SimpleWebServer::Close()
{
    ShowInfo->append("Server Daemon Close!!");
}


// Acceptor Class Member------------------------
void Acceptor::discardClient()
{
    QSocket *socket = (QSocket *)sender();
    delete socket;
    emit endConnect();
}
}}}

다음은 테스트 결과다.

attachment:qsocketserver4.jpg
