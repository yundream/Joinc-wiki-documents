#! HP-UX의 pstat(2)의 man페이지

{{{#!html
<HTML><HEAD><TITLE>Manpage of pstat</TITLE>
</HEAD><BODY>
<H1>pstat</H1>
Section: System Calls (2)<BR><A HREF="#index">Index</A>
<A HREF="http://localhost/cgi-bin/man/man2html">Return to Main Contents</A><HR>



<A NAME="lbAB">&nbsp;</A>
<H2>NAME</H2>

pstat_getstatic(),
pstat_getdynamic(),
pstat_getproc(),
pstat_getlwp(),
pstat_getprocvm(),
pstat_getprocessor(),
pstat_getvminfo(),
pstat_getdisk(),
pstat_getlv(),
pstat_getswap(),
pstat_getfile(),
pstat_getipc(),
pstat_getsem(),
pstat_getmsg(),
pstat_getshm(),
pstat_getstable(),
pstat_getcrashinfo(),
pstat_getcrashdev(),
pstat()<TT>&nbsp;</TT>- get system information<BR>
<A NAME="lbAC">&nbsp;</A>
<H2>SYNOPSIS</H2>

<DL COMPACT><DT><DD>
<PRE>
      #include &lt;sys/param.h&gt;
      #include &lt;sys/pstat.h&gt;

      int pstat_getstatic(
           struct pst_static *buf, size_t elemsize, size_t elemcount,
           int index
      );

      int pstat_getdynamic(
           struct pst_dynamic *buf, size_t elemsize, size_t elemcount,
           int index
      );

      int pstat_getvminfo(
           struct pst_vminfo *buf, size_t elemsize, size_t elemcount,
           int index
      );

      int pstat_getipc(
           struct pst_ipcinfo *buf, size_t elemsize, size_t elemcount,
           int index
      );

      int pstat_getprocessor(
           struct pst_processor *buf, size_t elemsize, size_t elemcount,
           int index
      );

      int pstat_getproc(
           struct pst_status *buf, size_t elemsize, size_t elemcount,
           int index
      );

      int pstat_getlwp(
           struct lwp_status *buf, size_t elemsize, size_t elemcount,
           int index, pid_t pid
      );

      int pstat_getprocvm(
           struct pst_vm_status *buf, size_t elemsize, size_t elemcount,
           int index
      );
</PRE>

</DL>

<A NAME="lbAD">&nbsp;</A>
<H3>Remarks</H3>

The underlying function

is provided for backward compatibility.
Use of the

wrapper functions (for example,

is recommended to avoid the polymorphic typing of the

parameter.
<A NAME="lbAE">&nbsp;</A>
<H2>DESCRIPTION</H2>

The

functions return information about various system contexts.
The contents of the various contexts' associated data structures, structs
















and

are declared in the header file

The header contains descriptions of the fields of each of
the context data structures.
<A NAME="lbAF">&nbsp;</A>
<H3>Summary of Available Contexts</H3>

The

routines support the following contexts of information.
Detailed descriptions of each
routine follow.
<P>








<TABLE>
<TR VALIGN=top><TD COLSPAN=5><HR></TD></TR>
<TR VALIGN=top><TD><B>&nbsp;&nbsp;</B></TD><TD><B>&nbsp;&nbsp;</B></TD><TD><B>&nbsp;&nbsp;</B></TD><TD><B>&nbsp;&nbsp;</B></TD><TD><B>Short</B><BR></TD></TR>
<TR VALIGN=top><TD><B>Context&nbsp;&nbsp;</B></TD><TD><B>Struct&nbsp;&nbsp;</B></TD><TD><B>Routine&nbsp;&nbsp;</B></TD><TD><B>Instances&nbsp;&nbsp;</B></TD><TD><B>Cut</B><BR></TD></TR>
<TR VALIGN=top><TD COLSPAN=5><HR></TD></TR>
<TR VALIGN=top><TD>Static&nbsp;&nbsp;</TD><TD><TT>pst_static&nbsp;&nbsp;</TT></TD><TD><TT>pstat_getstatic()&nbsp;&nbsp;</TT></TD><TD>1&nbsp;&nbsp;</TD><TD><BR></TD></TR>
<TR VALIGN=top><TD>Dynamic&nbsp;&nbsp;</TD><TD><TT>pst_dynamic&nbsp;&nbsp;</TT></TD><TD><TT>pstat_getdynamic()&nbsp;&nbsp;</TT></TD><TD>1&nbsp;&nbsp;</TD><TD><BR></TD></TR>
<TR VALIGN=top><TD>VM&nbsp;&nbsp;</TD><TD><TT>pst_vminfo&nbsp;&nbsp;</TT></TD><TD><TT>pstat_getvminfo()&nbsp;&nbsp;</TT></TD><TD>1&nbsp;&nbsp;</TD><TD><BR></TD></TR>
<TR VALIGN=top><TD>IPC&nbsp;&nbsp;</TD><TD><TT>pst_ipcinfo&nbsp;&nbsp;</TT></TD><TD><TT>pstat_getipc()&nbsp;&nbsp;</TT></TD><TD>1&nbsp;&nbsp;</TD><TD><BR></TD></TR>
<TR VALIGN=top><TD>Stable Store&nbsp;&nbsp;</TD><TD><TT>pst_stable&nbsp;&nbsp;</TT></TD><TD><TT>pstat_getstable()&nbsp;&nbsp;</TT></TD><TD>1&nbsp;&nbsp;</TD><TD><BR></TD></TR>
<TR VALIGN=top><TD>Crash Dumps&nbsp;&nbsp;</TD><TD><TT>pst_crashinfo&nbsp;&nbsp;</TT></TD><TD><TT>pstat_getcrashinfo()&nbsp;&nbsp;</TT></TD><TD>1&nbsp;&nbsp;</TD><TD><BR></TD></TR>
<TR VALIGN=top><TD COLSPAN=5><HR></TD></TR>
<TR VALIGN=top><TD>Processor&nbsp;&nbsp;</TD><TD><TT>pst_processor&nbsp;&nbsp;</TT></TD><TD><TT>pstat_getprocessor()&nbsp;&nbsp;</TT></TD><TD>1 per processor&nbsp;&nbsp;</TD><TD><BR></TD></TR>
<TR VALIGN=top><TD>Disk&nbsp;&nbsp;</TD><TD><TT>pst_diskinfo&nbsp;&nbsp;</TT></TD><TD><TT>pstat_getdisk()&nbsp;&nbsp;</TT></TD><TD>1 per disk&nbsp;&nbsp;</TD><TD><BR></TD></TR>
<TR VALIGN=top><TD>Swap&nbsp;&nbsp;</TD><TD><TT>pst_swapinfo&nbsp;&nbsp;</TT></TD><TD><TT>pstat_getswap()&nbsp;&nbsp;</TT></TD><TD>1 per swap area&nbsp;&nbsp;</TD><TD><BR></TD></TR>
<TR VALIGN=top><TD>Dump Areas&nbsp;&nbsp;</TD><TD><TT>pst_crashdev&nbsp;&nbsp;</TT></TD><TD><TT>pstat_getcrashdev()&nbsp;&nbsp;</TT></TD><TD>1 per dump area&nbsp;&nbsp;</TD><TD><BR></TD></TR>
<TR VALIGN=top><TD COLSPAN=5><HR></TD></TR>
<TR VALIGN=top><TD>Process&nbsp;&nbsp;</TD><TD><TT>pst_status&nbsp;&nbsp;</TT></TD><TD><TT>pstat_getproc()&nbsp;&nbsp;</TT></TD><TD>1 per process&nbsp;&nbsp;</TD><TD>yes<BR></TD></TR>
<TR VALIGN=top><TD>LW Process&nbsp;&nbsp;</TD><TD><TT>lwp_status&nbsp;&nbsp;</TT></TD><TD><TT>pstat_getlwp()&nbsp;&nbsp;</TT></TD><TD>1 per lwp/thread&nbsp;&nbsp;</TD><TD>yes<BR></TD></TR>
<TR VALIGN=top><TD>Process VM&nbsp;&nbsp;</TD><TD><TT>pst_vm_status&nbsp;&nbsp;</TT></TD><TD><TT>pstat_getprocvm()&nbsp;&nbsp;</TT></TD><TD>1 per process region&nbsp;&nbsp;</TD><TD>yes<BR></TD></TR>
<TR VALIGN=top><TD>LVM Vol&nbsp;&nbsp;</TD><TD><TT>pst_lvinfo&nbsp;&nbsp;</TT></TD><TD><TT>pstat_getlv()&nbsp;&nbsp;</TT></TD><TD>1 per lvol&nbsp;&nbsp;</TD><TD>yes<BR></TD></TR>
<TR VALIGN=top><TD>Sema Set&nbsp;&nbsp;</TD><TD><TT>pst_seminfo&nbsp;&nbsp;</TT></TD><TD><TT>pstat_getsem()&nbsp;&nbsp;</TT></TD><TD>1 per sem set&nbsp;&nbsp;</TD><TD>yes<BR></TD></TR>
<TR VALIGN=top><TD>Msg Queue&nbsp;&nbsp;</TD><TD><TT>pst_msginfo&nbsp;&nbsp;</TT></TD><TD><TT>pstat_getmsg()&nbsp;&nbsp;</TT></TD><TD>1 per msg queue&nbsp;&nbsp;</TD><TD>yes<BR></TD></TR>
<TR VALIGN=top><TD>Shared Mem&nbsp;&nbsp;</TD><TD><TT>pst_shminfo&nbsp;&nbsp;</TT></TD><TD><TT>pstat_getshm()&nbsp;&nbsp;</TT></TD><TD>1 per shm seg&nbsp;&nbsp;</TD><TD>yes<BR></TD></TR>
<TR VALIGN=top><TD COLSPAN=5><HR></TD></TR>
<TR VALIGN=top><TD>Open File&nbsp;&nbsp;</TD><TD><TT>pst_fileinfo&nbsp;&nbsp;</TT></TD><TD><TT>pstat_getfile()&nbsp;&nbsp;</TT></TD><TD>1 per file&nbsp;&nbsp;</TD><TD>yes<BR></TD></TR>
<TR VALIGN=top><TD COLSPAN=5><HR></TD></TR>
</TABLE>



<A NAME="lbAG">&nbsp;</A>
<H3>Wrapper Function Descriptions</H3>

<DL COMPACT><DT><DD>
<DL COMPACT>
<DT>
<DD>
Returns static information about the system.  This data does not vary
while the system is running. There is one global instance of this
context. Data, up to a maximum of

bytes, are returned in the

pointed to by

The

parameter must be 1.  The

parameter must be 0.
<DT>
<DD>
Returns dynamic information about the system.  There is one global
instance of this context.  Data, up to a maximum of

bytes, are
returned in the

pointed to by

The

parameter must be 1.  The

parameter must be 0.
<DT>
<DD>
Returns information about the virtual memory subsystem. There is one
global instance of this context.  Data, up to a maximum of

bytes, are returned in the

pointed to by

The

parameter must be 1.  The

parameter must be 0.
<DT>
<DD>
Returns information about System V IPC subsystem. There is one global
instance of this context.  This data does not vary while the system is
running.  Data, up to a maximum of

bytes, are returned in the

pointed to by

The

parameter must be 1.  The

parameter must be 0.
<DT>
<DD>
Returns information about the system's crash dump configuration.
Data, up to a maximum of

bytes, are
returned in the

pointed to by

The

parameter must be 1.  The

parameter must be 0.
<DT>
<DD>
Returns information specific to a particular processor (the only processor
on a uniprocessor system).  There is one instance of this context for each
processor on the system.  For each instance requested, data, up to a
maximum of

bytes, are returned in the


pointed to by

The

parameter specifies the number of


that are available at

to be filled in.  The

parameter specifies the starting index within the context of processors.
<DT>
<DD>
Returns information specific to a particular disk.  There is one instance
of this context for each disk configured into the system.  For each
instance requested, data, up to a maximum of

bytes, are returned in the


pointed to by

The

parameter specifies the number of


that are available at

to be filled in.  The

parameter specifies the starting index within the context of disks.
<DT>
<DD>
Returns information specific to a particular swap area.  There is one
instance of this context for each swap area (block or filesystem)
configured into the system.  For each instance requested, data, up to a
maximum of

bytes, are returned in the


pointed to by

The

parameter specifies the number of


that are available at

to be filled in.  The

parameter specifies the starting index within the context of swap areas.
<DT>
<DD>
Returns information specific to a particular crash dump device.
There is one instance of this context for each crash dump device configured
on the system.  For each instance requested, data, up to a
maximum of

bytes, are returned in the


pointed to by

The

parameter specifies the number of


that are available at

to be filled in.  The

parameter specifies the starting index within the context of crash dump
devices.
<DT>
<DD>
Returns information specific to a particular process.  There is one
instance of this context for each active process on the system.  For each
instance requested, data, up to a maximum of

bytes, are returned in the


pointed to by

The

parameter specifies the number of


that are available at

to be filled in.  The

parameter specifies the starting index within the context of processes.  As
a shortcut, information for a single process may be obtained by setting

to zero and setting

to the
<FONT SIZE="-1">PID</FONT>
of that process.
<DT>
<DD>
Returns information specific to a particular thread or
LWP (Lightweight Process) in a process.
There is one instance of this context for each LWP in a process
on the system. For each instance requested, data, up to a maximum of

bytes, are returned in the

pointed to by

The

parameter specifies the number of

that are available at

to be filled in.  The

parameter specifies the starting index within the context of LWPs in a process.
<DT><DD>
If

is set to -1 and

is greater than 0,

entries of system LWP information are returned to the caller program.
<DT><DD>
If

is greater than or equal to 0 and

is greater than 0,

entries of LWP info within the process specified by

are returned.
<DT><DD>
As a shortcut, information about a single LWP can be obtained by setting

to zero and setting

to the
<FONT SIZE="-1">TID</FONT>
(Thread ID) of that LWP within its process.
<DT>
<DD>
Returns information specific to a particular process' address space.  There
is one instance of this context for each process region contained in the
process' address space.  For each instance requested, data, up to a maximum of

bytes, are returned in the


pointed to by

Only at most one instance (process region) is returned for each call to

The

parameter identifies the process for which address space information is to be
returned. An

parameter
of zero indicates that address space information for the currently executing
process should be returned.
The

parameter specifies the starting index (beginning with 0) within the context
of process regions for the indicated process.
For example, an

of 3 indicates the 4th process region within the indicated process' address
space.
As a shortcut, information for a specific process (other than the currently
executing one) may be obtained by setting

to the
<FONT SIZE="-1">PID</FONT>
of that process.
<DT>
<DD>
Returns information specific to a particular logical volume.  There is one
instance of this context for each logical volume configured into the
system.  For each instance requested, data, up to a maximum of

bytes, are returned in the


pointed to by

The

parameter specifies the number of


that are available at

to be filled in.  The

parameter specifies the starting index within the context of logical
volumes.  As a shortcut, information for a single logical volume may be
obtained by setting

to zero and setting

to the
<FONT SIZE="-1">dev_t</FONT>
of that logical volume.
<DT>
<DD>
Returns information specific to a particular
<FONT SIZE="-1">System V</FONT>
semaphore set.  There is one instance of this context for each
<FONT SIZE="-1">System V</FONT>
semaphore set on the system.  For each instance requested, data, up to a
maximum of

bytes, are returned in the


pointed to by

The

parameter specifies the number of


that are available at

to be filled in.  The

parameter specifies the starting index within the context of
<FONT SIZE="-1">System V</FONT>
semaphore sets.  As a shortcut, information for a single semaphore set may
be obtained by setting

to zero and setting

to the
<FONT SIZE="-1">semid</FONT>
of that semaphore set.
<DT>
<DD>
Returns information specific to a particular
<FONT SIZE="-1">System V</FONT>
message queue.  There is one instance of this context for each
<FONT SIZE="-1">System V</FONT>
message queue on the system.  For each instance requested, data, up to a
maximum of

bytes, are returned in the


pointed to by

The

parameter specifies the number of


that are available at

to be filled in.  The

parameter specifies the starting index within the context of
<FONT SIZE="-1">System V</FONT>
message queues.  As a shortcut, information for a single message queue may
be obtained by setting

to zero and setting index to the
<FONT SIZE="-1">msqid</FONT>
of that message queue.
<DT>
<DD>
Returns information specific to a particular
<FONT SIZE="-1">System V</FONT>
shared memory segment.  There is one instance of this context for each
<FONT SIZE="-1">System V</FONT>
shared memory segment on the system.  For each instance requested, data, up
to a maximum of

bytes, are returned in the


pointed to by

The

parameter specifies the number of


that are available at

to be filled in.  The

parameter specifies the starting index within the context of
<FONT SIZE="-1">System V</FONT>
shared memory segments.  As a shortcut, information for a single shared
memory segment may be obtained by setting

to zero and setting

to the
<FONT SIZE="-1">shmid</FONT>
of that shared memory segment.
<DT>
<DD>
Returns information specific to a particular open file for a specified
process.  For the specified process, there is one instance of this context
for each open file descriptor.  For each instance requested, data, up to a
maximum of

bytes, are returned in the


pointed to by

The

parameter specifies the number of


that are available at

to be filled in.  The

parameter specifies the starting index within the context of open files for
the specified process:  it is a 32-bit quantity constructed of the

field of the 'owning' process, obtained via

described above, as the most significant 16 bits, and the index of open
files within the process as the least significant 16 bits.  Example:
<DT><DD>

As a shortcut, information for a single file within the specified process
may be obtained by setting

to zero and setting the least significant 16 bits to the file descriptor
number (the most significant 16 bits are still set to the

field from the

structure for the process).
<DT><DD>
The

structure contains both a

and

element. The

element can correctly store a 32-bit value,
whereas the

element can store a 64-bit value.

will fill in both

and

if the value can
be correctly stored in both elements. If the offset is too
large to be correctly stored in

, then

will contain a -1. No error will be set in this case.
<DT>
<DD>
Returns information contained in the system's stable storage area.
There is one global instance of this context. Data, up to a maximum of

bytes, are returned in the

pointed to by

The

parameter must be 1.  The

parameter must be 0.
</DL>
</DL>

<A NAME="lbAH">&nbsp;</A>
<H3>Notes</H3>

A wide (64 bit) version of the

interfaces are available for narrow (32 bit) applications to use.
A narrow application could use the flag

at compile time to switch to the wide interfaces. Using this compiler flag
in a narrow application is equivalent to using the default
interfaces on a wide system.
<P>

Refer to the

header file to see how the various structures would look
like when the -D_PSTAT64 flag is used.
<P>

The


and

interfaces are available only in the wide mode and for applications written in
standard C and extended ANSI.
<A NAME="lbAI">&nbsp;</A>
<H2>RETURN VALUE</H2>

Upon successful completion,

and the various wrapper routines (for example,

return the number of instances filled in at the address

Otherwise, a value of -1 is returned and

is set to indicate the error.
<A NAME="lbAJ">&nbsp;</A>
<H2>ERRORS</H2>

The

functions fail if any of the following conditions are encountered:
<P>

<DL COMPACT><DT><DD>
<DL COMPACT>
<DT>[EFAULT]<DD>

points to an invalid address.
<DT>[ESRCH]<DD>
For the






or

calls,

was 0, specifying the single-item short-cut, and no item matched the
selection criteria in

(for example,
<FONT SIZE="-1">PID</FONT>
for

<DT>[EINVAL]<DD>
For the






or

calls,

was not zero, and

was less than zero.
<DT>[EINVAL]<DD>

is less than or equal to zero or

is larger than the size of the associated data structure (for example,


for the

call).
<DT>[EINVAL]<DD>

is not 1 or

is not zero for the





or

calls.
<DT>[EINVAL]<DD>

is not greater than or equal to 1 or

is not greater than or equal to zero for the



or

calls.
<DT>[EOVERFLOW]<DD>
Offset element is too large to store into the structure pointed to by the

argument.
</DL>
</DL>

<A NAME="lbAK">&nbsp;</A>
<H2>BACKWARD COMPATIBILITY</H2>

The specific calling convention of passing the expected data structure size
is used in order to allow for future expansion of the interface, while
preserving backwards source and object compatibility for programs written
using the pstat interfaces.  Three rules are followed to allow existing
applications to continue to execute from release to release of the
operating system.
<DL COMPACT><DT><DD>
<DL COMPACT>
<DT>*<DD>
New data for a context are added to the end of that
context's data structure.
<DT>*<DD>
Old, obsolete data members are

deleted from the data structure.
<DT>*<DD>
The operating system honors the

parameter of the call and only returns the first

bytes of the context data, even if the actual data structure has since been
enlarged.
</DL>
</DL>

<P>

In this way, an application which passes its compile-time size of the
context's data structure (for example,

for the per-process context) as the

parameter will continue to execute on future operating system releases
without recompilation, even those that have larger context data structures.
If the program is recompiled, it will also continue to execute on that and
future releases.  Note that the reverse is not true: a program using the

interfaces compiled on, say,
<FONT SIZE="-1">HP-UX</FONT>
release 10.0 will not work on
<FONT SIZE="-1">HP-UX</FONT>
release 9.0.
<P>

The code examples, below, demonstrate the calling conventions described
above.
<A NAME="lbAL">&nbsp;</A>
<A NAME="lbAM">&nbsp;</A>
<H2>WARNINGS</H2>

Some parts of the program status may not get updated when a process
becomes a zombie.  An example is that the cpu percentage is not updated
because the process is not expected to be scheduled to run after entering
the zombie state.
<A NAME="lbAN">&nbsp;</A>
<H2>AUTHOR</H2>

The

routines were developed by HP.
<A NAME="lbAO">&nbsp;</A>
<H2>FILES</H2>

<DL COMPACT>
<DT>
<DD>
Contains detailed descriptions of context data structures and fields.
</DL>
<A NAME="lbAP">&nbsp;</A>
<H2>SEE ALSO</H2>
<P>

<HR>
<A NAME="index">&nbsp;</A><H2>Index</H2>
<DL>
<DT><A HREF="#lbAB">NAME</A><DD>
<DT><A HREF="#lbAC">SYNOPSIS</A><DD>
<DL>
<DT><A HREF="#lbAD">Remarks</A><DD>
</DL>
<DT><A HREF="#lbAE">DESCRIPTION</A><DD>
<DL>
<DT><A HREF="#lbAF">Summary of Available Contexts</A><DD>
<DT><A HREF="#lbAG">Wrapper Function Descriptions</A><DD>
<DT><A HREF="#lbAH">Notes</A><DD>
</DL>
<DT><A HREF="#lbAI">RETURN VALUE</A><DD>
<DT><A HREF="#lbAJ">ERRORS</A><DD>
<DT><A HREF="#lbAK">BACKWARD COMPATIBILITY</A><DD>
<DT><A HREF="#lbAL">EXAMPLES</A><DD>
<DT><A HREF="#lbAM">WARNINGS</A><DD>
<DT><A HREF="#lbAN">AUTHOR</A><DD>
<DT><A HREF="#lbAO">FILES</A><DD>
<DT><A HREF="#lbAP">SEE ALSO</A><DD>
</DL>
<HR>
This document was created by
<A HREF="http://localhost/cgi-bin/man/man2html">man2html</A>,
using the manual pages.<BR>
Time: 08:24:58 GMT, December 04, 2003
</BODY>
</HTML>
}}}
