head	1.4;
access;
symbols;
locks
	root:1.4; strict;
comment	@# @;


1.4
date	2014.05.20.16.17.52;	author root;	state Exp;
branches;
next	1.3;

1.3
date	2014.05.20.16.04.55;	author root;	state Exp;
branches;
next	1.2;

1.2
date	2014.05.20.16.03.11;	author root;	state Exp;
branches;
next	1.1;

1.1
date	2014.05.18.04.19.24;	author root;	state Exp;
branches;
next	;


desc
@./data/text/Site_2fcloud_2fBigData_2fCouchDB_2fMoniwiki
@


1.4
log
@119.64.102.68;;yundream;;
@
text
@#title CouchDB 기반의 Moniwiki 개발


[[TableOfContents]]
== CouchDB 기반의 moniwiki 개발 ==
=== 소개 ===
파일 기반의 moniwiki를 [wiki:Site/cloud/BigData/CouchDB couchdb]기반으로 만들려고 한다. 이유는 
  1. 문서의 구조화 . : moniwiki는 파일 기반으로 문서의 기본구성요소를 따로 저장하지 않는다. 예컨데, 문서의 저자, 제목, 업데이트 시간, 주요 키워드(혹은 태그)등이다. 아예 저장하지 않는 건 아니다. log형태로 파일로 떨구기 때문에, 프로그램을 만들면 어느정도 관리를 할 수 있기는 하다. 하지만 한계가 있다. 나는 문서의 구조적인 정보가 부드럽게 녹아들어가길 원한다.
  1. 색인/검색 : moniwiki는 파일 기반이다. 현실적으로 검색은 포기해야 한다. 개인적으로 solr를 붙여서 직접 색인을 했다. 아 참고로 moniwiki 1.2.0 부터는 ElasticSearch 검색엔진을 지원한다고 한다. 검색의 품질을 높이려면 문서가 구조적으로 저장되야 하므로, 문서를 구조적으로 관리하기 위한 요구는 여전하다.  
  1. 문서의 관리 : moniwiki는 문서의 이름이 파일이름이다. 문서의 이름이 "Linux/system"이라면 "Linux_2fsystem"이런 식으로 저장한다.[[FootNote(Linux/system를 urlencode하고 %를 _로 치환한다.)]]. 따라서 문서를 디렉토리 형식으로 관리할 경우 문서의 이동/변경이 매우 까다롭다. --그냥 포기하는게 속 편하다. --
  1. 첨부파일과 통합 : 문서가 첨부파일을 가지는 경우, 문서에 통합하는게 쉽지 않다. Moniwiki에서 첨부파일은 별도의 디렉토리 밑에 저장된다. "Linux/system/a.png"라면 "Linux_2fsystem/a.png"이런 식으로 저장된다. 문서의 변경에 따른 첨부파일의 관리가 쉽지가 않다. CouchDB는 첨부파일을 inline, link, 외부 저장등 다양한 방식으롸 문서와 통합할 수 있다. 
  1. 확장성 : 파일기반이기 때문에 확장에 한계가 있다. CouchDB는 '''AP'''에 중점을 둔 데이터베이스로 뛰어난 확장성을 확보할 수 있다. 
=== 단점 ===
구조를 변경함으로써 생기는 단점도 있다.
  * Moniwiki를 파일 기반으로 개발한 목적은 "단순함"에 있다. CouchDB, Solr등이 들어가면 단순하지 않은 시스템이 된다.    
이 단점에 대해서 나는 이렇게 생각 한다. 분명 CouchDB, Solr가 들어가면 설치와 배포, 운영이 복잡해 질 수 있다. 하지만 이들 문제는 배포과정을 자동화 하는 것으로 어느정도 해결할 수 있다. 클라우드 환경이 일반화된 지금은 특히 배포를 더 쉽게 할 수 있다. AWS라면, 설정이 모두 끝난상태로(필요하다면 관리자 페이지까지 포함해서)배포할 수도 있다. 기타 여러 가지 방법을 동원해서 배포와 운영을 단순화 할 수 있다. 결정적으로 '''복잡도가 올라가더라도 그 보다 더 큰 장점을 얻을 수 있다'''는게 구조 변경에 대한 내 생각이다.        

=== 구성 ===
{{{#!html
<img src="https://docs.google.com/drawings/d/1wLULRFQKop35wD_fLhbqn4vtG-clFkCTJ1rBKh8lw0k/pub?w=628&amp;h=319">
}}}

일반적이라면 일반적인 구성이라고 할 수 있다. 이 구성에 대한 아이디어는 '''[wiki:Site/cloud/automation chef]'''에서 얻었다. chef는 시스템 형상을 couchdb로 관리하고, 형상에 대한 검색을 위해서 [wiki:Site/Search/Document/Solr solr]에 couchdb의 내용을 색인한다. couchdb와 solr 중간에 RabbitMQ가 있어서 job을 제어하는 구성이다.

@


1.3
log
@119.64.102.68;;yundream;;
@
text
@d3 1
@


1.2
log
@119.64.102.68;;yundream;;
@
text
@d3 1
d23 1
@


1.1
log
@119.64.102.68;;yundream;;
@
text
@d3 12
d16 6
@
