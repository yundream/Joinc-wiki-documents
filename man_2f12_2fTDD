#title TDD - Test Driven Development

[[TableOfContents]]
== TDD ==
Test-driven development는 소프트웨어 개발 공정으로 매우 빠른 개발 사이클을 반복적으로 진행하는 것을 특징으로 한다.

개발자는 새로운 코드를 만들거나 혹은 (기능 향상을 위한)코드 수정이 있을 때, 먼저 테스트 케이스를 작성한다. 이 테스트 케이스는 자동화된 테스트 도구에 의해서 매 개발 사이클 마다 수행한다. 모든 케이스에 대한 테스트가 끝났다면, 그때 이 코드를 적용하고 하나의 주기를 끝낸다.

따라서 하나의 제품은 여러 단계의 개발 주기를 가지게 된다. 

TDD는 '''Test-driven'''이름에서 알 수 있듯이, 테스트가 주도가 된다. 테스트 자체가 TDD가 아니다. 예를 들어 코드를 다 만든 다음에 테스트 케이스를 만들어서 테스트 하는 것은 TDD가 아니다. 일상적인 단위 테스트일 뿐이다. TDD는 테스트 코드를 먼저 만들고, 그 다음 코드를 만든다. 이렇게 하면 예컨데, 개발을 하는 방법이 바뀐다. 

개발자는 코드를 만들기 전에 테스트를 먼저 작성해야 하는데, 테스트를 하기 위해서는 작동을 해야 한다. 따라서 개발자는 개발 사이클을 작게 가져갈 수 밖에 없다. 개발 사이클을 길게 가져가면 확인안된 테스트 코드의 복잡도가 너무 커져서 제어할 수 없는 상황에 이르게 된다. TDD를 적용하면 개발자는 제어가능한 적당한 복잡도의 테스트 및 실행 가능한 코드를 만들수 밖에 없게 된다. 

또한 TDD는 테스트 자동화를 포함한다. 개발주기를 끝낸 코드는 다음 개발주기에도 여전히 테스트가 된다. 싫든 좋든 개발자는 각 개발단계마다 전체 개발 코드를 리펙토링하게 된다. 이렇게 개발 방법 자체가 바뀌기 때문에 TDD는 개발 방법론 관점에서 접근해야 한다.

=== 왜 풀어줬나 ===
영화 올드보이의 핵심 질문은 "왜 가뒀나"가 아니라 "왜 풀어줬나 ?" 이다. 문제 해결능력보다 문제를 인지하고 문제를 정의하는 능력이 중요하다. TDD를 따르면 자연스럽게  문제를 인지하고 정의하는 능력을 훈련할 수 있다. 

=== 개발 사이클 ===
TDD의 개발 사이클은 다음과 같습니다.

http://upload.wikimedia.org/wikipedia/en/9/9c/Test-driven_development.PNG
==== 테스트 추가 ====
새로운 기능이 추가되면 기능을 테스트하기 위한 코드를 먼저 만든다. 기능이 구현되기 전에 테스트 코드가 먼저 만들어지기 때문에, 테스트는 반드시 실패하게 돼 있습니다. 당연하게도 제대로된 테스트 케이스를 만들려면, 개발자는 추가하려는 기능의 사양과 요구사항을 정확히 이해하고 있어야 합니다.  

==== 테스트를 테스트한다 ====
테스트가 올바로 작동하는지를 테스트 한다. 혹은 빼먹은 테스트가 없는지 검사한다. 테스트는 실패하는 경우와 예외 즉, 부정적인 테스트까지 포함해야 한다.

==== 코드를 만든다 ====
이제 코드를 만든다. 이 코드는 기능 구현 뿐만 아니라 이전에 작성한 모든 테스트 케이스를 통과해야 한다. 이 단계에서는 테스트를 통과하는게 중요할 수 있다. 예컨데, 때때로 단지 테스트만 겨우 통과할 정도의 그다지 우아하지 않은 코드가 만들어질 수도 있음을 의미한다. 다음 단계에서 이 코드를 개선할 것이기 때문에 허용된다. 처음부터 완벽한 코드를 만들지는 않을 것이다. 

==== 테스트 수행. 모든 테스트를 통과할 때까지.. ====
모든 테스트 케이스를 통과했다면, 프로그래머는 테스트 요구사항을 모두 충족했다는 것을 확신할 수 있다. 이제 프로그래머는 다음 단계로 넘어간다. 

테스트는 자동으로 수행돼야 한다. 모든 개발 언어는 테스트 자동화를 위한 툴을 제공한다.

==== 코드 리팩토링 ====
이제 코드를 깔끔하게 정리할 차례다. 개발자는 magic number, 중복 코드등을 제거하고 비효율적인 알고리즘을 개선하는 작업을 한다. 이제 코드는 테스트만을 통과하기 위한 수준이 아니라 기능적으로 효율적으로 혹은 구조적으로 좀 더 우아한 모습을 가지게 될 것이다. 

==== 반복 ====
새로운 테스트를 만들고 앞의 단계들을 반복한다. 

=== 개발 방법 ===
TDD는 개발지침이므로 개발자의 성향이나 수준에 따라서 다양한 방법들이 있을 수 있습니다만, 다음의 원칙들을 바탕에 두어야 한다. 

'''먼저 테스트 코드를 만들어라'''
  어떤 기능을 추가해야 한다면, 반드시 테스트 코드를 먼저 만들어서 테스트를 합니다. 이때 코드는 생각할 수 있는 모든 테스트를 통과할 수 있도록 짜야 합니다. 


'''실패할 수 있는 모든 경우에 대해서 테스트하라'''
  TDD에서 중요한 것은 가능한 실패할 수 있는 경우에 대해서 테스트 하는 겁니다. 성공하는 경우는 뭐 그리 중요할게 없지요. 잘 작동할 테니까요. TDD는 프로그램의 완성도를 높이는 것이지, 정상적인 데이터 입력에 대해서 정상적으로 작동하는 걸 확인하기 위한 게 아니니까요.
   * '''NULL 일때''',
   * 문자열의 끝을 '''만나지 못했을 때''',
   * 문자를 '''찾지 못했을 때''', 찾았을 때
   * 버퍼크기를 초과했을 때
   * 음수일때, '''0일 때''', 양수일 때
   * '''예상 최대 크기를 초과했을 때''', 예상 최소 크기 미만의 값이 들어올 때
   * '''실패했을 때''', 성공했을 때

'''각 주기는 짧아야 한다'''
  테스트 코드는 짧고 간단하게 작성돼야 한다. 테스트 코드가 길어진다는 것은 테스트 범위가 늘어난다는 것을 의미한다. 범위가 늘어나면 복잡도가 증가하게 되고, 테스트 케이스를 빼먹을 수 있다.    

=== 어려움들 ===
모든 function을 테스트하기가 어려울 수 있다. 예를 들어 개발 코드가 socket과 같은 시스템 함수를 호출한다면, 테스트 케이스에 socket 함수가 실패할 경우도 들어가야 한다. 테스트 코드는 실제 socket으로 테스트 할 수 없기 때문에 socket 함수를 시뮬레이션 해야 한다. 데이터 베이스를 사용하는 코드도 마찬가지의 어려움이 있다. 물론 이런 문제를 해결하기 위한 TDD 툴들이 있다. 하지만 익숙해 지려면 노력이 필요하다.

조직의 지원이 필요하다. 조직이 TDD 방식을 도입함으로써 소프트웨어의 품질이 높아질 거란 것에 대해서 동의하지 않는다면, 테스트를 위해서 쓸데없이 시간을 낭비한다고 생각할 것이다.

테스트 코드도 개발자가 개발한다. 따라서 일반 코드 개발에서 찾아볼 수 있는 오류를 가질 수 있다. 예를 들어 개발자는 매개변수를 테스트 하때, 개발자의 관점에서 테스트 케이스를 만들 수 있다. 예를 들어 사람의 나이를 매개 변수로 받는데, 0보다 작은 경우 혹은 255보다 큰 경우의 테스트 케이스를 놓칠 수 있다. 특히 개발자가 요구사항 분석과 개발을 모두 할 경우 이런 문제가 발생할 확률이 높다.

테스트 코드를 만들고 유지하는데 추가적인 비용이 든다. 깨지기 쉬운 테스트 코드가 있다면, 정기적인 테스트에서 잘못된 테스트 오류 메시지가 감지될 수도 있다. 깨지기 쉬운 테스트 코드는 리팩토링 단계에서 가능한 제거해야 한다.

== 참고 문서들 ==
  * [wiki:Site/SoftWare_engineering/TDD C++에 TDD적용] 
  * [wiki:Site/Ruby/Unittest 루비 Unittest]
  * [http://code.google.com/p/tddbook/downloads/detail?name=TDD_PT.pdf 테스트 주도 개발 TDD 실천법과 도구 PDF 문서]

== 히스토리 ==
  * 수정
     * [[Date(2012-11-13T13:29:14)]] : 내부 링크 수정, TDD PDF 문서 링크 수정
     * [[Date(2012-11-13T15:15:09)]] : TDD 사이클을 좀더 자세히. 어려움들 세션 추가 
